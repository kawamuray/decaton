<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1878" onload="init(evt)" viewBox="0 0 1200 1878" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1861"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1861"> </text>
<g id="frames">
<g>
<title>all (1,256 samples, 100.00%)</title><rect x="10.0" y="1827.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1838.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (253 samples, 20.14%)</title><rect x="10.9" y="1811.0" width="237.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1822.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (251 samples, 19.98%)</title><rect x="12.8" y="1795.0" width="235.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="1806.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.32%)</title><rect x="12.8" y="1779.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.8" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.32%)</title><rect x="12.8" y="1763.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (4 samples, 0.32%)</title><rect x="12.8" y="1747.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.8" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.32%)</title><rect x="12.8" y="1731.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.8" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.24%)</title><rect x="13.8" y="1715.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.8" y="1726.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.24%)</title><rect x="13.8" y="1699.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.8" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.32%)</title><rect x="16.6" y="1779.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.32%)</title><rect x="16.6" y="1763.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.08%)</title><rect x="16.6" y="1747.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="17.5" y="1747.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.5" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="17.5" y="1731.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.5" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.24%)</title><rect x="17.5" y="1715.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.5" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="17.5" y="1699.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.5" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="17.5" y="1683.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.5" y="1694.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="17.5" y="1667.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.5" y="1678.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="17.5" y="1651.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="20.5" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.16%)</title><rect x="18.5" y="1683.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.5" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="19.4" y="1667.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.4" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="19.4" y="1651.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.4" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="19.4" y="1635.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.4" y="1646.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 14.89%)</title><rect x="20.3" y="1779.0" width="175.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.3" y="1790.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (187 samples, 14.89%)</title><rect x="20.3" y="1763.0" width="175.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.3" y="1774.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (187 samples, 14.89%)</title><rect x="20.3" y="1747.0" width="175.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.3" y="1758.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (142 samples, 11.31%)</title><rect x="20.3" y="1731.0" width="133.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.3" y="1742.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (142 samples, 11.31%)</title><rect x="20.3" y="1715.0" width="133.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.3" y="1726.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (142 samples, 11.31%)</title><rect x="20.3" y="1699.0" width="133.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.3" y="1710.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.08%)</title><rect x="20.3" y="1683.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="20.3" y="1667.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.3" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.get$Lambda (1 samples, 0.08%)</title><rect x="20.3" y="1651.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.3" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="20.3" y="1635.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="23.3" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (141 samples, 11.23%)</title><rect x="21.3" y="1683.0" width="132.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.3" y="1694.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (141 samples, 11.23%)</title><rect x="21.3" y="1667.0" width="132.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.3" y="1678.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (141 samples, 11.23%)</title><rect x="21.3" y="1651.0" width="132.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.3" y="1662.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (102 samples, 8.12%)</title><rect x="56.0" y="1635.0" width="95.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.0" y="1646.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.11%)</title><rect x="56.0" y="1619.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.0" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.11%)</title><rect x="56.0" y="1603.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.0" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.11%)</title><rect x="56.0" y="1587.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.0" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.48%)</title><rect x="69.2" y="1619.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.2" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.48%)</title><rect x="69.2" y="1603.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.2" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.48%)</title><rect x="69.2" y="1587.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.2" y="1598.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (6 samples, 0.48%)</title><rect x="69.2" y="1571.0" width="5.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="72.2" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 6.53%)</title><rect x="74.8" y="1619.0" width="77.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.8" y="1630.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 6.53%)</title><rect x="74.8" y="1603.0" width="77.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.8" y="1614.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 6.53%)</title><rect x="74.8" y="1587.0" width="77.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.8" y="1598.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 6.53%)</title><rect x="74.8" y="1571.0" width="77.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.8" y="1582.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (81 samples, 6.45%)</title><rect x="75.8" y="1555.0" width="76.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.8" y="1566.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="77.6" y="1539.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="80.6" y="1550.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="78.6" y="1539.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="81.6" y="1550.0"></text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 5.81%)</title><rect x="79.5" y="1539.0" width="68.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="82.5" y="1550.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="84.2" y="1523.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="87.2" y="1534.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.24%)</title><rect x="85.2" y="1523.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="88.2" y="1534.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="88.0" y="1523.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="91.0" y="1534.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 3.66%)</title><rect x="89.9" y="1523.0" width="43.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="92.9" y="1534.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.32%)</title><rect x="133.1" y="1523.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="136.1" y="1534.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.96%)</title><rect x="136.8" y="1523.0" width="11.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="139.8" y="1534.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.16%)</title><rect x="148.1" y="1539.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="151.1" y="1550.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="150.0" y="1539.0" width="1.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="153.0" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="151.9" y="1635.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.9" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.08%)</title><rect x="151.9" y="1619.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="154.9" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.08%)</title><rect x="151.9" y="1603.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.9" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="152.8" y="1635.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.8" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="152.8" y="1619.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.8" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="152.8" y="1603.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.8" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="152.8" y="1587.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.8" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.40%)</title><rect x="153.7" y="1731.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.7" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.40%)</title><rect x="153.7" y="1715.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.7" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.40%)</title><rect x="153.7" y="1699.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.7" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (40 samples, 3.18%)</title><rect x="158.4" y="1731.0" width="37.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.4" y="1742.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.27%)</title><rect x="176.3" y="1715.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1726.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.27%)</title><rect x="176.3" y="1699.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.64%)</title><rect x="176.3" y="1683.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.64%)</title><rect x="176.3" y="1667.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.3" y="1678.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.64%)</title><rect x="176.3" y="1651.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.3" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.24%)</title><rect x="180.0" y="1635.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="183.0" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="180.0" y="1619.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="183.0" y="1630.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="180.0" y="1603.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="183.0" y="1614.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="180.0" y="1587.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="183.0" y="1598.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="180.0" y="1571.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="183.0" y="1582.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="181.0" y="1619.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="184.0" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="181.0" y="1603.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="184.0" y="1614.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="181.0" y="1587.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="184.0" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="181.9" y="1603.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="184.9" y="1614.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="182.9" y="1635.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="185.9" y="1646.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (6 samples, 0.48%)</title><rect x="183.8" y="1683.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.8" y="1694.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="189.4" y="1683.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.4" y="1694.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="191.3" y="1715.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="194.3" y="1726.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="192.3" y="1715.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="195.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.46%)</title><rect x="196.0" y="1779.0" width="52.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.0" y="1790.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.38%)</title><rect x="197.0" y="1763.0" width="51.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.0" y="1774.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.87%)</title><rect x="197.9" y="1747.0" width="33.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.9" y="1758.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.16%)</title><rect x="197.9" y="1731.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.9" y="1742.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.08%)</title><rect x="197.9" y="1715.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="200.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="198.8" y="1715.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="198.8" y="1699.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.71%)</title><rect x="199.8" y="1731.0" width="31.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.8" y="1742.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 2.55%)</title><rect x="199.8" y="1715.0" width="30.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.8" y="1726.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.39%)</title><rect x="199.8" y="1699.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.8" y="1710.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.31%)</title><rect x="199.8" y="1683.0" width="27.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.8" y="1694.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.80%)</title><rect x="200.7" y="1667.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.7" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.40%)</title><rect x="205.4" y="1651.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.4" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.40%)</title><rect x="205.4" y="1635.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.4" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.40%)</title><rect x="205.4" y="1619.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.4" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.40%)</title><rect x="205.4" y="1603.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.4" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.40%)</title><rect x="205.4" y="1587.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.4" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.40%)</title><rect x="205.4" y="1571.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.4" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.40%)</title><rect x="205.4" y="1555.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.4" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (17 samples, 1.35%)</title><rect x="210.1" y="1667.0" width="16.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (16 samples, 1.27%)</title><rect x="211.1" y="1651.0" width="15.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (16 samples, 1.27%)</title><rect x="211.1" y="1635.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.1" y="1646.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (16 samples, 1.27%)</title><rect x="211.1" y="1619.0" width="15.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.1" y="1630.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (13 samples, 1.04%)</title><rect x="213.9" y="1603.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.9" y="1614.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="224.2" y="1587.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="227.2" y="1598.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="225.1" y="1587.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="228.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="226.1" y="1667.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="227.0" y="1683.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.0" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="228.0" y="1699.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.0" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="228.0" y="1683.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.0" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="228.0" y="1667.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.0" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="228.0" y="1651.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.0" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="228.0" y="1635.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.0" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="228.0" y="1619.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.0" y="1630.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="228.9" y="1635.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="231.9" y="1646.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="228.9" y="1619.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="231.9" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.08%)</title><rect x="229.8" y="1715.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="230.8" y="1715.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="230.8" y="1699.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="230.8" y="1683.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.8" y="1694.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="230.8" y="1667.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.8" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="230.8" y="1651.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.8" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.72%)</title><rect x="231.7" y="1747.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.56%)</title><rect x="231.7" y="1731.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.40%)</title><rect x="231.7" y="1715.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.7" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (3 samples, 0.24%)</title><rect x="231.7" y="1699.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.7" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (3 samples, 0.24%)</title><rect x="231.7" y="1683.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.7" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="234.5" y="1699.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.5" y="1710.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="234.5" y="1683.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.5" y="1694.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="234.5" y="1667.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.5" y="1678.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.08%)</title><rect x="234.5" y="1651.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.5" y="1662.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="234.5" y="1635.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.5" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="235.5" y="1699.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.5" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="235.5" y="1683.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.5" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="235.5" y="1667.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.5" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="235.5" y="1651.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.5" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="235.5" y="1635.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="235.5" y="1619.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.5" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="235.5" y="1603.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="1614.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="235.5" y="1587.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.5" y="1598.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="235.5" y="1571.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.5" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="235.5" y="1555.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.5" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="235.5" y="1539.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.5" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="235.5" y="1523.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.5" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/49146861.test (1 samples, 0.08%)</title><rect x="235.5" y="1507.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.5" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="236.4" y="1715.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.4" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="236.4" y="1699.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.4" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="236.4" y="1683.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.4" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="236.4" y="1667.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.4" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.08%)</title><rect x="237.4" y="1667.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.4" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.16%)</title><rect x="238.3" y="1731.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.16%)</title><rect x="238.3" y="1715.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.16%)</title><rect x="238.3" y="1699.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.3" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="239.2" y="1683.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="239.2" y="1667.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.2" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="239.2" y="1651.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.2" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="239.2" y="1635.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.2" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="239.2" y="1619.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.2" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.40%)</title><rect x="240.2" y="1747.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.32%)</title><rect x="240.2" y="1731.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.2" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.32%)</title><rect x="240.2" y="1715.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.2" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="240.2" y="1699.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.2" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="240.2" y="1683.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="240.2" y="1667.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.2" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="240.2" y="1651.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.2" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="240.2" y="1635.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="240.2" y="1619.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.2" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.08%)</title><rect x="240.2" y="1603.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.2" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.24%)</title><rect x="241.1" y="1699.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.1" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.24%)</title><rect x="241.1" y="1683.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.1" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.24%)</title><rect x="241.1" y="1667.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.24%)</title><rect x="241.1" y="1651.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.24%)</title><rect x="241.1" y="1635.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.1" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.24%)</title><rect x="241.1" y="1619.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.1" y="1630.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.24%)</title><rect x="241.1" y="1603.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.1" y="1614.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.08%)</title><rect x="241.1" y="1587.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.1" y="1598.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.08%)</title><rect x="241.1" y="1571.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.1" y="1582.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.08%)</title><rect x="241.1" y="1555.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.1" y="1566.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.08%)</title><rect x="241.1" y="1539.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.1" y="1550.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="242.1" y="1587.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="245.1" y="1598.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="243.0" y="1587.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="246.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="243.9" y="1731.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.08%)</title><rect x="243.9" y="1715.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.08%)</title><rect x="243.9" y="1699.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.9" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isConnected (1 samples, 0.08%)</title><rect x="243.9" y="1683.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.9" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.throttleDelayMs (1 samples, 0.08%)</title><rect x="243.9" y="1667.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.9" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.24%)</title><rect x="244.9" y="1747.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.24%)</title><rect x="244.9" y="1731.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.9" y="1742.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.08%)</title><rect x="244.9" y="1715.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.9" y="1726.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="244.9" y="1699.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.9" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/981530120.get$Lambda (1 samples, 0.08%)</title><rect x="244.9" y="1683.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.9" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/981530120.&lt;init&gt; (1 samples, 0.08%)</title><rect x="244.9" y="1667.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.9" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="245.8" y="1715.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="245.8" y="1699.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="245.8" y="1683.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.8" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="245.8" y="1667.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.8" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="245.8" y="1651.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.8" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="246.8" y="1715.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.8" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.08%)</title><rect x="246.8" y="1699.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="246.8" y="1683.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.8" y="1694.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="247.7" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="250.7" y="1758.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="247.7" y="1731.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="250.7" y="1742.0"></text>
</g>
<g>
<title>java/lang/Thread.run (685 samples, 54.54%)</title><rect x="248.6" y="1811.0" width="643.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.6" y="1822.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (685 samples, 54.54%)</title><rect x="248.6" y="1795.0" width="643.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.6" y="1806.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (685 samples, 54.54%)</title><rect x="248.6" y="1779.0" width="643.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.6" y="1790.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (469 samples, 37.34%)</title><rect x="253.3" y="1763.0" width="440.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.3" y="1774.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (469 samples, 37.34%)</title><rect x="253.3" y="1747.0" width="440.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.3" y="1758.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (468 samples, 37.26%)</title><rect x="254.3" y="1731.0" width="439.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.3" y="1742.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (464 samples, 36.94%)</title><rect x="254.3" y="1715.0" width="435.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.3" y="1726.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sched..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="261.8" y="1699.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="264.8" y="1710.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="261.8" y="1683.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="264.8" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (153 samples, 12.18%)</title><rect x="262.7" y="1699.0" width="143.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.7" y="1710.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (153 samples, 12.18%)</title><rect x="262.7" y="1683.0" width="143.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.7" y="1694.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (153 samples, 12.18%)</title><rect x="262.7" y="1667.0" width="143.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.7" y="1678.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 12.18%)</title><rect x="262.7" y="1651.0" width="143.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.7" y="1662.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 12.18%)</title><rect x="262.7" y="1635.0" width="143.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.7" y="1646.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (153 samples, 12.18%)</title><rect x="262.7" y="1619.0" width="143.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.7" y="1630.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (53 samples, 4.22%)</title><rect x="262.7" y="1603.0" width="49.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.7" y="1614.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (27 samples, 2.15%)</title><rect x="262.7" y="1587.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.7" y="1598.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="262.7" y="1571.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="265.7" y="1582.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="262.7" y="1555.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="265.7" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="262.7" y="1539.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="265.7" y="1550.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="262.7" y="1523.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="265.7" y="1534.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="262.7" y="1507.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="265.7" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (23 samples, 1.83%)</title><rect x="263.7" y="1571.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.7" y="1582.0">c..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="278.7" y="1555.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="281.7" y="1566.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="278.7" y="1539.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="281.7" y="1550.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="279.6" y="1555.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="282.6" y="1566.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="280.6" y="1555.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="283.6" y="1566.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="280.6" y="1539.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="283.6" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="284.3" y="1555.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.3" y="1566.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="284.3" y="1539.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.3" y="1550.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="284.3" y="1523.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.3" y="1534.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="284.3" y="1507.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.3" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (3 samples, 0.24%)</title><rect x="285.3" y="1571.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.3" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="285.3" y="1555.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.3" y="1566.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.16%)</title><rect x="286.2" y="1555.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.2" y="1566.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.16%)</title><rect x="286.2" y="1539.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="289.2" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.07%)</title><rect x="288.1" y="1587.0" width="24.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.1" y="1598.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="288.1" y="1571.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="291.1" y="1582.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="288.1" y="1555.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="291.1" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="288.1" y="1539.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="291.1" y="1550.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="288.1" y="1523.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="291.1" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (4 samples, 0.32%)</title><rect x="289.0" y="1571.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.0" y="1582.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.16%)</title><rect x="290.9" y="1555.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.9" y="1566.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="291.8" y="1539.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="294.8" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 1.67%)</title><rect x="292.8" y="1571.0" width="19.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.8" y="1582.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="295.6" y="1555.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="298.6" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="295.6" y="1539.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="298.6" y="1550.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="295.6" y="1523.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="298.6" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="295.6" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="298.6" y="1518.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="295.6" y="1491.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="298.6" y="1502.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="295.6" y="1475.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="298.6" y="1486.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="295.6" y="1459.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="298.6" y="1470.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="295.6" y="1443.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="298.6" y="1454.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="295.6" y="1427.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="298.6" y="1438.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="295.6" y="1411.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="298.6" y="1422.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="295.6" y="1395.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="298.6" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.24%)</title><rect x="296.5" y="1555.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.5" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.16%)</title><rect x="297.5" y="1539.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.5" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.56%)</title><rect x="299.4" y="1555.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.4" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.56%)</title><rect x="299.4" y="1539.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.4" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="299.4" y="1523.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.4" y="1534.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="299.4" y="1507.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="302.4" y="1518.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="299.4" y="1491.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="302.4" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="299.4" y="1475.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="302.4" y="1486.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="299.4" y="1459.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="302.4" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.48%)</title><rect x="300.3" y="1523.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.3" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.56%)</title><rect x="305.9" y="1555.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.9" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 6.69%)</title><rect x="312.5" y="1603.0" width="78.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.5" y="1614.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.32%)</title><rect x="312.5" y="1587.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.5" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.32%)</title><rect x="312.5" y="1571.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.5" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.16%)</title><rect x="313.5" y="1555.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.5" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.08%)</title><rect x="314.4" y="1539.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.4" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.08%)</title><rect x="315.3" y="1555.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.64%)</title><rect x="316.3" y="1587.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.3" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.64%)</title><rect x="316.3" y="1571.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.3" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.16%)</title><rect x="320.0" y="1555.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.0" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.08%)</title><rect x="321.9" y="1555.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.9" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.08%)</title><rect x="322.9" y="1555.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.9" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.04%)</title><rect x="323.8" y="1587.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.8" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.88%)</title><rect x="324.7" y="1571.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.7" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (11 samples, 0.88%)</title><rect x="324.7" y="1555.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.7" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (9 samples, 0.72%)</title><rect x="326.6" y="1539.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.6" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.32%)</title><rect x="331.3" y="1523.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.3" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.08%)</title><rect x="335.1" y="1571.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.1" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.32%)</title><rect x="336.0" y="1587.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="339.0" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.24%)</title><rect x="336.9" y="1571.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.9" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (55 samples, 4.38%)</title><rect x="339.8" y="1587.0" width="51.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.8" y="1598.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.19%)</title><rect x="339.8" y="1571.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.8" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.16%)</title><rect x="347.3" y="1555.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.16%)</title><rect x="347.3" y="1539.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.3" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.16%)</title><rect x="347.3" y="1523.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.3" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="349.2" y="1555.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.2" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="349.2" y="1539.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.2" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.24%)</title><rect x="351.0" y="1555.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.0" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (40 samples, 3.18%)</title><rect x="353.9" y="1571.0" width="37.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.9" y="1582.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="353.9" y="1555.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.9" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="353.9" y="1539.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.9" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.08%)</title><rect x="353.9" y="1523.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.9" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.08%)</title><rect x="353.9" y="1507.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.9" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.08%)</title><rect x="353.9" y="1491.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.9" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.08%)</title><rect x="353.9" y="1475.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.9" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.08%)</title><rect x="353.9" y="1459.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.9" y="1470.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.08%)</title><rect x="353.9" y="1443.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.9" y="1454.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.08%)</title><rect x="353.9" y="1427.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.9" y="1438.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.08%)</title><rect x="353.9" y="1411.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.9" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 3.11%)</title><rect x="354.8" y="1555.0" width="36.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="357.8" y="1566.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.11%)</title><rect x="354.8" y="1539.0" width="36.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.8" y="1550.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.80%)</title><rect x="359.5" y="1523.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.5" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.24%)</title><rect x="365.1" y="1507.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.1" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.24%)</title><rect x="365.1" y="1491.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.1" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.24%)</title><rect x="365.1" y="1475.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.1" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.24%)</title><rect x="365.1" y="1459.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.1" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="367.9" y="1507.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.9" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="367.9" y="1491.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.9" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.56%)</title><rect x="368.9" y="1523.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.9" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.48%)</title><rect x="369.8" y="1507.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.8" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.48%)</title><rect x="369.8" y="1491.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.8" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.48%)</title><rect x="369.8" y="1475.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.8" y="1486.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.48%)</title><rect x="369.8" y="1459.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.8" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="375.5" y="1523.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.5" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.48%)</title><rect x="376.4" y="1523.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.4" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.48%)</title><rect x="376.4" y="1507.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.4" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.48%)</title><rect x="376.4" y="1491.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.4" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.48%)</title><rect x="376.4" y="1475.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.4" y="1486.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.48%)</title><rect x="376.4" y="1459.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.4" y="1470.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.48%)</title><rect x="376.4" y="1443.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="379.4" y="1454.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (6 samples, 0.48%)</title><rect x="376.4" y="1427.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.4" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.56%)</title><rect x="382.0" y="1523.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.0" y="1534.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.56%)</title><rect x="382.0" y="1507.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.0" y="1518.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.56%)</title><rect x="382.0" y="1491.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.0" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.08%)</title><rect x="387.7" y="1475.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.7" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.24%)</title><rect x="388.6" y="1523.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.6" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (16 samples, 1.27%)</title><rect x="391.4" y="1603.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (16 samples, 1.27%)</title><rect x="391.4" y="1587.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.4" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (16 samples, 1.27%)</title><rect x="391.4" y="1571.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.4" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.16%)</title><rect x="392.4" y="1555.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="395.4" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (4 samples, 0.32%)</title><rect x="394.3" y="1555.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 0.32%)</title><rect x="398.0" y="1555.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.0" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.40%)</title><rect x="401.8" y="1555.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.8" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.40%)</title><rect x="401.8" y="1539.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.8" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (289 samples, 23.01%)</title><rect x="406.5" y="1699.0" width="271.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.5" y="1710.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (41 samples, 3.26%)</title><rect x="406.5" y="1683.0" width="38.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.5" y="1694.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 3.26%)</title><rect x="406.5" y="1667.0" width="38.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.5" y="1678.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (37 samples, 2.95%)</title><rect x="408.3" y="1651.0" width="34.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.3" y="1662.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.32%)</title><rect x="410.2" y="1635.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.2" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="411.2" y="1619.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.2" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="411.2" y="1603.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.2" y="1614.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="411.2" y="1587.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="414.2" y="1598.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.16%)</title><rect x="412.1" y="1619.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.1" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.16%)</title><rect x="412.1" y="1603.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.1" y="1614.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.16%)</title><rect x="412.1" y="1587.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.1" y="1598.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.08%)</title><rect x="414.0" y="1635.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="417.0" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.48%)</title><rect x="414.9" y="1635.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="417.9" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="418.7" y="1619.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.7" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.08%)</title><rect x="419.6" y="1619.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.6" y="1630.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (23 samples, 1.83%)</title><rect x="420.6" y="1635.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.6" y="1646.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 1.04%)</title><rect x="430.0" y="1619.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.0" y="1630.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="430.0" y="1603.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.0" y="1614.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="430.9" y="1587.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.9" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.88%)</title><rect x="431.8" y="1603.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.8" y="1614.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="441.2" y="1587.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="444.2" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="442.2" y="1635.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="445.2" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.16%)</title><rect x="443.1" y="1651.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="446.1" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.56%)</title><rect x="445.0" y="1683.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.0" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.48%)</title><rect x="445.9" y="1667.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.9" y="1678.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.48%)</title><rect x="445.9" y="1651.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.9" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (161 samples, 12.82%)</title><rect x="451.6" y="1683.0" width="151.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="454.6" y="1694.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="452.5" y="1667.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="455.5" y="1678.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="453.4" y="1651.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="456.4" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (155 samples, 12.34%)</title><rect x="455.3" y="1667.0" width="145.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.3" y="1678.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (68 samples, 5.41%)</title><rect x="461.0" y="1651.0" width="63.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.0" y="1662.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 3.26%)</title><rect x="471.3" y="1635.0" width="38.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.3" y="1646.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (39 samples, 3.11%)</title><rect x="473.2" y="1619.0" width="36.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.2" y="1630.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.59%)</title><rect x="484.4" y="1603.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.4" y="1614.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.59%)</title><rect x="484.4" y="1587.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.4" y="1598.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.59%)</title><rect x="484.4" y="1571.0" width="18.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="487.4" y="1582.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.48%)</title><rect x="492.9" y="1555.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="495.9" y="1566.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.24%)</title><rect x="492.9" y="1539.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="495.9" y="1550.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="492.9" y="1523.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="495.9" y="1534.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="493.8" y="1523.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="496.8" y="1534.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="493.8" y="1507.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="496.8" y="1518.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="493.8" y="1491.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="496.8" y="1502.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="493.8" y="1475.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="496.8" y="1486.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="494.8" y="1491.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="497.8" y="1502.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.24%)</title><rect x="495.7" y="1539.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="498.7" y="1550.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="495.7" y="1523.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="498.7" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="496.7" y="1523.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="499.7" y="1534.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="496.7" y="1507.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="499.7" y="1518.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="497.6" y="1507.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="500.6" y="1518.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.40%)</title><rect x="498.5" y="1555.0" width="4.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="501.5" y="1566.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="503.2" y="1603.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="506.2" y="1614.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="505.1" y="1603.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.1" y="1614.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="506.1" y="1603.0" width="3.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="509.1" y="1614.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="509.8" y="1635.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.8" y="1646.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="509.8" y="1619.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.8" y="1630.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="509.8" y="1603.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.8" y="1614.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="509.8" y="1587.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.8" y="1598.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="509.8" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="512.8" y="1582.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="509.8" y="1555.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.8" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="509.8" y="1539.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.8" y="1550.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="509.8" y="1523.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="512.8" y="1534.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="509.8" y="1507.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="512.8" y="1518.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="509.8" y="1491.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="512.8" y="1502.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="509.8" y="1475.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="512.8" y="1486.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="509.8" y="1459.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.8" y="1470.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="510.7" y="1635.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="513.7" y="1646.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (14 samples, 1.11%)</title><rect x="511.7" y="1635.0" width="13.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="514.7" y="1646.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.40%)</title><rect x="524.8" y="1651.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="527.8" y="1662.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.40%)</title><rect x="524.8" y="1635.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.8" y="1646.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.40%)</title><rect x="524.8" y="1619.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="527.8" y="1630.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="528.6" y="1603.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.6" y="1614.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 6.05%)</title><rect x="529.5" y="1651.0" width="71.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="532.5" y="1662.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 5.97%)</title><rect x="530.5" y="1635.0" width="70.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.5" y="1646.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.80%)</title><rect x="530.5" y="1619.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.5" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.80%)</title><rect x="530.5" y="1603.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.5" y="1614.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.80%)</title><rect x="530.5" y="1587.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.5" y="1598.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.80%)</title><rect x="530.5" y="1571.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.5" y="1582.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="538.0" y="1555.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.0" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="538.9" y="1539.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="541.9" y="1550.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (65 samples, 5.18%)</title><rect x="539.9" y="1619.0" width="61.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="542.9" y="1630.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (63 samples, 5.02%)</title><rect x="541.8" y="1603.0" width="59.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.8" y="1614.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 2.95%)</title><rect x="566.2" y="1587.0" width="34.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.2" y="1598.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.24%)</title><rect x="587.8" y="1571.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="590.8" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.24%)</title><rect x="590.6" y="1571.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="593.6" y="1582.0"></text>
</g>
<g>
<title>vtable stub (8 samples, 0.64%)</title><rect x="593.4" y="1571.0" width="7.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="596.4" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="600.9" y="1667.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.9" y="1678.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="601.9" y="1667.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.9" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (60 samples, 4.78%)</title><rect x="602.8" y="1683.0" width="56.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.8" y="1694.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (60 samples, 4.78%)</title><rect x="602.8" y="1667.0" width="56.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.8" y="1678.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (37 samples, 2.95%)</title><rect x="604.7" y="1651.0" width="34.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.7" y="1662.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (33 samples, 2.63%)</title><rect x="608.5" y="1635.0" width="31.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="611.5" y="1646.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (32 samples, 2.55%)</title><rect x="608.5" y="1619.0" width="30.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="611.5" y="1630.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="623.5" y="1603.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.5" y="1614.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="623.5" y="1587.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.5" y="1598.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="623.5" y="1571.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="626.5" y="1582.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="623.5" y="1555.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="626.5" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="623.5" y="1539.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.5" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (14 samples, 1.11%)</title><rect x="624.4" y="1603.0" width="13.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.4" y="1614.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="626.3" y="1587.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="629.3" y="1598.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="626.3" y="1571.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="629.3" y="1582.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.88%)</title><rect x="627.2" y="1587.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="630.2" y="1598.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.88%)</title><rect x="627.2" y="1571.0" width="10.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="630.2" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.08%)</title><rect x="637.6" y="1603.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.6" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="638.5" y="1619.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.5" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$262/418206026.complete (2 samples, 0.16%)</title><rect x="639.5" y="1651.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.5" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (2 samples, 0.16%)</title><rect x="639.5" y="1635.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.5" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="639.5" y="1619.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.5" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="639.5" y="1603.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.5" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="639.5" y="1587.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.5" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="639.5" y="1571.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="642.5" y="1582.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="639.5" y="1555.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="642.5" y="1566.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="639.5" y="1539.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="642.5" y="1550.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="640.4" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="643.4" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="641.3" y="1651.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="644.3" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="641.3" y="1635.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="644.3" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="641.3" y="1619.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="644.3" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="641.3" y="1603.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="644.3" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="641.3" y="1587.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="644.3" y="1598.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="641.3" y="1571.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.3" y="1582.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="641.3" y="1555.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="644.3" y="1566.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="642.3" y="1635.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.3" y="1646.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="643.2" y="1651.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.2" y="1662.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="643.2" y="1635.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.2" y="1646.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.32%)</title><rect x="644.2" y="1651.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.2" y="1662.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.16%)</title><rect x="646.0" y="1635.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="649.0" y="1646.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="646.0" y="1619.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="649.0" y="1630.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.32%)</title><rect x="647.9" y="1651.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.9" y="1662.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.32%)</title><rect x="647.9" y="1635.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="650.9" y="1646.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.64%)</title><rect x="651.7" y="1651.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.7" y="1662.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="657.3" y="1635.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.3" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="659.2" y="1683.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="662.2" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="659.2" y="1667.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="662.2" y="1678.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="659.2" y="1651.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="662.2" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="659.2" y="1635.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="662.2" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="659.2" y="1619.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="662.2" y="1630.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="659.2" y="1603.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="662.2" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="659.2" y="1587.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="662.2" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.24%)</title><rect x="660.1" y="1683.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.1" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.27%)</title><rect x="662.9" y="1683.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.9" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.27%)</title><rect x="662.9" y="1667.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="665.9" y="1678.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.48%)</title><rect x="664.8" y="1651.0" width="5.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="667.8" y="1662.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.48%)</title><rect x="664.8" y="1635.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="667.8" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.64%)</title><rect x="670.5" y="1651.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="673.5" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1442977221.accept (8 samples, 0.64%)</title><rect x="670.5" y="1635.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.5" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.64%)</title><rect x="670.5" y="1619.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.5" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.64%)</title><rect x="670.5" y="1603.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.5" y="1614.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.64%)</title><rect x="670.5" y="1587.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.5" y="1598.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.64%)</title><rect x="670.5" y="1571.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.5" y="1582.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="673.3" y="1555.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="676.3" y="1566.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="674.2" y="1539.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="677.2" y="1550.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="677.0" y="1555.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="680.0" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.72%)</title><rect x="678.0" y="1699.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="681.0" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.72%)</title><rect x="678.0" y="1683.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.0" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.72%)</title><rect x="678.0" y="1667.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.0" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1442977221.accept (9 samples, 0.72%)</title><rect x="678.0" y="1651.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.0" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.72%)</title><rect x="678.0" y="1635.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.0" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.72%)</title><rect x="678.0" y="1619.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.0" y="1630.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.72%)</title><rect x="678.0" y="1603.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.0" y="1614.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.72%)</title><rect x="678.0" y="1587.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.0" y="1598.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="686.4" y="1699.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="689.4" y="1710.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="686.4" y="1683.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="689.4" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="690.2" y="1715.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.2" y="1726.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="690.2" y="1699.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="693.2" y="1710.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="690.2" y="1683.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="693.2" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="690.2" y="1667.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.2" y="1678.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="690.2" y="1651.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="693.2" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="690.2" y="1635.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="693.2" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="690.2" y="1619.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="693.2" y="1630.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="690.2" y="1603.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="693.2" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.24%)</title><rect x="691.1" y="1715.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.1" y="1726.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="691.1" y="1699.0" width="2.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="694.1" y="1710.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="691.1" y="1683.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="694.1" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.08%)</title><rect x="693.9" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="696.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="693.9" y="1747.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="696.9" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="693.9" y="1731.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="696.9" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="693.9" y="1715.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="696.9" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (210 samples, 16.72%)</title><rect x="694.9" y="1763.0" width="197.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.9" y="1774.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (209 samples, 16.64%)</title><rect x="695.8" y="1747.0" width="196.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.8" y="1758.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (185 samples, 14.73%)</title><rect x="701.5" y="1731.0" width="173.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.5" y="1742.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.16%)</title><rect x="710.9" y="1715.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.9" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.16%)</title><rect x="710.9" y="1699.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="713.9" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.19%)</title><rect x="712.7" y="1715.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.7" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (8 samples, 0.64%)</title><rect x="714.6" y="1699.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.6" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.40%)</title><rect x="722.1" y="1699.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.1" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.40%)</title><rect x="722.1" y="1683.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="725.1" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.40%)</title><rect x="722.1" y="1667.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.1" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.72%)</title><rect x="726.8" y="1715.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.8" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.72%)</title><rect x="726.8" y="1699.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.72%)</title><rect x="726.8" y="1683.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.8" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.72%)</title><rect x="726.8" y="1667.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="729.8" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 11.86%)</title><rect x="735.3" y="1715.0" width="140.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.3" y="1726.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (149 samples, 11.86%)</title><rect x="735.3" y="1699.0" width="140.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="738.3" y="1710.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="746.6" y="1683.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="749.6" y="1694.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="747.5" y="1683.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="750.5" y="1694.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="748.4" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="751.4" y="1694.0"></text>
</g>
<g>
<title>Unsafe_Park (129 samples, 10.27%)</title><rect x="749.4" y="1683.0" width="121.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="752.4" y="1694.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="756.0" y="1667.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="759.0" y="1678.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="756.9" y="1667.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.9" y="1678.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.43%)</title><rect x="757.8" y="1667.0" width="16.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="760.8" y="1678.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.72%)</title><rect x="762.5" y="1651.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="765.5" y="1662.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.48%)</title><rect x="762.5" y="1635.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="765.5" y="1646.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (5 samples, 0.40%)</title><rect x="763.5" y="1619.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="766.5" y="1630.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="768.2" y="1635.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.2" y="1646.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="769.1" y="1635.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="772.1" y="1646.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.32%)</title><rect x="771.0" y="1651.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.0" y="1662.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="774.7" y="1667.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="777.7" y="1678.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="775.7" y="1667.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.7" y="1678.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.72%)</title><rect x="777.6" y="1667.0" width="8.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="780.6" y="1678.0"></text>
</g>
<g>
<title>__lll_unlock_wake (22 samples, 1.75%)</title><rect x="786.0" y="1667.0" width="20.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="789.0" y="1678.0"></text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 3.98%)</title><rect x="806.7" y="1667.0" width="47.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="809.7" y="1678.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.56%)</title><rect x="853.7" y="1667.0" width="6.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="856.7" y="1678.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.32%)</title><rect x="860.2" y="1667.0" width="3.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="863.2" y="1678.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="864.0" y="1667.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="867.0" y="1678.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="864.9" y="1667.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="867.9" y="1678.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="867.8" y="1667.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="870.8" y="1678.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="868.7" y="1667.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="871.7" y="1678.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="870.6" y="1683.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="873.6" y="1694.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="872.5" y="1683.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.5" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.43%)</title><rect x="875.3" y="1731.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="878.3" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.43%)</title><rect x="875.3" y="1715.0" width="16.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="878.3" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.43%)</title><rect x="875.3" y="1699.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="878.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.43%)</title><rect x="875.3" y="1683.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="878.3" y="1694.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.08%)</title><rect x="892.2" y="1811.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="895.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="893.1" y="1811.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="896.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="893.1" y="1795.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="893.1" y="1779.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="896.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="893.1" y="1763.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="896.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="893.1" y="1747.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="893.1" y="1731.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.1" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="893.1" y="1715.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.1" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="893.1" y="1699.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="896.1" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="893.1" y="1683.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.1" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="893.1" y="1667.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="896.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="893.1" y="1651.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="896.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="893.1" y="1635.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="896.1" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.08%)</title><rect x="893.1" y="1619.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.1" y="1630.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.08%)</title><rect x="893.1" y="1603.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.1" y="1614.0"></text>
</g>
<g>
<title>start_thread (315 samples, 25.08%)</title><rect x="894.1" y="1811.0" width="295.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="897.1" y="1822.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (315 samples, 25.08%)</title><rect x="894.1" y="1795.0" width="295.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="897.1" y="1806.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.43%)</title><rect x="894.1" y="1779.0" width="16.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="897.1" y="1790.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="894.1" y="1763.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="897.1" y="1774.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="894.1" y="1747.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.1" y="1758.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="894.1" y="1731.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="897.1" y="1742.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.35%)</title><rect x="895.0" y="1763.0" width="16.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.0" y="1774.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.08%)</title><rect x="895.0" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.0" y="1758.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="895.9" y="1747.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.9" y="1758.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.24%)</title><rect x="895.9" y="1731.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="898.9" y="1742.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, ReferenceProcessor*) (1 samples, 0.08%)</title><rect x="898.8" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="901.8" y="1758.0"></text>
</g>
<g>
<title>G1ParGCAllocator::create_allocator(G1CollectedHeap*) (1 samples, 0.08%)</title><rect x="898.8" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.8" y="1742.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::ParGCAllocBuffer(unsigned long) (1 samples, 0.08%)</title><rect x="898.8" y="1715.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="901.8" y="1726.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.40%)</title><rect x="899.7" y="1747.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="902.7" y="1758.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="899.7" y="1731.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="902.7" y="1742.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="899.7" y="1715.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="902.7" y="1726.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="899.7" y="1699.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.7" y="1710.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="899.7" y="1683.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="902.7" y="1694.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="900.6" y="1715.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.6" y="1726.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="900.6" y="1699.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.6" y="1710.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="900.6" y="1683.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.6" y="1694.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="900.6" y="1667.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.6" y="1678.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="900.6" y="1651.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.6" y="1662.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="900.6" y="1635.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.6" y="1646.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.08%)</title><rect x="901.6" y="1683.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="904.6" y="1694.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="902.5" y="1731.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.5" y="1742.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="902.5" y="1715.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="905.5" y="1726.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.56%)</title><rect x="904.4" y="1747.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="907.4" y="1758.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.56%)</title><rect x="904.4" y="1731.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="907.4" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.56%)</title><rect x="904.4" y="1715.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.4" y="1726.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.56%)</title><rect x="904.4" y="1699.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="907.4" y="1710.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.56%)</title><rect x="904.4" y="1683.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.4" y="1694.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.56%)</title><rect x="904.4" y="1667.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.4" y="1678.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.24%)</title><rect x="908.2" y="1651.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="911.2" y="1662.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="909.1" y="1635.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="912.1" y="1646.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="910.0" y="1635.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="913.0" y="1646.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.08%)</title><rect x="910.0" y="1619.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.0" y="1630.0"></text>
</g>
<g>
<title>JavaThread::run() (295 samples, 23.49%)</title><rect x="911.0" y="1779.0" width="277.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.0" y="1790.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (295 samples, 23.49%)</title><rect x="911.0" y="1763.0" width="277.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.0" y="1774.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (295 samples, 23.49%)</title><rect x="911.0" y="1747.0" width="277.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="914.0" y="1758.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (293 samples, 23.33%)</title><rect x="911.0" y="1731.0" width="275.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.0" y="1742.0">CompileBroker::invoke_compiler_on_met..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (293 samples, 23.33%)</title><rect x="911.0" y="1715.0" width="275.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="914.0" y="1726.0">C2Compiler::compile_method(ciEnv*, ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (293 samples, 23.33%)</title><rect x="911.0" y="1699.0" width="275.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.0" y="1710.0">Compile::Compile(ciEnv*, C2Compiler*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (85 samples, 6.77%)</title><rect x="911.0" y="1683.0" width="79.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.0" y="1694.0">Compile::..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="911.0" y="1667.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="914.0" y="1678.0"></text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.40%)</title><rect x="911.9" y="1667.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.9" y="1678.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (5 samples, 0.40%)</title><rect x="911.9" y="1651.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.9" y="1662.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="915.7" y="1635.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.7" y="1646.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.32%)</title><rect x="916.6" y="1667.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="919.6" y="1678.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.24%)</title><rect x="916.6" y="1651.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="919.6" y="1662.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="916.6" y="1635.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.6" y="1646.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="917.5" y="1635.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.5" y="1646.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="917.5" y="1619.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.5" y="1630.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.08%)</title><rect x="918.5" y="1635.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.5" y="1646.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="919.4" y="1651.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="922.4" y="1662.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="919.4" y="1635.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.4" y="1646.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.80%)</title><rect x="920.4" y="1667.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.4" y="1678.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.08%)</title><rect x="920.4" y="1651.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.4" y="1662.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.08%)</title><rect x="921.3" y="1651.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="924.3" y="1662.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.08%)</title><rect x="921.3" y="1635.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.3" y="1646.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.64%)</title><rect x="922.2" y="1651.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.2" y="1662.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.24%)</title><rect x="923.2" y="1635.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.2" y="1646.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.16%)</title><rect x="926.0" y="1635.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.0" y="1646.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.08%)</title><rect x="926.0" y="1619.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="929.0" y="1630.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="926.9" y="1619.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.9" y="1630.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="926.9" y="1603.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="929.9" y="1614.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="927.9" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="930.9" y="1646.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="927.9" y="1619.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="930.9" y="1630.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="927.9" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="930.9" y="1614.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.08%)</title><rect x="927.9" y="1587.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="930.9" y="1598.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="928.8" y="1635.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.8" y="1646.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="929.8" y="1667.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="932.8" y="1678.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.08%)</title><rect x="929.8" y="1651.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="932.8" y="1662.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="929.8" y="1635.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="932.8" y="1646.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.08%)</title><rect x="929.8" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.8" y="1630.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="930.7" y="1667.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.7" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="930.7" y="1651.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.7" y="1662.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.16%)</title><rect x="931.6" y="1667.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.6" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="931.6" y="1651.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.6" y="1662.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="931.6" y="1635.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.6" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="932.6" y="1619.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.6" y="1630.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (61 samples, 4.86%)</title><rect x="933.5" y="1667.0" width="57.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.5" y="1678.0">PhaseC..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="933.5" y="1651.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.5" y="1662.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="934.5" y="1651.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.5" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.32%)</title><rect x="936.3" y="1651.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="939.3" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="936.3" y="1635.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.3" y="1646.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.08%)</title><rect x="936.3" y="1619.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.3" y="1630.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.24%)</title><rect x="937.3" y="1635.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="940.3" y="1646.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="938.2" y="1619.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="941.2" y="1630.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.16%)</title><rect x="940.1" y="1651.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="943.1" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="941.0" y="1635.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="944.0" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.96%)</title><rect x="942.0" y="1651.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.0" y="1662.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="951.4" y="1635.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.4" y="1646.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.08%)</title><rect x="952.3" y="1635.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="955.3" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.88%)</title><rect x="953.2" y="1651.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="956.2" y="1662.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="957.9" y="1635.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="960.9" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.40%)</title><rect x="958.9" y="1635.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.9" y="1646.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="962.6" y="1619.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.6" y="1630.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="963.6" y="1651.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.6" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.24%)</title><rect x="965.5" y="1651.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.5" y="1662.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.08%)</title><rect x="967.3" y="1635.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="970.3" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="968.3" y="1651.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.3" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.32%)</title><rect x="969.2" y="1651.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.2" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.16%)</title><rect x="971.1" y="1635.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.1" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="973.0" y="1651.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.0" y="1662.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="973.9" y="1651.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.9" y="1662.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="973.9" y="1635.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.9" y="1646.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.32%)</title><rect x="974.9" y="1651.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.9" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="977.7" y="1635.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.7" y="1646.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="978.6" y="1651.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.6" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="979.6" y="1635.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.6" y="1646.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.72%)</title><rect x="980.5" y="1651.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="983.5" y="1662.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="981.4" y="1635.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.4" y="1646.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="982.4" y="1635.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.4" y="1646.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.32%)</title><rect x="983.3" y="1635.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.3" y="1646.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="986.1" y="1619.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.1" y="1630.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1635.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.1" y="1646.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="988.0" y="1635.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="991.0" y="1646.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.16%)</title><rect x="988.9" y="1651.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="991.9" y="1662.0"></text>
</g>
<g>
<title>Compile::Optimize() (198 samples, 15.76%)</title><rect x="990.8" y="1683.0" width="186.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="993.8" y="1694.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="990.8" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.8" y="1678.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.08%)</title><rect x="990.8" y="1651.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.8" y="1662.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="990.8" y="1635.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.8" y="1646.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="990.8" y="1619.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.40%)</title><rect x="991.8" y="1667.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.40%)</title><rect x="991.8" y="1651.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.8" y="1635.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="991.8" y="1619.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.24%)</title><rect x="992.7" y="1635.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.24%)</title><rect x="992.7" y="1619.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1587.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1571.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1555.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1539.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1523.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="995.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1507.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1491.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1475.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1459.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1443.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1427.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="995.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1411.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1395.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1379.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1363.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1347.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="995.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1331.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="995.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1315.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1299.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1283.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1267.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1251.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1235.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1219.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1187.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1171.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1123.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1091.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1059.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1043.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="995.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1027.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="995.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="995.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="867.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="995.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="755.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="739.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="723.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="995.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="691.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="659.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="627.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="611.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="995.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="579.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="563.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="547.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="515.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="499.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="483.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="451.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="435.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="403.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="387.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="371.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="339.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="323.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="307.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="291.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="995.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="275.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="259.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="243.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="211.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="195.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="163.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="147.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="131.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="115.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="99.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="83.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="67.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="992.7" y="51.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.7" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="992.7" y="35.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.7" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="993.6" y="1603.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="993.6" y="1587.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="993.6" y="1571.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="993.6" y="1555.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1539.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.6" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1523.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1507.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1491.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1475.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1459.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1443.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1427.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1411.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1395.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1379.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1363.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="996.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1347.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1331.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1315.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1299.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1283.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1267.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1251.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1235.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1219.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1187.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1155.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1107.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1091.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1043.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="931.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="996.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="851.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="996.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="835.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="996.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="993.6" y="643.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.6" y="654.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="993.6" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="994.6" y="1539.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.6" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="994.6" y="1523.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="994.6" y="1507.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="994.6" y="1491.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.6" y="1502.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="994.6" y="1475.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.6" y="1486.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="995.5" y="1635.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.5" y="1646.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="996.5" y="1667.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.5" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.16%)</title><rect x="997.4" y="1667.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.4" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.16%)</title><rect x="997.4" y="1651.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.4" y="1662.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.08%)</title><rect x="997.4" y="1635.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.4" y="1646.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::push(Node* const&amp;) (1 samples, 0.08%)</title><rect x="998.3" y="1635.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.3" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (166 samples, 13.22%)</title><rect x="999.3" y="1667.0" width="155.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.3" y="1678.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1651.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.3" y="1662.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1635.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.3" y="1646.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1619.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.3" y="1630.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1603.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1002.3" y="1614.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1587.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.3" y="1598.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1571.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.3" y="1582.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1555.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.3" y="1566.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1539.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.3" y="1550.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1523.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.3" y="1534.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1507.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.3" y="1518.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1491.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.3" y="1502.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1475.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.3" y="1486.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1459.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.3" y="1470.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.3" y="1454.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="999.3" y="1427.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.3" y="1438.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1000.2" y="1651.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1003.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.32%)</title><rect x="1001.2" y="1651.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1004.9" y="1651.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.9" y="1662.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1005.9" y="1635.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.9" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (148 samples, 11.78%)</title><rect x="1006.8" y="1651.0" width="139.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.8" y="1662.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (144 samples, 11.46%)</title><rect x="1010.6" y="1635.0" width="135.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.6" y="1646.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.56%)</title><rect x="1010.6" y="1619.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1013.6" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (135 samples, 10.75%)</title><rect x="1017.1" y="1619.0" width="126.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.1" y="1630.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1118.6" y="1603.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.6" y="1614.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1118.6" y="1587.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1121.6" y="1598.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.16%)</title><rect x="1119.5" y="1603.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.5" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1120.5" y="1587.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.5" y="1598.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (21 samples, 1.67%)</title><rect x="1121.4" y="1603.0" width="19.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.4" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.24%)</title><rect x="1141.1" y="1603.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.1" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.08%)</title><rect x="1144.0" y="1619.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.0" y="1630.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1144.9" y="1619.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1147.9" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.16%)</title><rect x="1145.8" y="1651.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.8" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.32%)</title><rect x="1147.7" y="1651.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.7" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.16%)</title><rect x="1148.7" y="1635.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.7" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1148.7" y="1619.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.7" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1149.6" y="1619.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.6" y="1630.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1149.6" y="1603.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.6" y="1614.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1149.6" y="1587.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.6" y="1598.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1149.6" y="1571.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.6" y="1582.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1149.6" y="1555.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.6" y="1566.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1149.6" y="1539.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.6" y="1550.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1149.6" y="1523.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.6" y="1534.0"></text>
</g>
<g>
<title>RShiftINode::Opcode() const (1 samples, 0.08%)</title><rect x="1150.5" y="1635.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.5" y="1646.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.24%)</title><rect x="1151.5" y="1651.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.24%)</title><rect x="1151.5" y="1635.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="1646.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1151.5" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.5" y="1630.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1151.5" y="1603.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.5" y="1614.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1152.4" y="1619.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="1630.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1152.4" y="1603.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="1614.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1153.4" y="1603.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.4" y="1614.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1154.3" y="1651.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1157.3" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1155.2" y="1667.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.2" y="1678.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.08%)</title><rect x="1155.2" y="1651.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 1.35%)</title><rect x="1156.2" y="1667.0" width="15.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.2" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (17 samples, 1.35%)</title><rect x="1156.2" y="1651.0" width="15.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.2" y="1662.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1156.2" y="1635.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.2" y="1646.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1156.2" y="1619.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="1630.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1156.2" y="1603.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.2" y="1614.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1157.1" y="1635.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.1" y="1646.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.08%)</title><rect x="1158.1" y="1635.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.1" y="1646.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.0" y="1635.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.0" y="1646.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1159.9" y="1635.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="1646.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1160.9" y="1635.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.9" y="1646.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.32%)</title><rect x="1161.8" y="1635.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.8" y="1646.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1163.7" y="1619.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1164.6" y="1619.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="1630.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1164.6" y="1603.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="1614.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.24%)</title><rect x="1165.6" y="1635.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.6" y="1646.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.16%)</title><rect x="1166.5" y="1619.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="1630.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1167.5" y="1603.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.5" y="1614.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1168.4" y="1635.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.4" y="1646.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.16%)</title><rect x="1168.4" y="1619.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.4" y="1630.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.3" y="1635.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1170.3" y="1619.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1603.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1587.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1571.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="1582.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.3" y="1555.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="1566.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1539.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.3" y="1550.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1171.2" y="1635.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1174.2" y="1646.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1172.1" y="1667.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.1" y="1678.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1172.1" y="1651.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.1" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1172.1" y="1635.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="1646.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.08%)</title><rect x="1172.1" y="1619.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="1630.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1172.1" y="1603.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1175.1" y="1614.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1172.1" y="1587.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.1" y="1598.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1172.1" y="1571.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="1582.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1172.1" y="1555.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1566.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1172.1" y="1539.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.1" y="1550.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1172.1" y="1523.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.1" y="1534.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.24%)</title><rect x="1173.1" y="1667.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.1" y="1678.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1173.1" y="1651.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.1" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1173.1" y="1635.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.1" y="1646.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1173.1" y="1619.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.1" y="1603.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="1614.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1173.1" y="1587.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.1" y="1598.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.08%)</title><rect x="1174.0" y="1651.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.0" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1174.0" y="1635.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.0" y="1646.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1174.0" y="1619.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.0" y="1630.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.08%)</title><rect x="1175.0" y="1651.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::opt_bits_test(Node*, Node*, int, Node*, int, int, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="1635.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="1646.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1175.9" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.72%)</title><rect x="1176.8" y="1683.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.72%)</title><rect x="1176.8" y="1667.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.72%)</title><rect x="1176.8" y="1651.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.72%)</title><rect x="1176.8" y="1635.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.72%)</title><rect x="1176.8" y="1619.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.72%)</title><rect x="1176.8" y="1603.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1614.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.16%)</title><rect x="1176.8" y="1587.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="1598.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.16%)</title><rect x="1176.8" y="1571.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1582.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.16%)</title><rect x="1176.8" y="1555.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.16%)</title><rect x="1176.8" y="1539.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.16%)</title><rect x="1176.8" y="1523.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.16%)</title><rect x="1176.8" y="1507.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.16%)</title><rect x="1176.8" y="1491.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.16%)</title><rect x="1176.8" y="1475.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.8" y="1459.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="1470.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1177.8" y="1443.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="1454.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.8" y="1427.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="1438.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.8" y="1411.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="1422.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.08%)</title><rect x="1177.8" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.56%)</title><rect x="1178.7" y="1587.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.56%)</title><rect x="1178.7" y="1571.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.56%)</title><rect x="1178.7" y="1555.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.56%)</title><rect x="1178.7" y="1539.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.56%)</title><rect x="1178.7" y="1523.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.56%)</title><rect x="1178.7" y="1507.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="1518.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1178.7" y="1491.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.7" y="1502.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1178.7" y="1475.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1486.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1178.7" y="1459.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.7" y="1470.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1178.7" y="1443.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="1454.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1178.7" y="1427.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1438.0"></text>
</g>
<g>
<title>TypeTuple::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1178.7" y="1411.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.48%)</title><rect x="1179.7" y="1491.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.48%)</title><rect x="1179.7" y="1475.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.48%)</title><rect x="1179.7" y="1459.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.48%)</title><rect x="1179.7" y="1443.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.48%)</title><rect x="1179.7" y="1427.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1179.7" y="1411.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.7" y="1422.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="1395.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="1406.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1179.7" y="1379.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="1390.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1179.7" y="1363.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1179.7" y="1347.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1179.7" y="1331.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1179.7" y="1315.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1179.7" y="1299.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1179.7" y="1283.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="1267.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1278.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1179.7" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="1262.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.7" y="1235.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.7" y="1219.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="1230.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1179.7" y="1203.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="1187.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1179.7" y="1171.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1179.7" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="1166.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1179.7" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1179.7" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.40%)</title><rect x="1180.6" y="1395.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.40%)</title><rect x="1180.6" y="1379.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.40%)</title><rect x="1180.6" y="1363.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.40%)</title><rect x="1180.6" y="1347.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.40%)</title><rect x="1180.6" y="1331.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1180.6" y="1315.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1180.6" y="1299.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1180.6" y="1283.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1180.6" y="1267.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1180.6" y="1251.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1180.6" y="1235.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1180.6" y="1219.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.6" y="1203.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.6" y="1187.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="1198.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.6" y="1171.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="1182.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1180.6" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="1166.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.08%)</title><rect x="1180.6" y="1139.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.5" y="1203.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.5" y="1187.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.5" y="1171.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.5" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.5" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.5" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.5" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.5" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.5" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.5" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.5" y="1043.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.5" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="995.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1181.5" y="979.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="1203.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="1214.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="1187.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="1075.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="1059.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="1006.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="979.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="990.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.5" y="963.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="974.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1182.5" y="947.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1183.4" y="1299.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="1310.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.4" y="1283.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="1294.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.4" y="1267.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.4" y="1278.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1183.4" y="1251.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="1262.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="1246.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="1230.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="1214.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.08%)</title><rect x="1183.4" y="1187.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1184.4" y="1315.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="1326.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1184.4" y="1299.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="1310.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1184.4" y="1283.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="1294.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1184.4" y="1267.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="1278.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1184.4" y="1251.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="1262.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1184.4" y="1235.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="1246.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1185.3" y="1683.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.3" y="1694.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1185.3" y="1667.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="1678.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.16%)</title><rect x="1186.2" y="1731.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="1742.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.16%)</title><rect x="1186.2" y="1715.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="1726.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.16%)</title><rect x="1186.2" y="1699.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="1710.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.16%)</title><rect x="1186.2" y="1683.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="1694.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.08%)</title><rect x="1186.2" y="1667.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1678.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.08%)</title><rect x="1186.2" y="1651.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="1662.0"></text>
</g>
<g>
<title>nmethod::is_unloaded() const (1 samples, 0.08%)</title><rect x="1187.2" y="1667.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="1678.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="1779.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1790.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1763.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="1774.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.08%)</title><rect x="1188.1" y="1747.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.1" y="1758.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="1747.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="1758.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="1731.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="1742.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="1715.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="1699.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.08%)</title><rect x="1189.1" y="1683.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="1694.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.08%)</title><rect x="1189.1" y="1667.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="1678.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1189.1" y="1651.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_humongous_region(HeapRegion*, FreeRegionList*, bool) (1 samples, 0.08%)</title><rect x="1189.1" y="1635.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="1646.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.08%)</title><rect x="1189.1" y="1619.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="1630.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear() (1 samples, 0.08%)</title><rect x="1189.1" y="1603.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="1614.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.08%)</title><rect x="1189.1" y="1587.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="1598.0"></text>
</g>
</g>
</svg>
