<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (131 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (38 samples, 29.01%)</title><rect x="10.0" y="1315.0" width="342.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (38 samples, 29.01%)</title><rect x="10.0" y="1299.0" width="342.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 2.29%)</title><rect x="10.0" y="1283.0" width="27.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0">c..</text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 2.29%)</title><rect x="10.0" y="1267.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/359850378.accept (3 samples, 2.29%)</title><rect x="10.0" y="1251.0" width="27.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1262.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 2.29%)</title><rect x="10.0" y="1235.0" width="27.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1246.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 2.29%)</title><rect x="10.0" y="1219.0" width="27.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 1.53%)</title><rect x="19.0" y="1203.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 16.79%)</title><rect x="37.0" y="1283.0" width="198.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="40.0" y="1294.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2068375625.accept (21 samples, 16.03%)</title><rect x="37.0" y="1267.0" width="189.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.0" y="1278.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (21 samples, 16.03%)</title><rect x="37.0" y="1251.0" width="189.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.0" y="1262.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 10.69%)</title><rect x="46.0" y="1235.0" width="126.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.0" y="1246.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 10.69%)</title><rect x="46.0" y="1219.0" width="126.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.0" y="1230.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 10.69%)</title><rect x="46.0" y="1203.0" width="126.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.0" y="1214.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 10.69%)</title><rect x="46.0" y="1187.0" width="126.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.0" y="1198.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 10.69%)</title><rect x="46.0" y="1171.0" width="126.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.0" y="1182.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 10.69%)</title><rect x="46.0" y="1155.0" width="126.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.0" y="1166.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 9.16%)</title><rect x="46.0" y="1139.0" width="108.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.0" y="1150.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.76%)</title><rect x="46.0" y="1123.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.76%)</title><rect x="46.0" y="1107.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.76%)</title><rect x="46.0" y="1091.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.76%)</title><rect x="46.0" y="1075.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 8.40%)</title><rect x="55.0" y="1123.0" width="99.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.0" y="1134.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 8.40%)</title><rect x="55.0" y="1107.0" width="99.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.0" y="1118.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 8.40%)</title><rect x="55.0" y="1091.0" width="99.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.0" y="1102.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 8.40%)</title><rect x="55.0" y="1075.0" width="99.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.0" y="1086.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (11 samples, 8.40%)</title><rect x="55.0" y="1059.0" width="99.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.0" y="1070.0">sun/misc/Uns..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (2 samples, 1.53%)</title><rect x="55.0" y="1043.0" width="18.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="58.0" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 6.11%)</title><rect x="73.1" y="1043.0" width="72.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="76.1" y="1054.0">Unsafe_U..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 4.58%)</title><rect x="73.1" y="1027.0" width="54.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="76.1" y="1038.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.53%)</title><rect x="127.1" y="1027.0" width="18.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="130.1" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.76%)</title><rect x="145.1" y="1043.0" width="9.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="148.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.53%)</title><rect x="154.1" y="1139.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.53%)</title><rect x="154.1" y="1123.0" width="18.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 1.53%)</title><rect x="154.1" y="1107.0" width="18.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.76%)</title><rect x="172.1" y="1235.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.76%)</title><rect x="172.1" y="1219.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 1.53%)</title><rect x="181.1" y="1235.0" width="18.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="184.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.53%)</title><rect x="181.1" y="1219.0" width="18.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="184.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.53%)</title><rect x="181.1" y="1203.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 2.29%)</title><rect x="199.2" y="1235.0" width="27.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.2" y="1246.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.29%)</title><rect x="199.2" y="1219.0" width="27.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.2" y="1230.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.53%)</title><rect x="199.2" y="1203.0" width="18.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.53%)</title><rect x="199.2" y="1187.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.2" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.53%)</title><rect x="199.2" y="1171.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.2" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.76%)</title><rect x="208.2" y="1155.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="211.2" y="1166.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.76%)</title><rect x="217.2" y="1203.0" width="9.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="220.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.76%)</title><rect x="226.2" y="1267.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.76%)</title><rect x="226.2" y="1251.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.76%)</title><rect x="226.2" y="1235.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.76%)</title><rect x="226.2" y="1219.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.76%)</title><rect x="226.2" y="1203.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.76%)</title><rect x="226.2" y="1187.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 9.92%)</title><rect x="235.2" y="1283.0" width="117.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.2" y="1294.0">org/apache/kaf..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 9.92%)</title><rect x="235.2" y="1267.0" width="117.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.2" y="1278.0">org/apache/kaf..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 5.34%)</title><rect x="235.2" y="1251.0" width="63.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.2" y="1262.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 5.34%)</title><rect x="235.2" y="1235.0" width="63.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.2" y="1246.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 5.34%)</title><rect x="235.2" y="1219.0" width="63.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.2" y="1230.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 4.58%)</title><rect x="235.2" y="1203.0" width="54.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.2" y="1214.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 4.58%)</title><rect x="235.2" y="1187.0" width="54.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.2" y="1198.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 2.29%)</title><rect x="235.2" y="1171.0" width="27.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.2" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 2.29%)</title><rect x="262.2" y="1171.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.2" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 2.29%)</title><rect x="262.2" y="1155.0" width="27.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.2" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 2.29%)</title><rect x="262.2" y="1139.0" width="27.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.2" y="1150.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 2.29%)</title><rect x="262.2" y="1123.0" width="27.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.2" y="1134.0">j..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (3 samples, 2.29%)</title><rect x="262.2" y="1107.0" width="27.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.2" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (3 samples, 2.29%)</title><rect x="262.2" y="1091.0" width="27.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.2" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (3 samples, 2.29%)</title><rect x="262.2" y="1075.0" width="27.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.2" y="1086.0">j..</text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 2.29%)</title><rect x="262.2" y="1059.0" width="27.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.2" y="1070.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.76%)</title><rect x="289.2" y="1203.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.76%)</title><rect x="289.2" y="1187.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.76%)</title><rect x="289.2" y="1171.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.76%)</title><rect x="289.2" y="1155.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.76%)</title><rect x="289.2" y="1139.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.53%)</title><rect x="298.2" y="1251.0" width="18.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.76%)</title><rect x="298.2" y="1235.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="301.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.76%)</title><rect x="298.2" y="1219.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.76%)</title><rect x="298.2" y="1203.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.76%)</title><rect x="298.2" y="1187.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.76%)</title><rect x="298.2" y="1171.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.76%)</title><rect x="298.2" y="1155.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.76%)</title><rect x="298.2" y="1139.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.76%)</title><rect x="298.2" y="1123.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.76%)</title><rect x="298.2" y="1107.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.76%)</title><rect x="307.3" y="1235.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.76%)</title><rect x="307.3" y="1219.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 2.29%)</title><rect x="316.3" y="1251.0" width="27.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.3" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.53%)</title><rect x="316.3" y="1235.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.76%)</title><rect x="316.3" y="1219.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.76%)</title><rect x="316.3" y="1203.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.76%)</title><rect x="316.3" y="1187.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Optional.filter (1 samples, 0.76%)</title><rect x="316.3" y="1171.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.3" y="1182.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$257/534381047.test (1 samples, 0.76%)</title><rect x="316.3" y="1155.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.3" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.76%)</title><rect x="316.3" y="1139.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="319.3" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.76%)</title><rect x="316.3" y="1123.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="319.3" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.76%)</title><rect x="316.3" y="1107.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="319.3" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.76%)</title><rect x="316.3" y="1091.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="319.3" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, Handle, bool, Thread*) (1 samples, 0.76%)</title><rect x="316.3" y="1075.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="319.3" y="1086.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.76%)</title><rect x="316.3" y="1059.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="319.3" y="1070.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.76%)</title><rect x="316.3" y="1043.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="319.3" y="1054.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.76%)</title><rect x="316.3" y="1027.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="319.3" y="1038.0"></text>
</g>
<g>
<title>AbstractInterpreter::can_be_compiled(methodHandle) (1 samples, 0.76%)</title><rect x="316.3" y="1011.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="319.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.76%)</title><rect x="325.3" y="1219.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.76%)</title><rect x="325.3" y="1203.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.76%)</title><rect x="325.3" y="1187.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.76%)</title><rect x="325.3" y="1171.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.76%)</title><rect x="334.3" y="1235.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="337.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.76%)</title><rect x="334.3" y="1219.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.76%)</title><rect x="334.3" y="1203.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.76%)</title><rect x="334.3" y="1187.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.76%)</title><rect x="334.3" y="1171.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.76%)</title><rect x="334.3" y="1155.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.76%)</title><rect x="334.3" y="1139.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.76%)</title><rect x="334.3" y="1123.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.76%)</title><rect x="334.3" y="1107.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.76%)</title><rect x="334.3" y="1091.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="337.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.76%)</title><rect x="334.3" y="1075.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="337.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.76%)</title><rect x="334.3" y="1059.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.76%)</title><rect x="334.3" y="1043.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.3" y="1054.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.76%)</title><rect x="334.3" y="1027.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.76%)</title><rect x="334.3" y="1011.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.76%)</title><rect x="334.3" y="995.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.76%)</title><rect x="334.3" y="979.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.3" y="990.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.76%)</title><rect x="334.3" y="963.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.3" y="974.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.76%)</title><rect x="334.3" y="947.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.76%)</title><rect x="343.3" y="1251.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.76%)</title><rect x="343.3" y="1235.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.76%)</title><rect x="343.3" y="1219.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/812950526.accept (1 samples, 0.76%)</title><rect x="343.3" y="1203.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (52 samples, 39.69%)</title><rect x="352.3" y="1315.0" width="468.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.3" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (52 samples, 39.69%)</title><rect x="352.3" y="1299.0" width="468.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.3" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (52 samples, 39.69%)</title><rect x="352.3" y="1283.0" width="468.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="355.3" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/559362890.run (36 samples, 27.48%)</title><rect x="361.3" y="1267.0" width="324.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.3" y="1278.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (36 samples, 27.48%)</title><rect x="361.3" y="1251.0" width="324.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.3" y="1262.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (36 samples, 27.48%)</title><rect x="361.3" y="1235.0" width="324.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.3" y="1246.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 27.48%)</title><rect x="361.3" y="1219.0" width="324.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="364.3" y="1230.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 6.11%)</title><rect x="370.3" y="1203.0" width="72.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="373.3" y="1214.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 6.11%)</title><rect x="370.3" y="1187.0" width="72.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.3" y="1198.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 6.11%)</title><rect x="370.3" y="1171.0" width="72.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.3" y="1182.0">com/line..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.76%)</title><rect x="370.3" y="1155.0" width="9.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="373.3" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.76%)</title><rect x="370.3" y="1139.0" width="9.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="373.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 4.58%)</title><rect x="379.3" y="1155.0" width="54.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.3" y="1166.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 4.58%)</title><rect x="379.3" y="1139.0" width="54.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="382.3" y="1150.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 4.58%)</title><rect x="379.3" y="1123.0" width="54.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.3" y="1134.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.76%)</title><rect x="379.3" y="1107.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="382.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.76%)</title><rect x="379.3" y="1091.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="382.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.76%)</title><rect x="379.3" y="1075.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.76%)</title><rect x="379.3" y="1059.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.76%)</title><rect x="379.3" y="1043.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.76%)</title><rect x="379.3" y="1027.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.76%)</title><rect x="379.3" y="1011.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (1 samples, 0.76%)</title><rect x="379.3" y="995.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 3.82%)</title><rect x="388.3" y="1107.0" width="45.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.3" y="1118.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.76%)</title><rect x="388.3" y="1091.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="391.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.76%)</title><rect x="388.3" y="1075.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.76%)</title><rect x="388.3" y="1059.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.76%)</title><rect x="397.3" y="1091.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.76%)</title><rect x="397.3" y="1075.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 2.29%)</title><rect x="406.3" y="1091.0" width="27.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.3" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.76%)</title><rect x="406.3" y="1075.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.76%)</title><rect x="406.3" y="1059.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.76%)</title><rect x="406.3" y="1043.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.76%)</title><rect x="406.3" y="1027.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.76%)</title><rect x="406.3" y="1011.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.76%)</title><rect x="406.3" y="995.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.53%)</title><rect x="415.3" y="1075.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.53%)</title><rect x="415.3" y="1059.0" width="18.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.53%)</title><rect x="415.3" y="1043.0" width="18.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="418.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.76%)</title><rect x="415.3" y="1027.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.76%)</title><rect x="415.3" y="1011.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.76%)</title><rect x="415.3" y="995.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.76%)</title><rect x="415.3" y="979.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.76%)</title><rect x="415.3" y="963.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.76%)</title><rect x="424.4" y="1027.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.76%)</title><rect x="424.4" y="1011.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.76%)</title><rect x="424.4" y="995.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.76%)</title><rect x="424.4" y="979.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.4" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.76%)</title><rect x="424.4" y="963.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.4" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.76%)</title><rect x="433.4" y="1155.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="436.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (27 samples, 20.61%)</title><rect x="442.4" y="1203.0" width="243.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.4" y="1214.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.53%)</title><rect x="451.4" y="1187.0" width="18.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="454.4" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.53%)</title><rect x="451.4" y="1171.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="454.4" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.53%)</title><rect x="451.4" y="1155.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="454.4" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.53%)</title><rect x="451.4" y="1139.0" width="18.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.53%)</title><rect x="451.4" y="1123.0" width="18.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="454.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.53%)</title><rect x="451.4" y="1107.0" width="18.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.76%)</title><rect x="460.4" y="1091.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="463.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 10.69%)</title><rect x="469.4" y="1187.0" width="126.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.4" y="1198.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 10.69%)</title><rect x="469.4" y="1171.0" width="126.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="472.4" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 3.82%)</title><rect x="478.4" y="1155.0" width="45.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.4" y="1166.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 3.05%)</title><rect x="478.4" y="1139.0" width="36.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="481.4" y="1150.0">jav..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.76%)</title><rect x="487.4" y="1123.0" width="9.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="490.4" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.76%)</title><rect x="487.4" y="1107.0" width="9.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="490.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.53%)</title><rect x="496.4" y="1123.0" width="18.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.4" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.76%)</title><rect x="514.4" y="1139.0" width="9.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="517.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.76%)</title><rect x="523.4" y="1155.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.4" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 5.34%)</title><rect x="532.4" y="1155.0" width="63.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.4" y="1166.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 5.34%)</title><rect x="532.4" y="1139.0" width="63.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="535.4" y="1150.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.53%)</title><rect x="532.4" y="1123.0" width="18.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.53%)</title><rect x="532.4" y="1107.0" width="18.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.53%)</title><rect x="532.4" y="1091.0" width="18.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="535.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.76%)</title><rect x="541.5" y="1075.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.76%)</title><rect x="541.5" y="1059.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 3.82%)</title><rect x="550.5" y="1123.0" width="45.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.5" y="1134.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 3.05%)</title><rect x="559.5" y="1107.0" width="36.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="562.5" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.76%)</title><rect x="559.5" y="1091.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.76%)</title><rect x="559.5" y="1075.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 2.29%)</title><rect x="568.5" y="1091.0" width="27.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="571.5" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.76%)</title><rect x="577.5" y="1075.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="580.5" y="1086.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.76%)</title><rect x="586.5" y="1075.0" width="9.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="589.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 0.76%)</title><rect x="595.5" y="1187.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="598.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.76%)</title><rect x="595.5" y="1171.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="598.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.76%)</title><rect x="595.5" y="1155.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="598.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.76%)</title><rect x="595.5" y="1139.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="598.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 2.29%)</title><rect x="604.5" y="1187.0" width="27.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.5" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (3 samples, 2.29%)</title><rect x="604.5" y="1171.0" width="27.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.5" y="1182.0">c..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.53%)</title><rect x="613.5" y="1155.0" width="18.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="616.5" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.76%)</title><rect x="622.5" y="1139.0" width="9.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="625.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/804800261.linkToTargetMethod (1 samples, 0.76%)</title><rect x="631.5" y="1187.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="634.5" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.76%)</title><rect x="631.5" y="1171.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="634.5" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1155.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="634.5" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1139.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="634.5" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1123.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="634.5" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1107.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="634.5" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1091.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="634.5" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokehandle(CallInfo&amp;, constantPoolHandle, int, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1075.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="634.5" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_handle_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1059.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="634.5" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::lookup_polymorphic_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Handle*, Handle*, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1043.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="634.5" y="1054.0"></text>
</g>
<g>
<title>MethodHandles::lookup_basic_type_signature(Symbol*, bool, Thread*) (1 samples, 0.76%)</title><rect x="631.5" y="1027.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="634.5" y="1038.0"></text>
</g>
<g>
<title>MethodHandles::is_basic_type_signature(Symbol*) (1 samples, 0.76%)</title><rect x="631.5" y="1011.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="634.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 3.82%)</title><rect x="640.5" y="1187.0" width="45.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.5" y="1198.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.76%)</title><rect x="640.5" y="1171.0" width="9.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="643.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.76%)</title><rect x="640.5" y="1155.0" width="9.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="643.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 3.05%)</title><rect x="649.5" y="1171.0" width="36.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.5" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 2.29%)</title><rect x="658.5" y="1155.0" width="27.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.5" y="1166.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/117537281.accept (3 samples, 2.29%)</title><rect x="658.5" y="1139.0" width="27.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.5" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (3 samples, 2.29%)</title><rect x="658.5" y="1123.0" width="27.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="661.5" y="1134.0">c..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 2.29%)</title><rect x="658.5" y="1107.0" width="27.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.5" y="1118.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 2.29%)</title><rect x="658.5" y="1091.0" width="27.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.5" y="1102.0">i..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 2.29%)</title><rect x="658.5" y="1075.0" width="27.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="661.5" y="1086.0">_..</text>
</g>
<g>
<title>[vdso] (3 samples, 2.29%)</title><rect x="658.5" y="1059.0" width="27.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="661.5" y="1070.0">[..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.53%)</title><rect x="685.6" y="1267.0" width="18.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/559362890.run (1 samples, 0.76%)</title><rect x="694.6" y="1251.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 9.92%)</title><rect x="703.6" y="1267.0" width="117.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="706.6" y="1278.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 9.92%)</title><rect x="703.6" y="1251.0" width="117.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="706.6" y="1262.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 8.40%)</title><rect x="712.6" y="1235.0" width="99.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="715.6" y="1246.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 8.40%)</title><rect x="712.6" y="1219.0" width="99.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="715.6" y="1230.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 8.40%)</title><rect x="712.6" y="1203.0" width="99.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="715.6" y="1214.0">sun/misc/Uns..</text>
</g>
<g>
<title>Unsafe_Park (11 samples, 8.40%)</title><rect x="712.6" y="1187.0" width="99.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="715.6" y="1198.0">Unsafe_Park</text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.76%)</title><rect x="712.6" y="1171.0" width="9.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="715.6" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 2.29%)</title><rect x="721.6" y="1171.0" width="27.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="724.6" y="1182.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 3.82%)</title><rect x="748.6" y="1171.0" width="45.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="751.6" y="1182.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 1.53%)</title><rect x="793.7" y="1171.0" width="18.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="796.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.76%)</title><rect x="811.7" y="1235.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.76%)</title><rect x="811.7" y="1219.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.76%)</title><rect x="811.7" y="1203.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.7" y="1214.0"></text>
</g>
<g>
<title>start_thread (41 samples, 31.30%)</title><rect x="820.7" y="1315.0" width="369.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="823.7" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (41 samples, 31.30%)</title><rect x="820.7" y="1299.0" width="369.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="823.7" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 9.16%)</title><rect x="820.7" y="1283.0" width="108.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="823.7" y="1294.0">GangWorker::l..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 9.16%)</title><rect x="820.7" y="1267.0" width="108.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="823.7" y="1278.0">G1ParTask::wo..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 8.40%)</title><rect x="820.7" y="1251.0" width="99.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="823.7" y="1262.0">G1ParEvacuat..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.29%)</title><rect x="829.7" y="1235.0" width="27.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.7" y="1246.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.76%)</title><rect x="847.7" y="1219.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="850.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.76%)</title><rect x="847.7" y="1203.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="850.7" y="1214.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.76%)</title><rect x="847.7" y="1187.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="850.7" y="1198.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (5 samples, 3.82%)</title><rect x="856.7" y="1235.0" width="45.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.7" y="1246.0">Gene..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.76%)</title><rect x="901.8" y="1235.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="904.8" y="1246.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.76%)</title><rect x="910.8" y="1235.0" width="9.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="913.8" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.76%)</title><rect x="919.8" y="1251.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.8" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.76%)</title><rect x="919.8" y="1235.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.8" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.76%)</title><rect x="919.8" y="1219.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.8" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.76%)</title><rect x="919.8" y="1203.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.8" y="1214.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.76%)</title><rect x="919.8" y="1187.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.8" y="1198.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.76%)</title><rect x="919.8" y="1171.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.8" y="1182.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.76%)</title><rect x="919.8" y="1155.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.8" y="1166.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.76%)</title><rect x="919.8" y="1139.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.8" y="1150.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.76%)</title><rect x="919.8" y="1123.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.8" y="1134.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.76%)</title><rect x="919.8" y="1107.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.8" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.76%)</title><rect x="919.8" y="1091.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.8" y="1102.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.76%)</title><rect x="919.8" y="1075.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="922.8" y="1086.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.76%)</title><rect x="919.8" y="1059.0" width="9.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="922.8" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (28 samples, 21.37%)</title><rect x="928.8" y="1283.0" width="252.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.8" y="1294.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (28 samples, 21.37%)</title><rect x="928.8" y="1267.0" width="252.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.8" y="1278.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (28 samples, 21.37%)</title><rect x="928.8" y="1251.0" width="252.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.8" y="1262.0">CompileBroker::invoke_compiler_on_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (25 samples, 19.08%)</title><rect x="928.8" y="1235.0" width="225.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.8" y="1246.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (25 samples, 19.08%)</title><rect x="928.8" y="1219.0" width="225.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.8" y="1230.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 7.63%)</title><rect x="928.8" y="1203.0" width="90.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.8" y="1214.0">Compile::C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.76%)</title><rect x="928.8" y="1187.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="931.8" y="1198.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.76%)</title><rect x="928.8" y="1171.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.8" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.76%)</title><rect x="928.8" y="1155.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.8" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.76%)</title><rect x="928.8" y="1139.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.53%)</title><rect x="937.8" y="1187.0" width="18.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.53%)</title><rect x="937.8" y="1171.0" width="18.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="940.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.76%)</title><rect x="937.8" y="1155.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.76%)</title><rect x="946.8" y="1155.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="949.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.76%)</title><rect x="946.8" y="1139.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="949.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 5.34%)</title><rect x="955.8" y="1187.0" width="63.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.8" y="1198.0">PhaseCh..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.76%)</title><rect x="955.8" y="1171.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="958.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.53%)</title><rect x="964.8" y="1171.0" width="18.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="967.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.76%)</title><rect x="973.8" y="1155.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.76%)</title><rect x="982.8" y="1171.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.76%)</title><rect x="991.8" y="1171.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.8" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.76%)</title><rect x="1000.8" y="1171.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1003.8" y="1182.0"></text>
</g>
<g>
<title>loadConINode::out_RegMask() const (1 samples, 0.76%)</title><rect x="1009.8" y="1171.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.8" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 5.34%)</title><rect x="1018.9" y="1203.0" width="63.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.9" y="1214.0">Compile..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.53%)</title><rect x="1018.9" y="1187.0" width="18.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.53%)</title><rect x="1018.9" y="1171.0" width="18.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1021.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::address_offset(Node*, PhaseTransform*) (1 samples, 0.76%)</title><rect x="1018.9" y="1155.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1021.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1155.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1139.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1123.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1107.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1091.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1075.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1059.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1043.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1027.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="1011.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="995.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="979.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="963.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="947.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="931.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="915.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="899.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="883.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="867.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="851.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="835.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="819.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="803.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="787.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="771.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="755.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="739.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="723.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1030.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="707.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="691.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="675.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="659.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="643.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="627.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="611.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="595.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="579.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="563.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="547.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="531.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="515.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1030.9" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="499.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.9" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="483.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.9" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="467.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.9" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="451.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.9" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="435.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.9" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="419.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.9" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="403.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.9" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="387.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.9" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="371.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.9" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="355.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.9" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="339.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.9" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="323.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.9" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="307.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.9" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="291.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1030.9" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="275.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.9" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="259.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.9" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="243.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.9" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="227.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.9" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="211.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.9" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="195.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.9" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="179.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.9" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="163.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.9" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="147.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.9" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="131.0" width="9.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.9" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="115.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.9" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="99.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.9" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="83.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.9" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="67.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.9" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.76%)</title><rect x="1027.9" y="51.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.9" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.76%)</title><rect x="1027.9" y="35.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.9" y="46.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 2.29%)</title><rect x="1036.9" y="1187.0" width="27.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1039.9" y="1198.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.76%)</title><rect x="1036.9" y="1171.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.76%)</title><rect x="1045.9" y="1171.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.9" y="1182.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.76%)</title><rect x="1045.9" y="1155.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.76%)</title><rect x="1054.9" y="1171.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.76%)</title><rect x="1054.9" y="1155.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.53%)</title><rect x="1063.9" y="1187.0" width="18.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.53%)</title><rect x="1063.9" y="1171.0" width="18.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.9" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.76%)</title><rect x="1063.9" y="1155.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.9" y="1166.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.76%)</title><rect x="1063.9" y="1139.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.9" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.76%)</title><rect x="1072.9" y="1155.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.9" y="1166.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.76%)</title><rect x="1072.9" y="1139.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 6.11%)</title><rect x="1081.9" y="1203.0" width="72.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.9" y="1214.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 6.11%)</title><rect x="1081.9" y="1187.0" width="72.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.9" y="1198.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 6.11%)</title><rect x="1081.9" y="1171.0" width="72.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.9" y="1182.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 5.34%)</title><rect x="1081.9" y="1155.0" width="63.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.9" y="1166.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 5.34%)</title><rect x="1081.9" y="1139.0" width="63.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.9" y="1150.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 4.58%)</title><rect x="1081.9" y="1123.0" width="54.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.9" y="1134.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.76%)</title><rect x="1081.9" y="1107.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.9" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.76%)</title><rect x="1081.9" y="1091.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.9" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.76%)</title><rect x="1081.9" y="1075.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.9" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.76%)</title><rect x="1081.9" y="1059.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.9" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.76%)</title><rect x="1081.9" y="1043.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.9" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.76%)</title><rect x="1081.9" y="1027.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.9" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.76%)</title><rect x="1081.9" y="1011.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.9" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.76%)</title><rect x="1081.9" y="995.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.9" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.76%)</title><rect x="1081.9" y="979.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.9" y="990.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.76%)</title><rect x="1081.9" y="963.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.9" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 3.05%)</title><rect x="1090.9" y="1107.0" width="36.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.9" y="1118.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 3.05%)</title><rect x="1090.9" y="1091.0" width="36.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.9" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 3.05%)</title><rect x="1090.9" y="1075.0" width="36.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.9" y="1086.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 3.05%)</title><rect x="1090.9" y="1059.0" width="36.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.9" y="1070.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 3.05%)</title><rect x="1090.9" y="1043.0" width="36.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.9" y="1054.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.29%)</title><rect x="1090.9" y="1027.0" width="27.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.9" y="1038.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.76%)</title><rect x="1090.9" y="1011.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.9" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.76%)</title><rect x="1090.9" y="995.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.9" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.76%)</title><rect x="1090.9" y="979.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.9" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.76%)</title><rect x="1090.9" y="963.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.9" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.76%)</title><rect x="1090.9" y="947.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.9" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.76%)</title><rect x="1090.9" y="931.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.9" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.76%)</title><rect x="1090.9" y="915.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.76%)</title><rect x="1090.9" y="899.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.76%)</title><rect x="1090.9" y="883.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.9" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.76%)</title><rect x="1090.9" y="867.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.76%)</title><rect x="1090.9" y="851.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.76%)</title><rect x="1090.9" y="835.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.9" y="846.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.76%)</title><rect x="1090.9" y="819.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.53%)</title><rect x="1099.9" y="1011.0" width="18.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.9" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.53%)</title><rect x="1099.9" y="995.0" width="18.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.53%)</title><rect x="1099.9" y="979.0" width="18.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.53%)</title><rect x="1099.9" y="963.0" width="18.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.53%)</title><rect x="1099.9" y="947.0" width="18.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.76%)</title><rect x="1099.9" y="931.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.76%)</title><rect x="1099.9" y="915.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.76%)</title><rect x="1099.9" y="899.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.76%)</title><rect x="1099.9" y="883.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.76%)</title><rect x="1099.9" y="867.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.76%)</title><rect x="1099.9" y="851.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.76%)</title><rect x="1099.9" y="835.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.9" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.76%)</title><rect x="1099.9" y="819.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.9" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.76%)</title><rect x="1099.9" y="803.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.76%)</title><rect x="1099.9" y="787.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.76%)</title><rect x="1099.9" y="771.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.76%)</title><rect x="1099.9" y="755.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.76%)</title><rect x="1099.9" y="739.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.76%)</title><rect x="1099.9" y="723.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.76%)</title><rect x="1099.9" y="707.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.76%)</title><rect x="1099.9" y="691.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.9" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.76%)</title><rect x="1099.9" y="675.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.9" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.76%)</title><rect x="1099.9" y="659.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.9" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.76%)</title><rect x="1099.9" y="643.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.9" y="654.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.76%)</title><rect x="1099.9" y="627.0" width="9.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.9" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.76%)</title><rect x="1099.9" y="611.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.9" y="622.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.76%)</title><rect x="1099.9" y="595.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.9" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.76%)</title><rect x="1099.9" y="579.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.9" y="590.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.76%)</title><rect x="1099.9" y="563.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.9" y="574.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.76%)</title><rect x="1099.9" y="547.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.76%)</title><rect x="1108.9" y="931.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.9" y="942.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.76%)</title><rect x="1108.9" y="915.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.9" y="926.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.76%)</title><rect x="1108.9" y="899.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.9" y="910.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.76%)</title><rect x="1108.9" y="883.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.9" y="894.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.76%)</title><rect x="1108.9" y="867.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.76%)</title><rect x="1117.9" y="1027.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.76%)</title><rect x="1117.9" y="1011.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.9" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.76%)</title><rect x="1117.9" y="995.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.9" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.76%)</title><rect x="1126.9" y="1107.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.9" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.76%)</title><rect x="1126.9" y="1091.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.9" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.76%)</title><rect x="1126.9" y="1075.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.76%)</title><rect x="1126.9" y="1059.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.76%)</title><rect x="1126.9" y="1043.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.76%)</title><rect x="1126.9" y="1027.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.76%)</title><rect x="1126.9" y="1011.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.9" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.76%)</title><rect x="1126.9" y="995.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.9" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.76%)</title><rect x="1126.9" y="979.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.76%)</title><rect x="1126.9" y="963.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.76%)</title><rect x="1126.9" y="947.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.76%)</title><rect x="1126.9" y="931.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.76%)</title><rect x="1126.9" y="915.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.76%)</title><rect x="1126.9" y="899.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.9" y="910.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.76%)</title><rect x="1126.9" y="883.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.9" y="894.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.76%)</title><rect x="1126.9" y="867.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="878.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.76%)</title><rect x="1126.9" y="851.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="862.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.76%)</title><rect x="1126.9" y="835.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.9" y="846.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.76%)</title><rect x="1126.9" y="819.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.9" y="830.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.76%)</title><rect x="1126.9" y="803.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.76%)</title><rect x="1136.0" y="1123.0" width="9.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.0" y="1134.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.76%)</title><rect x="1136.0" y="1107.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.0" y="1118.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.76%)</title><rect x="1136.0" y="1091.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.0" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.76%)</title><rect x="1136.0" y="1075.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.0" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.76%)</title><rect x="1136.0" y="1059.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.0" y="1070.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.76%)</title><rect x="1136.0" y="1043.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.0" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.76%)</title><rect x="1136.0" y="1027.0" width="9.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1139.0" y="1038.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.76%)</title><rect x="1145.0" y="1155.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="1166.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.76%)</title><rect x="1145.0" y="1139.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.0" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.53%)</title><rect x="1154.0" y="1235.0" width="18.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="1246.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.53%)</title><rect x="1154.0" y="1219.0" width="18.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.0" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.53%)</title><rect x="1154.0" y="1203.0" width="18.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.53%)</title><rect x="1154.0" y="1187.0" width="18.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.0" y="1198.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.76%)</title><rect x="1154.0" y="1171.0" width="9.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.0" y="1182.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.76%)</title><rect x="1154.0" y="1155.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.0" y="1166.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.76%)</title><rect x="1154.0" y="1139.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.0" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.76%)</title><rect x="1154.0" y="1123.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.0" y="1134.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.76%)</title><rect x="1154.0" y="1107.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.0" y="1118.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.76%)</title><rect x="1154.0" y="1091.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.0" y="1102.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.76%)</title><rect x="1154.0" y="1075.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.0" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.76%)</title><rect x="1154.0" y="1059.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.0" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.76%)</title><rect x="1163.0" y="1171.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.0" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.76%)</title><rect x="1163.0" y="1155.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.0" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::append_code_stub(CodeStub*) (1 samples, 0.76%)</title><rect x="1163.0" y="1139.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.0" y="1150.0"></text>
</g>
<g>
<title>free (1 samples, 0.76%)</title><rect x="1172.0" y="1235.0" width="9.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1175.0" y="1246.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.76%)</title><rect x="1181.0" y="1283.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.76%)</title><rect x="1181.0" y="1267.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="1278.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.76%)</title><rect x="1181.0" y="1251.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="1262.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.76%)</title><rect x="1181.0" y="1235.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1246.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.76%)</title><rect x="1181.0" y="1219.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.76%)</title><rect x="1181.0" y="1203.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="1214.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.76%)</title><rect x="1181.0" y="1187.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1198.0"></text>
</g>
</g>
</svg>
