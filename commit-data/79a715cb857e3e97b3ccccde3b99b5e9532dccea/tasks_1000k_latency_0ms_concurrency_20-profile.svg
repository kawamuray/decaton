<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,339 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (266 samples, 19.87%)</title><rect x="10.9" y="2035.0" width="234.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.9" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="10.9" y="2019.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.9" y="2003.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.9" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.9" y="1987.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.07%)</title><rect x="10.9" y="1971.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.9" y="1955.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.9" y="1939.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.9" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="10.9" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="10.9" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="10.9" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="10.9" y="1859.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="10.9" y="1843.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="10.9" y="1827.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="10.9" y="1811.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.07%)</title><rect x="10.9" y="1795.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.07%)</title><rect x="10.9" y="1779.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.sizeOf (1 samples, 0.07%)</title><rect x="10.9" y="1763.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1774.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.07%)</title><rect x="10.9" y="1747.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.9" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (265 samples, 19.79%)</title><rect x="11.8" y="2019.0" width="233.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.8" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.30%)</title><rect x="11.8" y="2003.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.8" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.22%)</title><rect x="11.8" y="1987.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (3 samples, 0.22%)</title><rect x="11.8" y="1971.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.8" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.22%)</title><rect x="11.8" y="1955.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.22%)</title><rect x="11.8" y="1939.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.8" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.22%)</title><rect x="11.8" y="1923.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.07%)</title><rect x="14.4" y="1987.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="15.3" y="2003.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="15.3" y="1987.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.3" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="15.3" y="1971.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="15.3" y="1955.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="15.3" y="1939.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="15.3" y="1923.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="15.3" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.3" y="1918.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="15.3" y="1891.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="18.3" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (190 samples, 14.19%)</title><rect x="16.2" y="2003.0" width="167.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.2" y="2014.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (186 samples, 13.89%)</title><rect x="16.2" y="1987.0" width="163.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1998.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (185 samples, 13.82%)</title><rect x="17.1" y="1971.0" width="163.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="1982.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (154 samples, 11.50%)</title><rect x="17.1" y="1955.0" width="135.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.1" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (154 samples, 11.50%)</title><rect x="17.1" y="1939.0" width="135.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.1" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (154 samples, 11.50%)</title><rect x="17.1" y="1923.0" width="135.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 11.50%)</title><rect x="17.1" y="1907.0" width="135.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 11.50%)</title><rect x="17.1" y="1891.0" width="135.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.1" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 11.50%)</title><rect x="17.1" y="1875.0" width="135.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.1" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 7.77%)</title><rect x="17.1" y="1859.0" width="91.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.1" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.05%)</title><rect x="17.1" y="1843.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.05%)</title><rect x="17.1" y="1827.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (10 samples, 0.75%)</title><rect x="20.6" y="1811.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (10 samples, 0.75%)</title><rect x="20.6" y="1795.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.82%)</title><rect x="29.4" y="1843.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.82%)</title><rect x="29.4" y="1827.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.22%)</title><rect x="32.0" y="1811.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.0" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.22%)</title><rect x="32.0" y="1795.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="35.0" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.37%)</title><rect x="34.7" y="1811.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 5.90%)</title><rect x="39.1" y="1843.0" width="69.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.1" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 5.90%)</title><rect x="39.1" y="1827.0" width="69.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.1" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 5.68%)</title><rect x="40.0" y="1811.0" width="66.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.0" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 5.68%)</title><rect x="40.0" y="1795.0" width="66.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.0" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 5.60%)</title><rect x="40.8" y="1779.0" width="66.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.8" y="1790.0">sun/mis..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="43.5" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="46.5" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 4.78%)</title><rect x="44.4" y="1763.0" width="56.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="47.4" y="1774.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="46.1" y="1747.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="49.1" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.15%)</title><rect x="47.0" y="1747.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="50.0" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="48.8" y="1747.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="51.8" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 3.36%)</title><rect x="49.7" y="1747.0" width="39.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="52.7" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="89.3" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="92.3" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.90%)</title><rect x="90.2" y="1747.0" width="10.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="93.2" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.30%)</title><rect x="100.8" y="1763.0" width="3.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="103.8" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.22%)</title><rect x="104.3" y="1763.0" width="2.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="107.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="106.9" y="1811.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (37 samples, 2.76%)</title><rect x="108.7" y="1859.0" width="32.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.7" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (37 samples, 2.76%)</title><rect x="108.7" y="1843.0" width="32.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.7" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (37 samples, 2.76%)</title><rect x="108.7" y="1827.0" width="32.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.7" y="1838.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.30%)</title><rect x="137.8" y="1811.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="140.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.67%)</title><rect x="141.3" y="1859.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (9 samples, 0.67%)</title><rect x="141.3" y="1843.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.67%)</title><rect x="141.3" y="1827.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="145.7" y="1811.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.7" y="1822.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="146.6" y="1811.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="149.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.30%)</title><rect x="149.2" y="1859.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.30%)</title><rect x="149.2" y="1843.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.30%)</title><rect x="149.2" y="1827.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.22%)</title><rect x="150.1" y="1811.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.30%)</title><rect x="152.8" y="1955.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.30%)</title><rect x="152.8" y="1939.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.37%)</title><rect x="156.3" y="1955.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="159.3" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.37%)</title><rect x="156.3" y="1939.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.37%)</title><rect x="156.3" y="1923.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="159.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (22 samples, 1.64%)</title><rect x="160.7" y="1955.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.7" y="1966.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="162.5" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.5" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (17 samples, 1.27%)</title><rect x="163.3" y="1939.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.30%)</title><rect x="172.2" y="1923.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.2" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="172.2" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.2" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="172.2" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="172.2" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.22%)</title><rect x="173.0" y="1907.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.0" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="175.7" y="1923.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="178.7" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="176.6" y="1923.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="179.6" y="1934.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="178.3" y="1939.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="181.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="178.3" y="1923.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.3" y="1934.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="178.3" y="1907.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.3" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="178.3" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="181.3" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="178.3" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="181.3" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="178.3" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="181.3" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="178.3" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="181.3" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="178.3" y="1827.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="181.3" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="178.3" y="1811.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="181.3" y="1822.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="178.3" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="181.3" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="178.3" y="1779.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="181.3" y="1790.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="178.3" y="1763.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="181.3" y="1774.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="178.3" y="1747.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="181.3" y="1758.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.07%)</title><rect x="178.3" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="181.3" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="179.2" y="1939.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="182.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.30%)</title><rect x="180.1" y="1987.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.30%)</title><rect x="180.1" y="1971.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.30%)</title><rect x="180.1" y="1955.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.30%)</title><rect x="180.1" y="1939.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.1" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="180.1" y="1923.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.1" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (3 samples, 0.22%)</title><rect x="181.0" y="1923.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.22%)</title><rect x="181.0" y="1907.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="184.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (70 samples, 5.23%)</title><rect x="183.6" y="2003.0" width="61.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.6" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (70 samples, 5.23%)</title><rect x="183.6" y="1987.0" width="61.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.6" y="1998.0">org/ap..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.07%)</title><rect x="183.6" y="1971.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (50 samples, 3.73%)</title><rect x="184.5" y="1971.0" width="44.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.5" y="1982.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="185.4" y="1955.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="185.4" y="1939.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.4" y="1950.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="185.4" y="1923.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="188.4" y="1934.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.07%)</title><rect x="185.4" y="1907.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="188.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="186.3" y="1955.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="186.3" y="1939.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1817086732.shouldBlock (1 samples, 0.07%)</title><rect x="186.3" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.07%)</title><rect x="186.3" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.07%)</title><rect x="186.3" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.07%)</title><rect x="186.3" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="186.3" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="186.3" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="186.3" y="1827.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="186.3" y="1811.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="186.3" y="1795.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.3" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="186.3" y="1779.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="186.3" y="1763.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.3" y="1774.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.07%)</title><rect x="186.3" y="1747.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (47 samples, 3.51%)</title><rect x="187.1" y="1955.0" width="41.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.1" y="1966.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (45 samples, 3.36%)</title><rect x="187.1" y="1939.0" width="39.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.1" y="1950.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (37 samples, 2.76%)</title><rect x="187.1" y="1923.0" width="32.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.1" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (37 samples, 2.76%)</title><rect x="187.1" y="1907.0" width="32.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="190.1" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (24 samples, 1.79%)</title><rect x="188.0" y="1891.0" width="21.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.0" y="1902.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (11 samples, 0.82%)</title><rect x="188.0" y="1875.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (11 samples, 0.82%)</title><rect x="188.0" y="1859.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (11 samples, 0.82%)</title><rect x="188.0" y="1843.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (11 samples, 0.82%)</title><rect x="188.0" y="1827.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (11 samples, 0.82%)</title><rect x="188.0" y="1811.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (11 samples, 0.82%)</title><rect x="188.0" y="1795.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="191.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (11 samples, 0.82%)</title><rect x="188.0" y="1779.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (13 samples, 0.97%)</title><rect x="197.7" y="1875.0" width="11.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (13 samples, 0.97%)</title><rect x="197.7" y="1859.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (13 samples, 0.97%)</title><rect x="197.7" y="1843.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.90%)</title><rect x="209.2" y="1891.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.82%)</title><rect x="210.0" y="1875.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.52%)</title><rect x="210.0" y="1859.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.52%)</title><rect x="210.0" y="1843.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.30%)</title><rect x="216.2" y="1859.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.2" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.30%)</title><rect x="216.2" y="1843.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.30%)</title><rect x="219.7" y="1923.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.30%)</title><rect x="219.7" y="1907.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="219.7" y="1891.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.7" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.7" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.7" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="220.6" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="220.6" y="1875.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="221.5" y="1891.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="221.5" y="1875.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="221.5" y="1859.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="224.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="221.5" y="1843.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.07%)</title><rect x="221.5" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="222.4" y="1843.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.07%)</title><rect x="222.4" y="1827.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.07%)</title><rect x="222.4" y="1811.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.07%)</title><rect x="223.3" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="224.1" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.07%)</title><rect x="225.0" y="1923.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="225.9" y="1923.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (2 samples, 0.15%)</title><rect x="226.8" y="1939.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (2 samples, 0.15%)</title><rect x="226.8" y="1923.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (2 samples, 0.15%)</title><rect x="226.8" y="1907.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.8" y="1918.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.15%)</title><rect x="226.8" y="1891.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="226.8" y="1875.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.90%)</title><rect x="228.6" y="1971.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.75%)</title><rect x="228.6" y="1955.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.67%)</title><rect x="228.6" y="1939.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="228.6" y="1923.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="228.6" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.6" y="1918.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="228.6" y="1891.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="231.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (1 samples, 0.07%)</title><rect x="229.4" y="1907.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="229.4" y="1891.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="229.4" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.07%)</title><rect x="229.4" y="1859.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/1687443995.apply (1 samples, 0.07%)</title><rect x="229.4" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.07%)</title><rect x="229.4" y="1827.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.4" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.07%)</title><rect x="230.3" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="231.2" y="1923.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="231.2" y="1907.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="231.2" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="232.1" y="1923.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="232.1" y="1907.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.07%)</title><rect x="232.1" y="1891.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="233.0" y="1923.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="233.0" y="1907.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.0" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.15%)</title><rect x="233.0" y="1891.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.0" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.15%)</title><rect x="233.0" y="1875.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.15%)</title><rect x="233.0" y="1859.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.15%)</title><rect x="234.7" y="1923.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="234.7" y="1907.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="234.7" y="1891.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="234.7" y="1875.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="234.7" y="1859.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="234.7" y="1843.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="234.7" y="1827.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="234.7" y="1811.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="234.7" y="1795.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.7" y="1806.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.07%)</title><rect x="234.7" y="1779.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.7" y="1790.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="235.6" y="1811.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.6" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="235.6" y="1795.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="235.6" y="1779.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/34029253.apply (1 samples, 0.07%)</title><rect x="235.6" y="1763.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="236.5" y="1939.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.5" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="236.5" y="1923.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="236.5" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="236.5" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="236.5" y="1875.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="236.5" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="236.5" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="236.5" y="1827.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.5" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="236.5" y="1811.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.07%)</title><rect x="236.5" y="1795.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.07%)</title><rect x="236.5" y="1779.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.15%)</title><rect x="237.4" y="1955.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.15%)</title><rect x="237.4" y="1939.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.15%)</title><rect x="237.4" y="1923.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.07%)</title><rect x="239.1" y="1971.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="239.1" y="1955.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="239.1" y="1939.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="239.1" y="1923.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="239.1" y="1907.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="239.1" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="239.1" y="1875.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="239.1" y="1859.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="242.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="239.1" y="1843.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.1" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="239.1" y="1827.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.1" y="1838.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="239.1" y="1811.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="242.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.30%)</title><rect x="240.0" y="1971.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.30%)</title><rect x="240.0" y="1955.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.0" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.22%)</title><rect x="240.0" y="1939.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="240.0" y="1923.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/981530120.accept (2 samples, 0.15%)</title><rect x="240.9" y="1923.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.15%)</title><rect x="240.9" y="1907.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.15%)</title><rect x="240.9" y="1891.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.07%)</title><rect x="240.9" y="1875.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/1687443995.apply (1 samples, 0.07%)</title><rect x="240.9" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.07%)</title><rect x="240.9" y="1843.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="241.8" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.07%)</title><rect x="241.8" y="1859.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="241.8" y="1843.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.8" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="241.8" y="1827.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.07%)</title><rect x="242.7" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.07%)</title><rect x="242.7" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="242.7" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="242.7" y="1891.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.7" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="242.7" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="242.7" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="242.7" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.15%)</title><rect x="243.5" y="1971.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="243.5" y="1955.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="243.5" y="1939.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="243.5" y="1923.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="243.5" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="243.5" y="1891.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="244.4" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/Thread.run (706 samples, 52.73%)</title><rect x="245.3" y="2035.0" width="622.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (706 samples, 52.73%)</title><rect x="245.3" y="2019.0" width="622.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (706 samples, 52.73%)</title><rect x="245.3" y="2003.0" width="622.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (482 samples, 36.00%)</title><rect x="248.8" y="1987.0" width="424.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.8" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50 (482 samples, 36.00%)</title><rect x="248.8" y="1971.0" width="424.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.8" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (482 samples, 36.00%)</title><rect x="248.8" y="1955.0" width="424.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.8" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (476 samples, 35.55%)</title><rect x="248.8" y="1939.0" width="419.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.8" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sc..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="255.0" y="1923.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="258.0" y="1934.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.15%)</title><rect x="255.9" y="1923.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (153 samples, 11.43%)</title><rect x="257.6" y="1923.0" width="134.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.6" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (153 samples, 11.43%)</title><rect x="257.6" y="1907.0" width="134.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.6" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (153 samples, 11.43%)</title><rect x="257.6" y="1891.0" width="134.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.6" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 11.43%)</title><rect x="257.6" y="1875.0" width="134.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.6" y="1886.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 11.43%)</title><rect x="257.6" y="1859.0" width="134.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="1870.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (153 samples, 11.43%)</title><rect x="257.6" y="1843.0" width="134.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.6" y="1854.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 3.14%)</title><rect x="257.6" y="1827.0" width="37.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.6" y="1838.0">com..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="270.0" y="1811.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="273.0" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="270.9" y="1811.0" width="2.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="273.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.52%)</title><rect x="273.5" y="1811.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.45%)</title><rect x="274.4" y="1795.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.45%)</title><rect x="274.4" y="1779.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.45%)</title><rect x="274.4" y="1763.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.4" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.37%)</title><rect x="274.4" y="1747.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.4" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.37%)</title><rect x="274.4" y="1731.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.4" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.07%)</title><rect x="278.8" y="1747.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="278.8" y="1731.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.8" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="278.8" y="1715.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.8" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.8" y="1699.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.8" y="1683.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.8" y="1694.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.8" y="1667.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.8" y="1678.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.8" y="1651.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.8" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="278.8" y="1635.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="281.8" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (17 samples, 1.27%)</title><rect x="279.7" y="1811.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (16 samples, 1.19%)</title><rect x="280.5" y="1795.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.30%)</title><rect x="286.7" y="1779.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.30%)</title><rect x="286.7" y="1763.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.30%)</title><rect x="290.2" y="1779.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.30%)</title><rect x="290.2" y="1763.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.15%)</title><rect x="290.2" y="1747.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="290.2" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="293.2" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="291.1" y="1731.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="294.1" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="291.1" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="294.1" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="291.1" y="1699.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="294.1" y="1710.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="291.1" y="1683.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="294.1" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="291.1" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="294.1" y="1678.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.07%)</title><rect x="291.1" y="1651.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="294.1" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.15%)</title><rect x="292.0" y="1747.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.07%)</title><rect x="293.8" y="1779.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="293.8" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="296.8" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="293.8" y="1747.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="296.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="293.8" y="1731.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="296.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (100 samples, 7.47%)</title><rect x="294.6" y="1827.0" width="88.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.6" y="1838.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.30%)</title><rect x="299.1" y="1811.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.15%)</title><rect x="302.6" y="1811.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="305.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.07%)</title><rect x="304.3" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="304.3" y="1795.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.67%)</title><rect x="305.2" y="1811.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.67%)</title><rect x="305.2" y="1795.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.22%)</title><rect x="307.9" y="1779.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.22%)</title><rect x="307.9" y="1763.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.15%)</title><rect x="308.7" y="1747.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.22%)</title><rect x="310.5" y="1779.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.37%)</title><rect x="313.2" y="1811.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="316.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.15%)</title><rect x="315.8" y="1795.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 5.45%)</title><rect x="317.6" y="1811.0" width="64.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="320.6" y="1822.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.34%)</title><rect x="321.1" y="1795.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.15%)</title><rect x="322.8" y="1779.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="325.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.15%)</title><rect x="322.8" y="1763.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.15%)</title><rect x="322.8" y="1747.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.60%)</title><rect x="324.6" y="1779.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.30%)</title><rect x="331.7" y="1779.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.30%)</title><rect x="331.7" y="1763.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.15%)</title><rect x="335.2" y="1779.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="336.9" y="1795.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="339.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 3.73%)</title><rect x="337.8" y="1795.0" width="44.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.8" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 3.73%)</title><rect x="337.8" y="1779.0" width="44.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="340.8" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 3.58%)</title><rect x="339.6" y="1763.0" width="42.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.6" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.64%)</title><rect x="345.8" y="1747.0" width="19.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.75%)</title><rect x="350.2" y="1731.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.75%)</title><rect x="350.2" y="1715.0" width="8.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.75%)</title><rect x="350.2" y="1699.0" width="8.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.60%)</title><rect x="351.9" y="1683.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.52%)</title><rect x="352.8" y="1667.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="358.1" y="1651.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.1" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.07%)</title><rect x="358.1" y="1635.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.30%)</title><rect x="359.0" y="1731.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="362.5" y="1731.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="362.5" y="1715.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="363.4" y="1731.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.22%)</title><rect x="365.1" y="1747.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.22%)</title><rect x="365.1" y="1731.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.22%)</title><rect x="365.1" y="1715.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.22%)</title><rect x="365.1" y="1699.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.22%)</title><rect x="365.1" y="1683.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.67%)</title><rect x="367.8" y="1747.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.67%)</title><rect x="367.8" y="1731.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.67%)</title><rect x="367.8" y="1715.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.67%)</title><rect x="367.8" y="1699.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.67%)</title><rect x="367.8" y="1683.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.8" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.30%)</title><rect x="371.3" y="1667.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.3" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (2 samples, 0.15%)</title><rect x="373.1" y="1651.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.1" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (1 samples, 0.07%)</title><rect x="374.8" y="1667.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.52%)</title><rect x="375.7" y="1747.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.7" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.52%)</title><rect x="375.7" y="1731.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="378.7" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.52%)</title><rect x="375.7" y="1715.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.7" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="381.0" y="1699.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="384.0" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="381.0" y="1683.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.0" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="381.0" y="1667.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="384.0" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="381.0" y="1651.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="384.0" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="381.0" y="1635.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.0" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.07%)</title><rect x="381.9" y="1811.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="384.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.82%)</title><rect x="382.8" y="1827.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.8" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.07%)</title><rect x="382.8" y="1811.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.75%)</title><rect x="383.7" y="1811.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="386.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.75%)</title><rect x="383.7" y="1795.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.75%)</title><rect x="383.7" y="1779.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.75%)</title><rect x="383.7" y="1763.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (297 samples, 22.18%)</title><rect x="392.5" y="1923.0" width="261.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="395.5" y="1934.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (61 samples, 4.56%)</title><rect x="395.1" y="1907.0" width="53.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="398.1" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="395.1" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.1" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (60 samples, 4.48%)</title><rect x="396.0" y="1891.0" width="52.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.0" y="1902.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (57 samples, 4.26%)</title><rect x="398.6" y="1875.0" width="50.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.6" y="1886.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.60%)</title><rect x="399.5" y="1859.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="402.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.60%)</title><rect x="399.5" y="1843.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.60%)</title><rect x="399.5" y="1827.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.60%)</title><rect x="399.5" y="1811.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.22%)</title><rect x="403.9" y="1795.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.9" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.15%)</title><rect x="404.8" y="1779.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.8" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (48 samples, 3.58%)</title><rect x="406.6" y="1859.0" width="42.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.6" y="1870.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (39 samples, 2.91%)</title><rect x="414.5" y="1843.0" width="34.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.5" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.67%)</title><rect x="440.9" y="1827.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="443.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.45%)</title><rect x="448.9" y="1907.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="451.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.45%)</title><rect x="448.9" y="1891.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.45%)</title><rect x="448.9" y="1875.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="451.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (150 samples, 11.20%)</title><rect x="454.2" y="1907.0" width="132.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.2" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (150 samples, 11.20%)</title><rect x="454.2" y="1891.0" width="132.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.2" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="461.2" y="1875.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="464.2" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="461.2" y="1859.0" width="2.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="464.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (48 samples, 3.58%)</title><rect x="463.8" y="1875.0" width="42.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.8" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="468.3" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="468.3" y="1843.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="471.3" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="468.3" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="471.3" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="468.3" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="471.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="468.3" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="471.3" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="468.3" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="471.3" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="468.3" y="1763.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="471.3" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="468.3" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="471.3" y="1758.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="468.3" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="471.3" y="1742.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 2.69%)</title><rect x="469.1" y="1859.0" width="31.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="472.1" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (36 samples, 2.69%)</title><rect x="469.1" y="1843.0" width="31.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.1" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (25 samples, 1.87%)</title><rect x="473.5" y="1827.0" width="22.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.5" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (25 samples, 1.87%)</title><rect x="473.5" y="1811.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.5" y="1822.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 1.87%)</title><rect x="473.5" y="1795.0" width="22.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.5" y="1806.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.67%)</title><rect x="481.5" y="1779.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="484.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.15%)</title><rect x="482.4" y="1763.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="485.4" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.15%)</title><rect x="482.4" y="1747.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="485.4" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.15%)</title><rect x="482.4" y="1731.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="485.4" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.15%)</title><rect x="482.4" y="1715.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.4" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.45%)</title><rect x="484.1" y="1763.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="487.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.22%)</title><rect x="486.8" y="1747.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="489.8" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="487.6" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.6" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="488.5" y="1731.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="491.5" y="1742.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="489.4" y="1779.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="492.4" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="489.4" y="1763.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="492.4" y="1774.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.45%)</title><rect x="490.3" y="1779.0" width="5.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="493.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.22%)</title><rect x="495.6" y="1827.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.6" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="498.2" y="1827.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="501.2" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="499.1" y="1827.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="502.1" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.22%)</title><rect x="500.9" y="1859.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="503.9" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="503.5" y="1859.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="506.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="506.1" y="1875.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="509.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.60%)</title><rect x="507.0" y="1875.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="507.0" y="1859.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.0" y="1870.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.07%)</title><rect x="507.0" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.52%)</title><rect x="507.9" y="1859.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.52%)</title><rect x="507.9" y="1843.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.9" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.12%)</title><rect x="514.1" y="1875.0" width="72.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.1" y="1886.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 5.97%)</title><rect x="515.8" y="1859.0" width="70.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="518.8" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.15%)</title><rect x="515.8" y="1843.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="518.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.15%)</title><rect x="515.8" y="1827.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.15%)</title><rect x="515.8" y="1811.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="518.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.15%)</title><rect x="515.8" y="1795.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.8" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="516.7" y="1779.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.7" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="516.7" y="1763.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.7" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (78 samples, 5.83%)</title><rect x="517.6" y="1843.0" width="68.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.6" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (71 samples, 5.30%)</title><rect x="523.8" y="1827.0" width="62.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="526.8" y="1838.0">java/u..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="554.6" y="1811.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="554.6" y="1795.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="557.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 2.61%)</title><rect x="555.5" y="1811.0" width="30.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="558.5" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.30%)</title><rect x="570.5" y="1795.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.82%)</title><rect x="574.0" y="1795.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.0" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="582.8" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="585.8" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="582.8" y="1763.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="585.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="582.8" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="585.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="582.8" y="1731.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="585.8" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="582.8" y="1715.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="585.8" y="1726.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="583.7" y="1795.0" width="2.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="586.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 3.73%)</title><rect x="586.3" y="1907.0" width="44.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="589.3" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (50 samples, 3.73%)</title><rect x="586.3" y="1891.0" width="44.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="589.3" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (24 samples, 1.79%)</title><rect x="587.2" y="1875.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="590.2" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (24 samples, 1.79%)</title><rect x="587.2" y="1859.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="590.2" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.12%)</title><rect x="592.5" y="1843.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="595.5" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="594.3" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="597.3" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="594.3" y="1811.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="597.3" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="594.3" y="1795.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="597.3" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="594.3" y="1779.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.3" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.52%)</title><rect x="595.2" y="1827.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="598.2" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="596.0" y="1811.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="599.0" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.37%)</title><rect x="596.9" y="1811.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="599.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.37%)</title><rect x="596.9" y="1795.0" width="4.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="599.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.37%)</title><rect x="601.3" y="1827.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="604.8" y="1811.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="604.8" y="1795.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.22%)</title><rect x="605.7" y="1843.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="605.7" y="1827.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.22%)</title><rect x="605.7" y="1811.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="605.7" y="1795.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 0.22%)</title><rect x="605.7" y="1779.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="608.7" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.52%)</title><rect x="608.4" y="1875.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.52%)</title><rect x="608.4" y="1859.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.37%)</title><rect x="614.5" y="1875.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="617.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.37%)</title><rect x="614.5" y="1859.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1885191523.get$Lambda (5 samples, 0.37%)</title><rect x="614.5" y="1843.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1885191523.&lt;init&gt; (5 samples, 0.37%)</title><rect x="614.5" y="1827.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.45%)</title><rect x="618.9" y="1875.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.45%)</title><rect x="618.9" y="1859.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.9" y="1870.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.30%)</title><rect x="618.9" y="1843.0" width="3.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="621.9" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.15%)</title><rect x="622.5" y="1843.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.15%)</title><rect x="624.2" y="1875.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.15%)</title><rect x="624.2" y="1859.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.2" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.07%)</title><rect x="625.1" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="628.1" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.07%)</title><rect x="625.1" y="1827.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="628.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.37%)</title><rect x="626.0" y="1875.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="629.5" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1707867725.linkToTargetMethod (1 samples, 0.07%)</title><rect x="630.4" y="1907.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="633.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.07%)</title><rect x="630.4" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="633.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1550909469.get$Lambda (1 samples, 0.07%)</title><rect x="630.4" y="1875.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="630.4" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="633.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="630.4" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="633.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="630.4" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="633.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 1.94%)</title><rect x="631.3" y="1907.0" width="22.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.3" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (26 samples, 1.94%)</title><rect x="631.3" y="1891.0" width="22.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.3" y="1902.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.45%)</title><rect x="639.2" y="1875.0" width="5.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="642.2" y="1886.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.45%)</title><rect x="639.2" y="1859.0" width="5.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="642.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.82%)</title><rect x="644.5" y="1875.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1550909469.accept (10 samples, 0.75%)</title><rect x="644.5" y="1859.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="647.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="645.4" y="1843.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="648.4" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="645.4" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="648.4" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="645.4" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="648.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.60%)</title><rect x="646.3" y="1843.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.60%)</title><rect x="646.3" y="1827.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="649.3" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.60%)</title><rect x="646.3" y="1811.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.3" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.60%)</title><rect x="646.3" y="1795.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.3" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="650.7" y="1779.0" width="2.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="653.7" y="1790.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="650.7" y="1763.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="653.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/306762971.accept (1 samples, 0.07%)</title><rect x="653.3" y="1859.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="656.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (1 samples, 0.07%)</title><rect x="653.3" y="1843.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (1 samples, 0.07%)</title><rect x="653.3" y="1827.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="656.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (1 samples, 0.07%)</title><rect x="653.3" y="1811.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="656.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.07%)</title><rect x="653.3" y="1795.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.3" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.07%)</title><rect x="653.3" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="656.3" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.07%)</title><rect x="653.3" y="1763.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="656.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.07%)</title><rect x="654.2" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.2" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="654.2" y="1907.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/306762971.get$Lambda (1 samples, 0.07%)</title><rect x="654.2" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.2" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="654.2" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="657.2" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="654.2" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="657.2" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="654.2" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="657.2" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="654.2" y="1827.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="657.2" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="654.2" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="657.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.22%)</title><rect x="655.1" y="1923.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.22%)</title><rect x="655.1" y="1907.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="658.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="655.1" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="658.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.15%)</title><rect x="656.0" y="1891.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/306762971.accept (2 samples, 0.15%)</title><rect x="656.0" y="1875.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (2 samples, 0.15%)</title><rect x="656.0" y="1859.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (2 samples, 0.15%)</title><rect x="656.0" y="1843.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (2 samples, 0.15%)</title><rect x="656.0" y="1827.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.15%)</title><rect x="656.0" y="1811.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="659.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.15%)</title><rect x="656.0" y="1795.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="659.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.15%)</title><rect x="656.0" y="1779.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="659.0" y="1790.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="657.7" y="1923.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.7" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="657.7" y="1907.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.7" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="657.7" y="1891.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.7" y="1902.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="657.7" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="657.7" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="657.7" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="657.7" y="1827.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.7" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.82%)</title><rect x="658.6" y="1923.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.6" y="1934.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.75%)</title><rect x="659.5" y="1907.0" width="8.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="662.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="668.3" y="1939.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="671.3" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="668.3" y="1923.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="671.3" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="668.3" y="1907.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.3" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="668.3" y="1891.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="671.3" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="668.3" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="671.3" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="668.3" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="671.3" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="668.3" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.3" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="668.3" y="1827.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="671.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.37%)</title><rect x="669.2" y="1939.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="672.2" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="670.9" y="1923.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="673.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="671.8" y="1907.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="674.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.45%)</title><rect x="673.6" y="1987.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.45%)</title><rect x="673.6" y="1971.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.6" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.45%)</title><rect x="673.6" y="1955.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.45%)</title><rect x="673.6" y="1939.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="676.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (3 samples, 0.22%)</title><rect x="676.2" y="1923.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="679.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 15.98%)</title><rect x="678.9" y="1987.0" width="188.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.9" y="1998.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (214 samples, 15.98%)</title><rect x="678.9" y="1971.0" width="188.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.9" y="1982.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (175 samples, 13.07%)</title><rect x="697.4" y="1955.0" width="154.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.4" y="1966.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (20 samples, 1.49%)</title><rect x="704.4" y="1939.0" width="17.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="707.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 1.49%)</title><rect x="704.4" y="1923.0" width="17.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="707.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 1.49%)</title><rect x="704.4" y="1907.0" width="17.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="707.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 1.49%)</title><rect x="704.4" y="1891.0" width="17.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="707.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (146 samples, 10.90%)</title><rect x="722.1" y="1939.0" width="128.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="725.1" y="1950.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (146 samples, 10.90%)</title><rect x="722.1" y="1923.0" width="128.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.1" y="1934.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="730.9" y="1907.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.9" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="731.7" y="1907.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="734.7" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (130 samples, 9.71%)</title><rect x="732.6" y="1907.0" width="114.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="735.6" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="734.4" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="737.4" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="735.3" y="1891.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="738.3" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.15%)</title><rect x="736.2" y="1891.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="739.2" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.79%)</title><rect x="737.9" y="1891.0" width="21.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="740.9" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.75%)</title><rect x="739.7" y="1875.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.30%)</title><rect x="741.4" y="1859.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="744.4" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.22%)</title><rect x="742.3" y="1843.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="745.3" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.15%)</title><rect x="745.0" y="1859.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="748.0" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.15%)</title><rect x="746.7" y="1859.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="749.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="748.5" y="1875.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="751.5" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.82%)</title><rect x="749.4" y="1875.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="752.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.15%)</title><rect x="759.1" y="1891.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="762.1" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.67%)</title><rect x="760.8" y="1891.0" width="8.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="763.8" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.32%)</title><rect x="768.8" y="1891.0" width="27.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="771.8" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (43 samples, 3.21%)</title><rect x="796.1" y="1891.0" width="37.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="799.1" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.45%)</title><rect x="834.0" y="1891.0" width="5.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="837.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="839.3" y="1891.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="842.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.22%)</title><rect x="840.1" y="1891.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="843.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="842.8" y="1891.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="845.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.22%)</title><rect x="843.7" y="1891.0" width="2.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="846.7" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="846.3" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.22%)</title><rect x="847.2" y="1907.0" width="2.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="850.2" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="849.8" y="1907.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="852.8" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="850.7" y="1939.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="853.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.34%)</title><rect x="851.6" y="1955.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.34%)</title><rect x="851.6" y="1939.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.34%)</title><rect x="851.6" y="1923.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.34%)</title><rect x="851.6" y="1907.0" width="15.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="867.5" y="2035.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="870.5" y="2046.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="867.5" y="2019.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="870.5" y="2030.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="867.5" y="2003.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.5" y="2014.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="867.5" y="1987.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.5" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="867.5" y="1971.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="868.3" y="2035.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.3" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="868.3" y="2019.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.3" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="868.3" y="2003.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="871.3" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="868.3" y="1987.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="871.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="868.3" y="1971.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="871.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="868.3" y="1955.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="868.3" y="1939.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="871.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="868.3" y="1923.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="871.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="868.3" y="1907.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.07%)</title><rect x="868.3" y="1891.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.07%)</title><rect x="868.3" y="1875.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="871.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.07%)</title><rect x="868.3" y="1859.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="871.3" y="1870.0"></text>
</g>
<g>
<title>start_thread (364 samples, 27.18%)</title><rect x="869.2" y="2035.0" width="320.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="872.2" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (364 samples, 27.18%)</title><rect x="869.2" y="2019.0" width="320.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="872.2" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (30 samples, 2.24%)</title><rect x="869.2" y="2003.0" width="26.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="872.2" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.75%)</title><rect x="869.2" y="1987.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="872.2" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.75%)</title><rect x="869.2" y="1971.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="872.2" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="869.2" y="1955.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="872.2" y="1966.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.67%)</title><rect x="870.1" y="1955.0" width="7.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="873.1" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.49%)</title><rect x="878.0" y="1987.0" width="17.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="881.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.75%)</title><rect x="878.0" y="1971.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.0" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.37%)</title><rect x="878.0" y="1955.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="881.0" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.15%)</title><rect x="880.7" y="1939.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.7" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="881.6" y="1923.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="884.6" y="1934.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="882.4" y="1955.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="885.4" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.30%)</title><rect x="883.3" y="1955.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="886.3" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.07%)</title><rect x="886.8" y="1971.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="889.8" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="886.8" y="1955.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.8" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="886.8" y="1939.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="889.8" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.67%)</title><rect x="887.7" y="1971.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.7" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.67%)</title><rect x="887.7" y="1955.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="890.7" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.67%)</title><rect x="887.7" y="1939.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.7" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.67%)</title><rect x="887.7" y="1923.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="890.7" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.67%)</title><rect x="887.7" y="1907.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="890.7" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (9 samples, 0.67%)</title><rect x="887.7" y="1891.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="890.7" y="1902.0"></text>
</g>
<g>
<title>FilterOutOfRegionClosure::FilterOutOfRegionClosure(HeapRegion*, OopClosure*) (1 samples, 0.07%)</title><rect x="890.4" y="1875.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="893.4" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.37%)</title><rect x="891.3" y="1875.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.3" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="893.0" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.0" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.15%)</title><rect x="893.9" y="1859.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="896.9" y="1870.0"></text>
</g>
<g>
<title>G1InvokeIfNotTriggeredClosure::do_oop(unsigned int*) (1 samples, 0.07%)</title><rect x="893.9" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="896.9" y="1854.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.07%)</title><rect x="894.8" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="897.8" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (332 samples, 24.79%)</title><rect x="895.7" y="2003.0" width="292.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.7" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (332 samples, 24.79%)</title><rect x="895.7" y="1987.0" width="292.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.7" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (331 samples, 24.72%)</title><rect x="895.7" y="1971.0" width="291.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.7" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (331 samples, 24.72%)</title><rect x="895.7" y="1955.0" width="291.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="898.7" y="1966.0">CompileBroker::invoke_compiler_on_metho..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (330 samples, 24.65%)</title><rect x="895.7" y="1939.0" width="290.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.7" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (330 samples, 24.65%)</title><rect x="895.7" y="1923.0" width="290.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="898.7" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (70 samples, 5.23%)</title><rect x="895.7" y="1907.0" width="61.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="898.7" y="1918.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.15%)</title><rect x="895.7" y="1891.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.7" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="895.7" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.7" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="896.5" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="899.5" y="1886.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.07%)</title><rect x="896.5" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="899.5" y="1870.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.07%)</title><rect x="896.5" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.5" y="1854.0"></text>
</g>
<g>
<title>MemoryService::track_memory_pool_usage(MemoryPool*) (1 samples, 0.07%)</title><rect x="896.5" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="899.5" y="1838.0"></text>
</g>
<g>
<title>MemoryPool::record_peak_memory_usage() (1 samples, 0.07%)</title><rect x="896.5" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="899.5" y="1822.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.22%)</title><rect x="897.4" y="1891.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="900.4" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="898.3" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="901.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="898.3" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.3" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="899.2" y="1875.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.2" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.52%)</title><rect x="900.1" y="1891.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.1" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.52%)</title><rect x="900.1" y="1875.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.1" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.22%)</title><rect x="901.8" y="1859.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="904.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.15%)</title><rect x="904.5" y="1859.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="907.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="905.4" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.4" y="1854.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="905.4" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="908.4" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.22%)</title><rect x="906.2" y="1891.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.22%)</title><rect x="906.2" y="1875.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.2" y="1886.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="906.2" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="909.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.15%)</title><rect x="907.1" y="1859.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (54 samples, 4.03%)</title><rect x="908.9" y="1891.0" width="47.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.9" y="1902.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="908.9" y="1875.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.9" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.07%)</title><rect x="909.8" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="912.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.15%)</title><rect x="910.6" y="1875.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="913.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="910.6" y="1859.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="913.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="911.5" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.15%)</title><rect x="912.4" y="1875.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="912.4" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="913.3" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="916.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="913.3" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.52%)</title><rect x="914.2" y="1875.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="917.2" y="1886.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="918.6" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="919.5" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.90%)</title><rect x="920.3" y="1875.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="923.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.15%)</title><rect x="923.0" y="1859.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="924.7" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.37%)</title><rect x="925.6" y="1859.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="928.3" y="1843.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.3" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="930.0" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="930.9" y="1875.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="930.9" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="931.8" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="934.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.30%)</title><rect x="932.7" y="1875.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="935.7" y="1886.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="935.3" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.30%)</title><rect x="936.2" y="1875.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="939.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.15%)</title><rect x="937.1" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="940.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="938.8" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.15%)</title><rect x="939.7" y="1875.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="1886.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.07%)</title><rect x="940.6" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.45%)</title><rect x="941.5" y="1875.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.5" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 0.45%)</title><rect x="941.5" y="1859.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="942.4" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.4" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 0.30%)</title><rect x="943.2" y="1843.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.2" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="943.2" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.2" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="943.2" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.2" y="1822.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.15%)</title><rect x="944.1" y="1827.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.1" y="1838.0"></text>
</g>
<g>
<title>LRG::compute_degree(LRG&amp;) const (1 samples, 0.07%)</title><rect x="945.0" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="945.9" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.15%)</title><rect x="946.8" y="1875.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="946.8" y="1859.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.07%)</title><rect x="948.5" y="1875.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="951.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="948.5" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="949.4" y="1875.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="952.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="949.4" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.4" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.37%)</title><rect x="950.3" y="1875.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.3" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.30%)</title><rect x="951.2" y="1859.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.2" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="952.1" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="955.1" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="952.9" y="1843.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="955.9" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.07%)</title><rect x="954.7" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.7" y="1886.0"></text>
</g>
<g>
<title>loadNNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="955.6" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.6" y="1886.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="956.5" y="1891.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="959.5" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (248 samples, 18.52%)</title><rect x="957.3" y="1907.0" width="218.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.3" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.15%)</title><rect x="957.3" y="1891.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.3" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.15%)</title><rect x="957.3" y="1875.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.3" y="1886.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="958.2" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="961.2" y="1870.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="959.1" y="1891.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.1" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="959.1" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.1" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="959.1" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="962.1" y="1870.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="959.1" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.1" y="1854.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="960.0" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="963.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="960.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="960.0" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="963.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="960.0" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="960.0" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.0" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="960.0" y="1811.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="963.0" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="960.0" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (12 samples, 0.90%)</title><rect x="960.9" y="1891.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.9" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (12 samples, 0.90%)</title><rect x="960.9" y="1875.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.9" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="960.9" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.9" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="960.9" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.9" y="1854.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.07%)</title><rect x="960.9" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.9" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (11 samples, 0.82%)</title><rect x="961.8" y="1859.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 0.75%)</title><rect x="962.6" y="1843.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1827.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1811.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1795.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1779.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1763.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="965.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1747.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1731.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1715.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1699.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.6" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1683.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1667.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="962.6" y="1651.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="962.6" y="1635.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.6" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="962.6" y="1619.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.6" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="962.6" y="1603.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="962.6" y="1587.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="962.6" y="1571.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="962.6" y="1555.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="962.6" y="1539.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.6" y="1550.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="962.6" y="1523.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.5" y="1539.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="966.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="963.5" y="1523.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="963.5" y="1507.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1635.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1619.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1603.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1587.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1571.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="967.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1555.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1523.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1507.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1491.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1475.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1459.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1443.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1427.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1411.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1395.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1379.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1363.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1347.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1331.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="967.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="964.4" y="1315.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.4" y="1326.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="964.4" y="1299.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.4" y="1310.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="964.4" y="1283.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (7 samples, 0.52%)</title><rect x="965.3" y="1827.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="968.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (4 samples, 0.30%)</title><rect x="965.3" y="1811.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="968.3" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (4 samples, 0.30%)</title><rect x="965.3" y="1795.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="968.8" y="1811.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="968.8" y="1795.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="968.8" y="1779.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="968.8" y="1763.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="968.8" y="1747.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="968.8" y="1731.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="968.8" y="1715.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="971.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="968.8" y="1699.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="968.8" y="1683.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="968.8" y="1667.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="968.8" y="1651.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="968.8" y="1635.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1619.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1603.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1587.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1571.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="972.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1555.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1539.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="969.7" y="1523.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.7" y="1534.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="969.7" y="1507.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.6" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="970.6" y="1667.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.6" y="1678.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="970.6" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.6" y="1662.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="971.4" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (203 samples, 15.16%)</title><rect x="972.3" y="1891.0" width="178.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.3" y="1902.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.3" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="972.3" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="972.3" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="972.3" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.07%)</title><rect x="972.3" y="1811.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.3" y="1822.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="972.3" y="1795.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.3" y="1806.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.15%)</title><rect x="973.2" y="1875.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.22%)</title><rect x="975.0" y="1875.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.0" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="976.7" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.37%)</title><rect x="977.6" y="1875.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (185 samples, 13.82%)</title><rect x="982.0" y="1875.0" width="163.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="985.0" y="1886.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (179 samples, 13.37%)</title><rect x="986.4" y="1859.0" width="157.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.4" y="1870.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (2 samples, 0.15%)</title><rect x="987.3" y="1843.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.60%)</title><rect x="989.1" y="1843.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (167 samples, 12.47%)</title><rect x="996.1" y="1843.0" width="147.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.1" y="1854.0">PhaseIdealLoop::get..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (34 samples, 2.54%)</title><rect x="1111.6" y="1827.0" width="29.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.6" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1141.5" y="1827.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.5" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1143.3" y="1843.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1146.3" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.07%)</title><rect x="1144.2" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1145.1" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.30%)</title><rect x="1145.9" y="1875.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.15%)</title><rect x="1147.7" y="1859.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1148.6" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1148.6" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1149.5" y="1875.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1149.5" y="1859.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.5" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1149.5" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1811.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1795.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1683.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1651.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.5" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1635.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.5" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1619.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1603.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.5" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1571.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.5" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1555.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.5" y="1539.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.5" y="1550.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1149.5" y="1523.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.5" y="1534.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1150.3" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 2.02%)</title><rect x="1151.2" y="1891.0" width="23.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (25 samples, 1.87%)</title><rect x="1152.1" y="1875.0" width="22.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.1" y="1886.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1153.0" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1153.9" y="1859.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.9" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.15%)</title><rect x="1153.9" y="1843.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.15%)</title><rect x="1153.9" y="1827.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.9" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="1153.9" y="1811.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.9" y="1822.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.6" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.6" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.6" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.6" y="1854.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.07%)</title><rect x="1155.6" y="1827.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.6" y="1838.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1156.5" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.15%)</title><rect x="1157.4" y="1859.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.4" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1158.3" y="1843.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1161.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (9 samples, 0.67%)</title><rect x="1159.2" y="1859.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.2" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1161.8" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1161.8" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="1838.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.07%)</title><rect x="1161.8" y="1811.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (4 samples, 0.30%)</title><rect x="1162.7" y="1843.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.7" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (3 samples, 0.22%)</title><rect x="1162.7" y="1827.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.7" y="1838.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1165.3" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.3" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1165.3" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.3" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1166.2" y="1843.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.2" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1167.1" y="1859.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1168.0" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.0" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.0" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1168.8" y="1859.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.8" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1168.8" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.8" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1168.8" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.8" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1169.7" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.7" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.30%)</title><rect x="1170.6" y="1859.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.15%)</title><rect x="1171.5" y="1843.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.5" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.15%)</title><rect x="1171.5" y="1827.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.5" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.15%)</title><rect x="1171.5" y="1811.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1795.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1779.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1763.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.5" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1747.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1731.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1715.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.5" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1699.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1683.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.5" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1667.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.5" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1651.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.5" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1635.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="1646.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.5" y="1619.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.5" y="1630.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1171.5" y="1603.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.5" y="1614.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.4" y="1795.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1172.4" y="1779.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.4" y="1790.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.3" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="1854.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1174.1" y="1875.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1175.0" y="1891.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1175.0" y="1875.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1175.0" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1175.0" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1175.0" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="1838.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1175.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="1822.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1175.0" y="1795.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.0" y="1806.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1175.0" y="1779.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="1790.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1175.0" y="1763.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="1774.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1175.0" y="1747.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="1758.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.07%)</title><rect x="1175.0" y="1731.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1178.0" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.82%)</title><rect x="1175.9" y="1907.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.82%)</title><rect x="1175.9" y="1891.0" width="9.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.82%)</title><rect x="1175.9" y="1875.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.82%)</title><rect x="1175.9" y="1859.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.82%)</title><rect x="1175.9" y="1843.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.82%)</title><rect x="1175.9" y="1827.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.67%)</title><rect x="1175.9" y="1811.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.67%)</title><rect x="1175.9" y="1795.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.9" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.67%)</title><rect x="1175.9" y="1779.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.67%)</title><rect x="1175.9" y="1763.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.67%)</title><rect x="1175.9" y="1747.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.9" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.60%)</title><rect x="1175.9" y="1731.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1715.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1683.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1667.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1651.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.9" y="1635.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.9" y="1619.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.9" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.9" y="1603.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.9" y="1587.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.9" y="1571.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.9" y="1555.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1175.9" y="1539.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1550.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1175.9" y="1523.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="1534.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.9" y="1507.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="1518.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.9" y="1491.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1502.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1175.9" y="1475.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1486.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1175.9" y="1459.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="1470.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1175.9" y="1443.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1454.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1175.9" y="1427.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.52%)</title><rect x="1176.8" y="1715.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.52%)</title><rect x="1176.8" y="1699.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.52%)</title><rect x="1176.8" y="1683.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.52%)</title><rect x="1176.8" y="1667.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.52%)</title><rect x="1176.8" y="1651.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.52%)</title><rect x="1176.8" y="1635.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.45%)</title><rect x="1176.8" y="1619.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1176.8" y="1603.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1176.8" y="1587.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1176.8" y="1571.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1176.8" y="1555.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1176.8" y="1539.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1176.8" y="1523.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1176.8" y="1507.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1176.8" y="1491.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.30%)</title><rect x="1176.8" y="1475.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.30%)</title><rect x="1176.8" y="1459.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1176.8" y="1443.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1176.8" y="1427.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="1438.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.07%)</title><rect x="1176.8" y="1411.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="1422.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1176.8" y="1395.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="1406.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="1379.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="1390.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1176.8" y="1363.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1411.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1395.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1363.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1347.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1331.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1315.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1299.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1283.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1219.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1155.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1123.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1091.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1043.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="995.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1006.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.07%)</title><rect x="1177.7" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="990.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="963.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.5" y="1411.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.5" y="1395.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1178.5" y="1379.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1178.5" y="1363.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1178.5" y="1347.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1178.5" y="1331.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.5" y="1315.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.5" y="1299.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1178.5" y="1283.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1178.5" y="1267.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1178.5" y="1251.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1178.5" y="1235.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.5" y="1219.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="1203.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.5" y="1187.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.5" y="1171.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.5" y="1155.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.5" y="1139.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.5" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.5" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.5" y="1075.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.5" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.5" y="1043.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.5" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.5" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.5" y="979.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.5" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.5" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.5" y="931.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="915.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.5" y="899.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.5" y="883.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1187.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1171.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1155.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1139.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.3" y="1523.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="1534.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.3" y="1507.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1518.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1180.3" y="1491.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="1502.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1180.3" y="1475.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="1486.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1180.3" y="1459.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="1470.0"></text>
</g>
<g>
<title>IdealKit::make_label(int) (1 samples, 0.07%)</title><rect x="1180.3" y="1443.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="1454.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1180.3" y="1427.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1603.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1587.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="1555.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="1539.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="1523.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="1507.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="1491.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="1475.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="1459.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="1443.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="1427.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="1438.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1411.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="1422.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1406.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1379.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1390.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1181.2" y="1363.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="1374.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1347.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1358.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="1331.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1342.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1181.2" y="1315.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="1326.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1181.2" y="1299.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="1619.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="1630.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="1603.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="1614.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="1587.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.9" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="1742.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.9" y="1715.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="1726.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1182.9" y="1699.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="1710.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1182.9" y="1683.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="1694.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1182.9" y="1667.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="1678.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1182.9" y="1651.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="1662.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1182.9" y="1635.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="1646.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.8" y="1811.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.8" y="1795.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.8" y="1779.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.8" y="1763.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.8" y="1747.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.8" y="1731.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.8" y="1715.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.8" y="1699.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.8" y="1683.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.8" y="1667.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.8" y="1651.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.8" y="1635.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.8" y="1619.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.8" y="1603.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.8" y="1587.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.8" y="1571.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.8" y="1555.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.8" y="1539.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.8" y="1523.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="1507.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.8" y="1491.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.8" y="1475.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="1459.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="1443.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.8" y="1427.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.8" y="1411.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="1422.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1183.8" y="1395.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1406.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1183.8" y="1379.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="1390.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1183.8" y="1363.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="1374.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1183.8" y="1347.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="1358.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1183.8" y="1331.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.7" y="1507.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.7" y="1491.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.7" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.7" y="1475.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.7" y="1459.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.7" y="1443.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.7" y="1427.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.7" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.7" y="1411.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.7" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.7" y="1395.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.7" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.7" y="1379.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.7" y="1363.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.7" y="1347.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.7" y="1331.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="1342.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.7" y="1315.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.7" y="1326.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.7" y="1299.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.7" y="1310.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1184.7" y="1283.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.7" y="1294.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1184.7" y="1267.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="1278.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1184.7" y="1251.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="1262.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1184.7" y="1235.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.7" y="1246.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1184.7" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="1230.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1185.6" y="1907.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.6" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.6" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.6" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.5" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1186.5" y="1923.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.5" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1186.5" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.5" y="1891.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1186.5" y="1875.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="1886.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1186.5" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.5" y="1870.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.4" y="1971.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.4" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.4" y="1955.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.4" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1939.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1923.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1190.4" y="1934.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.07%)</title><rect x="1187.4" y="1907.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.4" y="1918.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1188.2" y="2003.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.2" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1188.2" y="1987.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.2" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1188.2" y="1971.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.2" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.1" y="1971.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.1" y="1955.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.1" y="1939.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.1" y="1923.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.1" y="1907.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.07%)</title><rect x="1189.1" y="1891.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="1902.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.07%)</title><rect x="1189.1" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="1886.0"></text>
</g>
<g>
<title>PtrQueueSet::enqueue_complete_buffer(void**, unsigned long) (1 samples, 0.07%)</title><rect x="1189.1" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="1189.1" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.1" y="1854.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="1189.1" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="1838.0"></text>
</g>
</g>
</svg>
