<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (155 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 14.84%)</title><rect x="10.0" y="883.0" width="175.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (23 samples, 14.84%)</title><rect x="10.0" y="867.0" width="175.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 10.97%)</title><rect x="10.0" y="851.0" width="129.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1612081961.accept (17 samples, 10.97%)</title><rect x="10.0" y="835.0" width="129.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="846.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 10.97%)</title><rect x="10.0" y="819.0" width="129.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 8.39%)</title><rect x="10.0" y="803.0" width="99.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="814.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 8.39%)</title><rect x="10.0" y="787.0" width="99.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 8.39%)</title><rect x="10.0" y="771.0" width="99.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="782.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 8.39%)</title><rect x="10.0" y="755.0" width="99.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="766.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 8.39%)</title><rect x="10.0" y="739.0" width="99.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="750.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 8.39%)</title><rect x="10.0" y="723.0" width="99.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="734.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 4.52%)</title><rect x="10.0" y="707.0" width="53.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.29%)</title><rect x="10.0" y="691.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.29%)</title><rect x="10.0" y="675.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.65%)</title><rect x="17.6" y="659.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.65%)</title><rect x="17.6" y="643.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 3.23%)</title><rect x="25.2" y="691.0" width="38.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.2" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 3.23%)</title><rect x="25.2" y="675.0" width="38.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.2" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 3.23%)</title><rect x="25.2" y="659.0" width="38.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.2" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 3.23%)</title><rect x="25.2" y="643.0" width="38.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.2" y="654.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 3.23%)</title><rect x="25.2" y="627.0" width="38.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.2" y="638.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.94%)</title><rect x="32.8" y="611.0" width="22.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="35.8" y="622.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 1.29%)</title><rect x="32.8" y="595.0" width="15.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="35.8" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.65%)</title><rect x="48.1" y="595.0" width="7.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="51.1" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.65%)</title><rect x="55.7" y="611.0" width="7.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="58.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 2.58%)</title><rect x="63.3" y="707.0" width="30.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.3" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 2.58%)</title><rect x="63.3" y="691.0" width="30.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.3" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 2.58%)</title><rect x="63.3" y="675.0" width="30.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.3" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.29%)</title><rect x="93.7" y="707.0" width="15.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 1.29%)</title><rect x="93.7" y="691.0" width="15.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.29%)</title><rect x="93.7" y="675.0" width="15.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.7" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.65%)</title><rect x="101.4" y="659.0" width="7.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="104.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.65%)</title><rect x="109.0" y="803.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.65%)</title><rect x="109.0" y="787.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.94%)</title><rect x="116.6" y="803.0" width="22.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.6" y="814.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.94%)</title><rect x="116.6" y="787.0" width="22.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.6" y="798.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.65%)</title><rect x="131.8" y="771.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.8" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.65%)</title><rect x="131.8" y="755.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.8" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.65%)</title><rect x="131.8" y="739.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.87%)</title><rect x="139.4" y="851.0" width="45.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.4" y="862.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.87%)</title><rect x="139.4" y="835.0" width="45.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.4" y="846.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.29%)</title><rect x="139.4" y="819.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.29%)</title><rect x="139.4" y="803.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.29%)</title><rect x="139.4" y="787.0" width="15.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.29%)</title><rect x="139.4" y="771.0" width="15.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.29%)</title><rect x="139.4" y="755.0" width="15.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.29%)</title><rect x="139.4" y="739.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.94%)</title><rect x="154.6" y="819.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.6" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.29%)</title><rect x="154.6" y="803.0" width="15.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="157.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.29%)</title><rect x="154.6" y="787.0" width="15.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.65%)</title><rect x="154.6" y="771.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.65%)</title><rect x="154.6" y="755.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.65%)</title><rect x="154.6" y="739.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.65%)</title><rect x="154.6" y="723.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.65%)</title><rect x="154.6" y="707.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.65%)</title><rect x="154.6" y="691.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.65%)</title><rect x="154.6" y="675.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="157.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.65%)</title><rect x="154.6" y="659.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.65%)</title><rect x="162.3" y="771.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.65%)</title><rect x="162.3" y="755.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.65%)</title><rect x="162.3" y="739.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="165.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.65%)</title><rect x="162.3" y="723.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.65%)</title><rect x="162.3" y="707.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.65%)</title><rect x="162.3" y="691.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.65%)</title><rect x="162.3" y="675.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.3" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.65%)</title><rect x="162.3" y="659.0" width="7.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="165.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.65%)</title><rect x="169.9" y="803.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.65%)</title><rect x="169.9" y="787.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.9" y="798.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.65%)</title><rect x="169.9" y="771.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="172.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.65%)</title><rect x="177.5" y="819.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.65%)</title><rect x="177.5" y="803.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.65%)</title><rect x="177.5" y="787.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.65%)</title><rect x="177.5" y="771.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.65%)</title><rect x="177.5" y="755.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.65%)</title><rect x="177.5" y="739.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.65%)</title><rect x="177.5" y="723.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.65%)</title><rect x="177.5" y="707.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.5" y="718.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.65%)</title><rect x="177.5" y="691.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.65%)</title><rect x="177.5" y="675.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.5" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.65%)</title><rect x="177.5" y="659.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.5" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (52 samples, 33.55%)</title><rect x="185.1" y="883.0" width="395.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.1" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (52 samples, 33.55%)</title><rect x="185.1" y="867.0" width="395.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.1" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (52 samples, 33.55%)</title><rect x="185.1" y="851.0" width="395.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.1" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2038354488.run (35 samples, 22.58%)</title><rect x="200.3" y="835.0" width="266.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.3" y="846.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (35 samples, 22.58%)</title><rect x="200.3" y="819.0" width="266.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.3" y="830.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (35 samples, 22.58%)</title><rect x="200.3" y="803.0" width="266.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.3" y="814.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="200.3" y="787.0" width="7.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="203.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (33 samples, 21.29%)</title><rect x="207.9" y="787.0" width="251.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.9" y="798.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.65%)</title><rect x="207.9" y="771.0" width="7.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="210.9" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.65%)</title><rect x="207.9" y="755.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="210.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (6 samples, 3.87%)</title><rect x="215.5" y="771.0" width="45.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.5" y="782.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (6 samples, 3.87%)</title><rect x="215.5" y="755.0" width="45.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.5" y="766.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (6 samples, 3.87%)</title><rect x="215.5" y="739.0" width="45.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.5" y="750.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 3.87%)</title><rect x="215.5" y="723.0" width="45.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.5" y="734.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 3.87%)</title><rect x="215.5" y="707.0" width="45.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.5" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 3.87%)</title><rect x="215.5" y="691.0" width="45.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.5" y="702.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.29%)</title><rect x="215.5" y="675.0" width="15.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.65%)</title><rect x="215.5" y="659.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.65%)</title><rect x="215.5" y="643.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.65%)</title><rect x="215.5" y="627.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.65%)</title><rect x="215.5" y="611.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.65%)</title><rect x="223.2" y="659.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.65%)</title><rect x="223.2" y="643.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.65%)</title><rect x="223.2" y="627.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.65%)</title><rect x="223.2" y="611.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (2 samples, 1.29%)</title><rect x="230.8" y="675.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.29%)</title><rect x="230.8" y="659.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.65%)</title><rect x="230.8" y="643.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.65%)</title><rect x="230.8" y="627.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.65%)</title><rect x="230.8" y="611.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.65%)</title><rect x="230.8" y="595.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.65%)</title><rect x="238.4" y="643.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.65%)</title><rect x="238.4" y="627.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.65%)</title><rect x="238.4" y="611.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.65%)</title><rect x="238.4" y="595.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.65%)</title><rect x="238.4" y="579.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.65%)</title><rect x="238.4" y="563.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.29%)</title><rect x="246.0" y="675.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.29%)</title><rect x="246.0" y="659.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.29%)</title><rect x="246.0" y="643.0" width="15.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.29%)</title><rect x="246.0" y="627.0" width="15.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.29%)</title><rect x="246.0" y="611.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (22 samples, 14.19%)</title><rect x="261.2" y="771.0" width="167.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.2" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.58%)</title><rect x="261.2" y="755.0" width="30.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.2" y="766.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.58%)</title><rect x="261.2" y="739.0" width="30.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.2" y="750.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.58%)</title><rect x="261.2" y="723.0" width="30.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.2" y="734.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.58%)</title><rect x="261.2" y="707.0" width="30.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.2" y="718.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.94%)</title><rect x="268.8" y="691.0" width="22.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.8" y="702.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.65%)</title><rect x="291.7" y="755.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.65%)</title><rect x="291.7" y="739.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.7" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.65%)</title><rect x="291.7" y="723.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 6.45%)</title><rect x="299.3" y="755.0" width="76.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.3" y="766.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 6.45%)</title><rect x="299.3" y="739.0" width="76.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.3" y="750.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 3.23%)</title><rect x="314.5" y="723.0" width="38.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="317.5" y="734.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.58%)</title><rect x="322.1" y="707.0" width="30.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.1" y="718.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.58%)</title><rect x="322.1" y="691.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.1" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.29%)</title><rect x="337.4" y="675.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="340.4" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.29%)</title><rect x="337.4" y="659.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="340.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.65%)</title><rect x="352.6" y="723.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.6" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.29%)</title><rect x="360.2" y="723.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="363.2" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 1.29%)</title><rect x="360.2" y="707.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.29%)</title><rect x="360.2" y="691.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.29%)</title><rect x="360.2" y="675.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.65%)</title><rect x="367.8" y="659.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.65%)</title><rect x="367.8" y="643.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (7 samples, 4.52%)</title><rect x="375.4" y="755.0" width="53.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.4" y="766.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (7 samples, 4.52%)</title><rect x="375.4" y="739.0" width="53.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.4" y="750.0">com/l..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.65%)</title><rect x="383.0" y="723.0" width="7.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="386.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="383.0" y="707.0" width="7.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="386.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/117397272.process (2 samples, 1.29%)</title><rect x="390.6" y="723.0" width="15.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.29%)</title><rect x="390.6" y="707.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.65%)</title><rect x="390.6" y="691.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.65%)</title><rect x="390.6" y="675.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.65%)</title><rect x="390.6" y="659.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.65%)</title><rect x="390.6" y="643.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.65%)</title><rect x="390.6" y="627.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.6" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.65%)</title><rect x="390.6" y="611.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="393.6" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="390.6" y="595.0" width="7.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="393.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.65%)</title><rect x="398.3" y="691.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.65%)</title><rect x="398.3" y="675.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.65%)</title><rect x="398.3" y="659.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.65%)</title><rect x="398.3" y="643.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="401.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.65%)</title><rect x="405.9" y="723.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.29%)</title><rect x="413.5" y="723.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="416.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.29%)</title><rect x="413.5" y="707.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.5" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.65%)</title><rect x="413.5" y="691.0" width="7.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="416.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.65%)</title><rect x="421.1" y="691.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.94%)</title><rect x="428.7" y="771.0" width="22.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.7" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.94%)</title><rect x="428.7" y="755.0" width="22.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="431.7" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.29%)</title><rect x="436.3" y="739.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1011043099.accept (2 samples, 1.29%)</title><rect x="436.3" y="723.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="439.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (2 samples, 1.29%)</title><rect x="436.3" y="707.0" width="15.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="439.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1475451182.complete (2 samples, 1.29%)</title><rect x="436.3" y="691.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 1.29%)</title><rect x="436.3" y="675.0" width="15.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 1.29%)</title><rect x="436.3" y="659.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.3" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.29%)</title><rect x="436.3" y="643.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.3" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 1.29%)</title><rect x="436.3" y="627.0" width="15.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.3" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.29%)</title><rect x="436.3" y="611.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.3" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 1.29%)</title><rect x="436.3" y="595.0" width="15.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.3" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.65%)</title><rect x="451.5" y="771.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="454.5" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="451.5" y="755.0" width="7.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="454.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.65%)</title><rect x="459.2" y="787.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.2" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.65%)</title><rect x="459.2" y="771.0" width="7.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="462.2" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.65%)</title><rect x="459.2" y="755.0" width="7.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="462.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.65%)</title><rect x="466.8" y="835.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.65%)</title><rect x="466.8" y="819.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.8" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.65%)</title><rect x="466.8" y="803.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="469.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 9.03%)</title><rect x="474.4" y="835.0" width="106.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.4" y="846.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 9.03%)</title><rect x="474.4" y="819.0" width="106.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.4" y="830.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 7.10%)</title><rect x="497.2" y="803.0" width="83.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.2" y="814.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 7.10%)</title><rect x="497.2" y="787.0" width="83.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.2" y="798.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 7.10%)</title><rect x="497.2" y="771.0" width="83.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.2" y="782.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (11 samples, 7.10%)</title><rect x="497.2" y="755.0" width="83.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="500.2" y="766.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.29%)</title><rect x="497.2" y="739.0" width="15.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.2" y="750.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 1.29%)</title><rect x="512.5" y="739.0" width="15.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="515.5" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.94%)</title><rect x="527.7" y="739.0" width="22.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="530.7" y="750.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.58%)</title><rect x="550.5" y="739.0" width="30.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="553.5" y="750.0">__..</text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.65%)</title><rect x="581.0" y="883.0" width="7.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="584.0" y="894.0"></text>
</g>
<g>
<title>trace_frequency_order (1 samples, 0.65%)</title><rect x="581.0" y="867.0" width="7.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="584.0" y="878.0"></text>
</g>
<g>
<title>start_thread (79 samples, 50.97%)</title><rect x="588.6" y="883.0" width="601.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="591.6" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (79 samples, 50.97%)</title><rect x="588.6" y="867.0" width="601.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="591.6" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 9.03%)</title><rect x="588.6" y="851.0" width="106.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="591.6" y="862.0">GangWorker::l..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.65%)</title><rect x="588.6" y="835.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="591.6" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.65%)</title><rect x="588.6" y="819.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="591.6" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.65%)</title><rect x="588.6" y="803.0" width="7.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="591.6" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 8.39%)</title><rect x="596.2" y="835.0" width="99.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="599.2" y="846.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 7.10%)</title><rect x="596.2" y="819.0" width="83.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="599.2" y="830.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.87%)</title><rect x="603.8" y="803.0" width="45.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="606.8" y="814.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.94%)</title><rect x="626.6" y="787.0" width="22.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="629.6" y="798.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.29%)</title><rect x="626.6" y="771.0" width="15.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="629.6" y="782.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.65%)</title><rect x="634.3" y="755.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="637.3" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.65%)</title><rect x="641.9" y="771.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="644.9" y="782.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.29%)</title><rect x="649.5" y="803.0" width="15.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="652.5" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.65%)</title><rect x="664.7" y="803.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="667.7" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.65%)</title><rect x="664.7" y="787.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="667.7" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.65%)</title><rect x="672.3" y="803.0" width="7.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="675.3" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.29%)</title><rect x="679.9" y="819.0" width="15.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="682.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.29%)</title><rect x="679.9" y="803.0" width="15.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="682.9" y="814.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.29%)</title><rect x="679.9" y="787.0" width="15.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="682.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.29%)</title><rect x="679.9" y="771.0" width="15.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="682.9" y="782.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 1.29%)</title><rect x="679.9" y="755.0" width="15.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.9" y="766.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (2 samples, 1.29%)</title><rect x="679.9" y="739.0" width="15.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="682.9" y="750.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.65%)</title><rect x="679.9" y="723.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="682.9" y="734.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.65%)</title><rect x="679.9" y="707.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="682.9" y="718.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.65%)</title><rect x="679.9" y="691.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="682.9" y="702.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.65%)</title><rect x="679.9" y="675.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="682.9" y="686.0"></text>
</g>
<g>
<title>CodeRootSetTable::new_entry(nmethod*) (1 samples, 0.65%)</title><rect x="679.9" y="659.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="682.9" y="670.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.65%)</title><rect x="687.5" y="723.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.5" y="734.0"></text>
</g>
<g>
<title>DataRelocation::set_value(unsigned char*) (1 samples, 0.65%)</title><rect x="687.5" y="707.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.5" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65 samples, 41.94%)</title><rect x="695.2" y="851.0" width="494.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="698.2" y="862.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 41.94%)</title><rect x="695.2" y="835.0" width="494.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="698.2" y="846.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 41.94%)</title><rect x="695.2" y="819.0" width="494.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="698.2" y="830.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (61 samples, 39.35%)</title><rect x="695.2" y="803.0" width="464.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="698.2" y="814.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (61 samples, 39.35%)</title><rect x="695.2" y="787.0" width="464.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="698.2" y="798.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 25.16%)</title><rect x="695.2" y="771.0" width="296.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="698.2" y="782.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.65%)</title><rect x="695.2" y="755.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="698.2" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.65%)</title><rect x="695.2" y="739.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="698.2" y="750.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.65%)</title><rect x="695.2" y="723.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="698.2" y="734.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.65%)</title><rect x="695.2" y="707.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="698.2" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.87%)</title><rect x="702.8" y="755.0" width="45.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="705.8" y="766.0">Matc..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.65%)</title><rect x="702.8" y="739.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="705.8" y="750.0"></text>
</g>
<g>
<title>BoxLockNode::Opcode() const (1 samples, 0.65%)</title><rect x="702.8" y="723.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="705.8" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 3.23%)</title><rect x="710.4" y="739.0" width="38.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="713.4" y="750.0">Mat..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.65%)</title><rect x="718.0" y="723.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="721.0" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.94%)</title><rect x="725.6" y="723.0" width="22.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="728.6" y="734.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.65%)</title><rect x="733.2" y="707.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="736.2" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.65%)</title><rect x="733.2" y="691.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="736.2" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.65%)</title><rect x="733.2" y="675.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="736.2" y="686.0"></text>
</g>
<g>
<title>State::_sub_Op_URShiftL(Node const*) (1 samples, 0.65%)</title><rect x="733.2" y="659.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.2" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.65%)</title><rect x="740.8" y="707.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="743.8" y="718.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.65%)</title><rect x="740.8" y="691.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="743.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.29%)</title><rect x="748.5" y="755.0" width="15.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="751.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.65%)</title><rect x="748.5" y="739.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="751.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.65%)</title><rect x="748.5" y="723.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="751.5" y="734.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.65%)</title><rect x="748.5" y="707.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="751.5" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.65%)</title><rect x="756.1" y="739.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="759.1" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.65%)</title><rect x="756.1" y="723.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 19.35%)</title><rect x="763.7" y="755.0" width="228.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="766.7" y="766.0">PhaseChaitin::Register_Allocat..</text>
</g>
<g>
<title>MachHaltNode::jvms() const (1 samples, 0.65%)</title><rect x="763.7" y="739.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.29%)</title><rect x="771.3" y="739.0" width="15.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="774.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.65%)</title><rect x="778.9" y="723.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.9" y="734.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.65%)</title><rect x="778.9" y="707.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.29%)</title><rect x="786.5" y="739.0" width="15.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="789.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.65%)</title><rect x="786.5" y="723.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="789.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.65%)</title><rect x="794.1" y="723.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="797.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.94%)</title><rect x="801.7" y="739.0" width="22.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="804.7" y="750.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.65%)</title><rect x="817.0" y="723.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="820.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.87%)</title><rect x="824.6" y="739.0" width="45.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="827.6" y="750.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.29%)</title><rect x="847.4" y="723.0" width="15.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="850.4" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.65%)</title><rect x="862.6" y="723.0" width="7.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="865.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.29%)</title><rect x="870.3" y="739.0" width="15.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="873.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.65%)</title><rect x="877.9" y="723.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.9" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.65%)</title><rect x="877.9" y="707.0" width="7.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="880.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.29%)</title><rect x="885.5" y="739.0" width="15.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="888.5" y="750.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.65%)</title><rect x="893.1" y="723.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.58%)</title><rect x="900.7" y="739.0" width="30.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.7" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 2.58%)</title><rect x="900.7" y="723.0" width="30.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.7" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.65%)</title><rect x="923.5" y="707.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.65%)</title><rect x="931.2" y="739.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.2" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.29%)</title><rect x="938.8" y="739.0" width="15.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="941.8" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.29%)</title><rect x="938.8" y="723.0" width="15.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="941.8" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.65%)</title><rect x="946.4" y="707.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.4" y="718.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.65%)</title><rect x="946.4" y="691.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="949.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.65%)</title><rect x="954.0" y="739.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.0" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.65%)</title><rect x="954.0" y="723.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.0" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.65%)</title><rect x="961.6" y="739.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.6" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.65%)</title><rect x="961.6" y="723.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.6" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.94%)</title><rect x="969.2" y="739.0" width="22.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.2" y="750.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.29%)</title><rect x="976.8" y="723.0" width="15.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.8" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 9.03%)</title><rect x="992.1" y="771.0" width="106.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="995.1" y="782.0">Compile::Opti..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.65%)</title><rect x="992.1" y="755.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.65%)</title><rect x="992.1" y="739.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.65%)</title><rect x="992.1" y="723.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.1" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.65%)</title><rect x="992.1" y="707.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.1" y="718.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.65%)</title><rect x="992.1" y="691.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.1" y="702.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.65%)</title><rect x="992.1" y="675.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.1" y="686.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.65%)</title><rect x="992.1" y="659.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.1" y="670.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.65%)</title><rect x="992.1" y="643.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.1" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.65%)</title><rect x="992.1" y="627.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="995.1" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.65%)</title><rect x="992.1" y="611.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.1" y="622.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.65%)</title><rect x="992.1" y="595.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.1" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.65%)</title><rect x="992.1" y="579.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.1" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.65%)</title><rect x="992.1" y="563.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.1" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.65%)</title><rect x="992.1" y="547.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.1" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="992.1" y="531.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.1" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="992.1" y="515.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.1" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="992.1" y="499.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.1" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="992.1" y="483.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.1" y="494.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="992.1" y="467.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.1" y="478.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.65%)</title><rect x="992.1" y="451.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.1" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.65%)</title><rect x="992.1" y="435.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.1" y="446.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.65%)</title><rect x="992.1" y="419.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.1" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 5.16%)</title><rect x="999.7" y="755.0" width="60.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.7" y="766.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.94%)</title><rect x="999.7" y="739.0" width="22.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.7" y="750.0">P..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.65%)</title><rect x="1014.9" y="723.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.65%)</title><rect x="1022.5" y="739.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.29%)</title><rect x="1030.1" y="739.0" width="15.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1033.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.29%)</title><rect x="1030.1" y="723.0" width="15.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.65%)</title><rect x="1037.7" y="707.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.65%)</title><rect x="1037.7" y="691.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1040.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.65%)</title><rect x="1045.4" y="739.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.65%)</title><rect x="1045.4" y="723.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.65%)</title><rect x="1045.4" y="707.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.65%)</title><rect x="1053.0" y="739.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.0" y="750.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.65%)</title><rect x="1053.0" y="723.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.58%)</title><rect x="1060.6" y="755.0" width="30.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1063.6" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.58%)</title><rect x="1060.6" y="739.0" width="30.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1063.6" y="750.0">Ph..</text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.65%)</title><rect x="1060.6" y="723.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.6" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.65%)</title><rect x="1060.6" y="707.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.6" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.65%)</title><rect x="1060.6" y="691.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.6" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.65%)</title><rect x="1060.6" y="675.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.6" y="686.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.65%)</title><rect x="1060.6" y="659.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1063.6" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.65%)</title><rect x="1068.2" y="723.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.2" y="734.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.65%)</title><rect x="1075.8" y="723.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.8" y="734.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.65%)</title><rect x="1075.8" y="707.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.8" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.65%)</title><rect x="1083.4" y="723.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.4" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.65%)</title><rect x="1083.4" y="707.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.4" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.65%)</title><rect x="1083.4" y="691.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.4" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.65%)</title><rect x="1091.0" y="755.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.0" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.65%)</title><rect x="1091.0" y="739.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.0" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.65%)</title><rect x="1091.0" y="723.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.0" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.65%)</title><rect x="1091.0" y="707.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.87%)</title><rect x="1098.6" y="771.0" width="45.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.6" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.87%)</title><rect x="1098.6" y="755.0" width="45.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.6" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.87%)</title><rect x="1098.6" y="739.0" width="45.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.6" y="750.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.87%)</title><rect x="1098.6" y="723.0" width="45.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.6" y="734.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.87%)</title><rect x="1098.6" y="707.0" width="45.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.6" y="718.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.87%)</title><rect x="1098.6" y="691.0" width="45.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.6" y="702.0">Pars..</text>
</g>
<g>
<title>GraphKit::round_double_result(ciMethod*) (1 samples, 0.65%)</title><rect x="1098.6" y="675.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.6" y="686.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.65%)</title><rect x="1098.6" y="659.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.58%)</title><rect x="1106.3" y="675.0" width="30.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.3" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.58%)</title><rect x="1106.3" y="659.0" width="30.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.3" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.58%)</title><rect x="1106.3" y="643.0" width="30.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.3" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.58%)</title><rect x="1106.3" y="627.0" width="30.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.3" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.65%)</title><rect x="1106.3" y="611.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.3" y="622.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.65%)</title><rect x="1106.3" y="595.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.94%)</title><rect x="1113.9" y="611.0" width="22.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.94%)</title><rect x="1113.9" y="595.0" width="22.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="606.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.65%)</title><rect x="1113.9" y="579.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.9" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.65%)</title><rect x="1113.9" y="563.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.9" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.65%)</title><rect x="1113.9" y="547.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.9" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.65%)</title><rect x="1113.9" y="531.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.65%)</title><rect x="1113.9" y="515.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.65%)</title><rect x="1113.9" y="499.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.65%)</title><rect x="1113.9" y="483.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.65%)</title><rect x="1113.9" y="467.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.65%)</title><rect x="1113.9" y="451.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.65%)</title><rect x="1113.9" y="435.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.9" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.65%)</title><rect x="1113.9" y="419.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.9" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="1113.9" y="403.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.9" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.65%)</title><rect x="1113.9" y="387.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="398.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.65%)</title><rect x="1113.9" y="371.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.9" y="382.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.65%)</title><rect x="1113.9" y="355.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="366.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.65%)</title><rect x="1113.9" y="339.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.9" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.65%)</title><rect x="1113.9" y="323.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.9" y="334.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.65%)</title><rect x="1113.9" y="307.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.9" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.65%)</title><rect x="1113.9" y="291.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.65%)</title><rect x="1113.9" y="275.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.9" y="286.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.65%)</title><rect x="1113.9" y="259.0" width="7.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1116.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.29%)</title><rect x="1121.5" y="579.0" width="15.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.29%)</title><rect x="1121.5" y="563.0" width="15.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.29%)</title><rect x="1121.5" y="547.0" width="15.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.29%)</title><rect x="1121.5" y="531.0" width="15.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.29%)</title><rect x="1121.5" y="515.0" width="15.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.29%)</title><rect x="1121.5" y="499.0" width="15.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.29%)</title><rect x="1121.5" y="483.0" width="15.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.29%)</title><rect x="1121.5" y="467.0" width="15.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.29%)</title><rect x="1121.5" y="451.0" width="15.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.29%)</title><rect x="1121.5" y="435.0" width="15.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.29%)</title><rect x="1121.5" y="419.0" width="15.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.29%)</title><rect x="1121.5" y="403.0" width="15.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.29%)</title><rect x="1121.5" y="387.0" width="15.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.29%)</title><rect x="1121.5" y="371.0" width="15.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.29%)</title><rect x="1121.5" y="355.0" width="15.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.29%)</title><rect x="1121.5" y="339.0" width="15.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.29%)</title><rect x="1121.5" y="323.0" width="15.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.29%)</title><rect x="1121.5" y="307.0" width="15.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.29%)</title><rect x="1121.5" y="291.0" width="15.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.29%)</title><rect x="1121.5" y="275.0" width="15.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.29%)</title><rect x="1121.5" y="259.0" width="15.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.29%)</title><rect x="1121.5" y="243.0" width="15.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.29%)</title><rect x="1121.5" y="227.0" width="15.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.29%)</title><rect x="1121.5" y="211.0" width="15.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.5" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.29%)</title><rect x="1121.5" y="195.0" width="15.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.29%)</title><rect x="1121.5" y="179.0" width="15.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.5" y="190.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.65%)</title><rect x="1121.5" y="163.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.5" y="174.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.65%)</title><rect x="1121.5" y="147.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.5" y="158.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.65%)</title><rect x="1121.5" y="131.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.65%)</title><rect x="1121.5" y="115.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.65%)</title><rect x="1129.1" y="163.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.65%)</title><rect x="1129.1" y="147.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.65%)</title><rect x="1129.1" y="131.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.65%)</title><rect x="1129.1" y="115.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="126.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.65%)</title><rect x="1129.1" y="99.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.1" y="110.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.65%)</title><rect x="1129.1" y="83.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.1" y="94.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.65%)</title><rect x="1129.1" y="67.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.1" y="78.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.65%)</title><rect x="1129.1" y="51.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.1" y="62.0"></text>
</g>
<g>
<title>ciMethod::was_executed_more_than(int) (1 samples, 0.65%)</title><rect x="1129.1" y="35.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1136.7" y="675.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1136.7" y="659.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.65%)</title><rect x="1136.7" y="643.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.65%)</title><rect x="1136.7" y="627.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.65%)</title><rect x="1136.7" y="611.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.65%)</title><rect x="1136.7" y="595.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.65%)</title><rect x="1136.7" y="579.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.7" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1136.7" y="563.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.65%)</title><rect x="1136.7" y="547.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.65%)</title><rect x="1136.7" y="531.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.7" y="542.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.65%)</title><rect x="1136.7" y="515.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.7" y="526.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.65%)</title><rect x="1136.7" y="499.0" width="7.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1139.7" y="510.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.65%)</title><rect x="1144.3" y="771.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.3" y="782.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.65%)</title><rect x="1151.9" y="771.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.65%)</title><rect x="1151.9" y="755.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="766.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.65%)</title><rect x="1151.9" y="739.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.94%)</title><rect x="1159.5" y="803.0" width="22.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="814.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.94%)</title><rect x="1159.5" y="787.0" width="22.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.5" y="798.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.94%)</title><rect x="1159.5" y="771.0" width="22.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="782.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.94%)</title><rect x="1159.5" y="755.0" width="22.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.5" y="766.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.65%)</title><rect x="1159.5" y="739.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.5" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.65%)</title><rect x="1159.5" y="723.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="734.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.65%)</title><rect x="1159.5" y="707.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.65%)</title><rect x="1159.5" y="691.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.65%)</title><rect x="1159.5" y="675.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.65%)</title><rect x="1159.5" y="659.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.65%)</title><rect x="1159.5" y="643.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="654.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 0.65%)</title><rect x="1159.5" y="627.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.29%)</title><rect x="1167.2" y="739.0" width="15.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.2" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.29%)</title><rect x="1167.2" y="723.0" width="15.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.2" y="734.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.65%)</title><rect x="1167.2" y="707.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.2" y="718.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.65%)</title><rect x="1167.2" y="691.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.65%)</title><rect x="1167.2" y="675.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.2" y="686.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.65%)</title><rect x="1167.2" y="659.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.2" y="670.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.65%)</title><rect x="1167.2" y="643.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.2" y="654.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.65%)</title><rect x="1174.8" y="707.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.65%)</title><rect x="1182.4" y="803.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="1182.4" y="787.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.65%)</title><rect x="1182.4" y="771.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.65%)</title><rect x="1182.4" y="755.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="766.0"></text>
</g>
</g>
</svg>
