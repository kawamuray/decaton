<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1525"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1525"> </text>
<g id="frames">
<g>
<title>all (271 samples, 100.00%)</title><rect x="10.0" y="1491.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 7.38%)</title><rect x="10.0" y="1475.0" width="87.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1486.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.37%)</title><rect x="10.0" y="1459.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.37%)</title><rect x="10.0" y="1443.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.37%)</title><rect x="10.0" y="1427.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.37%)</title><rect x="10.0" y="1411.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.37%)</title><rect x="10.0" y="1395.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="10.0" y="1379.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="10.0" y="1363.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="10.0" y="1347.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.37%)</title><rect x="10.0" y="1331.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.37%)</title><rect x="10.0" y="1315.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.37%)</title><rect x="10.0" y="1299.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.37%)</title><rect x="10.0" y="1283.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="10.0" y="1267.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="10.0" y="1251.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.37%)</title><rect x="10.0" y="1235.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.37%)</title><rect x="10.0" y="1219.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 7.01%)</title><rect x="14.4" y="1459.0" width="82.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="1470.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.37%)</title><rect x="14.4" y="1443.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.37%)</title><rect x="14.4" y="1427.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.4" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.37%)</title><rect x="14.4" y="1411.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.4" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.37%)</title><rect x="14.4" y="1395.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.37%)</title><rect x="14.4" y="1379.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.4" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.37%)</title><rect x="14.4" y="1363.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.37%)</title><rect x="14.4" y="1347.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.4" y="1358.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.37%)</title><rect x="14.4" y="1331.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 1.11%)</title><rect x="18.7" y="1443.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.7" y="1454.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.37%)</title><rect x="18.7" y="1427.0" width="4.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="21.7" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.74%)</title><rect x="23.1" y="1427.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.1" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.74%)</title><rect x="23.1" y="1411.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.74%)</title><rect x="23.1" y="1395.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.1" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.74%)</title><rect x="23.1" y="1379.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.1" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.74%)</title><rect x="23.1" y="1363.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.1" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.74%)</title><rect x="23.1" y="1347.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.74%)</title><rect x="23.1" y="1331.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.74%)</title><rect x="23.1" y="1315.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/2016030116.test (1 samples, 0.37%)</title><rect x="23.1" y="1299.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.1" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.37%)</title><rect x="23.1" y="1283.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.1" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.37%)</title><rect x="23.1" y="1267.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.1" y="1278.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1251.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.1" y="1262.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1235.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.1" y="1246.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1219.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="26.1" y="1230.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.37%)</title><rect x="23.1" y="1203.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.1" y="1214.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.37%)</title><rect x="23.1" y="1187.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.1" y="1198.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.37%)</title><rect x="23.1" y="1171.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.37%)</title><rect x="27.4" y="1299.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.37%)</title><rect x="27.4" y="1283.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$270/526104592.apply (1 samples, 0.37%)</title><rect x="27.4" y="1267.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.95%)</title><rect x="31.8" y="1443.0" width="34.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.8" y="1454.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (8 samples, 2.95%)</title><rect x="31.8" y="1427.0" width="34.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.8" y="1438.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (8 samples, 2.95%)</title><rect x="31.8" y="1411.0" width="34.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.8" y="1422.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.48%)</title><rect x="31.8" y="1395.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.8" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.48%)</title><rect x="31.8" y="1379.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.48%)</title><rect x="31.8" y="1363.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.48%)</title><rect x="31.8" y="1347.0" width="17.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.48%)</title><rect x="31.8" y="1331.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.48%)</title><rect x="31.8" y="1315.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.8" y="1326.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="44.8" y="1299.0" width="4.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="47.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.48%)</title><rect x="49.2" y="1395.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.2" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.48%)</title><rect x="49.2" y="1379.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.37%)</title><rect x="57.9" y="1363.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.37%)</title><rect x="57.9" y="1347.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.9" y="1358.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="62.3" y="1363.0" width="4.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="65.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 2.58%)</title><rect x="66.6" y="1443.0" width="30.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.6" y="1454.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 2.58%)</title><rect x="66.6" y="1427.0" width="30.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.6" y="1438.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.48%)</title><rect x="66.6" y="1411.0" width="17.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.74%)</title><rect x="66.6" y="1395.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.74%)</title><rect x="66.6" y="1379.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.74%)</title><rect x="66.6" y="1363.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.37%)</title><rect x="66.6" y="1347.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.37%)</title><rect x="66.6" y="1331.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.37%)</title><rect x="66.6" y="1315.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.37%)</title><rect x="66.6" y="1299.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.37%)</title><rect x="66.6" y="1283.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.37%)</title><rect x="66.6" y="1267.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="69.6" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="66.6" y="1251.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.6" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="66.6" y="1235.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.37%)</title><rect x="71.0" y="1347.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="71.0" y="1331.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="71.0" y="1315.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.37%)</title><rect x="71.0" y="1299.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.37%)</title><rect x="71.0" y="1283.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.37%)</title><rect x="71.0" y="1267.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.74%)</title><rect x="75.3" y="1395.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.74%)</title><rect x="75.3" y="1379.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.74%)</title><rect x="75.3" y="1363.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.74%)</title><rect x="75.3" y="1347.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.37%)</title><rect x="75.3" y="1331.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.37%)</title><rect x="75.3" y="1315.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.37%)</title><rect x="75.3" y="1299.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.37%)</title><rect x="75.3" y="1283.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.37%)</title><rect x="75.3" y="1267.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.37%)</title><rect x="75.3" y="1251.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.37%)</title><rect x="75.3" y="1235.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.37%)</title><rect x="75.3" y="1219.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.37%)</title><rect x="79.7" y="1331.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.37%)</title><rect x="79.7" y="1315.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.37%)</title><rect x="79.7" y="1299.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.7" y="1310.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.37%)</title><rect x="79.7" y="1283.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.37%)</title><rect x="84.0" y="1411.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.37%)</title><rect x="84.0" y="1395.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.37%)</title><rect x="84.0" y="1379.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.0" y="1390.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.37%)</title><rect x="84.0" y="1363.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (1 samples, 0.37%)</title><rect x="84.0" y="1347.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.37%)</title><rect x="84.0" y="1331.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.37%)</title><rect x="84.0" y="1315.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.37%)</title><rect x="88.4" y="1411.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.37%)</title><rect x="88.4" y="1395.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="91.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.37%)</title><rect x="88.4" y="1379.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="88.4" y="1363.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="88.4" y="1347.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.37%)</title><rect x="88.4" y="1331.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.37%)</title><rect x="88.4" y="1315.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.37%)</title><rect x="88.4" y="1299.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.4" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.37%)</title><rect x="88.4" y="1283.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.4" y="1294.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.37%)</title><rect x="88.4" y="1267.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.37%)</title><rect x="92.7" y="1411.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.isolationLevel (1 samples, 0.37%)</title><rect x="92.7" y="1395.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.7" y="1406.0"></text>
</g>
<g>
<title>java/lang/Thread.run (141 samples, 52.03%)</title><rect x="97.1" y="1475.0" width="613.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.1" y="1486.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (141 samples, 52.03%)</title><rect x="97.1" y="1459.0" width="613.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.1" y="1470.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (141 samples, 52.03%)</title><rect x="97.1" y="1443.0" width="613.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.1" y="1454.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (138 samples, 50.92%)</title><rect x="97.1" y="1427.0" width="600.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.1" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (138 samples, 50.92%)</title><rect x="97.1" y="1411.0" width="600.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.1" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (138 samples, 50.92%)</title><rect x="97.1" y="1395.0" width="600.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.1" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (137 samples, 50.55%)</title><rect x="97.1" y="1379.0" width="596.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.1" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 13.28%)</title><rect x="105.8" y="1363.0" width="156.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.8" y="1374.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (35 samples, 12.92%)</title><rect x="110.1" y="1347.0" width="152.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.1" y="1358.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (35 samples, 12.92%)</title><rect x="110.1" y="1331.0" width="152.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.1" y="1342.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 12.92%)</title><rect x="110.1" y="1315.0" width="152.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.1" y="1326.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 12.92%)</title><rect x="110.1" y="1299.0" width="152.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.1" y="1310.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (35 samples, 12.92%)</title><rect x="110.1" y="1283.0" width="152.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.1" y="1294.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 5.17%)</title><rect x="110.1" y="1267.0" width="61.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.1" y="1278.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.48%)</title><rect x="110.1" y="1251.0" width="17.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.48%)</title><rect x="110.1" y="1235.0" width="17.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.48%)</title><rect x="110.1" y="1219.0" width="17.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.48%)</title><rect x="110.1" y="1203.0" width="17.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.11%)</title><rect x="110.1" y="1187.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.37%)</title><rect x="123.2" y="1187.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (10 samples, 3.69%)</title><rect x="127.6" y="1251.0" width="43.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.6" y="1262.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="127.6" y="1235.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="130.6" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="127.6" y="1219.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="130.6" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="127.6" y="1203.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="130.6" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="127.6" y="1187.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="130.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 3.32%)</title><rect x="131.9" y="1235.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="134.9" y="1246.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.11%)</title><rect x="131.9" y="1219.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 1.11%)</title><rect x="131.9" y="1203.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 1.85%)</title><rect x="145.0" y="1219.0" width="21.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.0" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 1.85%)</title><rect x="145.0" y="1203.0" width="21.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.0" y="1214.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (2 samples, 0.74%)</title><rect x="145.0" y="1187.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 1.11%)</title><rect x="153.7" y="1187.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.37%)</title><rect x="162.4" y="1171.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.37%)</title><rect x="166.8" y="1219.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.8" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="166.8" y="1203.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="169.8" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="166.8" y="1187.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="169.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="166.8" y="1171.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="169.8" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="166.8" y="1155.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="169.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 7.01%)</title><rect x="171.1" y="1267.0" width="82.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.1" y="1278.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.74%)</title><rect x="171.1" y="1251.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="175.5" y="1235.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.37%)</title><rect x="175.5" y="1219.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 6.27%)</title><rect x="179.8" y="1251.0" width="74.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.8" y="1262.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.85%)</title><rect x="184.2" y="1235.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.2" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.48%)</title><rect x="188.5" y="1219.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 4.06%)</title><rect x="205.9" y="1235.0" width="47.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.9" y="1246.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 4.06%)</title><rect x="205.9" y="1219.0" width="47.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.9" y="1230.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="205.9" y="1203.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 3.69%)</title><rect x="210.3" y="1203.0" width="43.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.3" y="1214.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.21%)</title><rect x="214.6" y="1187.0" width="26.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.6" y="1198.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.11%)</title><rect x="227.7" y="1171.0" width="13.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.11%)</title><rect x="227.7" y="1155.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.11%)</title><rect x="227.7" y="1139.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 1.11%)</title><rect x="227.7" y="1123.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.37%)</title><rect x="236.4" y="1107.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.74%)</title><rect x="240.8" y="1187.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.74%)</title><rect x="240.8" y="1171.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.74%)</title><rect x="240.8" y="1155.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.74%)</title><rect x="240.8" y="1139.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.74%)</title><rect x="240.8" y="1123.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.37%)</title><rect x="249.5" y="1187.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="249.5" y="1171.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="249.5" y="1155.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.74%)</title><rect x="253.8" y="1267.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.74%)</title><rect x="253.8" y="1251.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.74%)</title><rect x="253.8" y="1235.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.74%)</title><rect x="253.8" y="1219.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.74%)</title><rect x="253.8" y="1203.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (90 samples, 33.21%)</title><rect x="262.5" y="1363.0" width="391.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.5" y="1374.0">com/linecorp/decaton/processor/runtime/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 6.27%)</title><rect x="262.5" y="1347.0" width="74.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.5" y="1358.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 5.54%)</title><rect x="271.3" y="1331.0" width="65.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.3" y="1342.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 3.32%)</title><rect x="297.4" y="1315.0" width="39.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.4" y="1326.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.74%)</title><rect x="306.1" y="1299.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.74%)</title><rect x="306.1" y="1283.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.74%)</title><rect x="306.1" y="1267.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.74%)</title><rect x="306.1" y="1251.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.37%)</title><rect x="310.4" y="1235.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.4" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.37%)</title><rect x="310.4" y="1219.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.4" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 1.85%)</title><rect x="314.8" y="1299.0" width="21.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.8" y="1310.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.48%)</title><rect x="319.2" y="1283.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="322.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.48%)</title><rect x="319.2" y="1267.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.37%)</title><rect x="332.2" y="1251.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 1.85%)</title><rect x="336.6" y="1347.0" width="21.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.6" y="1358.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 1.85%)</title><rect x="336.6" y="1331.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.6" y="1342.0">c..</text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 1.85%)</title><rect x="336.6" y="1315.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.6" y="1326.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (19 samples, 7.01%)</title><rect x="358.3" y="1347.0" width="82.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.3" y="1358.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (19 samples, 7.01%)</title><rect x="358.3" y="1331.0" width="82.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.3" y="1342.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="367.0" y="1315.0" width="4.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="370.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.95%)</title><rect x="371.4" y="1315.0" width="34.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.4" y="1326.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.58%)</title><rect x="371.4" y="1299.0" width="30.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.4" y="1310.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.21%)</title><rect x="375.8" y="1283.0" width="26.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="378.8" y="1294.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.48%)</title><rect x="380.1" y="1267.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.48%)</title><rect x="380.1" y="1251.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.1" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.48%)</title><rect x="380.1" y="1235.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.1" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.37%)</title><rect x="384.5" y="1219.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="387.5" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.37%)</title><rect x="384.5" y="1203.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="387.5" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.74%)</title><rect x="388.8" y="1219.0" width="8.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="391.8" y="1230.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="397.5" y="1267.0" width="4.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="400.5" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="401.9" y="1299.0" width="4.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="404.9" y="1310.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.95%)</title><rect x="406.2" y="1315.0" width="34.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.2" y="1326.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.95%)</title><rect x="406.2" y="1299.0" width="34.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.2" y="1310.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.95%)</title><rect x="406.2" y="1283.0" width="34.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.2" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.21%)</title><rect x="414.9" y="1267.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.9" y="1278.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.21%)</title><rect x="414.9" y="1251.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="417.9" y="1262.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.37%)</title><rect x="428.0" y="1235.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.74%)</title><rect x="432.4" y="1235.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="435.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (44 samples, 16.24%)</title><rect x="441.1" y="1347.0" width="191.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.1" y="1358.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (44 samples, 16.24%)</title><rect x="441.1" y="1331.0" width="191.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.1" y="1342.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (42 samples, 15.50%)</title><rect x="441.1" y="1315.0" width="182.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.1" y="1326.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (42 samples, 15.50%)</title><rect x="441.1" y="1299.0" width="182.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.1" y="1310.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (42 samples, 15.50%)</title><rect x="441.1" y="1283.0" width="182.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.1" y="1294.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.37%)</title><rect x="454.1" y="1267.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="457.1" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.37%)</title><rect x="454.1" y="1251.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.1" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.37%)</title><rect x="454.1" y="1235.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.1" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.37%)</title><rect x="454.1" y="1219.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (38 samples, 14.02%)</title><rect x="458.5" y="1267.0" width="165.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.5" y="1278.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (38 samples, 14.02%)</title><rect x="458.5" y="1251.0" width="165.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="461.5" y="1262.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (37 samples, 13.65%)</title><rect x="462.8" y="1235.0" width="161.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="465.8" y="1246.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.11%)</title><rect x="475.9" y="1219.0" width="13.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="478.9" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.74%)</title><rect x="489.0" y="1219.0" width="8.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="492.0" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.37%)</title><rect x="497.7" y="1219.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.7" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.37%)</title><rect x="502.0" y="1219.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="505.0" y="1230.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (27 samples, 9.96%)</title><rect x="506.4" y="1219.0" width="117.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="509.4" y="1230.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.37%)</title><rect x="528.2" y="1203.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="531.2" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="532.5" y="1203.0" width="4.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="535.5" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="532.5" y="1187.0" width="4.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="535.5" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.74%)</title><rect x="536.9" y="1203.0" width="8.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="539.9" y="1214.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 2.58%)</title><rect x="545.6" y="1203.0" width="30.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="548.6" y="1214.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.74%)</title><rect x="576.1" y="1203.0" width="8.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="579.1" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.37%)</title><rect x="584.8" y="1203.0" width="4.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="587.8" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.37%)</title><rect x="589.1" y="1203.0" width="4.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="592.1" y="1214.0"></text>
</g>
<g>
<title>_init (1 samples, 0.37%)</title><rect x="593.5" y="1203.0" width="4.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="596.5" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.48%)</title><rect x="597.8" y="1203.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="600.8" y="1214.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.74%)</title><rect x="615.2" y="1203.0" width="8.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="618.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.74%)</title><rect x="623.9" y="1315.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.85%)</title><rect x="632.7" y="1347.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.7" y="1358.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="645.7" y="1331.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="648.7" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="645.7" y="1315.0" width="4.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="648.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.37%)</title><rect x="650.1" y="1331.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="653.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.37%)</title><rect x="650.1" y="1315.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1805159713.accept (1 samples, 0.37%)</title><rect x="650.1" y="1299.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="653.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.37%)</title><rect x="650.1" y="1283.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="653.1" y="1294.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.37%)</title><rect x="650.1" y="1267.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.1" y="1278.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.37%)</title><rect x="650.1" y="1251.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="653.1" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="650.1" y="1235.0" width="4.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="653.1" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="650.1" y="1219.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="653.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.32%)</title><rect x="654.4" y="1363.0" width="39.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="657.4" y="1374.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 2.95%)</title><rect x="658.8" y="1347.0" width="34.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.8" y="1358.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.21%)</title><rect x="667.5" y="1331.0" width="26.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.5" y="1342.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/996537998.accept (6 samples, 2.21%)</title><rect x="667.5" y="1315.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.5" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (6 samples, 2.21%)</title><rect x="667.5" y="1299.0" width="26.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.5" y="1310.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/80425629.complete (6 samples, 2.21%)</title><rect x="667.5" y="1283.0" width="26.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="670.5" y="1294.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (6 samples, 2.21%)</title><rect x="667.5" y="1267.0" width="26.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.5" y="1278.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 2.21%)</title><rect x="667.5" y="1251.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="670.5" y="1262.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 2.21%)</title><rect x="667.5" y="1235.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="670.5" y="1246.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 2.21%)</title><rect x="667.5" y="1219.0" width="26.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.5" y="1230.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 2.21%)</title><rect x="667.5" y="1203.0" width="26.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="670.5" y="1214.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 2.21%)</title><rect x="667.5" y="1187.0" width="26.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="670.5" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.37%)</title><rect x="693.6" y="1379.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="696.6" y="1390.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="693.6" y="1363.0" width="4.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="696.6" y="1374.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="693.6" y="1347.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="696.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.11%)</title><rect x="698.0" y="1427.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="701.0" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.11%)</title><rect x="698.0" y="1411.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="701.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.37%)</title><rect x="711.0" y="1475.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.37%)</title><rect x="711.0" y="1459.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.37%)</title><rect x="711.0" y="1443.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.0" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.37%)</title><rect x="711.0" y="1427.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.0" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.37%)</title><rect x="711.0" y="1411.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="714.0" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.37%)</title><rect x="711.0" y="1395.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="714.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.37%)</title><rect x="711.0" y="1379.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="714.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.37%)</title><rect x="711.0" y="1363.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.37%)</title><rect x="711.0" y="1347.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.0" y="1358.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.37%)</title><rect x="711.0" y="1331.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.0" y="1342.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.37%)</title><rect x="711.0" y="1315.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="714.0" y="1326.0"></text>
</g>
<g>
<title>start_thread (109 samples, 40.22%)</title><rect x="715.4" y="1475.0" width="474.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="718.4" y="1486.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (109 samples, 40.22%)</title><rect x="715.4" y="1459.0" width="474.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="718.4" y="1470.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 2.21%)</title><rect x="715.4" y="1443.0" width="26.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="718.4" y="1454.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.21%)</title><rect x="715.4" y="1427.0" width="26.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="718.4" y="1438.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.21%)</title><rect x="715.4" y="1411.0" width="26.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="718.4" y="1422.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.21%)</title><rect x="715.4" y="1395.0" width="26.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="718.4" y="1406.0">G..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.37%)</title><rect x="724.1" y="1379.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="727.1" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.37%)</title><rect x="728.5" y="1379.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="731.5" y="1390.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.37%)</title><rect x="732.8" y="1379.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="735.8" y="1390.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.37%)</title><rect x="737.2" y="1379.0" width="4.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="740.2" y="1390.0"></text>
</g>
<g>
<title>JavaThread::run() (103 samples, 38.01%)</title><rect x="741.5" y="1443.0" width="448.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="744.5" y="1454.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (103 samples, 38.01%)</title><rect x="741.5" y="1427.0" width="448.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="744.5" y="1438.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (103 samples, 38.01%)</title><rect x="741.5" y="1411.0" width="448.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.5" y="1422.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (102 samples, 37.64%)</title><rect x="741.5" y="1395.0" width="444.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="744.5" y="1406.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (100 samples, 36.90%)</title><rect x="741.5" y="1379.0" width="435.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="744.5" y="1390.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (100 samples, 36.90%)</title><rect x="741.5" y="1363.0" width="435.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.5" y="1374.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 21.03%)</title><rect x="741.5" y="1347.0" width="248.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="744.5" y="1358.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.74%)</title><rect x="741.5" y="1331.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="744.5" y="1342.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.74%)</title><rect x="741.5" y="1315.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.5" y="1326.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.37%)</title><rect x="745.9" y="1299.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="748.9" y="1310.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.37%)</title><rect x="745.9" y="1283.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="748.9" y="1294.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.74%)</title><rect x="750.2" y="1331.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="753.2" y="1342.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.37%)</title><rect x="750.2" y="1315.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="753.2" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.37%)</title><rect x="750.2" y="1299.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="753.2" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="750.2" y="1283.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="753.2" y="1294.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.37%)</title><rect x="754.6" y="1315.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="757.6" y="1326.0"></text>
</g>
<g>
<title>MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.37%)</title><rect x="754.6" y="1299.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="757.6" y="1310.0"></text>
</g>
<g>
<title>Assembler::orq(RegisterImpl*, Address) (1 samples, 0.37%)</title><rect x="754.6" y="1283.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="757.6" y="1294.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.85%)</title><rect x="758.9" y="1331.0" width="21.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.9" y="1342.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.85%)</title><rect x="758.9" y="1315.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="761.9" y="1326.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 1.48%)</title><rect x="763.3" y="1299.0" width="17.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.3" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.11%)</title><rect x="780.7" y="1331.0" width="13.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.7" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.11%)</title><rect x="780.7" y="1315.0" width="13.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="783.7" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.11%)</title><rect x="780.7" y="1299.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.7" y="1310.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.37%)</title><rect x="780.7" y="1283.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.7" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.74%)</title><rect x="785.1" y="1283.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="788.1" y="1294.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.37%)</title><rect x="785.1" y="1267.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.1" y="1278.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.37%)</title><rect x="789.4" y="1267.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="792.4" y="1278.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.37%)</title><rect x="789.4" y="1251.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="792.4" y="1262.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.37%)</title><rect x="789.4" y="1235.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="792.4" y="1246.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.37%)</title><rect x="789.4" y="1219.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="792.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (45 samples, 16.61%)</title><rect x="793.8" y="1331.0" width="195.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="796.8" y="1342.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.37%)</title><rect x="793.8" y="1315.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="796.8" y="1326.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.37%)</title><rect x="798.1" y="1315.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="801.1" y="1326.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.74%)</title><rect x="802.5" y="1315.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="805.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.37%)</title><rect x="811.2" y="1315.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.37%)</title><rect x="811.2" y="1299.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="814.2" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.37%)</title><rect x="811.2" y="1283.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="814.2" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.11%)</title><rect x="815.5" y="1315.0" width="13.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="818.5" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.37%)</title><rect x="815.5" y="1299.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="818.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.74%)</title><rect x="819.9" y="1299.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="822.9" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="824.2" y="1283.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="827.2" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.85%)</title><rect x="828.6" y="1315.0" width="21.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="831.6" y="1326.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.37%)</title><rect x="846.0" y="1299.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="849.0" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.95%)</title><rect x="850.4" y="1315.0" width="34.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="853.4" y="1326.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.37%)</title><rect x="863.4" y="1299.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="866.4" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.48%)</title><rect x="867.8" y="1299.0" width="17.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="870.8" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.74%)</title><rect x="876.5" y="1283.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.5" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.48%)</title><rect x="885.2" y="1315.0" width="17.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="888.2" y="1326.0"></text>
</g>
<g>
<title>loadConL0Node::bottom_type() const (1 samples, 0.37%)</title><rect x="898.3" y="1299.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.3" y="1310.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.37%)</title><rect x="898.3" y="1283.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="901.3" y="1294.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.37%)</title><rect x="898.3" y="1267.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.3" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.37%)</title><rect x="902.6" y="1315.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.6" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.37%)</title><rect x="902.6" y="1299.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.6" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.74%)</title><rect x="907.0" y="1315.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="910.0" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.37%)</title><rect x="911.3" y="1299.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="914.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.37%)</title><rect x="911.3" y="1283.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="914.3" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.37%)</title><rect x="911.3" y="1267.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.3" y="1278.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 3.69%)</title><rect x="915.7" y="1315.0" width="43.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="918.7" y="1326.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 3.69%)</title><rect x="915.7" y="1299.0" width="43.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.7" y="1310.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 3.69%)</title><rect x="915.7" y="1283.0" width="43.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="918.7" y="1294.0">Phas..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.74%)</title><rect x="915.7" y="1267.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.7" y="1278.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 2.58%)</title><rect x="924.4" y="1267.0" width="30.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.4" y="1278.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.37%)</title><rect x="954.9" y="1267.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.9" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.74%)</title><rect x="959.2" y="1315.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.2" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.74%)</title><rect x="959.2" y="1299.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.2" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.74%)</title><rect x="967.9" y="1315.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="970.9" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="972.3" y="1299.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.3" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.11%)</title><rect x="976.6" y="1315.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.6" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 12.55%)</title><rect x="989.7" y="1347.0" width="148.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.7" y="1358.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.37%)</title><rect x="989.7" y="1331.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.37%)</title><rect x="989.7" y="1315.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1299.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1283.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1267.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1251.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1235.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1219.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1203.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1187.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1171.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1155.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1139.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1123.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1107.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1091.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1075.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1059.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1043.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1027.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="1011.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="995.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="979.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="963.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="947.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="931.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="915.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="899.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="883.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="867.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="851.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="835.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="819.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="803.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="787.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="771.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="755.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="739.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="723.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="707.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="691.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="675.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="659.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="643.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="627.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="611.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="595.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="579.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="563.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="547.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="531.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="515.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="499.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="483.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="467.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="451.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="435.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="419.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="403.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="387.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="371.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="355.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="339.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="323.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="307.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="291.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="275.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="259.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="243.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="227.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="211.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="195.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="179.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="163.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="147.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="131.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="115.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="992.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="99.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="83.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="67.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.37%)</title><rect x="989.7" y="51.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.7" y="62.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.37%)</title><rect x="989.7" y="35.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.7" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.74%)</title><rect x="994.1" y="1331.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="997.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (27 samples, 9.96%)</title><rect x="1002.8" y="1331.0" width="117.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.8" y="1342.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.37%)</title><rect x="1002.8" y="1315.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.8" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.37%)</title><rect x="1002.8" y="1299.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.8" y="1310.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.37%)</title><rect x="1002.8" y="1283.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.11%)</title><rect x="1007.1" y="1315.0" width="13.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.74%)</title><rect x="1020.2" y="1315.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.2" y="1326.0"></text>
</g>
<g>
<title>HaltNode::pinned() const (1 samples, 0.37%)</title><rect x="1020.2" y="1299.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.2" y="1310.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.37%)</title><rect x="1024.5" y="1299.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 6.27%)</title><rect x="1028.9" y="1315.0" width="74.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.9" y="1326.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 6.27%)</title><rect x="1028.9" y="1299.0" width="74.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.9" y="1310.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 6.27%)</title><rect x="1028.9" y="1283.0" width="74.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.9" y="1294.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.11%)</title><rect x="1085.5" y="1267.0" width="13.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.37%)</title><rect x="1098.6" y="1267.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.37%)</title><rect x="1102.9" y="1315.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.37%)</title><rect x="1102.9" y="1299.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.37%)</title><rect x="1102.9" y="1283.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.9" y="1294.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.37%)</title><rect x="1102.9" y="1267.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.9" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.11%)</title><rect x="1107.3" y="1315.0" width="13.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.11%)</title><rect x="1107.3" y="1299.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.3" y="1310.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1107.3" y="1283.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.3" y="1294.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1107.3" y="1267.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.3" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.37%)</title><rect x="1111.6" y="1283.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.6" y="1294.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1116.0" y="1283.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.11%)</title><rect x="1120.3" y="1331.0" width="13.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.11%)</title><rect x="1120.3" y="1315.0" width="13.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.3" y="1326.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1120.3" y="1299.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.3" y="1310.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.37%)</title><rect x="1120.3" y="1283.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.3" y="1294.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.37%)</title><rect x="1120.3" y="1267.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.3" y="1278.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.37%)</title><rect x="1120.3" y="1251.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.37%)</title><rect x="1124.7" y="1299.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.7" y="1310.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1129.0" y="1299.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.0" y="1310.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.37%)</title><rect x="1129.0" y="1283.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.0" y="1294.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.37%)</title><rect x="1129.0" y="1267.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.0" y="1278.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.37%)</title><rect x="1129.0" y="1251.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.0" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.37%)</title><rect x="1133.4" y="1331.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.37%)</title><rect x="1133.4" y="1315.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.37%)</title><rect x="1133.4" y="1299.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.4" y="1310.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1133.4" y="1283.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.4" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.95%)</title><rect x="1137.7" y="1347.0" width="34.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="1358.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.95%)</title><rect x="1137.7" y="1331.0" width="34.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="1342.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.95%)</title><rect x="1137.7" y="1315.0" width="34.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.7" y="1326.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.95%)</title><rect x="1137.7" y="1299.0" width="34.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.7" y="1310.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.37%)</title><rect x="1137.7" y="1283.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.7" y="1294.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.37%)</title><rect x="1137.7" y="1267.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.7" y="1278.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.37%)</title><rect x="1137.7" y="1251.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.7" y="1262.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.37%)</title><rect x="1137.7" y="1235.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.58%)</title><rect x="1142.1" y="1283.0" width="30.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.1" y="1294.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.58%)</title><rect x="1142.1" y="1267.0" width="30.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.1" y="1278.0">Pa..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.37%)</title><rect x="1142.1" y="1251.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.1" y="1262.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.37%)</title><rect x="1142.1" y="1235.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.1" y="1246.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.37%)</title><rect x="1142.1" y="1219.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.1" y="1230.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.37%)</title><rect x="1142.1" y="1203.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.1" y="1214.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.37%)</title><rect x="1142.1" y="1187.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.1" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.37%)</title><rect x="1142.1" y="1171.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.1" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.37%)</title><rect x="1142.1" y="1155.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.1" y="1166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.37%)</title><rect x="1142.1" y="1139.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.1" y="1150.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.37%)</title><rect x="1142.1" y="1123.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.1" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.37%)</title><rect x="1142.1" y="1107.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.1" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.85%)</title><rect x="1146.5" y="1251.0" width="21.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="1262.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.85%)</title><rect x="1146.5" y="1235.0" width="21.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.5" y="1246.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.85%)</title><rect x="1146.5" y="1219.0" width="21.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.5" y="1230.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.85%)</title><rect x="1146.5" y="1203.0" width="21.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="1214.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.85%)</title><rect x="1146.5" y="1187.0" width="21.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.85%)</title><rect x="1146.5" y="1171.0" width="21.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="1182.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1146.5" y="1155.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1146.5" y="1139.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1146.5" y="1123.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1146.5" y="1107.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1146.5" y="1091.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1146.5" y="1075.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1146.5" y="1059.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1146.5" y="1043.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="1027.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1146.5" y="1011.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1146.5" y="995.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1146.5" y="979.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1146.5" y="963.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1146.5" y="947.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="931.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1146.5" y="915.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1146.5" y="899.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1146.5" y="883.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1146.5" y="867.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1146.5" y="851.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="835.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1146.5" y="819.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1146.5" y="803.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1146.5" y="787.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1146.5" y="771.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1146.5" y="755.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="739.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1146.5" y="723.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1146.5" y="707.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1146.5" y="691.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1146.5" y="675.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1146.5" y="659.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="643.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1146.5" y="627.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1146.5" y="611.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1146.5" y="595.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1146.5" y="579.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1146.5" y="563.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1146.5" y="547.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1146.5" y="531.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1146.5" y="515.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1146.5" y="499.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1146.5" y="483.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="494.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.37%)</title><rect x="1146.5" y="467.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.5" y="478.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.37%)</title><rect x="1146.5" y="451.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="462.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.37%)</title><rect x="1146.5" y="435.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="446.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.37%)</title><rect x="1146.5" y="419.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="430.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.37%)</title><rect x="1146.5" y="403.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.5" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.8" y="1059.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.8" y="1043.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.8" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1150.8" y="1027.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1150.8" y="1011.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1150.8" y="995.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1150.8" y="979.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1150.8" y="963.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="974.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1150.8" y="947.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="958.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1150.8" y="931.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1150.8" y="915.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.37%)</title><rect x="1150.8" y="899.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.37%)</title><rect x="1150.8" y="883.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1150.8" y="867.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1150.8" y="851.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.8" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.37%)</title><rect x="1150.8" y="835.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="846.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::append(ciTypeFlow::Block* const&amp;) (1 samples, 0.37%)</title><rect x="1150.8" y="819.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.11%)</title><rect x="1155.2" y="1155.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.2" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.11%)</title><rect x="1155.2" y="1139.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.11%)</title><rect x="1155.2" y="1123.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.11%)</title><rect x="1155.2" y="1107.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.11%)</title><rect x="1155.2" y="1091.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.11%)</title><rect x="1155.2" y="1075.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.11%)</title><rect x="1155.2" y="1059.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.11%)</title><rect x="1155.2" y="1043.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.11%)</title><rect x="1155.2" y="1027.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.11%)</title><rect x="1155.2" y="1011.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.11%)</title><rect x="1155.2" y="995.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.11%)</title><rect x="1155.2" y="979.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.11%)</title><rect x="1155.2" y="963.0" width="13.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.11%)</title><rect x="1155.2" y="947.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.2" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.11%)</title><rect x="1155.2" y="931.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.11%)</title><rect x="1155.2" y="915.0" width="13.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.11%)</title><rect x="1155.2" y="899.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.11%)</title><rect x="1155.2" y="883.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1155.2" y="867.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1155.2" y="851.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1155.2" y="835.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1155.2" y="819.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1155.2" y="803.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1155.2" y="787.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1155.2" y="771.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1155.2" y="755.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1155.2" y="739.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1155.2" y="723.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1155.2" y="707.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1155.2" y="691.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1155.2" y="675.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1155.2" y="659.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1155.2" y="643.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1155.2" y="627.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1155.2" y="611.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1155.2" y="595.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1155.2" y="579.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.2" y="563.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1155.2" y="547.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1155.2" y="531.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1155.2" y="515.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1155.2" y="499.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1155.2" y="483.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="494.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.2" y="467.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.37%)</title><rect x="1155.2" y="451.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1159.5" y="563.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1159.5" y="547.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1159.5" y="531.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1159.5" y="515.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1159.5" y="499.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1159.5" y="483.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1159.5" y="467.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1159.5" y="451.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1159.5" y="435.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="446.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.37%)</title><rect x="1159.5" y="419.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="430.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.37%)</title><rect x="1159.5" y="403.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.37%)</title><rect x="1163.9" y="867.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.37%)</title><rect x="1163.9" y="851.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.37%)</title><rect x="1163.9" y="835.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.37%)</title><rect x="1163.9" y="819.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1251.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1168.2" y="1235.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.2" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1168.2" y="1219.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="1230.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.37%)</title><rect x="1168.2" y="1203.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.2" y="1214.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.37%)</title><rect x="1168.2" y="1187.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="1198.0"></text>
</g>
<g>
<title>MethodData::mileage_of(Method*) (1 samples, 0.37%)</title><rect x="1168.2" y="1171.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="1182.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.37%)</title><rect x="1172.6" y="1347.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1358.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1172.6" y="1331.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="1342.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1172.6" y="1315.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="1326.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.37%)</title><rect x="1172.6" y="1299.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1310.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.37%)</title><rect x="1172.6" y="1283.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="1294.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.37%)</title><rect x="1172.6" y="1267.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1175.6" y="1278.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.74%)</title><rect x="1176.9" y="1379.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1390.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.74%)</title><rect x="1176.9" y="1363.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.74%)</title><rect x="1176.9" y="1347.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.37%)</title><rect x="1176.9" y="1331.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1342.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.37%)</title><rect x="1176.9" y="1315.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1326.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.37%)</title><rect x="1176.9" y="1299.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1310.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1283.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.37%)</title><rect x="1176.9" y="1267.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1251.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1176.9" y="1235.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1176.9" y="1219.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1203.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1187.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1171.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1176.9" y="1155.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1176.9" y="1139.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1123.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.37%)</title><rect x="1176.9" y="1107.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1176.9" y="1091.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1176.9" y="1075.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1176.9" y="1059.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1176.9" y="1043.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1176.9" y="1027.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1176.9" y="1011.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.37%)</title><rect x="1176.9" y="995.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.37%)</title><rect x="1176.9" y="979.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="990.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1176.9" y="963.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="974.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.37%)</title><rect x="1176.9" y="947.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="958.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.37%)</title><rect x="1176.9" y="931.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="942.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.37%)</title><rect x="1176.9" y="915.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="926.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.37%)</title><rect x="1181.3" y="1331.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1342.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.37%)</title><rect x="1181.3" y="1315.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="1326.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1181.3" y="1299.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="1310.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.37%)</title><rect x="1181.3" y="1283.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1294.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.37%)</title><rect x="1181.3" y="1267.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1278.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.37%)</title><rect x="1185.6" y="1395.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.6" y="1406.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.37%)</title><rect x="1185.6" y="1379.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.6" y="1390.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.37%)</title><rect x="1185.6" y="1363.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.6" y="1374.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.37%)</title><rect x="1185.6" y="1347.0" width="4.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.6" y="1358.0"></text>
</g>
</g>
</svg>
