<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,053 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (262 samples, 24.88%)</title><rect x="10.0" y="867.0" width="293.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="12.2" y="851.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="12.2" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.2" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.2" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.09%)</title><rect x="12.2" y="787.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="755.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="739.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="723.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="12.2" y="707.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="12.2" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$86/613408798.get$Lambda (1 samples, 0.09%)</title><rect x="12.2" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (259 samples, 24.60%)</title><rect x="13.4" y="851.0" width="290.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="862.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.38%)</title><rect x="13.4" y="835.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.38%)</title><rect x="13.4" y="819.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (4 samples, 0.38%)</title><rect x="13.4" y="803.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.38%)</title><rect x="13.4" y="787.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.38%)</title><rect x="13.4" y="771.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.38%)</title><rect x="13.4" y="755.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.09%)</title><rect x="17.8" y="835.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="17.8" y="819.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="17.8" y="803.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="17.8" y="787.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="17.8" y="771.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="17.8" y="755.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="17.8" y="739.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="17.8" y="723.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="17.8" y="707.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="17.8" y="691.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="17.8" y="675.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.8" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="17.8" y="659.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="20.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.19%)</title><rect x="19.0" y="835.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.19%)</title><rect x="19.0" y="819.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="20.1" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="20.1" y="787.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="20.1" y="771.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (184 samples, 17.47%)</title><rect x="21.2" y="835.0" width="206.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.2" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (173 samples, 16.43%)</title><rect x="21.2" y="819.0" width="193.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.2" y="830.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (172 samples, 16.33%)</title><rect x="22.3" y="803.0" width="192.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.3" y="814.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (3 samples, 0.28%)</title><rect x="22.3" y="787.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (137 samples, 13.01%)</title><rect x="25.7" y="787.0" width="153.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.7" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (137 samples, 13.01%)</title><rect x="25.7" y="771.0" width="153.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.7" y="782.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (137 samples, 13.01%)</title><rect x="25.7" y="755.0" width="153.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.7" y="766.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (137 samples, 13.01%)</title><rect x="25.7" y="739.0" width="153.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.7" y="750.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (137 samples, 13.01%)</title><rect x="25.7" y="723.0" width="153.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.7" y="734.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (137 samples, 13.01%)</title><rect x="25.7" y="707.0" width="153.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.7" y="718.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (89 samples, 8.45%)</title><rect x="25.7" y="691.0" width="99.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.7" y="702.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.52%)</title><rect x="25.7" y="675.0" width="17.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.52%)</title><rect x="25.7" y="659.0" width="17.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.52%)</title><rect x="25.7" y="643.0" width="17.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetWaitStatus (7 samples, 0.66%)</title><rect x="25.7" y="627.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.85%)</title><rect x="33.5" y="627.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 6.93%)</title><rect x="43.6" y="675.0" width="81.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.6" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 6.93%)</title><rect x="43.6" y="659.0" width="81.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.6" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (72 samples, 6.84%)</title><rect x="43.6" y="643.0" width="80.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.6" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetWaitStatus (3 samples, 0.28%)</title><rect x="44.7" y="627.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="48.1" y="627.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (67 samples, 6.36%)</title><rect x="49.2" y="627.0" width="75.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.2" y="638.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (67 samples, 6.36%)</title><rect x="49.2" y="611.0" width="75.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.2" y="622.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 5.79%)</title><rect x="49.2" y="595.0" width="68.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="52.2" y="606.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="49.2" y="579.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="52.2" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="51.5" y="579.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="54.5" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.70%)</title><rect x="52.6" y="579.0" width="43.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="55.6" y="590.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.47%)</title><rect x="96.3" y="579.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="99.3" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.33%)</title><rect x="101.9" y="579.0" width="15.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="104.9" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.28%)</title><rect x="117.6" y="595.0" width="3.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="120.6" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.28%)</title><rect x="120.9" y="595.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="123.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="124.3" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (34 samples, 3.23%)</title><rect x="125.4" y="691.0" width="38.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.4" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (34 samples, 3.23%)</title><rect x="125.4" y="675.0" width="38.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.4" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (34 samples, 3.23%)</title><rect x="125.4" y="659.0" width="38.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.4" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (34 samples, 3.23%)</title><rect x="125.4" y="643.0" width="38.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.4" y="654.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="162.4" y="627.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="165.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 1.33%)</title><rect x="163.5" y="691.0" width="15.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="166.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (14 samples, 1.33%)</title><rect x="163.5" y="675.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (14 samples, 1.33%)</title><rect x="163.5" y="659.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (9 samples, 0.85%)</title><rect x="169.1" y="643.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.1" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.47%)</title><rect x="173.6" y="627.0" width="5.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="176.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.19%)</title><rect x="179.2" y="787.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.19%)</title><rect x="179.2" y="771.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.28%)</title><rect x="181.5" y="787.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.28%)</title><rect x="181.5" y="771.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.28%)</title><rect x="181.5" y="755.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 2.56%)</title><rect x="184.8" y="787.0" width="30.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="187.8" y="798.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 2.47%)</title><rect x="184.8" y="771.0" width="29.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="187.8" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.76%)</title><rect x="203.9" y="755.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.9" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.19%)</title><rect x="203.9" y="739.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.9" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.19%)</title><rect x="203.9" y="723.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.19%)</title><rect x="203.9" y="707.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.9" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="205.0" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="208.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="205.0" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="208.0" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="205.0" y="659.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="208.0" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.19%)</title><rect x="206.1" y="739.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.38%)</title><rect x="208.3" y="739.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.3" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="212.8" y="755.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="215.8" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="214.0" y="771.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="217.0" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="215.1" y="819.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="218.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.76%)</title><rect x="216.2" y="819.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.76%)</title><rect x="216.2" y="803.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.76%)</title><rect x="216.2" y="787.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.76%)</title><rect x="216.2" y="771.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.2" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.38%)</title><rect x="220.7" y="755.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.19%)</title><rect x="225.2" y="819.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.19%)</title><rect x="225.2" y="803.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="226.3" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="226.3" y="771.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="226.3" y="755.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.3" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="226.3" y="739.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 6.46%)</title><rect x="227.4" y="835.0" width="76.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.4" y="846.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 6.46%)</title><rect x="227.4" y="819.0" width="76.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.4" y="830.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (46 samples, 4.37%)</title><rect x="227.4" y="803.0" width="51.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.4" y="814.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (46 samples, 4.37%)</title><rect x="227.4" y="787.0" width="51.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.4" y="798.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (46 samples, 4.37%)</title><rect x="227.4" y="771.0" width="51.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.4" y="782.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (38 samples, 3.61%)</title><rect x="227.4" y="755.0" width="42.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.4" y="766.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (38 samples, 3.61%)</title><rect x="227.4" y="739.0" width="42.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.4" y="750.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.52%)</title><rect x="233.0" y="723.0" width="17.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.95%)</title><rect x="239.7" y="707.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.95%)</title><rect x="239.7" y="691.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.95%)</title><rect x="239.7" y="675.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.95%)</title><rect x="239.7" y="659.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.95%)</title><rect x="239.7" y="643.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.95%)</title><rect x="239.7" y="627.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.95%)</title><rect x="239.7" y="611.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (17 samples, 1.61%)</title><rect x="250.9" y="723.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (16 samples, 1.52%)</title><rect x="252.1" y="707.0" width="17.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (16 samples, 1.52%)</title><rect x="252.1" y="691.0" width="17.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="255.1" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (16 samples, 1.52%)</title><rect x="252.1" y="675.0" width="17.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.1" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.85%)</title><rect x="259.9" y="659.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.38%)</title><rect x="270.0" y="755.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.38%)</title><rect x="270.0" y="739.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.19%)</title><rect x="270.0" y="723.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="270.0" y="707.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.0" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="270.0" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.0" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="270.0" y="675.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="273.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="271.1" y="707.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="271.1" y="691.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="271.1" y="675.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.19%)</title><rect x="272.2" y="723.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.19%)</title><rect x="272.2" y="707.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="274.5" y="755.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="274.5" y="739.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.5" y="723.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.5" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.5" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="274.5" y="691.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="277.5" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="274.5" y="675.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="277.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.09%)</title><rect x="275.6" y="755.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.19%)</title><rect x="276.7" y="755.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="277.8" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="277.8" y="723.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.8" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="277.8" y="707.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="277.8" y="691.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.57%)</title><rect x="278.9" y="803.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.57%)</title><rect x="278.9" y="787.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.47%)</title><rect x="278.9" y="771.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.38%)</title><rect x="278.9" y="755.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (4 samples, 0.38%)</title><rect x="278.9" y="739.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.28%)</title><rect x="280.1" y="723.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.19%)</title><rect x="280.1" y="707.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.19%)</title><rect x="280.1" y="691.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.19%)</title><rect x="280.1" y="675.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="280.1" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="280.1" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.1" y="654.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.09%)</title><rect x="281.2" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.2" y="670.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="281.2" y="643.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="282.3" y="707.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="283.4" y="755.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="284.5" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="284.5" y="755.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.5" y="766.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="284.5" y="739.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.5" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.09%)</title><rect x="284.5" y="723.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.5" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.09%)</title><rect x="284.5" y="707.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="285.7" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="285.7" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="285.7" y="771.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="285.7" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="285.7" y="739.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.38%)</title><rect x="286.8" y="803.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.28%)</title><rect x="286.8" y="787.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.28%)</title><rect x="286.8" y="771.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.8" y="755.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.8" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="286.8" y="723.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.09%)</title><rect x="286.8" y="707.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="287.9" y="755.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.19%)</title><rect x="287.9" y="739.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.19%)</title><rect x="287.9" y="723.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.19%)</title><rect x="287.9" y="707.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.19%)</title><rect x="287.9" y="691.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.19%)</title><rect x="287.9" y="675.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.19%)</title><rect x="287.9" y="659.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.9" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="287.9" y="643.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="290.9" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="289.0" y="643.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="292.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="290.2" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="290.2" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="290.2" y="755.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="290.2" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientRequest.makeHeader (1 samples, 0.09%)</title><rect x="290.2" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.requestHeaderVersion (1 samples, 0.09%)</title><rect x="290.2" y="707.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.85%)</title><rect x="291.3" y="803.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.85%)</title><rect x="291.3" y="787.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="291.3" y="771.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="291.3" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/733290574.accept (1 samples, 0.09%)</title><rect x="292.4" y="755.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="292.4" y="739.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="292.4" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="292.4" y="707.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="292.4" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="292.4" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="292.4" y="659.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (6 samples, 0.57%)</title><rect x="293.5" y="771.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.28%)</title><rect x="293.5" y="755.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.28%)</title><rect x="293.5" y="739.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.28%)</title><rect x="293.5" y="723.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.19%)</title><rect x="294.6" y="707.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.6" y="718.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.09%)</title><rect x="295.8" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="295.8" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="295.8" y="659.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.28%)</title><rect x="296.9" y="755.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="298.0" y="739.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="298.0" y="723.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="298.0" y="707.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="298.0" y="691.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="299.1" y="675.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.1" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="299.1" y="659.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.1" y="670.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="299.1" y="643.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.1" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="299.1" y="627.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.1" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="299.1" y="611.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.1" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="299.1" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="299.1" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="300.2" y="771.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="300.2" y="755.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.2" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="300.2" y="739.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="300.2" y="723.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="300.2" y="707.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="300.2" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="300.2" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.19%)</title><rect x="301.4" y="803.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="301.4" y="787.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.09%)</title><rect x="301.4" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="302.5" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="302.5" y="755.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="302.5" y="739.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (717 samples, 68.09%)</title><rect x="303.6" y="867.0" width="803.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.6" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (717 samples, 68.09%)</title><rect x="303.6" y="851.0" width="803.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.6" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (717 samples, 68.09%)</title><rect x="303.6" y="835.0" width="803.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.6" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (470 samples, 44.63%)</title><rect x="304.7" y="819.0" width="526.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.7" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/54480285..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (470 samples, 44.63%)</title><rect x="304.7" y="803.0" width="526.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.7" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (470 samples, 44.63%)</title><rect x="304.7" y="787.0" width="526.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.7" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="313.7" y="771.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="316.7" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="313.7" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="316.7" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.85%)</title><rect x="314.8" y="771.0" width="10.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="317.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.76%)</title><rect x="315.9" y="755.0" width="9.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="318.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (451 samples, 42.83%)</title><rect x="324.9" y="771.0" width="505.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.9" y="782.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.09%)</title><rect x="335.0" y="755.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (168 samples, 15.95%)</title><rect x="336.1" y="755.0" width="188.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.1" y="766.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (168 samples, 15.95%)</title><rect x="336.1" y="739.0" width="188.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.1" y="750.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (168 samples, 15.95%)</title><rect x="336.1" y="723.0" width="188.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.1" y="734.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="336.1" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="339.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="336.1" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="339.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="336.1" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="339.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 15.86%)</title><rect x="337.2" y="707.0" width="187.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.2" y="718.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 15.86%)</title><rect x="337.2" y="691.0" width="187.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.2" y="702.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 15.86%)</title><rect x="337.2" y="675.0" width="187.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.2" y="686.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (37 samples, 3.51%)</title><rect x="337.2" y="659.0" width="41.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.2" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (12 samples, 1.14%)</title><rect x="337.2" y="643.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (12 samples, 1.14%)</title><rect x="337.2" y="627.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="340.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (11 samples, 1.04%)</title><rect x="337.2" y="611.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="349.5" y="611.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="352.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="349.5" y="595.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 2.37%)</title><rect x="350.7" y="643.0" width="28.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.7" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (19 samples, 1.80%)</title><rect x="356.3" y="627.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.3" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.19%)</title><rect x="356.3" y="611.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.19%)</title><rect x="356.3" y="595.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="358.5" y="611.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="358.5" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="358.5" y="579.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.5" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="358.5" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="361.5" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="358.5" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="361.5" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="358.5" y="531.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="361.5" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="358.5" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="361.5" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="358.5" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="361.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (16 samples, 1.52%)</title><rect x="359.6" y="611.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.09%)</title><rect x="377.6" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="380.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (118 samples, 11.21%)</title><rect x="378.7" y="659.0" width="132.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.7" y="670.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (13 samples, 1.23%)</title><rect x="378.7" y="643.0" width="14.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="381.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (13 samples, 1.23%)</title><rect x="378.7" y="627.0" width="14.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (7 samples, 0.66%)</title><rect x="378.7" y="611.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="381.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="379.8" y="595.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 0.47%)</title><rect x="380.9" y="595.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (6 samples, 0.57%)</title><rect x="386.5" y="611.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (6 samples, 0.57%)</title><rect x="386.5" y="595.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="389.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.66%)</title><rect x="393.2" y="643.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.66%)</title><rect x="393.2" y="627.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (7 samples, 0.66%)</title><rect x="393.2" y="611.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.57%)</title><rect x="401.1" y="643.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.47%)</title><rect x="401.1" y="627.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.38%)</title><rect x="402.2" y="611.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="405.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.19%)</title><rect x="404.5" y="595.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="407.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="406.7" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="409.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.47%)</title><rect x="407.8" y="643.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.47%)</title><rect x="407.8" y="627.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.47%)</title><rect x="407.8" y="611.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.28%)</title><rect x="410.1" y="595.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.28%)</title><rect x="410.1" y="579.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (87 samples, 8.26%)</title><rect x="413.4" y="643.0" width="97.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.4" y="654.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (26 samples, 2.47%)</title><rect x="413.4" y="627.0" width="29.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.4" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.19%)</title><rect x="414.5" y="611.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="416.8" y="611.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.66%)</title><rect x="417.9" y="611.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="420.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.66%)</title><rect x="417.9" y="595.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.66%)</title><rect x="417.9" y="579.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.66%)</title><rect x="417.9" y="563.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.19%)</title><rect x="423.5" y="547.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.23%)</title><rect x="425.7" y="611.0" width="14.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (6 samples, 0.57%)</title><rect x="425.7" y="595.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="431.3" y="579.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (7 samples, 0.66%)</title><rect x="432.5" y="595.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (7 samples, 0.66%)</title><rect x="432.5" y="579.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (5 samples, 0.47%)</title><rect x="434.7" y="563.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (5 samples, 0.47%)</title><rect x="434.7" y="547.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="437.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="440.3" y="611.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="440.3" y="595.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="443.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (61 samples, 5.79%)</title><rect x="442.6" y="627.0" width="68.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.6" y="638.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (61 samples, 5.79%)</title><rect x="442.6" y="611.0" width="68.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.6" y="622.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (57 samples, 5.41%)</title><rect x="442.6" y="595.0" width="63.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.6" y="606.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 2.28%)</title><rect x="443.7" y="579.0" width="26.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.7" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.38%)</title><rect x="444.8" y="563.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.47%)</title><rect x="449.3" y="563.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.47%)</title><rect x="449.3" y="547.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.47%)</title><rect x="449.3" y="531.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="449.3" y="515.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.38%)</title><rect x="450.4" y="515.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.38%)</title><rect x="450.4" y="499.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.19%)</title><rect x="452.6" y="483.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="455.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.19%)</title><rect x="452.6" y="467.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="455.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.28%)</title><rect x="454.9" y="563.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="457.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.28%)</title><rect x="454.9" y="547.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.28%)</title><rect x="454.9" y="531.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="457.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (8 samples, 0.76%)</title><rect x="458.2" y="563.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (8 samples, 0.76%)</title><rect x="458.2" y="547.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.28%)</title><rect x="463.8" y="531.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.28%)</title><rect x="467.2" y="563.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 1.04%)</title><rect x="470.6" y="579.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.85%)</title><rect x="472.8" y="563.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.85%)</title><rect x="472.8" y="547.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.85%)</title><rect x="472.8" y="531.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.85%)</title><rect x="472.8" y="515.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="475.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="482.9" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="485.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.76%)</title><rect x="484.0" y="579.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="487.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.76%)</title><rect x="484.0" y="563.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="487.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.76%)</title><rect x="484.0" y="547.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.76%)</title><rect x="484.0" y="531.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.0" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.76%)</title><rect x="484.0" y="515.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.0" y="526.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.57%)</title><rect x="486.3" y="499.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="490.7" y="483.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.7" y="494.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.09%)</title><rect x="491.9" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.47%)</title><rect x="493.0" y="579.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.47%)</title><rect x="493.0" y="563.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.47%)</title><rect x="493.0" y="547.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="497.5" y="531.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.66%)</title><rect x="498.6" y="579.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="501.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (4 samples, 0.38%)</title><rect x="506.4" y="595.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="509.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.14%)</title><rect x="510.9" y="659.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.14%)</title><rect x="510.9" y="643.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.14%)</title><rect x="510.9" y="627.0" width="13.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="513.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.14%)</title><rect x="510.9" y="611.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="513.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.76%)</title><rect x="515.4" y="595.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="518.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (262 samples, 24.88%)</title><rect x="524.4" y="755.0" width="293.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="527.4" y="766.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 4.65%)</title><rect x="524.4" y="739.0" width="54.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="527.4" y="750.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.65%)</title><rect x="524.4" y="723.0" width="54.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="527.4" y="734.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 4.46%)</title><rect x="526.6" y="707.0" width="52.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.6" y="718.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.14%)</title><rect x="527.7" y="691.0" width="13.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="530.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.14%)</title><rect x="527.7" y="675.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 1.14%)</title><rect x="527.7" y="659.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.14%)</title><rect x="527.7" y="643.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (5 samples, 0.47%)</title><rect x="535.6" y="627.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="538.6" y="638.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.09%)</title><rect x="538.9" y="611.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="541.9" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="538.9" y="595.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="541.9" y="606.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="538.9" y="579.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="541.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="540.0" y="611.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.0" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 3.23%)</title><rect x="541.2" y="691.0" width="38.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.2" y="702.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (29 samples, 2.75%)</title><rect x="546.8" y="675.0" width="32.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="549.8" y="686.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.47%)</title><rect x="573.7" y="659.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="576.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.57%)</title><rect x="579.3" y="739.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.57%)</title><rect x="579.3" y="723.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.57%)</title><rect x="579.3" y="707.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (140 samples, 13.30%)</title><rect x="586.0" y="739.0" width="156.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.0" y="750.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="586.0" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="589.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="586.0" y="707.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="589.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="586.0" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="589.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (139 samples, 13.20%)</title><rect x="587.1" y="723.0" width="155.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="590.1" y="734.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.57%)</title><rect x="599.4" y="707.0" width="6.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="602.4" y="718.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="600.6" y="691.0" width="5.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="603.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (46 samples, 4.37%)</title><rect x="606.2" y="707.0" width="51.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="609.2" y="718.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 1.99%)</title><rect x="619.6" y="691.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.6" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 1.80%)</title><rect x="621.9" y="675.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.9" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.95%)</title><rect x="629.7" y="659.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="632.7" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.95%)</title><rect x="629.7" y="643.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.95%)</title><rect x="629.7" y="627.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="632.7" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.95%)</title><rect x="629.7" y="611.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="632.7" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.38%)</title><rect x="629.7" y="595.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="632.7" y="606.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.19%)</title><rect x="629.7" y="579.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="632.7" y="590.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.19%)</title><rect x="629.7" y="563.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="632.7" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="631.9" y="579.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="634.9" y="590.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="631.9" y="563.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="634.9" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="631.9" y="547.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="634.9" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="631.9" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="634.9" y="542.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="633.1" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="636.1" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.57%)</title><rect x="634.2" y="595.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="637.2" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.28%)</title><rect x="635.3" y="579.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="638.3" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.19%)</title><rect x="635.3" y="563.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="638.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="636.4" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="639.4" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="636.4" y="531.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="639.4" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="636.4" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="639.4" y="526.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.09%)</title><rect x="636.4" y="499.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="639.4" y="510.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="637.5" y="563.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="640.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="638.7" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="641.7" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="639.8" y="579.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="642.8" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="640.9" y="659.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.9" y="670.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="643.1" y="691.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="646.1" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 1.14%)</title><rect x="644.3" y="691.0" width="13.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="647.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.95%)</title><rect x="657.7" y="707.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="657.7" y="691.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="660.7" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="657.7" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="660.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="657.7" y="659.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="660.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="657.7" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="657.7" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.7" y="638.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="657.7" y="611.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="660.7" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.85%)</title><rect x="658.8" y="691.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.8" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="658.8" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="661.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="658.8" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="661.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="658.8" y="643.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="661.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.76%)</title><rect x="660.0" y="675.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="667.8" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.8" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (66 samples, 6.27%)</title><rect x="668.9" y="707.0" width="74.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.9" y="718.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (64 samples, 6.08%)</title><rect x="671.2" y="691.0" width="71.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.2" y="702.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.19%)</title><rect x="671.2" y="675.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.19%)</title><rect x="671.2" y="659.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.19%)</title><rect x="671.2" y="643.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.19%)</title><rect x="671.2" y="627.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.2" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (62 samples, 5.89%)</title><rect x="673.4" y="675.0" width="69.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="676.4" y="686.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (57 samples, 5.41%)</title><rect x="679.0" y="659.0" width="63.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="682.0" y="670.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.56%)</title><rect x="712.6" y="643.0" width="30.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="715.6" y="654.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.28%)</title><rect x="726.1" y="627.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.76%)</title><rect x="729.4" y="627.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.4" y="638.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.38%)</title><rect x="738.4" y="627.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="741.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (46 samples, 4.37%)</title><rect x="742.9" y="739.0" width="51.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.9" y="750.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 4.27%)</title><rect x="744.0" y="723.0" width="50.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.0" y="734.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (15 samples, 1.42%)</title><rect x="753.0" y="707.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (15 samples, 1.42%)</title><rect x="753.0" y="691.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 1.14%)</title><rect x="755.2" y="675.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.2" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="758.6" y="659.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="761.6" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="758.6" y="643.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.6" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.19%)</title><rect x="758.6" y="627.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.6" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.19%)</title><rect x="758.6" y="611.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="759.7" y="595.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.38%)</title><rect x="760.8" y="659.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.8" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.28%)</title><rect x="761.9" y="643.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="764.9" y="654.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="761.9" y="627.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="764.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="765.3" y="659.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="768.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="767.5" y="659.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="768.7" y="675.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="768.7" y="659.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="768.7" y="643.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="768.7" y="627.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="771.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="769.8" y="707.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="772.8" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="769.8" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="772.8" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="769.8" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="769.8" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="772.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="769.8" y="643.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="772.8" y="654.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="769.8" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="772.8" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="770.9" y="691.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="773.9" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.47%)</title><rect x="772.0" y="707.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.47%)</title><rect x="772.0" y="691.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/642850803.get$Lambda (5 samples, 0.47%)</title><rect x="772.0" y="675.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="775.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="772.0" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="775.0" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="772.0" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="775.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/642850803.&lt;init&gt; (4 samples, 0.38%)</title><rect x="773.1" y="659.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.1" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="777.6" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="777.6" y="691.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.38%)</title><rect x="778.7" y="707.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.38%)</title><rect x="778.7" y="691.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.7" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="779.9" y="675.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="782.9" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.19%)</title><rect x="781.0" y="675.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.0" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="783.2" y="707.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="783.2" y="691.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="786.2" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.09%)</title><rect x="783.2" y="675.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.2" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.09%)</title><rect x="783.2" y="659.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.85%)</title><rect x="784.3" y="707.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.3" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="793.3" y="691.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="796.3" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="793.3" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="796.3" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="793.3" y="659.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="796.3" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="793.3" y="643.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="796.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="794.4" y="739.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.4" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="794.4" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.4" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="794.4" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="797.4" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="794.4" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="797.4" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="794.4" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="797.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="794.4" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="797.4" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="794.4" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="797.4" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="794.4" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="797.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.90%)</title><rect x="795.5" y="739.0" width="22.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="798.5" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.90%)</title><rect x="795.5" y="723.0" width="22.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="798.5" y="734.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.57%)</title><rect x="800.0" y="707.0" width="6.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="803.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="801.1" y="691.0" width="5.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="804.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.85%)</title><rect x="806.8" y="707.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/278766097.accept (9 samples, 0.85%)</title><rect x="806.8" y="691.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (9 samples, 0.85%)</title><rect x="806.8" y="675.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="809.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.85%)</title><rect x="806.8" y="659.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.8" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.85%)</title><rect x="806.8" y="643.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="809.8" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.85%)</title><rect x="806.8" y="627.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="811.2" y="611.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="814.2" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="812.4" y="611.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="815.4" y="622.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="813.5" y="595.0" width="3.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="816.5" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.09%)</title><rect x="816.8" y="707.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.66%)</title><rect x="818.0" y="755.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.66%)</title><rect x="818.0" y="739.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.57%)</title><rect x="819.1" y="723.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/278766097.accept (6 samples, 0.57%)</title><rect x="819.1" y="707.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (6 samples, 0.57%)</title><rect x="819.1" y="691.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="822.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.57%)</title><rect x="819.1" y="675.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.1" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.57%)</title><rect x="819.1" y="659.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.1" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.57%)</title><rect x="819.1" y="643.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="822.1" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.38%)</title><rect x="825.8" y="755.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="828.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="825.8" y="739.0" width="4.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="828.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="830.3" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (14 samples, 1.33%)</title><rect x="831.4" y="819.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.33%)</title><rect x="831.4" y="803.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.33%)</title><rect x="831.4" y="787.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="834.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.33%)</title><rect x="831.4" y="771.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="834.4" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.57%)</title><rect x="835.9" y="755.0" width="6.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="838.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.57%)</title><rect x="835.9" y="739.0" width="6.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="838.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (4 samples, 0.38%)</title><rect x="842.6" y="755.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="845.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (232 samples, 22.03%)</title><rect x="847.1" y="819.0" width="260.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.1" y="830.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (232 samples, 22.03%)</title><rect x="847.1" y="803.0" width="260.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.1" y="814.0">java/util/concurrent/LinkedBlocking..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (216 samples, 20.51%)</title><rect x="853.8" y="787.0" width="242.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.8" y="798.0">java/util/concurrent/locks/Abstr..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (17 samples, 1.61%)</title><rect x="863.9" y="771.0" width="19.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="866.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.09%)</title><rect x="883.0" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="886.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 1.04%)</title><rect x="884.1" y="771.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.85%)</title><rect x="886.3" y="755.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="889.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.85%)</title><rect x="886.3" y="739.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="889.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (9 samples, 0.85%)</title><rect x="886.3" y="723.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="889.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.19%)</title><rect x="896.4" y="771.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="896.4" y="755.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="899.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (12 samples, 1.14%)</title><rect x="898.6" y="771.0" width="13.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="901.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (12 samples, 1.14%)</title><rect x="898.6" y="755.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (164 samples, 15.57%)</title><rect x="912.1" y="771.0" width="183.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="915.1" y="782.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (162 samples, 15.38%)</title><rect x="914.3" y="755.0" width="181.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="917.3" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.38%)</title><rect x="915.5" y="739.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="919.9" y="739.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.9" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (150 samples, 14.25%)</title><rect x="921.1" y="739.0" width="168.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="924.1" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.28%)</title><rect x="925.5" y="723.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.5" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 2.37%)</title><rect x="928.9" y="723.0" width="28.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.9" y="734.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.95%)</title><rect x="937.9" y="707.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.9" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.38%)</title><rect x="942.3" y="691.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.3" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.19%)</title><rect x="946.8" y="691.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="949.8" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="949.1" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.1" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.47%)</title><rect x="950.2" y="707.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.2" y="718.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="955.8" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.8" y="718.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="956.9" y="723.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="959.9" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="959.2" y="723.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="962.2" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.19%)</title><rect x="961.4" y="723.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="964.4" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 3.13%)</title><rect x="963.6" y="723.0" width="37.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="966.6" y="734.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (59 samples, 5.60%)</title><rect x="1000.6" y="723.0" width="66.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1003.6" y="734.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.47%)</title><rect x="1066.7" y="723.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1069.7" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.19%)</title><rect x="1072.3" y="723.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1075.3" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1074.6" y="723.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1077.6" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.47%)</title><rect x="1076.8" y="723.0" width="5.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1079.8" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.28%)</title><rect x="1082.4" y="723.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1085.4" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1085.8" y="723.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.8" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1088.0" y="723.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1091.0" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.38%)</title><rect x="1089.1" y="739.0" width="4.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1092.1" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1093.6" y="739.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.95%)</title><rect x="1095.9" y="787.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1098.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 0.95%)</title><rect x="1095.9" y="771.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1098.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (9 samples, 0.85%)</title><rect x="1095.9" y="755.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1098.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="1106.0" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1109.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="1106.0" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1109.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="1106.0" y="723.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1109.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="1107.1" y="867.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1110.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="1107.1" y="851.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1110.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="1107.1" y="835.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1110.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="1107.1" y="819.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1110.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="1107.1" y="803.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1110.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.09%)</title><rect x="1108.2" y="867.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="1108.2" y="851.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1111.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="1108.2" y="835.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1111.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="1108.2" y="819.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1111.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.09%)</title><rect x="1108.2" y="803.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1111.2" y="814.0"></text>
</g>
<g>
<title>start_thread (72 samples, 6.84%)</title><rect x="1109.3" y="867.0" width="80.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1112.3" y="878.0">start_thr..</text>
</g>
<g>
<title>java_start(Thread*) (72 samples, 6.84%)</title><rect x="1109.3" y="851.0" width="80.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1112.3" y="862.0">java_star..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.80%)</title><rect x="1109.3" y="835.0" width="21.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.3" y="846.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.19%)</title><rect x="1109.3" y="819.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.3" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.19%)</title><rect x="1109.3" y="803.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.3" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1109.3" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.3" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1110.4" y="787.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1113.4" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.42%)</title><rect x="1111.6" y="819.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.6" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.38%)</title><rect x="1111.6" y="803.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.6" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.19%)</title><rect x="1111.6" y="787.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.6" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1113.8" y="787.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1116.8" y="798.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.09%)</title><rect x="1114.9" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.9" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.38%)</title><rect x="1116.0" y="803.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.0" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.19%)</title><rect x="1116.0" y="787.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.0" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.19%)</title><rect x="1116.0" y="771.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.0" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1117.2" y="755.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.2" y="766.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1117.2" y="739.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.2" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.19%)</title><rect x="1118.3" y="787.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.3" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.19%)</title><rect x="1118.3" y="771.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.3" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.66%)</title><rect x="1120.5" y="803.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.5" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.66%)</title><rect x="1120.5" y="787.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.66%)</title><rect x="1120.5" y="771.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.5" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.66%)</title><rect x="1120.5" y="755.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.5" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.66%)</title><rect x="1120.5" y="739.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.5" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.66%)</title><rect x="1120.5" y="723.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.5" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1123.9" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.9" y="718.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.28%)</title><rect x="1125.0" y="707.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.0" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.19%)</title><rect x="1125.0" y="691.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.0" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1126.1" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.1" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1127.2" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.19%)</title><rect x="1128.4" y="819.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.4" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.19%)</title><rect x="1128.4" y="803.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (52 samples, 4.94%)</title><rect x="1130.6" y="835.0" width="58.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.6" y="846.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (52 samples, 4.94%)</title><rect x="1130.6" y="819.0" width="58.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.6" y="830.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (52 samples, 4.94%)</title><rect x="1130.6" y="803.0" width="58.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.6" y="814.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (52 samples, 4.94%)</title><rect x="1130.6" y="787.0" width="58.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.6" y="798.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (51 samples, 4.84%)</title><rect x="1130.6" y="771.0" width="57.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.6" y="782.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (51 samples, 4.84%)</title><rect x="1130.6" y="755.0" width="57.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.6" y="766.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 2.66%)</title><rect x="1130.6" y="739.0" width="31.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.6" y="750.0">Co..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.19%)</title><rect x="1130.6" y="723.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.6" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1131.7" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.7" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1131.7" y="691.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.7" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.28%)</title><rect x="1132.8" y="723.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.8" y="734.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.09%)</title><rect x="1132.8" y="707.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.8" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1134.0" y="707.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.0" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.19%)</title><rect x="1134.0" y="691.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.0" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1134.0" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.0" y="686.0"></text>
</g>
<g>
<title>TypeNarrowPtr::singleton() const (1 samples, 0.09%)</title><rect x="1134.0" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.0" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1135.1" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.1" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1135.1" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.1" y="670.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1135.1" y="643.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.28%)</title><rect x="1136.2" y="723.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.2" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.28%)</title><rect x="1136.2" y="707.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.2" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1136.2" y="691.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.2" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="1136.2" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.2" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1136.2" y="659.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.2" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.19%)</title><rect x="1137.3" y="691.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 1.80%)</title><rect x="1139.6" y="723.0" width="21.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.6" y="734.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1139.6" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1140.7" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.7" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1140.7" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.7" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1140.7" y="675.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.19%)</title><rect x="1141.8" y="707.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.8" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1142.9" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.28%)</title><rect x="1144.1" y="707.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.38%)</title><rect x="1147.4" y="707.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1150.8" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1150.8" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1151.9" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1153.0" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1154.1" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.09%)</title><rect x="1154.1" y="691.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.1" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1155.3" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.19%)</title><rect x="1156.4" y="707.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.4" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.19%)</title><rect x="1156.4" y="691.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.4" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1158.6" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.6" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1158.6" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.6" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1158.6" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.6" y="686.0"></text>
</g>
<g>
<title>checkCastPPNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1159.7" y="707.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.7" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1160.9" y="723.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 1.42%)</title><rect x="1162.0" y="739.0" width="16.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.0" y="750.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1162.0" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.0" y="734.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1162.0" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="718.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1163.1" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.09%)</title><rect x="1163.1" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.1" y="718.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.09%)</title><rect x="1163.1" y="691.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.1" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1163.1" y="675.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1166.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1164.2" y="723.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1164.2" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1164.2" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1164.2" y="675.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.2" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.09%)</title><rect x="1164.2" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.2" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.19%)</title><rect x="1165.3" y="723.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.3" y="734.0"></text>
</g>
<g>
<title>Type::widen(Type const*, Type const*) const (1 samples, 0.09%)</title><rect x="1166.5" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.66%)</title><rect x="1167.6" y="723.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.47%)</title><rect x="1167.6" y="707.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.38%)</title><rect x="1168.7" y="691.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.38%)</title><rect x="1168.7" y="675.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.19%)</title><rect x="1169.8" y="659.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.9" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1172.1" y="659.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1173.2" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1173.2" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1173.2" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.2" y="686.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1173.2" y="659.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.2" y="670.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1174.3" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.28%)</title><rect x="1175.4" y="723.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.28%)</title><rect x="1175.4" y="707.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="718.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1176.6" y="691.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1176.6" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1177.7" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.76%)</title><rect x="1178.8" y="739.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.76%)</title><rect x="1178.8" y="723.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.66%)</title><rect x="1178.8" y="707.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.66%)</title><rect x="1178.8" y="691.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.66%)</title><rect x="1178.8" y="675.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.66%)</title><rect x="1178.8" y="659.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.19%)</title><rect x="1178.8" y="643.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.19%)</title><rect x="1178.8" y="627.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.19%)</title><rect x="1178.8" y="611.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.19%)</title><rect x="1178.8" y="595.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.19%)</title><rect x="1178.8" y="579.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.19%)</title><rect x="1178.8" y="563.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.19%)</title><rect x="1178.8" y="547.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.19%)</title><rect x="1178.8" y="531.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1178.8" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1178.8" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1178.8" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1178.8" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1178.8" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1178.8" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1179.9" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.9" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1181.0" y="643.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1181.0" y="627.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.38%)</title><rect x="1181.0" y="611.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.38%)</title><rect x="1181.0" y="595.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.38%)</title><rect x="1181.0" y="579.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.38%)</title><rect x="1181.0" y="563.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.0" y="531.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.0" y="515.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.0" y="499.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.0" y="483.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.0" y="467.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.0" y="451.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.0" y="435.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="419.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1181.0" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.0" y="387.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.0" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1181.0" y="355.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="339.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.0" y="323.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.0" y="307.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.0" y="291.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1181.0" y="275.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="259.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1182.2" y="547.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1182.2" y="531.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1182.2" y="515.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1182.2" y="499.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1182.2" y="483.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1182.2" y="467.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1182.2" y="451.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1182.2" y="435.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1182.2" y="419.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1182.2" y="403.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1182.2" y="387.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1182.2" y="371.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1182.2" y="355.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1182.2" y="339.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1182.2" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1182.2" y="307.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1183.3" y="323.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1183.3" y="307.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1183.3" y="291.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1183.3" y="275.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1183.3" y="259.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1183.3" y="243.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1183.3" y="227.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1183.3" y="211.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1183.3" y="195.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1183.3" y="179.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.3" y="190.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.3" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.09%)</title><rect x="1183.3" y="147.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1183.3" y="131.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="142.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1183.3" y="115.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="126.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1183.3" y="99.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="163.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.4" y="147.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.4" y="131.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.4" y="115.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.4" y="99.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1184.4" y="83.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="94.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.09%)</title><rect x="1184.4" y="67.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="78.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.09%)</title><rect x="1184.4" y="51.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="62.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1184.4" y="35.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.5" y="643.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.5" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.5" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.5" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.5" y="579.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1185.5" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="574.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1185.5" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="558.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.09%)</title><rect x="1185.5" y="531.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1185.5" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1185.5" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1185.5" y="483.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="494.0"></text>
</g>
<g>
<title>TypeKlassPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1185.5" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.5" y="478.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.09%)</title><rect x="1186.6" y="707.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
<g>
<title>Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&amp;) (1 samples, 0.09%)</title><rect x="1186.6" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="702.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.09%)</title><rect x="1186.6" y="675.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="686.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.09%)</title><rect x="1186.6" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1186.6" y="643.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="654.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1186.6" y="627.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="638.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1186.6" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="622.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1186.6" y="595.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1186.6" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="590.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1186.6" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="574.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1187.8" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1187.8" y="755.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1187.8" y="739.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.8" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1187.8" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1187.8" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1187.8" y="691.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1187.8" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1187.8" y="659.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1187.8" y="643.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1187.8" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.8" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1187.8" y="611.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1187.8" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1187.8" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1187.8" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1187.8" y="547.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1187.8" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1187.8" y="515.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.8" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.8" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1187.8" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1187.8" y="451.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="462.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1188.9" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="739.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="750.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.09%)</title><rect x="1188.9" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
</g>
</svg>
