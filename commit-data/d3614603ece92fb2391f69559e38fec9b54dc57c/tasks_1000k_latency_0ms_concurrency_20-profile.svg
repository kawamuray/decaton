<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,015 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (218 samples, 21.48%)</title><rect x="10.0" y="867.0" width="253.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (218 samples, 21.48%)</title><rect x="10.0" y="851.0" width="253.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.39%)</title><rect x="10.0" y="835.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.39%)</title><rect x="10.0" y="819.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1283453960.accept (4 samples, 0.39%)</title><rect x="10.0" y="803.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.39%)</title><rect x="10.0" y="787.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.10%)</title><rect x="10.0" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.30%)</title><rect x="11.2" y="771.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.2" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.30%)</title><rect x="11.2" y="755.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="13.5" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.5" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="13.5" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="13.5" y="707.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="13.5" y="691.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.10%)</title><rect x="14.7" y="835.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.10%)</title><rect x="14.7" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="14.7" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="14.7" y="787.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="14.7" y="771.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="14.7" y="755.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="14.7" y="739.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.10%)</title><rect x="14.7" y="723.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="14.7" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="14.7" y="691.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.20%)</title><rect x="15.8" y="835.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.20%)</title><rect x="15.8" y="819.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (175 samples, 17.24%)</title><rect x="18.1" y="835.0" width="203.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.1" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/20583321.accept (169 samples, 16.65%)</title><rect x="18.1" y="819.0" width="196.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.1" y="830.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (169 samples, 16.65%)</title><rect x="18.1" y="803.0" width="196.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.1" y="814.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (136 samples, 13.40%)</title><rect x="18.1" y="787.0" width="158.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.1" y="798.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (136 samples, 13.40%)</title><rect x="18.1" y="771.0" width="158.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.1" y="782.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (136 samples, 13.40%)</title><rect x="18.1" y="755.0" width="158.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.1" y="766.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (136 samples, 13.40%)</title><rect x="18.1" y="739.0" width="158.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="750.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (124 samples, 12.22%)</title><rect x="30.9" y="723.0" width="144.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.9" y="734.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (123 samples, 12.12%)</title><rect x="30.9" y="707.0" width="143.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.9" y="718.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (92 samples, 9.06%)</title><rect x="64.6" y="691.0" width="107.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.6" y="702.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (13 samples, 1.28%)</title><rect x="68.1" y="675.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (13 samples, 1.28%)</title><rect x="68.1" y="659.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.28%)</title><rect x="68.1" y="643.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (76 samples, 7.49%)</title><rect x="83.2" y="675.0" width="88.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.2" y="686.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (76 samples, 7.49%)</title><rect x="83.2" y="659.0" width="88.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.2" y="670.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 7.49%)</title><rect x="83.2" y="643.0" width="88.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.2" y="654.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 7.49%)</title><rect x="83.2" y="627.0" width="88.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.2" y="638.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (73 samples, 7.19%)</title><rect x="86.7" y="611.0" width="84.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.7" y="622.0">sun/misc/U..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="86.7" y="595.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="89.7" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 6.31%)</title><rect x="87.9" y="595.0" width="74.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="90.9" y="606.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="91.4" y="579.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="94.4" y="590.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.30%)</title><rect x="93.7" y="579.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="96.7" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 4.63%)</title><rect x="97.2" y="579.0" width="54.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="100.2" y="590.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.89%)</title><rect x="151.8" y="579.0" width="10.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="154.8" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.49%)</title><rect x="162.3" y="595.0" width="5.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="165.3" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="168.1" y="595.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="171.1" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="170.4" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="173.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="171.6" y="691.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.10%)</title><rect x="171.6" y="675.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.10%)</title><rect x="171.6" y="659.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="174.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="172.8" y="691.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="172.8" y="675.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="172.8" y="659.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="172.8" y="643.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.8" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.10%)</title><rect x="173.9" y="707.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.9" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="175.1" y="723.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="178.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.49%)</title><rect x="176.2" y="787.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.49%)</title><rect x="176.2" y="771.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="179.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.20%)</title><rect x="182.1" y="787.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="182.1" y="771.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="185.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="182.1" y="755.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="185.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (26 samples, 2.56%)</title><rect x="184.4" y="787.0" width="30.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.4" y="798.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 2.46%)</title><rect x="184.4" y="771.0" width="29.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.4" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 1.08%)</title><rect x="194.8" y="755.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.8" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.69%)</title><rect x="196.0" y="739.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.0" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.69%)</title><rect x="196.0" y="723.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.0" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.69%)</title><rect x="196.0" y="707.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.0" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.39%)</title><rect x="199.5" y="691.0" width="4.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="202.5" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="204.1" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.20%)</title><rect x="205.3" y="739.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.3" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="207.6" y="755.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="210.6" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.39%)</title><rect x="208.8" y="755.0" width="4.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="211.8" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="213.4" y="771.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="216.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.59%)</title><rect x="214.6" y="819.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.59%)</title><rect x="214.6" y="803.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.59%)</title><rect x="214.6" y="787.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.59%)</title><rect x="214.6" y="771.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (36 samples, 3.55%)</title><rect x="221.6" y="835.0" width="41.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.6" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (36 samples, 3.55%)</title><rect x="221.6" y="819.0" width="41.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.6" y="830.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (21 samples, 2.07%)</title><rect x="221.6" y="803.0" width="24.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.6" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (21 samples, 2.07%)</title><rect x="221.6" y="787.0" width="24.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.6" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (21 samples, 2.07%)</title><rect x="221.6" y="771.0" width="24.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.6" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (18 samples, 1.77%)</title><rect x="221.6" y="755.0" width="20.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (18 samples, 1.77%)</title><rect x="221.6" y="739.0" width="20.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.99%)</title><rect x="222.7" y="723.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.39%)</title><rect x="222.7" y="707.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.39%)</title><rect x="222.7" y="691.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.39%)</title><rect x="222.7" y="675.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.39%)</title><rect x="222.7" y="659.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.39%)</title><rect x="222.7" y="643.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.39%)</title><rect x="222.7" y="627.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.39%)</title><rect x="222.7" y="611.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.59%)</title><rect x="227.4" y="707.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.59%)</title><rect x="227.4" y="691.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (6 samples, 0.59%)</title><rect x="227.4" y="675.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.69%)</title><rect x="234.4" y="723.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.69%)</title><rect x="234.4" y="707.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.39%)</title><rect x="236.7" y="691.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.7" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.39%)</title><rect x="236.7" y="675.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.7" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="239.0" y="659.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="242.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.10%)</title><rect x="241.3" y="691.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.3" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.10%)</title><rect x="241.3" y="675.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.20%)</title><rect x="242.5" y="755.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.20%)</title><rect x="242.5" y="739.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.20%)</title><rect x="242.5" y="723.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.20%)</title><rect x="242.5" y="707.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.5" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="243.7" y="691.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="246.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.10%)</title><rect x="244.8" y="755.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="244.8" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="244.8" y="723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.8" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="244.8" y="707.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="244.8" y="691.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.69%)</title><rect x="246.0" y="803.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.59%)</title><rect x="246.0" y="787.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.49%)</title><rect x="246.0" y="771.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.20%)</title><rect x="246.0" y="755.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="246.0" y="739.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="249.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/982871034.accept (1 samples, 0.10%)</title><rect x="247.2" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="248.3" y="755.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="248.3" y="739.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.10%)</title><rect x="248.3" y="723.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="249.5" y="755.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="249.5" y="739.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.5" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="249.5" y="723.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="249.5" y="707.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="249.5" y="691.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="249.5" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.10%)</title><rect x="249.5" y="659.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="250.7" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="250.7" y="739.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="250.7" y="723.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="250.7" y="707.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="250.7" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="250.7" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="250.7" y="659.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="250.7" y="643.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="250.7" y="627.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="250.7" y="611.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="250.7" y="595.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$54/2095303566.get (1 samples, 0.10%)</title><rect x="250.7" y="579.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.10%)</title><rect x="251.8" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.10%)</title><rect x="251.8" y="755.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="251.8" y="739.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="253.0" y="787.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="254.1" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="254.1" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="254.1" y="771.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="254.1" y="755.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="254.1" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.30%)</title><rect x="255.3" y="803.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.20%)</title><rect x="255.3" y="787.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.20%)</title><rect x="255.3" y="771.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="255.3" y="755.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="255.3" y="739.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="255.3" y="723.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="256.5" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="256.5" y="739.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="256.5" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="256.5" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="256.5" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.10%)</title><rect x="256.5" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.5" y="686.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.10%)</title><rect x="256.5" y="659.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="259.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="257.6" y="787.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="257.6" y="771.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="257.6" y="755.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="257.6" y="739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.10%)</title><rect x="257.6" y="723.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="260.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.openOrClosingChannelOrFail (1 samples, 0.10%)</title><rect x="257.6" y="707.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.30%)</title><rect x="258.8" y="803.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.30%)</title><rect x="258.8" y="787.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.30%)</title><rect x="258.8" y="771.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.10%)</title><rect x="258.8" y="755.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.10%)</title><rect x="258.8" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.20%)</title><rect x="260.0" y="755.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="260.0" y="739.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="260.0" y="723.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="263.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="260.0" y="707.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="260.0" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="260.0" y="675.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.0" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="260.0" y="659.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="263.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.10%)</title><rect x="261.1" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="261.1" y="723.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="261.1" y="707.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="261.1" y="691.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="262.3" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="262.3" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="262.3" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="262.3" y="755.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.3" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (686 samples, 67.59%)</title><rect x="263.4" y="867.0" width="797.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (686 samples, 67.59%)</title><rect x="263.4" y="851.0" width="797.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.4" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (686 samples, 67.59%)</title><rect x="263.4" y="835.0" width="797.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.4" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1790985113.run (413 samples, 40.69%)</title><rect x="268.1" y="819.0" width="480.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.1" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (413 samples, 40.69%)</title><rect x="268.1" y="803.0" width="480.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.1" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (413 samples, 40.69%)</title><rect x="268.1" y="787.0" width="480.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.1" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (410 samples, 40.39%)</title><rect x="268.1" y="771.0" width="476.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.1" y="782.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="276.2" y="755.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="279.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="276.2" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="279.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.20%)</title><rect x="277.4" y="755.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.10%)</title><rect x="279.7" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.10%)</title><rect x="279.7" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$195/1443563643.get (1 samples, 0.10%)</title><rect x="279.7" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.10%)</title><rect x="279.7" y="707.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="279.7" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="282.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="279.7" y="675.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="279.7" y="659.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="282.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="279.7" y="643.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="282.7" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="279.7" y="627.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="282.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (131 samples, 12.91%)</title><rect x="280.9" y="755.0" width="152.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.9" y="766.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (131 samples, 12.91%)</title><rect x="280.9" y="739.0" width="152.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.9" y="750.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (131 samples, 12.91%)</title><rect x="280.9" y="723.0" width="152.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.9" y="734.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (131 samples, 12.91%)</title><rect x="280.9" y="707.0" width="152.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.9" y="718.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (131 samples, 12.91%)</title><rect x="280.9" y="691.0" width="152.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.9" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (131 samples, 12.91%)</title><rect x="280.9" y="675.0" width="152.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.9" y="686.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (36 samples, 3.55%)</title><rect x="280.9" y="659.0" width="41.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.9" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (21 samples, 2.07%)</title><rect x="280.9" y="643.0" width="24.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.9" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (19 samples, 1.87%)</title><rect x="280.9" y="627.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.9" y="638.0">c..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="296.0" y="611.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="299.0" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="296.0" y="595.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="299.0" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="297.2" y="611.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="300.2" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="297.2" y="595.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="300.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.20%)</title><rect x="299.5" y="611.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.10%)</title><rect x="301.8" y="611.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="301.8" y="595.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="301.8" y="579.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="301.8" y="563.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.20%)</title><rect x="303.0" y="627.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.20%)</title><rect x="303.0" y="611.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (15 samples, 1.48%)</title><rect x="305.3" y="643.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.3" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="305.3" y="627.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="308.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="305.3" y="611.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="308.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="305.3" y="595.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="308.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="305.3" y="579.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="308.3" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="305.3" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="305.3" y="547.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="308.3" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="305.3" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.3" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="305.3" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.3" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="305.3" y="499.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (1 samples, 0.10%)</title><rect x="306.5" y="627.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.5" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="306.5" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 1.28%)</title><rect x="307.6" y="627.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.20%)</title><rect x="313.4" y="611.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 0.49%)</title><rect x="315.8" y="611.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="315.8" y="595.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="318.8" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="315.8" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="318.8" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="315.8" y="563.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="318.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="315.8" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="318.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.39%)</title><rect x="316.9" y="595.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.30%)</title><rect x="316.9" y="579.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="320.4" y="579.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.4" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="320.4" y="563.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="323.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.10%)</title><rect x="321.6" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (80 samples, 7.88%)</title><rect x="322.7" y="659.0" width="93.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.7" y="670.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (7 samples, 0.69%)</title><rect x="322.7" y="643.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (7 samples, 0.69%)</title><rect x="322.7" y="627.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (6 samples, 0.59%)</title><rect x="323.9" y="611.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.49%)</title><rect x="325.1" y="595.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.39%)</title><rect x="330.9" y="643.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="333.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.39%)</title><rect x="330.9" y="627.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.10%)</title><rect x="333.2" y="611.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.10%)</title><rect x="334.4" y="611.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.38%)</title><rect x="335.5" y="643.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.08%)</title><rect x="336.7" y="627.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (10 samples, 0.99%)</title><rect x="337.8" y="611.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (10 samples, 0.99%)</title><rect x="337.8" y="595.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="347.1" y="579.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="347.1" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="350.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="347.1" y="547.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="350.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="347.1" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="350.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="348.3" y="579.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.20%)</title><rect x="349.5" y="627.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.69%)</title><rect x="351.8" y="643.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.69%)</title><rect x="351.8" y="627.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="356.4" y="611.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="359.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="356.4" y="595.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="356.4" y="579.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (48 samples, 4.73%)</title><rect x="359.9" y="643.0" width="55.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="362.9" y="654.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.18%)</title><rect x="359.9" y="627.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="362.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.20%)</title><rect x="364.6" y="611.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.20%)</title><rect x="364.6" y="595.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.20%)</title><rect x="364.6" y="579.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="366.9" y="611.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="366.9" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.49%)</title><rect x="368.1" y="611.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="371.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (36 samples, 3.55%)</title><rect x="373.9" y="627.0" width="41.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.9" y="638.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 3.45%)</title><rect x="375.0" y="611.0" width="40.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="378.0" y="622.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 3.35%)</title><rect x="376.2" y="595.0" width="39.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.2" y="606.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.28%)</title><rect x="384.3" y="579.0" width="15.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.39%)</title><rect x="391.3" y="563.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.39%)</title><rect x="391.3" y="547.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="394.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.39%)</title><rect x="391.3" y="531.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.30%)</title><rect x="392.5" y="515.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.20%)</title><rect x="396.0" y="563.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="398.3" y="563.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.30%)</title><rect x="399.5" y="579.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="402.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.20%)</title><rect x="400.6" y="563.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.20%)</title><rect x="400.6" y="547.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.20%)</title><rect x="400.6" y="531.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.20%)</title><rect x="400.6" y="515.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.59%)</title><rect x="402.9" y="579.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.59%)</title><rect x="402.9" y="563.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.59%)</title><rect x="402.9" y="547.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.59%)</title><rect x="402.9" y="531.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="405.9" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.59%)</title><rect x="402.9" y="515.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.49%)</title><rect x="409.9" y="579.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.49%)</title><rect x="409.9" y="563.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.49%)</title><rect x="409.9" y="547.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.48%)</title><rect x="415.7" y="659.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 1.48%)</title><rect x="415.7" y="643.0" width="17.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 1.48%)</title><rect x="415.7" y="627.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.20%)</title><rect x="418.1" y="611.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.20%)</title><rect x="420.4" y="611.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="423.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (2 samples, 0.20%)</title><rect x="422.7" y="611.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.69%)</title><rect x="425.0" y="611.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.69%)</title><rect x="425.0" y="595.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (245 samples, 24.14%)</title><rect x="433.2" y="755.0" width="284.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.2" y="766.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (40 samples, 3.94%)</title><rect x="433.2" y="739.0" width="46.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.2" y="750.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 3.94%)</title><rect x="433.2" y="723.0" width="46.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.2" y="734.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (35 samples, 3.45%)</title><rect x="437.8" y="707.0" width="40.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.8" y="718.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.99%)</title><rect x="440.1" y="691.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.99%)</title><rect x="440.1" y="675.0" width="11.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.99%)</title><rect x="440.1" y="659.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.59%)</title><rect x="444.8" y="643.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="447.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.89%)</title><rect x="451.8" y="691.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.89%)</title><rect x="451.8" y="675.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.89%)</title><rect x="451.8" y="659.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.20%)</title><rect x="459.9" y="643.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.9" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 1.38%)</title><rect x="462.2" y="691.0" width="16.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="465.7" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="468.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 0.99%)</title><rect x="466.9" y="675.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.99%)</title><rect x="466.9" y="659.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="477.3" y="643.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="478.5" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.69%)</title><rect x="479.7" y="739.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.39%)</title><rect x="483.2" y="723.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.2" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.39%)</title><rect x="483.2" y="707.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="486.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (137 samples, 13.50%)</title><rect x="487.8" y="739.0" width="159.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.8" y="750.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (137 samples, 13.50%)</title><rect x="487.8" y="723.0" width="159.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="490.8" y="734.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.39%)</title><rect x="500.6" y="707.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="503.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="501.8" y="691.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="504.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (41 samples, 4.04%)</title><rect x="505.3" y="707.0" width="47.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.3" y="718.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="509.9" y="691.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.9" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="509.9" y="675.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="509.9" y="659.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="512.9" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="509.9" y="643.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="512.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="509.9" y="627.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="509.9" y="611.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="512.9" y="622.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="509.9" y="595.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="512.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.76%)</title><rect x="511.1" y="691.0" width="32.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="514.1" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.66%)</title><rect x="512.2" y="675.0" width="31.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.2" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 1.58%)</title><rect x="519.2" y="659.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="522.2" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (16 samples, 1.58%)</title><rect x="519.2" y="643.0" width="18.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="522.2" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 1.58%)</title><rect x="519.2" y="627.0" width="18.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.2" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.99%)</title><rect x="525.0" y="611.0" width="11.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="528.0" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.30%)</title><rect x="525.0" y="595.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="528.0" y="606.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.20%)</title><rect x="525.0" y="579.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="528.0" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="527.3" y="579.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="530.3" y="590.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="527.3" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="530.3" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="527.3" y="547.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="530.3" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="527.3" y="531.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="530.3" y="542.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="528.5" y="595.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="531.5" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.49%)</title><rect x="529.7" y="595.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="532.7" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.30%)</title><rect x="532.0" y="579.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="535.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="533.2" y="563.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="536.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="533.2" y="547.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="536.2" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="533.2" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="536.2" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="533.2" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="536.2" y="526.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="533.2" y="499.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="536.2" y="510.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="533.2" y="483.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="536.2" y="494.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.10%)</title><rect x="533.2" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="536.2" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="534.3" y="563.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="537.3" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="535.5" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="538.5" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="536.6" y="611.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="539.6" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="537.8" y="659.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.8" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="539.0" y="659.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="542.0" y="670.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="542.5" y="659.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="545.5" y="670.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.20%)</title><rect x="543.6" y="691.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="546.6" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.59%)</title><rect x="545.9" y="691.0" width="7.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="548.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.79%)</title><rect x="552.9" y="707.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="555.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.79%)</title><rect x="552.9" y="691.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.9" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.79%)</title><rect x="552.9" y="675.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="561.1" y="659.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.1" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (72 samples, 7.09%)</title><rect x="562.2" y="707.0" width="83.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="565.2" y="718.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (70 samples, 6.90%)</title><rect x="564.5" y="691.0" width="81.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="567.5" y="702.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (30 samples, 2.96%)</title><rect x="564.5" y="675.0" width="34.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="567.5" y="686.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (30 samples, 2.96%)</title><rect x="564.5" y="659.0" width="34.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.5" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (30 samples, 2.96%)</title><rect x="564.5" y="643.0" width="34.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.5" y="654.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (18 samples, 1.77%)</title><rect x="578.5" y="627.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="599.4" y="675.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="602.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="599.4" y="659.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="599.4" y="643.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="599.4" y="627.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (39 samples, 3.84%)</title><rect x="600.6" y="675.0" width="45.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.6" y="686.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (36 samples, 3.55%)</title><rect x="604.1" y="659.0" width="41.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.1" y="670.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="605.2" y="643.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="608.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.30%)</title><rect x="606.4" y="643.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.30%)</title><rect x="606.4" y="627.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 3.05%)</title><rect x="609.9" y="643.0" width="36.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="612.9" y="654.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.20%)</title><rect x="635.5" y="627.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.59%)</title><rect x="637.8" y="627.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.8" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="643.6" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="646.6" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="643.6" y="595.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="646.6" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="643.6" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="646.6" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="643.6" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="646.6" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="643.6" y="547.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="646.6" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="643.6" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.6" y="542.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.10%)</title><rect x="643.6" y="515.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="646.6" y="526.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="644.8" y="627.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="647.8" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="645.9" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="648.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (35 samples, 3.45%)</title><rect x="647.1" y="739.0" width="40.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="650.1" y="750.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (34 samples, 3.35%)</title><rect x="647.1" y="723.0" width="39.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="650.1" y="734.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1454607645.process (13 samples, 1.28%)</title><rect x="650.6" y="707.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (10 samples, 0.99%)</title><rect x="654.1" y="691.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="657.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (10 samples, 0.99%)</title><rect x="654.1" y="675.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.1" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="654.1" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.1" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="654.1" y="643.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.1" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="654.1" y="627.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.1" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="654.1" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="657.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="654.1" y="595.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="654.1" y="579.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.30%)</title><rect x="655.2" y="659.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.2" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.30%)</title><rect x="655.2" y="643.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="658.2" y="654.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="655.2" y="627.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="658.2" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.59%)</title><rect x="658.7" y="659.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.39%)</title><rect x="665.7" y="707.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="665.7" y="691.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="668.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="665.7" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="668.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="665.7" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="668.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="665.7" y="643.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="668.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.10%)</title><rect x="665.7" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="668.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.30%)</title><rect x="666.8" y="691.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="669.8" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="669.2" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="672.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="669.2" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="672.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="669.2" y="643.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="672.2" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="669.2" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="672.2" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="669.2" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="672.2" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="669.2" y="595.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="672.2" y="606.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="669.2" y="579.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="672.2" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="669.2" y="563.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="672.2" y="574.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="669.2" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="672.2" y="558.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.10%)</title><rect x="669.2" y="531.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="672.2" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (9 samples, 0.89%)</title><rect x="670.3" y="707.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="673.3" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (9 samples, 0.89%)</title><rect x="670.3" y="691.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="673.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1434905350.get$Lambda (9 samples, 0.89%)</title><rect x="670.3" y="675.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="671.5" y="659.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="674.5" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="671.5" y="643.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="674.5" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="671.5" y="627.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.5" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="671.5" y="611.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="674.5" y="622.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="671.5" y="595.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="674.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/1434905350.&lt;init&gt; (7 samples, 0.69%)</title><rect x="672.7" y="659.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="675.7" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="680.8" y="707.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.30%)</title><rect x="682.0" y="707.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="685.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.30%)</title><rect x="682.0" y="691.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.0" y="702.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.30%)</title><rect x="682.0" y="675.0" width="3.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="685.0" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="685.4" y="707.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.4" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.10%)</title><rect x="686.6" y="723.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="689.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 2.56%)</title><rect x="687.8" y="739.0" width="30.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="690.8" y="750.0">ja..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.99%)</title><rect x="693.6" y="723.0" width="11.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="696.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.99%)</title><rect x="693.6" y="707.0" width="11.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="696.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.08%)</title><rect x="705.2" y="723.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.99%)</title><rect x="706.4" y="707.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/582797957.accept (9 samples, 0.89%)</title><rect x="706.4" y="691.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.89%)</title><rect x="706.4" y="675.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.4" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.89%)</title><rect x="706.4" y="659.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.4" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.89%)</title><rect x="706.4" y="643.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.4" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="713.3" y="627.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="716.3" y="638.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="713.3" y="611.0" width="3.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="716.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/502333825.accept (1 samples, 0.10%)</title><rect x="716.8" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="716.8" y="675.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="719.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.28%)</title><rect x="718.0" y="755.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="721.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.08%)</title><rect x="720.3" y="739.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.89%)</title><rect x="722.7" y="723.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="725.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/582797957.accept (1 samples, 0.10%)</title><rect x="722.7" y="707.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.10%)</title><rect x="722.7" y="691.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.7" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.10%)</title><rect x="722.7" y="675.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.7" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.10%)</title><rect x="722.7" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="725.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/502333825.accept (8 samples, 0.79%)</title><rect x="723.8" y="707.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="726.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (8 samples, 0.79%)</title><rect x="723.8" y="691.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/235296586.complete (8 samples, 0.79%)</title><rect x="723.8" y="675.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (8 samples, 0.79%)</title><rect x="723.8" y="659.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="726.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.79%)</title><rect x="723.8" y="643.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="726.8" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.79%)</title><rect x="723.8" y="627.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="726.8" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.79%)</title><rect x="723.8" y="611.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="726.8" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.79%)</title><rect x="723.8" y="595.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="726.8" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 0.79%)</title><rect x="723.8" y="579.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="726.8" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.99%)</title><rect x="733.1" y="755.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="736.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.99%)</title><rect x="733.1" y="739.0" width="11.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="736.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.30%)</title><rect x="744.7" y="771.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.7" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="745.9" y="755.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="748.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="745.9" y="739.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="748.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.49%)</title><rect x="748.2" y="819.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.49%)</title><rect x="748.2" y="803.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.49%)</title><rect x="748.2" y="787.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.49%)</title><rect x="748.2" y="771.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="751.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (2 samples, 0.20%)</title><rect x="751.7" y="755.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="754.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (264 samples, 26.01%)</title><rect x="754.0" y="819.0" width="307.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.0" y="830.0">java/util/concurrent/ThreadPoolExecutor.g..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (263 samples, 25.91%)</title><rect x="755.2" y="803.0" width="305.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.2" y="814.0">java/util/concurrent/LinkedBlockingQueue...</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (240 samples, 23.65%)</title><rect x="756.4" y="787.0" width="279.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.4" y="798.0">java/util/concurrent/locks/AbstractQu..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (13 samples, 1.28%)</title><rect x="768.0" y="771.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.59%)</title><rect x="783.1" y="771.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.59%)</title><rect x="783.1" y="755.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="786.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.59%)</title><rect x="783.1" y="739.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="786.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.59%)</title><rect x="783.1" y="723.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="786.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (211 samples, 20.79%)</title><rect x="790.1" y="771.0" width="245.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.1" y="782.0">java/util/concurrent/locks/LockSu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (210 samples, 20.69%)</title><rect x="791.2" y="755.0" width="244.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.2" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="795.9" y="739.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.9" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.30%)</title><rect x="797.1" y="739.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="800.1" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.30%)</title><rect x="800.5" y="739.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="803.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="804.0" y="739.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="807.0" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (193 samples, 19.01%)</title><rect x="805.2" y="739.0" width="224.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="808.2" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.39%)</title><rect x="807.5" y="723.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="810.5" y="734.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="812.2" y="723.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="815.2" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (37 samples, 3.65%)</title><rect x="813.3" y="723.0" width="43.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.3" y="734.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (17 samples, 1.67%)</title><rect x="826.1" y="707.0" width="19.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="829.1" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.59%)</title><rect x="830.8" y="691.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="833.8" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.39%)</title><rect x="833.1" y="675.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="836.1" y="686.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.20%)</title><rect x="837.7" y="691.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="840.7" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (5 samples, 0.49%)</title><rect x="840.1" y="691.0" width="5.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="843.1" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.20%)</title><rect x="845.9" y="707.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="848.9" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.69%)</title><rect x="848.2" y="707.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="851.2" y="718.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="856.3" y="723.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="859.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="857.5" y="723.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="860.5" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.39%)</title><rect x="858.7" y="723.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.7" y="734.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.10%)</title><rect x="862.2" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="865.2" y="718.0"></text>
</g>
<g>
<title>__lll_lock_wait (18 samples, 1.77%)</title><rect x="863.3" y="723.0" width="20.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="866.3" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (53 samples, 5.22%)</title><rect x="884.2" y="723.0" width="61.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="887.2" y="734.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (54 samples, 5.32%)</title><rect x="945.9" y="723.0" width="62.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="948.9" y="734.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.20%)</title><rect x="1008.6" y="723.0" width="2.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1011.6" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1011.0" y="723.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1014.0" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.49%)</title><rect x="1012.1" y="723.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1015.1" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.30%)</title><rect x="1017.9" y="723.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1020.9" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.39%)</title><rect x="1021.4" y="723.0" width="4.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1024.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1026.1" y="723.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1029.1" y="734.0"></text>
</g>
<g>
<title>_init (2 samples, 0.20%)</title><rect x="1027.2" y="723.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1030.2" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.49%)</title><rect x="1029.6" y="739.0" width="5.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1032.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 2.17%)</title><rect x="1035.4" y="787.0" width="25.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1038.4" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 2.17%)</title><rect x="1035.4" y="771.0" width="25.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1038.4" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 2.17%)</title><rect x="1035.4" y="755.0" width="25.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.4" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 2.17%)</title><rect x="1035.4" y="739.0" width="25.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1038.4" y="750.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1061.0" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.10%)</title><rect x="1061.0" y="851.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.0" y="862.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.10%)</title><rect x="1061.0" y="835.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1064.0" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.10%)</title><rect x="1061.0" y="819.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.0" y="830.0"></text>
</g>
<g>
<title>start_thread (110 samples, 10.84%)</title><rect x="1062.1" y="867.0" width="127.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1065.1" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (110 samples, 10.84%)</title><rect x="1062.1" y="851.0" width="127.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1065.1" y="862.0">java_start(Threa..</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 2.27%)</title><rect x="1062.1" y="835.0" width="26.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.1" y="846.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.59%)</title><rect x="1062.1" y="819.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.1" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.59%)</title><rect x="1062.1" y="803.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.1" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.30%)</title><rect x="1062.1" y="787.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.1" y="798.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.30%)</title><rect x="1065.6" y="787.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1068.6" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.58%)</title><rect x="1069.1" y="819.0" width="18.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.1" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.49%)</title><rect x="1070.3" y="803.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.3" y="814.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.10%)</title><rect x="1070.3" y="787.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.3" y="798.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.20%)</title><rect x="1071.4" y="787.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.4" y="798.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1073.7" y="787.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1076.7" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.39%)</title><rect x="1076.1" y="803.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.1" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1076.1" y="787.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.1" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.20%)</title><rect x="1076.1" y="771.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.1" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.20%)</title><rect x="1076.1" y="755.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.1" y="766.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.20%)</title><rect x="1076.1" y="739.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.1" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1078.4" y="787.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.4" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1078.4" y="771.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.4" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1079.6" y="771.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.6" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.59%)</title><rect x="1080.7" y="803.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.59%)</title><rect x="1080.7" y="787.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1083.7" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.39%)</title><rect x="1080.7" y="771.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.7" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.39%)</title><rect x="1080.7" y="755.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.7" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.39%)</title><rect x="1080.7" y="739.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.7" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.39%)</title><rect x="1080.7" y="723.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.7" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.30%)</title><rect x="1081.9" y="707.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.9" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1081.9" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1083.0" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.0" y="702.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.10%)</title><rect x="1084.2" y="691.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.2" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.20%)</title><rect x="1085.4" y="771.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.4" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1085.4" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.10%)</title><rect x="1086.5" y="755.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.5" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1087.7" y="819.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.7" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1087.7" y="803.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.7" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.10%)</title><rect x="1087.7" y="787.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1090.7" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 8.37%)</title><rect x="1088.9" y="835.0" width="98.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.9" y="846.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 8.37%)</title><rect x="1088.9" y="819.0" width="98.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.9" y="830.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 8.37%)</title><rect x="1088.9" y="803.0" width="98.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.9" y="814.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 8.37%)</title><rect x="1088.9" y="787.0" width="98.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.9" y="798.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (84 samples, 8.28%)</title><rect x="1088.9" y="771.0" width="97.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.9" y="782.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (84 samples, 8.28%)</title><rect x="1088.9" y="755.0" width="97.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.9" y="766.0">Compile::Co..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.10%)</title><rect x="1088.9" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.9" y="750.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.10%)</title><rect x="1088.9" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1088.9" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1088.9" y="691.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1088.9" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.9" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1088.9" y="659.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.9" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1088.9" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.9" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1088.9" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1088.9" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.9" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1088.9" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.9" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1088.9" y="579.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.9" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1088.9" y="563.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.9" y="574.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1088.9" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.9" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1088.9" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.9" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1088.9" y="515.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.9" y="526.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1088.9" y="499.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.9" y="510.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.10%)</title><rect x="1088.9" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.9" y="494.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 4.43%)</title><rect x="1090.0" y="739.0" width="52.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.0" y="750.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.20%)</title><rect x="1090.0" y="723.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.0" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1090.0" y="707.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.0" y="718.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.10%)</title><rect x="1090.0" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.0" y="702.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="1091.2" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.2" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1091.2" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.2" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1092.3" y="723.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.3" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="1092.3" y="707.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.3" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="1092.3" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.3" y="702.0"></text>
</g>
<g>
<title>ConstantOopWriteValue::write_on(DebugInfoWriteStream*) (1 samples, 0.10%)</title><rect x="1092.3" y="675.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.3" y="686.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_find_index(_jobject*) (1 samples, 0.10%)</title><rect x="1092.3" y="659.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.3" y="670.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_initialize() (1 samples, 0.10%)</title><rect x="1092.3" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.3" y="654.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.30%)</title><rect x="1093.5" y="723.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.5" y="734.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1093.5" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.5" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.20%)</title><rect x="1094.7" y="707.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.7" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1094.7" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.7" y="702.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1095.8" y="691.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1097.0" y="723.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1097.0" y="707.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1097.0" y="691.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 3.74%)</title><rect x="1098.2" y="723.0" width="44.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.2" y="734.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.39%)</title><rect x="1098.2" y="707.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1100.5" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.10%)</title><rect x="1101.6" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1102.8" y="707.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.8" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1102.8" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.39%)</title><rect x="1104.0" y="707.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.0" y="718.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.10%)</title><rect x="1107.5" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.5" y="702.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1107.5" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.69%)</title><rect x="1108.6" y="707.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.39%)</title><rect x="1110.9" y="691.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1114.4" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.4" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.10%)</title><rect x="1115.6" y="691.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1116.8" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1116.8" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.39%)</title><rect x="1117.9" y="707.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.9" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1121.4" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1122.6" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.39%)</title><rect x="1123.7" y="707.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.20%)</title><rect x="1126.1" y="691.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.10%)</title><rect x="1128.4" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1129.5" y="707.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.5" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1129.5" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.5" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.10%)</title><rect x="1129.5" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.5" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.10%)</title><rect x="1129.5" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.5" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1130.7" y="707.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.7" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1130.7" y="691.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.7" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1131.9" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.9" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1133.0" y="707.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.0" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1133.0" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.0" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.69%)</title><rect x="1134.2" y="707.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.2" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1140.0" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.0" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1141.2" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.2" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1141.2" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.2" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 2.66%)</title><rect x="1142.3" y="739.0" width="31.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.3" y="750.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1142.3" y="723.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.3" y="734.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.10%)</title><rect x="1142.3" y="707.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.20%)</title><rect x="1143.5" y="723.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.20%)</title><rect x="1143.5" y="707.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.10%)</title><rect x="1143.5" y="691.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.5" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.10%)</title><rect x="1143.5" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="686.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.10%)</title><rect x="1143.5" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.5" y="670.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.10%)</title><rect x="1143.5" y="643.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.5" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.10%)</title><rect x="1143.5" y="627.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.5" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1143.5" y="611.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.5" y="622.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.10%)</title><rect x="1143.5" y="595.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.5" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.10%)</title><rect x="1143.5" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.5" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.10%)</title><rect x="1143.5" y="563.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.5" y="574.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.10%)</title><rect x="1143.5" y="547.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.5" y="558.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1143.5" y="531.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.5" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1143.5" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.5" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1143.5" y="499.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.5" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1143.5" y="483.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.5" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1143.5" y="467.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.5" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1143.5" y="451.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.5" y="462.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1143.5" y="435.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.5" y="446.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.10%)</title><rect x="1143.5" y="419.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.5" y="430.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.10%)</title><rect x="1143.5" y="403.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.10%)</title><rect x="1144.7" y="691.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::get_addp_base(Node*) (1 samples, 0.10%)</title><rect x="1144.7" y="675.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.7" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.20%)</title><rect x="1145.8" y="723.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.8" y="734.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1147.0" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 1.18%)</title><rect x="1148.1" y="723.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.1" y="734.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.10%)</title><rect x="1148.1" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.30%)</title><rect x="1149.3" y="707.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.3" y="718.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1151.6" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1152.8" y="707.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1155.1" y="707.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.20%)</title><rect x="1155.1" y="691.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.10%)</title><rect x="1156.3" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.30%)</title><rect x="1157.4" y="707.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.10%)</title><rect x="1158.6" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1158.6" y="675.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.6" y="686.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1158.6" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.6" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1158.6" y="643.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1161.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1159.8" y="691.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1159.8" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="686.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1159.8" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.8" y="670.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1159.8" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.8" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1160.9" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1160.9" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1160.9" y="675.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1160.9" y="659.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="670.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1160.9" y="643.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1162.1" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1163.3" y="723.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.79%)</title><rect x="1164.4" y="723.0" width="9.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.79%)</title><rect x="1164.4" y="707.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.4" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1165.6" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.6" y="702.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1166.7" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="702.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1166.7" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.7" y="686.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1166.7" y="659.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="670.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1166.7" y="643.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.7" y="654.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.10%)</title><rect x="1167.9" y="691.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="702.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.39%)</title><rect x="1169.1" y="691.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="702.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 0.39%)</title><rect x="1169.1" y="675.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.1" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1169.1" y="659.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.1" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1169.1" y="643.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1169.1" y="627.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1169.1" y="611.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.1" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1169.1" y="595.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.1" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1169.1" y="579.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.1" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1169.1" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.1" y="574.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1169.1" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="558.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.1" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1170.2" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1170.2" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1171.4" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1171.4" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="574.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.6" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1172.6" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.89%)</title><rect x="1173.7" y="739.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.89%)</title><rect x="1173.7" y="723.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.89%)</title><rect x="1173.7" y="707.0" width="10.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.89%)</title><rect x="1173.7" y="691.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.89%)</title><rect x="1173.7" y="675.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.89%)</title><rect x="1173.7" y="659.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1173.7" y="643.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1173.7" y="627.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.39%)</title><rect x="1173.7" y="611.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.39%)</title><rect x="1173.7" y="595.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.39%)</title><rect x="1173.7" y="579.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1173.7" y="563.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1173.7" y="547.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1173.7" y="531.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="542.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.10%)</title><rect x="1173.7" y="515.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="526.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1173.7" y="499.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.10%)</title><rect x="1173.7" y="483.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="494.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1173.7" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1173.7" y="451.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1173.7" y="435.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1173.7" y="419.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1173.7" y="403.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="414.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1173.7" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1173.7" y="371.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1174.9" y="515.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1174.9" y="499.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1174.9" y="483.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1174.9" y="467.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1174.9" y="451.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1174.9" y="435.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1174.9" y="419.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1174.9" y="403.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1174.9" y="387.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1174.9" y="371.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1174.9" y="355.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1174.9" y="339.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1174.9" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1174.9" y="307.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1174.9" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1174.9" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1174.9" y="259.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1174.9" y="243.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1174.9" y="227.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1174.9" y="211.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1174.9" y="195.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1174.9" y="179.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="190.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1174.9" y="163.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1174.9" y="147.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="158.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1174.9" y="131.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="142.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.10%)</title><rect x="1174.9" y="115.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1174.9" y="99.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="110.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1174.9" y="83.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1174.9" y="67.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="78.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1174.9" y="51.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="62.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1174.9" y="35.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.0" y="355.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1176.0" y="339.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1176.0" y="323.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1176.0" y="307.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1176.0" y="291.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1176.0" y="275.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.0" y="259.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1176.0" y="243.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1176.0" y="227.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1176.0" y="211.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1176.0" y="195.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1176.0" y="179.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="190.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1176.0" y="163.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.0" y="174.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1176.0" y="147.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="158.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.10%)</title><rect x="1176.0" y="131.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="142.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1176.0" y="115.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="126.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.10%)</title><rect x="1176.0" y="99.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="110.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1176.0" y="83.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="94.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.10%)</title><rect x="1176.0" y="67.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1179.0" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.2" y="355.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.2" y="366.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.10%)</title><rect x="1177.2" y="339.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="350.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1177.2" y="323.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="334.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1177.2" y="307.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1180.2" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.49%)</title><rect x="1178.4" y="643.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>GraphKit::merge_memory(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1178.4" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="638.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1178.4" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1179.5" y="627.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1179.5" y="611.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.39%)</title><rect x="1179.5" y="595.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.39%)</title><rect x="1179.5" y="579.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.39%)</title><rect x="1179.5" y="563.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1179.5" y="547.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.10%)</title><rect x="1179.5" y="531.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="542.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.10%)</title><rect x="1179.5" y="515.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.10%)</title><rect x="1179.5" y="499.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="483.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.7" y="531.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1180.7" y="515.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1180.7" y="499.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1180.7" y="483.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1180.7" y="467.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1180.7" y="451.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1180.7" y="435.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1180.7" y="419.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.10%)</title><rect x="1180.7" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1180.7" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="398.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.10%)</title><rect x="1180.7" y="371.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.9" y="403.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.9" y="387.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.9" y="371.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.9" y="355.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="339.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.9" y="323.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.9" y="307.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.9" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.9" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.10%)</title><rect x="1181.9" y="259.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="451.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="435.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1183.0" y="419.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1183.0" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.10%)</title><rect x="1183.0" y="387.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.20%)</title><rect x="1184.2" y="739.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1184.2" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="734.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1185.3" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="734.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.5" y="771.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.5" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1186.5" y="755.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.5" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1186.5" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1186.5" y="723.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.10%)</title><rect x="1186.5" y="707.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.5" y="691.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.5" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1186.5" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1186.5" y="659.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1186.5" y="643.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1186.5" y="627.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.5" y="611.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1186.5" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.5" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1186.5" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1186.5" y="563.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.5" y="574.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.5" y="547.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1186.5" y="531.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="542.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.10%)</title><rect x="1186.5" y="515.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="526.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.7" y="835.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.20%)</title><rect x="1187.7" y="819.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.20%)</title><rect x="1187.7" y="803.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.20%)</title><rect x="1187.7" y="787.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.20%)</title><rect x="1187.7" y="771.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.20%)</title><rect x="1187.7" y="755.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1187.7" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::clear(bool) (1 samples, 0.10%)</title><rect x="1187.7" y="723.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::zero_bottom_entry_raw() (1 samples, 0.10%)</title><rect x="1187.7" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="718.0"></text>
</g>
<g>
<title>G1CollectorPolicy::record_collection_pause_end(double, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>G1CollectorPolicy::update_young_list_target_length(unsigned long) (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
</g>
</svg>
