<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1157"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1157"> </text>
<g id="frames">
<g>
<title>all (83 samples, 100.00%)</title><rect x="10.0" y="1123.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (1 samples, 1.20%)</title><rect x="10.0" y="1107.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (1 samples, 1.20%)</title><rect x="10.0" y="1091.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 1.20%)</title><rect x="10.0" y="1075.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 1.20%)</title><rect x="10.0" y="1059.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 1.20%)</title><rect x="10.0" y="1043.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 1.20%)</title><rect x="10.0" y="1027.0" width="14.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 1.20%)</title><rect x="10.0" y="1011.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 1.20%)</title><rect x="10.0" y="995.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 1.20%)</title><rect x="24.2" y="1107.0" width="14.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 1.20%)</title><rect x="24.2" y="1091.0" width="14.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 1.20%)</title><rect x="24.2" y="1075.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1786762707.run (1 samples, 1.20%)</title><rect x="24.2" y="1059.0" width="14.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (1 samples, 1.20%)</title><rect x="24.2" y="1043.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 1.20%)</title><rect x="24.2" y="1027.0" width="14.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 1.20%)</title><rect x="24.2" y="1011.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 1.20%)</title><rect x="24.2" y="995.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 1.20%)</title><rect x="24.2" y="979.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 1.20%)</title><rect x="24.2" y="963.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.2" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 1.20%)</title><rect x="24.2" y="947.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 1.20%)</title><rect x="24.2" y="931.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.2" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 1.20%)</title><rect x="24.2" y="915.0" width="14.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.2" y="926.0"></text>
</g>
<g>
<title>start_thread (81 samples, 97.59%)</title><rect x="38.4" y="1107.0" width="1151.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="41.4" y="1118.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (81 samples, 97.59%)</title><rect x="38.4" y="1091.0" width="1151.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="41.4" y="1102.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (81 samples, 97.59%)</title><rect x="38.4" y="1075.0" width="1151.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="41.4" y="1086.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 97.59%)</title><rect x="38.4" y="1059.0" width="1151.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="41.4" y="1070.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 97.59%)</title><rect x="38.4" y="1043.0" width="1151.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="41.4" y="1054.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (79 samples, 95.18%)</title><rect x="38.4" y="1027.0" width="1123.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="41.4" y="1038.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (79 samples, 95.18%)</title><rect x="38.4" y="1011.0" width="1123.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="41.4" y="1022.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 33.73%)</title><rect x="38.4" y="995.0" width="398.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="41.4" y="1006.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 2.41%)</title><rect x="38.4" y="979.0" width="28.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.4" y="990.0">Co..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 1.20%)</title><rect x="38.4" y="963.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="41.4" y="974.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 1.20%)</title><rect x="52.7" y="963.0" width="14.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="55.7" y="974.0"></text>
</g>
<g>
<title>MachNode::reloc() const (1 samples, 1.20%)</title><rect x="52.7" y="947.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="55.7" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 7.23%)</title><rect x="66.9" y="979.0" width="85.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="69.9" y="990.0">Matcher::m..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 2.41%)</title><rect x="66.9" y="963.0" width="28.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.9" y="974.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 4.82%)</title><rect x="95.3" y="963.0" width="56.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="98.3" y="974.0">Matche..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 3.61%)</title><rect x="109.5" y="947.0" width="42.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="112.5" y="958.0">Matc..</text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 3.61%)</title><rect x="109.5" y="931.0" width="42.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="112.5" y="942.0">Matc..</text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (2 samples, 2.41%)</title><rect x="123.7" y="915.0" width="28.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="126.7" y="926.0">St..</text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 1.20%)</title><rect x="152.2" y="979.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="155.2" y="990.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 1.20%)</title><rect x="152.2" y="963.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="155.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 2.41%)</title><rect x="166.4" y="979.0" width="28.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="169.4" y="990.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 2.41%)</title><rect x="166.4" y="963.0" width="28.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="169.4" y="974.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 1.20%)</title><rect x="166.4" y="947.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="169.4" y="958.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 1.20%)</title><rect x="166.4" y="931.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="169.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 1.20%)</title><rect x="180.6" y="947.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="183.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (17 samples, 20.48%)</title><rect x="194.8" y="979.0" width="241.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="197.8" y="990.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 1.20%)</title><rect x="194.8" y="963.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="197.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 2.41%)</title><rect x="209.0" y="963.0" width="28.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="212.0" y="974.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 2.41%)</title><rect x="209.0" y="947.0" width="28.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="212.0" y="958.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 2.41%)</title><rect x="209.0" y="931.0" width="28.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="212.0" y="942.0">In..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 2.41%)</title><rect x="237.5" y="963.0" width="28.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="240.5" y="974.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 1.20%)</title><rect x="251.7" y="947.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 1.20%)</title><rect x="251.7" y="931.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="254.7" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 3.61%)</title><rect x="265.9" y="963.0" width="42.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="268.9" y="974.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 2.41%)</title><rect x="280.1" y="947.0" width="28.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="283.1" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 1.20%)</title><rect x="308.6" y="963.0" width="14.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="311.6" y="974.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 1.20%)</title><rect x="308.6" y="947.0" width="14.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="311.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 1.20%)</title><rect x="322.8" y="963.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="325.8" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 1.20%)</title><rect x="322.8" y="947.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="325.8" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 2.41%)</title><rect x="337.0" y="963.0" width="28.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="340.0" y="974.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 1.20%)</title><rect x="351.2" y="947.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="354.2" y="958.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 1.20%)</title><rect x="365.4" y="963.0" width="14.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="368.4" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 1.20%)</title><rect x="365.4" y="947.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="368.4" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 1.20%)</title><rect x="365.4" y="931.0" width="14.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="368.4" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 1.20%)</title><rect x="365.4" y="915.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="368.4" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 2.41%)</title><rect x="379.6" y="963.0" width="28.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="382.6" y="974.0">Ph..</text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 1.20%)</title><rect x="408.1" y="963.0" width="14.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="411.1" y="974.0"></text>
</g>
<g>
<title>loadRangeNode::oper_input_base() const (1 samples, 1.20%)</title><rect x="422.3" y="963.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="425.3" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (44 samples, 53.01%)</title><rect x="436.5" y="995.0" width="625.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="439.5" y="1006.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 1.20%)</title><rect x="436.5" y="979.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="439.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 1.20%)</title><rect x="436.5" y="963.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="439.5" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 1.20%)</title><rect x="436.5" y="947.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="439.5" y="958.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.20%)</title><rect x="436.5" y="931.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="439.5" y="942.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 1.20%)</title><rect x="436.5" y="915.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="439.5" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.20%)</title><rect x="436.5" y="899.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="439.5" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.20%)</title><rect x="436.5" y="883.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="439.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 3.61%)</title><rect x="450.7" y="979.0" width="42.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.7" y="990.0">Conn..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 3.61%)</title><rect x="450.7" y="963.0" width="42.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="453.7" y="974.0">Conn..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 1.20%)</title><rect x="450.7" y="947.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="453.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 1.20%)</title><rect x="450.7" y="931.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="453.7" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 1.20%)</title><rect x="450.7" y="915.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="453.7" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 1.20%)</title><rect x="450.7" y="899.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="453.7" y="910.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 1.20%)</title><rect x="450.7" y="883.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="453.7" y="894.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 1.20%)</title><rect x="450.7" y="867.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="453.7" y="878.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 1.20%)</title><rect x="450.7" y="851.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="453.7" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::ensure_metadata_alive(ciMetadata*) (1 samples, 1.20%)</title><rect x="450.7" y="835.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="453.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 2.41%)</title><rect x="464.9" y="947.0" width="28.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="467.9" y="958.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.41%)</title><rect x="464.9" y="931.0" width="28.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="467.9" y="942.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.41%)</title><rect x="464.9" y="915.0" width="28.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="467.9" y="926.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.41%)</title><rect x="464.9" y="899.0" width="28.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.9" y="910.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 2.41%)</title><rect x="464.9" y="883.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="467.9" y="894.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.20%)</title><rect x="464.9" y="867.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="467.9" y="878.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 1.20%)</title><rect x="464.9" y="851.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="467.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="867.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="482.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="851.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="482.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="835.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="482.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="819.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="482.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="803.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="482.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="787.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="482.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="771.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="482.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="755.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="482.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="739.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="482.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="723.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="482.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="707.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="482.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="691.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="482.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="675.0" width="14.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="482.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="659.0" width="14.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="482.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="643.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="627.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="611.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="595.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="482.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="579.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="482.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="563.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="482.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="547.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="531.0" width="14.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="482.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="515.0" width="14.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="482.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="499.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="482.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="483.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="482.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="467.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="482.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="451.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="482.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="435.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="482.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="419.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="482.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="403.0" width="14.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="482.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="387.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="482.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="371.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="482.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="355.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="482.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="339.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="482.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="323.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="482.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="307.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="291.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="482.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="275.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="482.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="259.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="482.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="243.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="482.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="227.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="482.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="211.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="482.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="195.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="179.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="482.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="163.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="482.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="147.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="482.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="131.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="482.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="115.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="482.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="99.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="482.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="83.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="482.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="67.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="482.2" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 1.20%)</title><rect x="479.2" y="51.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.2" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 1.20%)</title><rect x="479.2" y="35.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="482.2" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 1.20%)</title><rect x="493.4" y="979.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="496.4" y="990.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 1.20%)</title><rect x="493.4" y="963.0" width="14.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="496.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 40.96%)</title><rect x="507.6" y="979.0" width="483.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="510.6" y="990.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 2.41%)</title><rect x="507.6" y="963.0" width="28.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.6" y="974.0">Ph..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 1.20%)</title><rect x="521.8" y="947.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="524.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (30 samples, 36.14%)</title><rect x="536.0" y="963.0" width="426.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.0" y="974.0">PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, No..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (30 samples, 36.14%)</title><rect x="536.0" y="947.0" width="426.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.0" y="958.0">PhaseIdealLoop::build_loop_late_post(Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (30 samples, 36.14%)</title><rect x="536.0" y="931.0" width="426.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="539.0" y="942.0">PhaseIdealLoop::get_late_ctrl(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 1.20%)</title><rect x="564.5" y="915.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="567.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 1.20%)</title><rect x="564.5" y="899.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="567.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (27 samples, 32.53%)</title><rect x="578.7" y="915.0" width="383.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="581.7" y="926.0">PhaseIdealLoop::is_dominator(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 1.20%)</title><rect x="962.5" y="963.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.5" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 1.20%)</title><rect x="976.7" y="963.0" width="14.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 1.20%)</title><rect x="976.7" y="947.0" width="14.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.7" y="958.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 1.20%)</title><rect x="976.7" y="931.0" width="14.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.7" y="942.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 1.20%)</title><rect x="976.7" y="915.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 1.20%)</title><rect x="991.0" y="979.0" width="14.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="994.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 1.20%)</title><rect x="991.0" y="963.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="994.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 4.82%)</title><rect x="1005.2" y="979.0" width="56.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.2" y="990.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 4.82%)</title><rect x="1005.2" y="963.0" width="56.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1008.2" y="974.0">PhaseI..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 1.20%)</title><rect x="1005.2" y="947.0" width="14.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.2" y="958.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 1.20%)</title><rect x="1005.2" y="931.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1008.2" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 1.20%)</title><rect x="1005.2" y="915.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.2" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 1.20%)</title><rect x="1005.2" y="899.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 2.41%)</title><rect x="1019.4" y="947.0" width="28.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.4" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 2.41%)</title><rect x="1019.4" y="931.0" width="28.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.4" y="942.0">Ph..</text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 2.41%)</title><rect x="1019.4" y="915.0" width="28.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.4" y="926.0">No..</text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 1.20%)</title><rect x="1047.8" y="947.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.8" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 1.20%)</title><rect x="1047.8" y="931.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.8" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 1.20%)</title><rect x="1047.8" y="915.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1050.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 8.43%)</title><rect x="1062.0" y="995.0" width="99.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.0" y="1006.0">ParseGenerat..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 8.43%)</title><rect x="1062.0" y="979.0" width="99.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.0" y="990.0">Parse::Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 6.02%)</title><rect x="1062.0" y="963.0" width="71.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.0" y="974.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 6.02%)</title><rect x="1062.0" y="947.0" width="71.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.0" y="958.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 6.02%)</title><rect x="1062.0" y="931.0" width="71.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.0" y="942.0">Parse::d..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 6.02%)</title><rect x="1062.0" y="915.0" width="71.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.0" y="926.0">Parse::d..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 6.02%)</title><rect x="1062.0" y="899.0" width="71.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.0" y="910.0">ParseGen..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 6.02%)</title><rect x="1062.0" y="883.0" width="71.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.0" y="894.0">Parse::P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.82%)</title><rect x="1062.0" y="867.0" width="56.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.0" y="878.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.82%)</title><rect x="1062.0" y="851.0" width="56.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.0" y="862.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.82%)</title><rect x="1062.0" y="835.0" width="56.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.0" y="846.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.82%)</title><rect x="1062.0" y="819.0" width="56.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.0" y="830.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.82%)</title><rect x="1062.0" y="803.0" width="56.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.0" y="814.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.82%)</title><rect x="1062.0" y="787.0" width="56.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.0" y="798.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.82%)</title><rect x="1062.0" y="771.0" width="56.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.0" y="782.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.82%)</title><rect x="1062.0" y="755.0" width="56.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.0" y="766.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.82%)</title><rect x="1062.0" y="739.0" width="56.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.0" y="750.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 4.82%)</title><rect x="1062.0" y="723.0" width="56.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.0" y="734.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 4.82%)</title><rect x="1062.0" y="707.0" width="56.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.0" y="718.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 4.82%)</title><rect x="1062.0" y="691.0" width="56.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.0" y="702.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 4.82%)</title><rect x="1062.0" y="675.0" width="56.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.0" y="686.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 4.82%)</title><rect x="1062.0" y="659.0" width="56.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.0" y="670.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 4.82%)</title><rect x="1062.0" y="643.0" width="56.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.0" y="654.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 3.61%)</title><rect x="1062.0" y="627.0" width="42.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.0" y="638.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.61%)</title><rect x="1062.0" y="611.0" width="42.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.0" y="622.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.61%)</title><rect x="1062.0" y="595.0" width="42.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.0" y="606.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.61%)</title><rect x="1062.0" y="579.0" width="42.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.0" y="590.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.61%)</title><rect x="1062.0" y="563.0" width="42.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.0" y="574.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.41%)</title><rect x="1076.3" y="547.0" width="28.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.3" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.41%)</title><rect x="1076.3" y="531.0" width="28.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.3" y="542.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 2.41%)</title><rect x="1076.3" y="515.0" width="28.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.3" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 2.41%)</title><rect x="1076.3" y="499.0" width="28.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.3" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 2.41%)</title><rect x="1076.3" y="483.0" width="28.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.3" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 2.41%)</title><rect x="1076.3" y="467.0" width="28.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.3" y="478.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 2.41%)</title><rect x="1076.3" y="451.0" width="28.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.3" y="462.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.20%)</title><rect x="1076.3" y="435.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.20%)</title><rect x="1076.3" y="419.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.20%)</title><rect x="1076.3" y="403.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.20%)</title><rect x="1076.3" y="387.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.20%)</title><rect x="1076.3" y="371.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.20%)</title><rect x="1076.3" y="355.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.3" y="366.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 1.20%)</title><rect x="1076.3" y="339.0" width="14.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.3" y="350.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 1.20%)</title><rect x="1076.3" y="323.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.3" y="334.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 1.20%)</title><rect x="1076.3" y="307.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.3" y="318.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.20%)</title><rect x="1076.3" y="291.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.3" y="302.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.20%)</title><rect x="1076.3" y="275.0" width="14.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 1.20%)</title><rect x="1090.5" y="435.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 1.20%)</title><rect x="1090.5" y="419.0" width="14.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.5" y="430.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 1.20%)</title><rect x="1090.5" y="403.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.5" y="414.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 1.20%)</title><rect x="1090.5" y="387.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.5" y="398.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 1.20%)</title><rect x="1090.5" y="371.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.5" y="382.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 1.20%)</title><rect x="1090.5" y="355.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.5" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 1.20%)</title><rect x="1090.5" y="339.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.5" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 1.20%)</title><rect x="1090.5" y="323.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.5" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 1.20%)</title><rect x="1090.5" y="307.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.5" y="318.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 1.20%)</title><rect x="1090.5" y="291.0" width="14.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.5" y="302.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.20%)</title><rect x="1090.5" y="275.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 1.20%)</title><rect x="1104.7" y="627.0" width="14.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.7" y="638.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 1.20%)</title><rect x="1104.7" y="611.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.7" y="622.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 1.20%)</title><rect x="1104.7" y="595.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.7" y="606.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 1.20%)</title><rect x="1104.7" y="579.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.7" y="590.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 1.20%)</title><rect x="1104.7" y="563.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.7" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 1.20%)</title><rect x="1104.7" y="547.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 1.20%)</title><rect x="1104.7" y="531.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 1.20%)</title><rect x="1104.7" y="515.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="526.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 1.20%)</title><rect x="1104.7" y="499.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.7" y="510.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.20%)</title><rect x="1104.7" y="483.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 1.20%)</title><rect x="1118.9" y="867.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.9" y="878.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 1.20%)</title><rect x="1118.9" y="851.0" width="14.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.9" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 1.20%)</title><rect x="1118.9" y="835.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.9" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 1.20%)</title><rect x="1118.9" y="819.0" width="14.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_exits() (2 samples, 2.41%)</title><rect x="1133.1" y="963.0" width="28.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="974.0">Pa..</text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (2 samples, 2.41%)</title><rect x="1133.1" y="947.0" width="28.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="958.0">Ph..</text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 1.20%)</title><rect x="1147.3" y="931.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 1.20%)</title><rect x="1147.3" y="915.0" width="14.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.3" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 1.20%)</title><rect x="1147.3" y="899.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.3" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 1.20%)</title><rect x="1147.3" y="883.0" width="14.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.3" y="894.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 1.20%)</title><rect x="1147.3" y="867.0" width="14.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.3" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 2.41%)</title><rect x="1161.6" y="1027.0" width="28.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.6" y="1038.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 2.41%)</title><rect x="1161.6" y="1011.0" width="28.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.6" y="1022.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 2.41%)</title><rect x="1161.6" y="995.0" width="28.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.6" y="1006.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 1.20%)</title><rect x="1161.6" y="979.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.6" y="990.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 1.20%)</title><rect x="1161.6" y="963.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="974.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 1.20%)</title><rect x="1161.6" y="947.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.6" y="958.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 1.20%)</title><rect x="1161.6" y="931.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 1.20%)</title><rect x="1161.6" y="915.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.20%)</title><rect x="1161.6" y="899.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.20%)</title><rect x="1161.6" y="883.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 1.20%)</title><rect x="1161.6" y="867.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::copy_state_for_exception() (1 samples, 1.20%)</title><rect x="1161.6" y="851.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="862.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 1.20%)</title><rect x="1161.6" y="835.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.6" y="846.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.20%)</title><rect x="1161.6" y="819.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 1.20%)</title><rect x="1175.8" y="979.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="990.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.20%)</title><rect x="1175.8" y="963.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 1.20%)</title><rect x="1175.8" y="947.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(void const*) (1 samples, 1.20%)</title><rect x="1175.8" y="931.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
</g>
</svg>
