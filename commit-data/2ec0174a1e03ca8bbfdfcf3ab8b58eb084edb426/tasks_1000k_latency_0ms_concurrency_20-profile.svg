<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (1,521 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (234 samples, 15.38%)</title><rect x="10.8" y="1203.0" width="181.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.8" y="1214.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="10.8" y="1187.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.8" y="1171.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.8" y="1155.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.07%)</title><rect x="10.8" y="1139.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.8" y="1123.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.8" y="1107.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.8" y="1091.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="10.8" y="1075.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="10.8" y="1059.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="10.8" y="1043.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="10.8" y="1027.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="10.8" y="1011.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.07%)</title><rect x="10.8" y="995.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.07%)</title><rect x="10.8" y="979.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.8" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.07%)</title><rect x="10.8" y="963.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.8" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="10.8" y="947.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (233 samples, 15.32%)</title><rect x="11.6" y="1187.0" width="180.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.6" y="1198.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.26%)</title><rect x="11.6" y="1171.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.26%)</title><rect x="11.6" y="1155.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.07%)</title><rect x="11.6" y="1139.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/809236260.accept (3 samples, 0.20%)</title><rect x="12.3" y="1139.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.20%)</title><rect x="12.3" y="1123.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.20%)</title><rect x="12.3" y="1107.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.3" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.13%)</title><rect x="13.1" y="1091.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.26%)</title><rect x="14.7" y="1171.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.26%)</title><rect x="14.7" y="1155.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="14.7" y="1139.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.07%)</title><rect x="14.7" y="1123.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="14.7" y="1107.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.20%)</title><rect x="15.4" y="1139.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.20%)</title><rect x="15.4" y="1123.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.20%)</title><rect x="15.4" y="1107.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.20%)</title><rect x="15.4" y="1091.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.20%)</title><rect x="15.4" y="1075.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.13%)</title><rect x="15.4" y="1059.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.07%)</title><rect x="16.2" y="1043.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="17.0" y="1059.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="17.0" y="1043.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="17.0" y="1027.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="17.0" y="1011.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$169/1816485457.get (1 samples, 0.07%)</title><rect x="17.0" y="995.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (176 samples, 11.57%)</title><rect x="17.8" y="1171.0" width="136.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.8" y="1182.0">java/lang/Iterabl..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/251689173.accept (170 samples, 11.18%)</title><rect x="18.5" y="1155.0" width="131.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.5" y="1166.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$37 (170 samples, 11.18%)</title><rect x="18.5" y="1139.0" width="131.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.5" y="1150.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (3 samples, 0.20%)</title><rect x="19.3" y="1123.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (130 samples, 8.55%)</title><rect x="21.6" y="1123.0" width="100.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.6" y="1134.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (130 samples, 8.55%)</title><rect x="21.6" y="1107.0" width="100.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="1118.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (130 samples, 8.55%)</title><rect x="21.6" y="1091.0" width="100.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.6" y="1102.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (130 samples, 8.55%)</title><rect x="21.6" y="1075.0" width="100.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.6" y="1086.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (130 samples, 8.55%)</title><rect x="21.6" y="1059.0" width="100.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.6" y="1070.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (130 samples, 8.55%)</title><rect x="21.6" y="1043.0" width="100.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.6" y="1054.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (89 samples, 5.85%)</title><rect x="21.6" y="1027.0" width="69.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.6" y="1038.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.25%)</title><rect x="21.6" y="1011.0" width="14.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.25%)</title><rect x="21.6" y="995.0" width="14.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 0.99%)</title><rect x="24.7" y="979.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (15 samples, 0.99%)</title><rect x="24.7" y="963.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.39%)</title><rect x="36.4" y="1011.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.39%)</title><rect x="36.4" y="995.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="37.2" y="979.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.2" y="990.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="37.2" y="963.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="40.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.26%)</title><rect x="37.9" y="979.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (64 samples, 4.21%)</title><rect x="41.0" y="1011.0" width="49.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="44.0" y="1022.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (64 samples, 4.21%)</title><rect x="41.0" y="995.0" width="49.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.0" y="1006.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (62 samples, 4.08%)</title><rect x="41.0" y="979.0" width="48.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.0" y="990.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (62 samples, 4.08%)</title><rect x="41.0" y="963.0" width="48.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.0" y="974.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (62 samples, 4.08%)</title><rect x="41.0" y="947.0" width="48.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="44.0" y="958.0">sun/..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="41.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="44.0" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark (55 samples, 3.62%)</title><rect x="41.8" y="931.0" width="42.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="44.8" y="942.0">Unsa..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="42.6" y="915.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="45.6" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="43.4" y="915.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="46.4" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 2.24%)</title><rect x="44.1" y="915.0" width="26.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="47.1" y="926.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.20%)</title><rect x="70.5" y="915.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="73.5" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 0.99%)</title><rect x="72.8" y="915.0" width="11.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="75.8" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.13%)</title><rect x="84.5" y="931.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="87.5" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.26%)</title><rect x="86.0" y="931.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="89.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.13%)</title><rect x="89.1" y="979.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (41 samples, 2.70%)</title><rect x="90.7" y="1027.0" width="31.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.7" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (41 samples, 2.70%)</title><rect x="90.7" y="1011.0" width="31.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.7" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (41 samples, 2.70%)</title><rect x="90.7" y="995.0" width="31.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.7" y="1006.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.13%)</title><rect x="122.5" y="1123.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.13%)</title><rect x="122.5" y="1107.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.26%)</title><rect x="124.0" y="1123.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.26%)</title><rect x="124.0" y="1107.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.26%)</title><rect x="124.0" y="1091.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 1.84%)</title><rect x="127.1" y="1123.0" width="21.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.1" y="1134.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 1.84%)</title><rect x="127.1" y="1107.0" width="21.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.1" y="1118.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.66%)</title><rect x="136.5" y="1091.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.13%)</title><rect x="136.5" y="1075.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.13%)</title><rect x="136.5" y="1059.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.13%)</title><rect x="136.5" y="1043.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.5" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="137.2" y="1027.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="140.2" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="137.2" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="140.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="137.2" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="140.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.33%)</title><rect x="138.0" y="1075.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="141.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.13%)</title><rect x="140.3" y="1059.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.20%)</title><rect x="141.9" y="1075.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.9" y="1086.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="144.2" y="1091.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="147.2" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.33%)</title><rect x="145.0" y="1091.0" width="3.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="148.0" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="148.9" y="1123.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="151.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="150.4" y="1155.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="150.4" y="1139.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="150.4" y="1123.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="150.4" y="1107.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="150.4" y="1091.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="150.4" y="1075.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="153.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.26%)</title><rect x="151.2" y="1155.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.26%)</title><rect x="151.2" y="1139.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.26%)</title><rect x="151.2" y="1123.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.26%)</title><rect x="151.2" y="1107.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.2" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.26%)</title><rect x="151.2" y="1091.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (49 samples, 3.22%)</title><rect x="154.3" y="1171.0" width="38.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.3" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (49 samples, 3.22%)</title><rect x="154.3" y="1155.0" width="38.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.3" y="1166.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (28 samples, 1.84%)</title><rect x="154.3" y="1139.0" width="21.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.3" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (27 samples, 1.78%)</title><rect x="155.1" y="1123.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 1.78%)</title><rect x="155.1" y="1107.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 1.71%)</title><rect x="155.1" y="1091.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 1.71%)</title><rect x="155.1" y="1075.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.66%)</title><rect x="156.6" y="1059.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.20%)</title><rect x="156.6" y="1043.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.20%)</title><rect x="156.6" y="1027.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.20%)</title><rect x="156.6" y="1011.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="159.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.20%)</title><rect x="156.6" y="995.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.20%)</title><rect x="156.6" y="979.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.20%)</title><rect x="156.6" y="963.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.20%)</title><rect x="156.6" y="947.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.46%)</title><rect x="159.0" y="1043.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.46%)</title><rect x="159.0" y="1027.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (7 samples, 0.46%)</title><rect x="159.0" y="1011.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 0.85%)</title><rect x="164.4" y="1059.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.79%)</title><rect x="165.2" y="1043.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.53%)</title><rect x="165.2" y="1027.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.53%)</title><rect x="165.2" y="1011.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="168.2" y="1022.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="170.6" y="995.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="173.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.26%)</title><rect x="171.4" y="1027.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.4" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.26%)</title><rect x="171.4" y="1011.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="174.5" y="1059.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="175.2" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="175.2" y="1075.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="175.2" y="1059.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="175.2" y="1043.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.2" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="175.2" y="1027.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="178.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.46%)</title><rect x="176.0" y="1139.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.39%)</title><rect x="176.0" y="1123.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.26%)</title><rect x="176.0" y="1107.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="176.0" y="1091.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1991282176.accept (1 samples, 0.07%)</title><rect x="176.0" y="1075.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="176.0" y="1059.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="176.0" y="1043.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="176.0" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="176.0" y="1011.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="176.0" y="995.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="176.0" y="979.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="176.8" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="176.8" y="1075.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.8" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="176.8" y="1059.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.07%)</title><rect x="176.8" y="1043.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.8" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.07%)</title><rect x="176.8" y="1027.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.8" y="1038.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="176.8" y="1011.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.13%)</title><rect x="177.6" y="1091.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.13%)</title><rect x="177.6" y="1075.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="178.3" y="1059.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="178.3" y="1043.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="178.3" y="1027.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="178.3" y="1011.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="178.3" y="995.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="178.3" y="979.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="178.3" y="963.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="178.3" y="947.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.3" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="178.3" y="931.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="181.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.13%)</title><rect x="179.1" y="1107.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="179.9" y="1091.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="179.9" y="1075.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="180.7" y="1123.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="180.7" y="1107.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="183.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="180.7" y="1091.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.46%)</title><rect x="181.5" y="1139.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.39%)</title><rect x="181.5" y="1123.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="181.5" y="1107.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="181.5" y="1091.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="181.5" y="1075.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="181.5" y="1059.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.07%)</title><rect x="181.5" y="1043.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.33%)</title><rect x="182.2" y="1107.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="182.2" y="1091.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="182.2" y="1075.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.07%)</title><rect x="182.2" y="1059.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="182.2" y="1043.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="182.2" y="1027.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="182.2" y="1011.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="182.2" y="995.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="185.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="182.2" y="979.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.20%)</title><rect x="183.0" y="1091.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="183.0" y="1075.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="183.0" y="1059.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="183.0" y="1043.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="183.0" y="1027.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.0" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="183.0" y="1011.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="183.0" y="995.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="183.0" y="979.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.07%)</title><rect x="183.0" y="963.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.07%)</title><rect x="183.0" y="947.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.0" y="958.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.07%)</title><rect x="183.0" y="931.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="186.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.13%)</title><rect x="183.8" y="1075.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.13%)</title><rect x="183.8" y="1059.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="186.8" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.13%)</title><rect x="183.8" y="1043.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="186.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="185.3" y="1091.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="185.3" y="1075.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="185.3" y="1059.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="185.3" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.3" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="185.3" y="1027.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="185.3" y="1011.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="186.1" y="1123.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.07%)</title><rect x="186.1" y="1107.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.07%)</title><rect x="186.1" y="1091.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.connectionDelay (1 samples, 0.07%)</title><rect x="186.1" y="1075.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.39%)</title><rect x="186.9" y="1139.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (2 samples, 0.13%)</title><rect x="186.9" y="1123.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (2 samples, 0.13%)</title><rect x="186.9" y="1107.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (2 samples, 0.13%)</title><rect x="186.9" y="1091.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="186.9" y="1075.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (1 samples, 0.07%)</title><rect x="187.7" y="1075.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.26%)</title><rect x="188.4" y="1123.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="188.4" y="1107.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1958470945.accept (1 samples, 0.07%)</title><rect x="188.4" y="1091.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="188.4" y="1075.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="191.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="188.4" y="1059.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="188.4" y="1043.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="188.4" y="1027.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.07%)</title><rect x="188.4" y="1011.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.07%)</title><rect x="188.4" y="995.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="191.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.07%)</title><rect x="188.4" y="979.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.20%)</title><rect x="189.2" y="1107.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="192.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.07%)</title><rect x="189.2" y="1091.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.07%)</title><rect x="190.0" y="1091.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.07%)</title><rect x="190.0" y="1075.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="190.8" y="1091.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="193.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="190.8" y="1075.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="190.8" y="1059.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="190.8" y="1043.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="190.8" y="1027.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="190.8" y="1011.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="193.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="190.8" y="995.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="190.8" y="979.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.8" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.07%)</title><rect x="190.8" y="963.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.8" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.07%)</title><rect x="190.8" y="947.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="193.8" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="190.8" y="931.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="190.8" y="915.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="191.5" y="1139.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="191.5" y="1123.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="191.5" y="1107.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="191.5" y="1091.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="191.5" y="1075.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="191.5" y="1059.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (700 samples, 46.02%)</title><rect x="192.3" y="1203.0" width="543.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.3" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (700 samples, 46.02%)</title><rect x="192.3" y="1187.0" width="543.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.3" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (700 samples, 46.02%)</title><rect x="192.3" y="1171.0" width="543.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.3" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1387199738.run (473 samples, 31.10%)</title><rect x="198.5" y="1155.0" width="367.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.5" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (473 samples, 31.10%)</title><rect x="198.5" y="1139.0" width="367.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.5" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (473 samples, 31.10%)</title><rect x="198.5" y="1123.0" width="367.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (455 samples, 29.91%)</title><rect x="198.5" y="1107.0" width="353.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.5" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPi..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="201.6" y="1091.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="204.6" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.39%)</title><rect x="204.0" y="1091.0" width="4.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="207.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.39%)</title><rect x="204.0" y="1075.0" width="4.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="207.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (150 samples, 9.86%)</title><rect x="208.6" y="1091.0" width="116.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.6" y="1102.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (150 samples, 9.86%)</title><rect x="208.6" y="1075.0" width="116.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.6" y="1086.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (150 samples, 9.86%)</title><rect x="208.6" y="1059.0" width="116.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.6" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="208.6" y="1043.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="211.6" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="208.6" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="211.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (148 samples, 9.73%)</title><rect x="209.4" y="1043.0" width="114.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.4" y="1054.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (148 samples, 9.73%)</title><rect x="209.4" y="1027.0" width="114.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.4" y="1038.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (148 samples, 9.73%)</title><rect x="209.4" y="1011.0" width="114.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.4" y="1022.0">com/fasterxml/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="209.4" y="995.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="212.4" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="209.4" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="212.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="209.4" y="963.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="212.4" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="209.4" y="947.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="212.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (33 samples, 2.17%)</title><rect x="210.2" y="995.0" width="25.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.2" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 0.85%)</title><rect x="210.2" y="979.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 0.85%)</title><rect x="210.2" y="963.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 0.85%)</title><rect x="210.2" y="947.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 0.85%)</title><rect x="210.2" y="931.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (20 samples, 1.31%)</title><rect x="220.2" y="979.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (20 samples, 1.31%)</title><rect x="220.2" y="963.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.53%)</title><rect x="220.2" y="947.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (8 samples, 0.53%)</title><rect x="220.2" y="931.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.07%)</title><rect x="225.7" y="915.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.26%)</title><rect x="226.4" y="947.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.26%)</title><rect x="226.4" y="931.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="228.0" y="915.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="228.8" y="915.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (8 samples, 0.53%)</title><rect x="229.6" y="947.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (7 samples, 0.46%)</title><rect x="229.6" y="931.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (3 samples, 0.20%)</title><rect x="232.7" y="915.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="235.0" y="931.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (100 samples, 6.57%)</title><rect x="235.8" y="995.0" width="77.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.8" y="1006.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.33%)</title><rect x="235.8" y="979.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.33%)</title><rect x="235.8" y="963.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.33%)</title><rect x="235.8" y="947.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.33%)</title><rect x="235.8" y="931.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.07%)</title><rect x="235.8" y="915.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.07%)</title><rect x="235.8" y="899.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.07%)</title><rect x="235.8" y="883.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (2 samples, 0.13%)</title><rect x="236.5" y="915.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.13%)</title><rect x="238.1" y="915.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.46%)</title><rect x="239.6" y="979.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.46%)</title><rect x="239.6" y="963.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.20%)</title><rect x="242.7" y="947.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.59%)</title><rect x="245.1" y="979.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.46%)</title><rect x="246.6" y="963.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.33%)</title><rect x="248.2" y="947.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.26%)</title><rect x="248.9" y="931.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.13%)</title><rect x="250.5" y="915.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.33%)</title><rect x="252.1" y="979.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.20%)</title><rect x="253.6" y="963.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (74 samples, 4.87%)</title><rect x="255.9" y="979.0" width="57.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.9" y="990.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.45%)</title><rect x="255.9" y="963.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.13%)</title><rect x="266.8" y="947.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.33%)</title><rect x="268.3" y="947.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.33%)</title><rect x="268.3" y="931.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.33%)</title><rect x="268.3" y="915.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="272.2" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 3.42%)</title><rect x="273.0" y="963.0" width="40.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.0" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 3.42%)</title><rect x="273.0" y="947.0" width="40.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.0" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 3.29%)</title><rect x="274.5" y="931.0" width="38.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.5" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.18%)</title><rect x="279.2" y="915.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.20%)</title><rect x="280.8" y="899.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.46%)</title><rect x="283.1" y="899.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.46%)</title><rect x="283.1" y="883.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.46%)</title><rect x="283.1" y="867.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.13%)</title><rect x="287.0" y="851.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.33%)</title><rect x="288.5" y="899.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.33%)</title><rect x="288.5" y="883.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="291.6" y="867.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="292.4" y="899.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.33%)</title><rect x="293.2" y="915.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.20%)</title><rect x="294.7" y="899.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.20%)</title><rect x="294.7" y="883.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.20%)</title><rect x="294.7" y="867.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.20%)</title><rect x="294.7" y="851.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="297.0" y="915.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.66%)</title><rect x="297.8" y="915.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.66%)</title><rect x="297.8" y="899.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.66%)</title><rect x="297.8" y="883.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.66%)</title><rect x="297.8" y="867.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.8" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.66%)</title><rect x="297.8" y="851.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="862.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.33%)</title><rect x="301.7" y="835.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="304.7" y="846.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (3 samples, 0.20%)</title><rect x="303.3" y="819.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.46%)</title><rect x="305.6" y="915.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.46%)</title><rect x="305.6" y="899.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.46%)</title><rect x="305.6" y="883.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.26%)</title><rect x="307.9" y="867.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.20%)</title><rect x="311.0" y="915.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 0.92%)</title><rect x="313.3" y="995.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 0.92%)</title><rect x="313.3" y="979.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 0.92%)</title><rect x="313.3" y="963.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (14 samples, 0.92%)</title><rect x="313.3" y="947.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 0.92%)</title><rect x="313.3" y="931.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.13%)</title><rect x="321.9" y="915.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.07%)</title><rect x="323.4" y="915.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.07%)</title><rect x="324.2" y="1043.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.2" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="324.2" y="1027.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="327.2" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="324.2" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="327.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="324.2" y="995.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="327.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="324.2" y="979.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="327.2" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="324.2" y="963.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="327.2" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="324.2" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="327.2" y="958.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="324.2" y="931.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="327.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="324.2" y="915.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="327.2" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="324.2" y="899.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="327.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (291 samples, 19.13%)</title><rect x="325.0" y="1091.0" width="225.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="328.0" y="1102.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (45 samples, 2.96%)</title><rect x="325.8" y="1075.0" width="34.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="328.8" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="325.8" y="1059.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="328.8" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (44 samples, 2.89%)</title><rect x="326.5" y="1059.0" width="34.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.5" y="1070.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 2.89%)</title><rect x="326.5" y="1043.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="329.5" y="1054.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.05%)</title><rect x="329.6" y="1027.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 1.05%)</title><rect x="329.6" y="1011.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (16 samples, 1.05%)</title><rect x="329.6" y="995.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (16 samples, 1.05%)</title><rect x="329.6" y="979.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="332.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.26%)</title><rect x="342.0" y="1027.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.26%)</title><rect x="342.0" y="1011.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.26%)</title><rect x="342.0" y="995.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.20%)</title><rect x="342.8" y="979.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 1.31%)</title><rect x="345.1" y="1027.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.72%)</title><rect x="352.1" y="1011.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="352.9" y="995.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.13%)</title><rect x="353.7" y="995.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.13%)</title><rect x="353.7" y="979.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.46%)</title><rect x="355.2" y="995.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (18 samples, 1.18%)</title><rect x="360.7" y="1075.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.7" y="1086.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="362.2" y="1059.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="365.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.39%)</title><rect x="363.8" y="1059.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.39%)</title><rect x="363.8" y="1043.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.8" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.53%)</title><rect x="368.4" y="1059.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="371.4" y="1070.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.53%)</title><rect x="368.4" y="1043.0" width="6.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="371.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (159 samples, 10.45%)</title><rect x="374.6" y="1075.0" width="123.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.6" y="1086.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (159 samples, 10.45%)</title><rect x="374.6" y="1059.0" width="123.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.6" y="1070.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.46%)</title><rect x="379.3" y="1043.0" width="5.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="382.3" y="1054.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.39%)</title><rect x="380.1" y="1027.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="383.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 3.68%)</title><rect x="384.7" y="1043.0" width="43.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.7" y="1054.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 2.76%)</title><rect x="390.1" y="1027.0" width="32.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.1" y="1038.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (26 samples, 1.71%)</title><rect x="395.6" y="1011.0" width="20.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.53%)</title><rect x="405.7" y="995.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.53%)</title><rect x="405.7" y="979.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.7" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.53%)</title><rect x="405.7" y="963.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="407.2" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="410.2" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.26%)</title><rect x="408.0" y="947.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="411.0" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.26%)</title><rect x="408.0" y="931.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="411.0" y="942.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="408.0" y="915.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="411.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.20%)</title><rect x="408.8" y="915.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="411.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="408.8" y="899.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="411.8" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="408.8" y="883.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="411.8" y="894.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="408.8" y="867.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="411.8" y="878.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.07%)</title><rect x="408.8" y="851.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="411.8" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.13%)</title><rect x="409.5" y="899.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="412.5" y="910.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.07%)</title><rect x="411.1" y="947.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="414.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.20%)</title><rect x="411.9" y="995.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.9" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="414.2" y="995.0" width="1.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="417.2" y="1006.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="415.7" y="1011.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="418.7" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.53%)</title><rect x="416.5" y="1011.0" width="6.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="419.5" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.46%)</title><rect x="422.7" y="1027.0" width="5.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="425.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="428.2" y="1043.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="431.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.59%)</title><rect x="428.9" y="1043.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.59%)</title><rect x="428.9" y="1027.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.59%)</title><rect x="428.9" y="1011.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.9" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.13%)</title><rect x="433.6" y="995.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="436.6" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="433.6" y="979.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="436.6" y="990.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="435.1" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="438.1" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 5.19%)</title><rect x="435.9" y="1043.0" width="61.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.9" y="1054.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.19%)</title><rect x="435.9" y="1027.0" width="61.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.9" y="1038.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (24 samples, 1.58%)</title><rect x="441.3" y="1011.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (24 samples, 1.58%)</title><rect x="441.3" y="995.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (24 samples, 1.58%)</title><rect x="441.3" y="979.0" width="18.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (24 samples, 1.58%)</title><rect x="441.3" y="963.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (48 samples, 3.16%)</title><rect x="460.0" y="1011.0" width="37.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.0" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (39 samples, 2.56%)</title><rect x="466.9" y="995.0" width="30.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.9" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (11 samples, 0.72%)</title><rect x="470.1" y="979.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.1" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (11 samples, 0.72%)</title><rect x="470.1" y="963.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (24 samples, 1.58%)</title><rect x="478.6" y="979.0" width="18.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.07%)</title><rect x="491.0" y="963.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.13%)</title><rect x="491.8" y="963.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="494.8" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="492.6" y="947.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="495.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="492.6" y="931.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="495.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="492.6" y="915.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="495.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="492.6" y="899.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="492.6" y="883.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="495.6" y="894.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.33%)</title><rect x="493.3" y="963.0" width="3.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="496.3" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="497.2" y="1043.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="500.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 2.96%)</title><rect x="498.0" y="1075.0" width="34.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="501.0" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.07%)</title><rect x="498.0" y="1059.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.0" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="498.0" y="1043.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (44 samples, 2.89%)</title><rect x="498.8" y="1059.0" width="34.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.8" y="1070.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1412965736.process (22 samples, 1.45%)</title><rect x="500.3" y="1043.0" width="17.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.31%)</title><rect x="501.9" y="1027.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.12%)</title><rect x="501.9" y="1011.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.9" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.13%)</title><rect x="508.1" y="995.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.1" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.13%)</title><rect x="508.1" y="979.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.13%)</title><rect x="508.1" y="963.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="511.1" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.13%)</title><rect x="508.1" y="947.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="508.8" y="931.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.39%)</title><rect x="509.6" y="995.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.6" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.33%)</title><rect x="510.4" y="979.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="513.4" y="990.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.33%)</title><rect x="510.4" y="963.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="513.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.07%)</title><rect x="514.3" y="995.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.20%)</title><rect x="515.0" y="1011.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="518.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="516.6" y="995.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="516.6" y="979.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="516.6" y="963.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.07%)</title><rect x="517.4" y="1043.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/537615960.complete (1 samples, 0.07%)</title><rect x="518.2" y="1043.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="521.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$34 (1 samples, 0.07%)</title><rect x="518.2" y="1027.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="521.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.07%)</title><rect x="518.2" y="1011.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.07%)</title><rect x="518.2" y="995.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="521.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="518.9" y="1043.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.20%)</title><rect x="518.9" y="1027.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.33%)</title><rect x="521.3" y="1043.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="524.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.33%)</title><rect x="521.3" y="1027.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="524.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/537615960.get$Lambda (5 samples, 0.33%)</title><rect x="521.3" y="1011.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/537615960.&lt;init&gt; (1 samples, 0.07%)</title><rect x="524.4" y="995.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.26%)</title><rect x="525.1" y="1043.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.20%)</title><rect x="525.9" y="1027.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.9" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="527.5" y="1011.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="530.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="528.2" y="1043.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="528.2" y="1027.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.33%)</title><rect x="529.0" y="1043.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="532.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="530.6" y="1027.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="533.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="530.6" y="1011.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="530.6" y="995.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="533.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="530.6" y="979.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="533.6" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="530.6" y="963.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="533.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="530.6" y="947.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="533.6" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.13%)</title><rect x="531.3" y="1027.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="534.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.51%)</title><rect x="532.9" y="1075.0" width="17.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.9" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.72%)</title><rect x="534.4" y="1059.0" width="8.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="537.4" y="1070.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.59%)</title><rect x="536.0" y="1043.0" width="7.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="539.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.66%)</title><rect x="543.0" y="1059.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.66%)</title><rect x="543.0" y="1043.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/1474226224.accept (10 samples, 0.66%)</title><rect x="543.0" y="1027.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$22 (10 samples, 0.66%)</title><rect x="543.0" y="1011.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.0" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.66%)</title><rect x="543.0" y="995.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="546.0" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.66%)</title><rect x="543.0" y="979.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="546.0" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.33%)</title><rect x="545.3" y="963.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="548.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.33%)</title><rect x="545.3" y="947.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="548.3" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.13%)</title><rect x="549.2" y="963.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="552.2" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="550.7" y="1091.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="553.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.18%)</title><rect x="551.5" y="1107.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="554.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 0.99%)</title><rect x="553.8" y="1091.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.79%)</title><rect x="555.4" y="1075.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$271/420769763.accept (12 samples, 0.79%)</title><rect x="555.4" y="1059.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$processTask$50 (12 samples, 0.79%)</title><rect x="555.4" y="1043.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1330510765.complete (12 samples, 0.79%)</title><rect x="555.4" y="1027.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="558.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$35 (12 samples, 0.79%)</title><rect x="555.4" y="1011.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 0.79%)</title><rect x="555.4" y="995.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="558.4" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.79%)</title><rect x="555.4" y="979.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="558.4" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.79%)</title><rect x="555.4" y="963.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.4" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 0.79%)</title><rect x="555.4" y="947.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="558.4" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (12 samples, 0.79%)</title><rect x="555.4" y="931.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="563.9" y="915.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="564.7" y="1075.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.13%)</title><rect x="565.5" y="1155.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.13%)</title><rect x="565.5" y="1139.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.13%)</title><rect x="565.5" y="1123.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="568.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.13%)</title><rect x="565.5" y="1107.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 14.27%)</title><rect x="567.0" y="1155.0" width="168.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="570.0" y="1166.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 14.27%)</title><rect x="567.0" y="1139.0" width="168.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.0" y="1150.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (198 samples, 13.02%)</title><rect x="568.6" y="1123.0" width="153.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.6" y="1134.0">java/util/concurren..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.13%)</title><rect x="578.7" y="1107.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.13%)</title><rect x="578.7" y="1091.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 0.72%)</title><rect x="580.2" y="1107.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.33%)</title><rect x="588.8" y="1107.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.33%)</title><rect x="588.8" y="1091.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.33%)</title><rect x="588.8" y="1075.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.33%)</title><rect x="588.8" y="1059.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 10.98%)</title><rect x="592.6" y="1107.0" width="129.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="595.6" y="1118.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 10.98%)</title><rect x="592.6" y="1091.0" width="129.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="595.6" y="1102.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.20%)</title><rect x="597.3" y="1075.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="600.3" y="1086.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="599.6" y="1075.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="602.6" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.13%)</title><rect x="600.4" y="1075.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="603.4" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 9.93%)</title><rect x="601.9" y="1075.0" width="117.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="604.9" y="1086.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.13%)</title><rect x="606.6" y="1059.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.6" y="1070.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="608.1" y="1059.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="611.1" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 1.78%)</title><rect x="608.9" y="1059.0" width="21.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="611.9" y="1070.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (14 samples, 0.92%)</title><rect x="614.4" y="1043.0" width="10.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.20%)</title><rect x="615.1" y="1027.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="618.1" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="616.7" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="619.7" y="1022.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.13%)</title><rect x="617.5" y="1027.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="620.5" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (8 samples, 0.53%)</title><rect x="619.0" y="1027.0" width="6.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="622.0" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.39%)</title><rect x="625.2" y="1043.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="628.2" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="629.9" y="1059.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="632.9" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.26%)</title><rect x="630.6" y="1059.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="633.6" y="1070.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.07%)</title><rect x="633.0" y="1043.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="636.0" y="1054.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.07%)</title><rect x="633.0" y="1027.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="636.0" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="633.0" y="1011.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="636.0" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="633.0" y="995.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="636.0" y="1006.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="633.0" y="979.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="636.0" y="990.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.53%)</title><rect x="633.7" y="1059.0" width="6.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="636.7" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 1.97%)</title><rect x="640.0" y="1059.0" width="23.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="643.0" y="1070.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 2.96%)</title><rect x="663.2" y="1059.0" width="34.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="666.2" y="1070.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.46%)</title><rect x="698.1" y="1059.0" width="5.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="701.1" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.26%)</title><rect x="703.6" y="1059.0" width="3.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="706.6" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.33%)</title><rect x="706.7" y="1059.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="709.7" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.46%)</title><rect x="710.6" y="1059.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="713.6" y="1070.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="716.0" y="1059.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="719.0" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.13%)</title><rect x="716.8" y="1059.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="719.8" y="1070.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="718.3" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.3" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.13%)</title><rect x="719.1" y="1075.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="722.1" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.13%)</title><rect x="720.6" y="1075.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="723.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.12%)</title><rect x="722.2" y="1123.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="725.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.12%)</title><rect x="722.2" y="1107.0" width="13.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.12%)</title><rect x="722.2" y="1091.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="725.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.12%)</title><rect x="722.2" y="1075.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.07%)</title><rect x="734.6" y="1059.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.6" y="1070.0"></text>
</g>
<g>
<title>start_thread (586 samples, 38.53%)</title><rect x="735.4" y="1203.0" width="454.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="738.4" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (586 samples, 38.53%)</title><rect x="735.4" y="1187.0" width="454.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="738.4" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.18%)</title><rect x="735.4" y="1171.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.4" y="1182.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="735.4" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="738.4" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="735.4" y="1139.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="738.4" y="1150.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="736.2" y="1155.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="739.2" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="736.2" y="1139.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="739.2" y="1150.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="736.2" y="1123.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="739.2" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.05%)</title><rect x="736.9" y="1155.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="739.9" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.39%)</title><rect x="736.9" y="1139.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="739.9" y="1150.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.20%)</title><rect x="736.9" y="1123.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="739.9" y="1134.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.20%)</title><rect x="739.3" y="1123.0" width="2.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="742.3" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.39%)</title><rect x="741.6" y="1139.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="744.6" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.20%)</title><rect x="741.6" y="1123.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="744.6" y="1134.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="741.6" y="1107.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="744.6" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="741.6" y="1091.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="744.6" y="1102.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="741.6" y="1075.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="744.6" y="1086.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.13%)</title><rect x="742.4" y="1107.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.4" y="1118.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.13%)</title><rect x="742.4" y="1091.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.4" y="1102.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="742.4" y="1075.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="745.4" y="1086.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="742.4" y="1059.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="745.4" y="1070.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="742.4" y="1043.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.4" y="1054.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.07%)</title><rect x="743.1" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="746.1" y="1086.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.07%)</title><rect x="743.1" y="1059.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="746.1" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.07%)</title><rect x="743.1" y="1043.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="746.1" y="1054.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.07%)</title><rect x="743.1" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="746.1" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.20%)</title><rect x="743.9" y="1123.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="746.9" y="1134.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.20%)</title><rect x="743.9" y="1107.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="746.9" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.26%)</title><rect x="746.2" y="1139.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="749.2" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.26%)</title><rect x="746.2" y="1123.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="749.2" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.20%)</title><rect x="746.2" y="1107.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="749.2" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.20%)</title><rect x="746.2" y="1091.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="749.2" y="1102.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.20%)</title><rect x="746.2" y="1075.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="749.2" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.20%)</title><rect x="746.2" y="1059.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="749.2" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.13%)</title><rect x="747.0" y="1043.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="750.0" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="747.0" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="750.0" y="1038.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.07%)</title><rect x="747.8" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.8" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="748.6" y="1107.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="751.6" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="748.6" y="1091.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="751.6" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (565 samples, 37.15%)</title><rect x="749.3" y="1171.0" width="438.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.3" y="1182.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (565 samples, 37.15%)</title><rect x="749.3" y="1155.0" width="438.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="752.3" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (564 samples, 37.08%)</title><rect x="749.3" y="1139.0" width="437.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="752.3" y="1150.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (563 samples, 37.02%)</title><rect x="749.3" y="1123.0" width="436.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="752.3" y="1134.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (563 samples, 37.02%)</title><rect x="749.3" y="1107.0" width="436.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="752.3" y="1118.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (563 samples, 37.02%)</title><rect x="749.3" y="1091.0" width="436.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="752.3" y="1102.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.07%)</title><rect x="749.3" y="1075.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.3" y="1086.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.07%)</title><rect x="749.3" y="1059.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.3" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="749.3" y="1043.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.3" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="749.3" y="1027.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="752.3" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="749.3" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.3" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="749.3" y="995.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.3" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="749.3" y="979.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="752.3" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="749.3" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="752.3" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="749.3" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="752.3" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="749.3" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="752.3" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="749.3" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.3" y="926.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="749.3" y="899.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.3" y="910.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (187 samples, 12.29%)</title><rect x="750.1" y="1075.0" width="145.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="753.1" y="1086.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.39%)</title><rect x="750.1" y="1059.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.1" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.20%)</title><rect x="750.1" y="1043.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="753.1" y="1054.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.20%)</title><rect x="752.4" y="1043.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="755.4" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.20%)</title><rect x="752.4" y="1027.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="755.4" y="1038.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="754.0" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="757.0" y="1022.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="754.0" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="757.0" y="1006.0"></text>
</g>
<g>
<title>CompiledStaticCall::emit_to_interp_stub(CodeBuffer&amp;) (1 samples, 0.07%)</title><rect x="754.0" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.0" y="990.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.07%)</title><rect x="754.0" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="757.0" y="974.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.07%)</title><rect x="754.0" y="947.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="757.0" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (10 samples, 0.66%)</title><rect x="754.8" y="1059.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="757.8" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (5 samples, 0.33%)</title><rect x="754.8" y="1043.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="757.8" y="1054.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="754.8" y="1027.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="757.8" y="1038.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="754.8" y="1011.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="757.8" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.13%)</title><rect x="755.5" y="1027.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="758.5" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.13%)</title><rect x="755.5" y="1011.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="758.5" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="757.1" y="1027.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="760.1" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="757.1" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="760.1" y="1022.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="757.9" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="760.9" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.26%)</title><rect x="758.7" y="1043.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.7" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.26%)</title><rect x="758.7" y="1027.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.7" y="1038.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.07%)</title><rect x="761.8" y="1043.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.8" y="1054.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="762.5" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="765.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (17 samples, 1.12%)</title><rect x="763.3" y="1059.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="766.3" y="1070.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="763.3" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="766.3" y="1054.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (15 samples, 0.99%)</title><rect x="764.1" y="1043.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="767.1" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (12 samples, 0.79%)</title><rect x="764.9" y="1027.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="767.9" y="1038.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="774.2" y="1027.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="777.2" y="1038.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="774.9" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="777.9" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="774.9" y="1011.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="777.9" y="1022.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.07%)</title><rect x="775.7" y="1043.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="778.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="776.5" y="1059.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="779.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="776.5" y="1043.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="779.5" y="1054.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="776.5" y="1027.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="779.5" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.46%)</title><rect x="777.3" y="1059.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="780.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.46%)</title><rect x="777.3" y="1043.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="780.3" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.33%)</title><rect x="777.3" y="1027.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="780.3" y="1038.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.20%)</title><rect x="777.3" y="1011.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="779.6" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="782.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="780.4" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="783.4" y="1022.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="780.4" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="783.4" y="1006.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.07%)</title><rect x="780.4" y="979.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="783.4" y="990.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.07%)</title><rect x="780.4" y="963.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.4" y="974.0"></text>
</g>
<g>
<title>storeLNode::memory_operand() const (1 samples, 0.07%)</title><rect x="780.4" y="947.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="783.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="781.2" y="1027.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="784.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.07%)</title><rect x="781.9" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="782.7" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (144 samples, 9.47%)</title><rect x="783.5" y="1059.0" width="111.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="786.5" y="1070.0">PhaseChaitin:..</text>
</g>
<g>
<title>CallStaticJavaDirectNode::oper_input_base() const (1 samples, 0.07%)</title><rect x="783.5" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="786.5" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="784.3" y="1043.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="787.3" y="1054.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.07%)</title><rect x="785.8" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="788.8" y="1054.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.20%)</title><rect x="786.6" y="1043.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="789.6" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (5 samples, 0.33%)</title><rect x="788.9" y="1043.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.53%)</title><rect x="792.8" y="1043.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="795.8" y="1054.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="793.6" y="1027.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="796.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="794.3" y="1027.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="797.3" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="795.1" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="798.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.13%)</title><rect x="795.9" y="1027.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.9" y="1038.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="795.9" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.9" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="796.7" y="1011.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="799.7" y="1022.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="797.4" y="1027.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="800.4" y="1038.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.07%)</title><rect x="798.2" y="1027.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="801.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.46%)</title><rect x="799.0" y="1043.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="802.0" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="799.0" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="802.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (6 samples, 0.39%)</title><rect x="799.8" y="1027.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="802.8" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="802.9" y="1011.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="805.9" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="803.6" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (20 samples, 1.31%)</title><rect x="804.4" y="1043.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="807.4" y="1054.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="817.6" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="820.6" y="1038.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="817.6" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="820.6" y="1022.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="818.4" y="1027.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="821.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="819.2" y="1027.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="822.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="819.9" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="822.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (27 samples, 1.78%)</title><rect x="820.7" y="1043.0" width="21.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="823.7" y="1054.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="827.7" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="830.7" y="1038.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.13%)</title><rect x="828.5" y="1027.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="831.5" y="1038.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.13%)</title><rect x="830.0" y="1027.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.72%)</title><rect x="831.6" y="1027.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="834.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.26%)</title><rect x="837.0" y="1011.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="840.0" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="840.1" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="843.1" y="1038.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="840.9" y="1027.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="843.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (4 samples, 0.26%)</title><rect x="841.7" y="1043.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.13%)</title><rect x="843.2" y="1027.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="846.2" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="844.0" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="847.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="844.8" y="1043.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="847.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&amp;, Node_List&amp;, int, int) (1 samples, 0.07%)</title><rect x="845.5" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="848.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="846.3" y="1043.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (11 samples, 0.72%)</title><rect x="847.1" y="1043.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.1" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="853.3" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="856.3" y="1038.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.07%)</title><rect x="854.1" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.1" y="1038.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.07%)</title><rect x="854.9" y="1027.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="857.9" y="1038.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.07%)</title><rect x="854.9" y="1011.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.9" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="854.9" y="995.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="857.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="855.6" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="858.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.59%)</title><rect x="856.4" y="1043.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="859.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.33%)</title><rect x="858.7" y="1027.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="861.7" y="1038.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="862.6" y="1027.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="865.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 0.92%)</title><rect x="863.4" y="1043.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="866.4" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (14 samples, 0.92%)</title><rect x="863.4" y="1027.0" width="10.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.4" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 0.92%)</title><rect x="863.4" y="1011.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="866.4" y="1022.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.20%)</title><rect x="863.4" y="995.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="866.4" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="864.9" y="979.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.9" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.66%)</title><rect x="865.7" y="995.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="871.9" y="979.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.9" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="873.5" y="995.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.33%)</title><rect x="874.2" y="1043.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.2" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.13%)</title><rect x="875.8" y="1027.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.8" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="877.4" y="1027.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="880.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.20%)</title><rect x="878.1" y="1043.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.1" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="879.7" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.20%)</title><rect x="880.5" y="1043.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.5" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.20%)</title><rect x="880.5" y="1027.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="883.5" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (15 samples, 0.99%)</title><rect x="882.8" y="1043.0" width="11.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.8" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (9 samples, 0.59%)</title><rect x="887.4" y="1027.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="890.4" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="892.9" y="1011.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="895.9" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.07%)</title><rect x="893.6" y="1011.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="896.6" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.07%)</title><rect x="893.6" y="995.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.6" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="894.4" y="1043.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="897.4" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (356 samples, 23.41%)</title><rect x="895.2" y="1075.0" width="276.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="898.2" y="1086.0">Compile::Optimize()</text>
</g>
<g>
<title>CmpUNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="895.2" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="898.2" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="896.0" y="1059.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.0" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="896.0" y="1043.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.0" y="1054.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.07%)</title><rect x="896.0" y="1027.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="899.0" y="1038.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (2 samples, 0.13%)</title><rect x="896.7" y="1059.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.7" y="1070.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (2 samples, 0.13%)</title><rect x="896.7" y="1043.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.7" y="1054.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.13%)</title><rect x="896.7" y="1027.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="899.7" y="1038.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.13%)</title><rect x="896.7" y="1011.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.7" y="1022.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="898.3" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="901.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="898.3" y="1043.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="901.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="898.3" y="1027.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="898.3" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="901.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.39%)</title><rect x="899.1" y="1059.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="902.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.39%)</title><rect x="899.1" y="1043.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="902.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="899.1" y="1027.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="902.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="899.1" y="1011.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="902.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.33%)</title><rect x="899.8" y="1027.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="902.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.26%)</title><rect x="899.8" y="1011.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.26%)</title><rect x="899.8" y="995.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.26%)</title><rect x="899.8" y="979.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="915.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="883.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="903.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="835.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="803.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="787.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="771.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="755.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="739.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="723.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="707.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="691.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="675.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="659.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="903.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="643.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="627.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="900.6" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.6" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.07%)</title><rect x="900.6" y="595.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="903.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="963.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="904.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="947.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="904.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="931.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="904.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="915.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="904.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="899.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="904.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="883.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="904.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="867.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="851.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="904.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="835.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="904.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="819.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="904.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="901.4" y="803.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="904.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="901.4" y="787.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="787.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="771.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="905.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="905.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="905.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="723.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="905.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="707.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="905.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="691.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="905.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="675.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="905.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="659.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="905.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="643.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="905.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="627.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="905.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="611.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="595.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="579.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="563.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="547.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="531.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="515.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="499.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="905.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="467.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="451.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="435.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="419.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="403.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="387.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="371.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="355.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="905.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="339.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="902.2" y="323.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="905.2" y="334.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="902.2" y="307.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="905.2" y="318.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="902.2" y="291.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.2" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="903.0" y="1011.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.20%)</title><rect x="903.7" y="1059.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="906.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="906.1" y="1059.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="909.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="906.1" y="1043.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="909.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.07%)</title><rect x="906.1" y="1027.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.1" y="1038.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.07%)</title><rect x="906.1" y="1011.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="909.1" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.07%)</title><rect x="906.1" y="995.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (313 samples, 20.58%)</title><rect x="906.8" y="1059.0" width="242.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.8" y="1070.0">PhaseIdealLoop::build_and_optimi..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="906.8" y="1043.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.53%)</title><rect x="907.6" y="1043.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.6" y="1054.0"></text>
</g>
<g>
<title>NTarjan::COMPRESS() (1 samples, 0.07%)</title><rect x="911.5" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.5" y="1038.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.13%)</title><rect x="912.3" y="1027.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.53%)</title><rect x="913.8" y="1043.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="916.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.13%)</title><rect x="917.7" y="1027.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="920.7" y="1038.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="919.2" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (278 samples, 18.28%)</title><rect x="920.0" y="1043.0" width="215.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="923.0" y="1054.0">PhaseIdealLoop::build_loop_l..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (267 samples, 17.55%)</title><rect x="928.6" y="1027.0" width="207.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.6" y="1038.0">PhaseIdealLoop::build_loop_..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="930.1" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (11 samples, 0.72%)</title><rect x="930.9" y="1011.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (253 samples, 16.63%)</title><rect x="939.4" y="1011.0" width="196.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.4" y="1022.0">PhaseIdealLoop::get_late_c..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1101.6" y="995.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1102.3" y="995.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1102.3" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (40 samples, 2.63%)</title><rect x="1103.1" y="995.0" width="31.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.1" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.13%)</title><rect x="1134.1" y="995.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.13%)</title><rect x="1134.1" y="979.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.20%)</title><rect x="1135.7" y="1043.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.07%)</title><rect x="1138.0" y="1043.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1138.0" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1138.0" y="1011.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.07%)</title><rect x="1138.0" y="995.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.0" y="1006.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="1138.0" y="979.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.46%)</title><rect x="1138.8" y="1043.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (6 samples, 0.39%)</title><rect x="1139.6" y="1027.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.13%)</title><rect x="1141.1" y="1011.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1141.9" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.13%)</title><rect x="1142.7" y="1011.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.7" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.07%)</title><rect x="1142.7" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1143.5" y="995.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.46%)</title><rect x="1144.2" y="1043.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.46%)</title><rect x="1144.2" y="1027.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.2" y="1038.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1145.0" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.0" y="1022.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1145.0" y="995.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1145.8" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1145.8" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="1006.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1146.6" y="1011.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1147.3" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.3" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1148.1" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.1" y="1022.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1148.1" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.1" y="1006.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1148.9" y="1011.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1148.9" y="995.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1148.9" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1148.9" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.9" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1148.9" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1148.9" y="931.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1149.7" y="1059.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1149.7" y="1043.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (21 samples, 1.38%)</title><rect x="1150.4" y="1059.0" width="16.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (21 samples, 1.38%)</title><rect x="1150.4" y="1043.0" width="16.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.4" y="1054.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.2" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="1038.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.2" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1152.0" y="1027.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.0" y="1038.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.13%)</title><rect x="1152.0" y="1011.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.0" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.13%)</title><rect x="1152.0" y="995.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.0" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.13%)</title><rect x="1152.0" y="979.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.0" y="990.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1153.5" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1153.5" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1153.5" y="995.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1154.3" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (8 samples, 0.53%)</title><rect x="1155.1" y="1027.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.1" y="1038.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1157.4" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (4 samples, 0.26%)</title><rect x="1158.2" y="1011.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.2" y="1022.0"></text>
</g>
<g>
<title>CastIINode::Opcode() const (1 samples, 0.07%)</title><rect x="1159.0" y="995.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.0" y="1006.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1159.7" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1160.5" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.5" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1161.3" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="1038.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.07%)</title><rect x="1161.3" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.3" y="1022.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1162.1" y="1027.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.1" y="1038.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1162.8" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="1038.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="1163.6" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="1038.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1164.4" y="1027.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.4" y="1011.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1164.4" y="995.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.4" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1164.4" y="979.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.4" y="990.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1165.2" y="1027.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1165.2" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.2" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.2" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.2" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.2" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.2" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1165.2" y="947.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.2" y="958.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.0" y="1011.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.0" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (3 samples, 0.20%)</title><rect x="1166.7" y="1059.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.7" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (3 samples, 0.20%)</title><rect x="1166.7" y="1043.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (2 samples, 0.13%)</title><rect x="1166.7" y="1027.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.7" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.07%)</title><rect x="1166.7" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.5" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1011.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="1022.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1168.3" y="995.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1171.3" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1169.1" y="1059.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.1" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.07%)</title><rect x="1169.1" y="1043.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.1" y="1027.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1169.1" y="1011.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.1" y="1022.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1169.8" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.6" y="1059.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1173.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 1.05%)</title><rect x="1171.4" y="1075.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 1.05%)</title><rect x="1171.4" y="1059.0" width="12.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 1.05%)</title><rect x="1171.4" y="1043.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 1.05%)</title><rect x="1171.4" y="1027.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 1.05%)</title><rect x="1171.4" y="1011.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 1.05%)</title><rect x="1171.4" y="995.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.92%)</title><rect x="1171.4" y="979.0" width="10.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.4" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.92%)</title><rect x="1171.4" y="963.0" width="10.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.92%)</title><rect x="1171.4" y="947.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.92%)</title><rect x="1171.4" y="931.0" width="10.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.92%)</title><rect x="1171.4" y="915.0" width="10.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.92%)</title><rect x="1171.4" y="899.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="910.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1171.4" y="883.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.4" y="894.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1171.4" y="867.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1171.4" y="851.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1171.4" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.4" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1171.4" y="819.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.4" y="803.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.4" y="787.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1171.4" y="771.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1171.4" y="755.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1171.4" y="739.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.4" y="723.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.4" y="707.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1171.4" y="691.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="702.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1171.4" y="675.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1171.4" y="659.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="670.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.07%)</title><rect x="1171.4" y="643.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.4" y="654.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.07%)</title><rect x="1171.4" y="627.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.59%)</title><rect x="1172.2" y="883.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.59%)</title><rect x="1172.2" y="867.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.2" y="878.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1172.2" y="851.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="862.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1172.2" y="835.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.2" y="846.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.2" y="819.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.2" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.2" y="803.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1172.2" y="787.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1172.2" y="771.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.2" y="782.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1172.2" y="755.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.53%)</title><rect x="1172.9" y="851.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.53%)</title><rect x="1172.9" y="835.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.53%)</title><rect x="1172.9" y="819.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.9" y="830.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.07%)</title><rect x="1172.9" y="803.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="814.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.07%)</title><rect x="1172.9" y="787.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1172.9" y="771.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="782.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1172.9" y="755.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.9" y="766.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.9" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.39%)</title><rect x="1173.7" y="803.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.39%)</title><rect x="1173.7" y="787.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.39%)</title><rect x="1173.7" y="771.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.39%)</title><rect x="1173.7" y="755.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.39%)</title><rect x="1173.7" y="739.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.39%)</title><rect x="1173.7" y="723.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.39%)</title><rect x="1173.7" y="707.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.39%)</title><rect x="1173.7" y="691.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.39%)</title><rect x="1173.7" y="675.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="686.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1173.7" y="659.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1173.7" y="643.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="654.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.7" y="627.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="638.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1173.7" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.33%)</title><rect x="1174.5" y="659.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.33%)</title><rect x="1174.5" y="643.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.33%)</title><rect x="1174.5" y="627.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.33%)</title><rect x="1174.5" y="611.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1174.5" y="595.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1174.5" y="579.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1174.5" y="563.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1174.5" y="547.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1174.5" y="531.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1174.5" y="515.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1174.5" y="499.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1174.5" y="483.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1174.5" y="467.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1174.5" y="451.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1174.5" y="435.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="446.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.07%)</title><rect x="1174.5" y="419.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="430.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.5" y="403.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="414.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.5" y="387.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="398.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1174.5" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="382.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.07%)</title><rect x="1174.5" y="355.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1175.3" y="419.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="430.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1175.3" y="403.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="414.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1175.3" y="387.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="398.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.07%)</title><rect x="1175.3" y="371.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.0" y="403.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.0" y="387.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.0" y="371.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.0" y="355.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.0" y="339.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.0" y="323.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.0" y="307.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.0" y="291.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.0" y="275.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.0" y="259.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.0" y="243.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.0" y="227.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.0" y="211.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.0" y="195.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.0" y="179.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.0" y="163.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.0" y="147.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.0" y="131.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.0" y="115.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.0" y="99.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1176.0" y="83.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="94.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1176.0" y="67.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="78.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1176.0" y="51.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="62.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1176.0" y="35.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1176.8" y="595.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="579.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="563.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="547.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="515.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="499.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="483.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="467.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="451.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="435.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="419.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="403.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="387.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="371.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="355.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="339.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="323.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="307.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="291.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="275.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="259.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="243.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="227.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="211.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="195.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="179.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="163.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="147.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="131.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="115.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="126.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1176.8" y="99.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="110.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="1176.8" y="83.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="579.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="563.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.6" y="547.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.6" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.6" y="515.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.6" y="499.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.6" y="483.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="467.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.6" y="451.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.6" y="435.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.6" y="419.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.6" y="403.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.6" y="387.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.6" y="371.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.6" y="355.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.6" y="339.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.6" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.6" y="307.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1177.6" y="291.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.6" y="302.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.07%)</title><rect x="1177.6" y="275.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="286.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1177.6" y="259.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1178.4" y="803.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="787.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="771.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1178.4" y="755.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.26%)</title><rect x="1179.1" y="883.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="867.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="851.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="835.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="819.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="803.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="787.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="771.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="755.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="739.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="723.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="707.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="691.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="675.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="659.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="643.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="627.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="611.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="595.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="579.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="563.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="547.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="531.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="515.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="499.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="483.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="467.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="451.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="435.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="419.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="403.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="387.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="371.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="355.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="339.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="323.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="307.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="291.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="275.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1179.1" y="259.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.1" y="243.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.1" y="227.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.1" y="211.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.1" y="195.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.1" y="179.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.1" y="163.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="174.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.07%)</title><rect x="1179.1" y="147.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="158.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1179.1" y="131.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.1" y="115.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1179.1" y="99.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="110.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1179.1" y="83.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="94.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.07%)</title><rect x="1179.9" y="243.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.07%)</title><rect x="1179.9" y="227.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="238.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.07%)</title><rect x="1179.9" y="211.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="222.0"></text>
</g>
<g>
<title>Type::get_typeflow_type(ciType*) (1 samples, 0.07%)</title><rect x="1179.9" y="195.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="206.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.9" y="179.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="190.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1179.9" y="163.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1182.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1180.7" y="259.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.7" y="243.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="254.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1180.7" y="227.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="867.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="851.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="835.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="819.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="803.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="787.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="771.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="755.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="739.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="723.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="707.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="691.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="675.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="659.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="643.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="627.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="611.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="595.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="579.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="563.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="547.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="531.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="515.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="499.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="483.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="467.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="451.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="435.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="419.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="403.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.07%)</title><rect x="1181.5" y="387.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.07%)</title><rect x="1181.5" y="371.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.5" y="355.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="366.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.07%)</title><rect x="1181.5" y="339.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="350.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1181.5" y="323.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="334.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1181.5" y="307.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1182.2" y="979.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1182.2" y="963.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1182.2" y="947.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1182.2" y="931.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1182.2" y="915.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1182.2" y="899.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1182.2" y="883.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1182.2" y="867.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1182.2" y="851.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1182.2" y="835.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1182.2" y="819.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1182.2" y="803.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1182.2" y="787.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1182.2" y="771.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1182.2" y="755.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1182.2" y="739.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1182.2" y="723.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1182.2" y="707.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1182.2" y="691.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1182.2" y="659.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1182.2" y="643.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1182.2" y="627.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1182.2" y="611.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.2" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.2" y="579.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1182.2" y="563.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1182.2" y="547.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1182.2" y="531.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.2" y="515.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.2" y="499.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1182.2" y="483.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1182.2" y="467.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.2" y="451.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.07%)</title><rect x="1182.2" y="435.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="675.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="659.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="643.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="627.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="611.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.0" y="595.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="579.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="563.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="547.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="531.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="515.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.0" y="499.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.0" y="483.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.0" y="467.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.0" y="451.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.0" y="435.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.0" y="419.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1183.0" y="403.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1183.0" y="387.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.0" y="371.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1183.0" y="355.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.20%)</title><rect x="1183.8" y="1075.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.13%)</title><rect x="1183.8" y="1059.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.3" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.3" y="1070.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1186.1" y="1123.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1186.1" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1186.1" y="1091.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.1" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="1186.1" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="1086.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.9" y="1139.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.9" y="1150.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.9" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1134.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.9" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="1118.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.9" y="1091.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.9" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1186.9" y="1075.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="1086.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1186.9" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="1070.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.20%)</title><rect x="1187.7" y="1171.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="1182.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.20%)</title><rect x="1187.7" y="1155.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="1166.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.20%)</title><rect x="1187.7" y="1139.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.7" y="1150.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.13%)</title><rect x="1187.7" y="1123.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="1134.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.13%)</title><rect x="1187.7" y="1107.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.7" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.13%)</title><rect x="1187.7" y="1091.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.7" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.07%)</title><rect x="1187.7" y="1075.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="1086.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize_all_tlabs() (1 samples, 0.07%)</title><rect x="1187.7" y="1059.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize() (1 samples, 0.07%)</title><rect x="1187.7" y="1043.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.07%)</title><rect x="1188.4" y="1075.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="1086.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.07%)</title><rect x="1188.4" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="1070.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="1188.4" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.4" y="1054.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.07%)</title><rect x="1189.2" y="1123.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.2" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="1189.2" y="1107.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1192.2" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="1189.2" y="1091.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1192.2" y="1102.0"></text>
</g>
</g>
</svg>
