<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (201 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.50%)</title><rect x="10.0" y="1315.0" width="5.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*) (1 samples, 0.50%)</title><rect x="10.0" y="1299.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*) (1 samples, 0.50%)</title><rect x="10.0" y="1283.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (1 samples, 0.50%)</title><rect x="10.0" y="1267.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (1 samples, 0.50%)</title><rect x="10.0" y="1251.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 11.44%)</title><rect x="15.9" y="1315.0" width="135.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.9" y="1326.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (23 samples, 11.44%)</title><rect x="15.9" y="1299.0" width="135.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.9" y="1310.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (13 samples, 6.47%)</title><rect x="15.9" y="1283.0" width="76.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.9" y="1294.0">java/lan..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/779505289.accept (13 samples, 6.47%)</title><rect x="15.9" y="1267.0" width="76.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.9" y="1278.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (13 samples, 6.47%)</title><rect x="15.9" y="1251.0" width="76.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.9" y="1262.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (9 samples, 4.48%)</title><rect x="15.9" y="1235.0" width="52.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="1246.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (9 samples, 4.48%)</title><rect x="15.9" y="1219.0" width="52.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.9" y="1230.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (9 samples, 4.48%)</title><rect x="15.9" y="1203.0" width="52.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.9" y="1214.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (9 samples, 4.48%)</title><rect x="15.9" y="1187.0" width="52.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.9" y="1198.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 4.48%)</title><rect x="15.9" y="1171.0" width="52.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.9" y="1182.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (8 samples, 3.98%)</title><rect x="21.7" y="1155.0" width="47.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.7" y="1166.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 3.48%)</title><rect x="27.6" y="1139.0" width="41.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.6" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.49%)</title><rect x="27.6" y="1123.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.49%)</title><rect x="27.6" y="1107.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.49%)</title><rect x="27.6" y="1091.0" width="17.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.99%)</title><rect x="45.2" y="1123.0" width="23.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.2" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.99%)</title><rect x="45.2" y="1107.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.2" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.99%)</title><rect x="45.2" y="1091.0" width="23.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.2" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.99%)</title><rect x="45.2" y="1075.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.2" y="1086.0">j..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (4 samples, 1.99%)</title><rect x="45.2" y="1059.0" width="23.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="48.2" y="1070.0">s..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 1.99%)</title><rect x="45.2" y="1043.0" width="23.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="48.2" y="1054.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 1.99%)</title><rect x="45.2" y="1027.0" width="23.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="48.2" y="1038.0">_..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.99%)</title><rect x="68.7" y="1235.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.7" y="1246.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.99%)</title><rect x="68.7" y="1219.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.7" y="1230.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.50%)</title><rect x="80.4" y="1203.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.50%)</title><rect x="80.4" y="1187.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.4" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.50%)</title><rect x="80.4" y="1171.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.4" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.50%)</title><rect x="80.4" y="1155.0" width="5.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="83.4" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.50%)</title><rect x="86.3" y="1203.0" width="5.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="89.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.98%)</title><rect x="92.2" y="1283.0" width="58.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.2" y="1294.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.98%)</title><rect x="92.2" y="1267.0" width="58.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.2" y="1278.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 4.48%)</title><rect x="92.2" y="1251.0" width="52.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.2" y="1262.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.50%)</title><rect x="98.1" y="1235.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.50%)</title><rect x="98.1" y="1219.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.50%)</title><rect x="98.1" y="1203.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.50%)</title><rect x="98.1" y="1187.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 3.48%)</title><rect x="103.9" y="1235.0" width="41.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.9" y="1246.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 3.48%)</title><rect x="103.9" y="1219.0" width="41.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.9" y="1230.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (7 samples, 3.48%)</title><rect x="103.9" y="1203.0" width="41.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.9" y="1214.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (7 samples, 3.48%)</title><rect x="103.9" y="1187.0" width="41.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.9" y="1198.0">org..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.50%)</title><rect x="103.9" y="1171.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.9" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.50%)</title><rect x="109.8" y="1171.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.8" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.50%)</title><rect x="109.8" y="1155.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.8" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.50%)</title><rect x="109.8" y="1139.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.8" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.50%)</title><rect x="109.8" y="1123.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.8" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.50%)</title><rect x="109.8" y="1107.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.50%)</title><rect x="109.8" y="1091.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.8" y="1102.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (1 samples, 0.50%)</title><rect x="109.8" y="1075.0" width="5.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="112.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 1.99%)</title><rect x="115.7" y="1171.0" width="23.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.7" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.50%)</title><rect x="115.7" y="1155.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="118.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.50%)</title><rect x="115.7" y="1139.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.50%)</title><rect x="121.5" y="1155.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.50%)</title><rect x="121.5" y="1139.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.50%)</title><rect x="121.5" y="1123.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="124.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.50%)</title><rect x="121.5" y="1107.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.50%)</title><rect x="121.5" y="1091.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.50%)</title><rect x="121.5" y="1075.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.50%)</title><rect x="121.5" y="1059.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="124.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.50%)</title><rect x="127.4" y="1155.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.50%)</title><rect x="127.4" y="1139.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.partitionLeaderEpoch (1 samples, 0.50%)</title><rect x="133.3" y="1155.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="136.3" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.50%)</title><rect x="133.3" y="1139.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.3" y="1150.0"></text>
</g>
<g>
<title>java/nio/Bits.getInt (1 samples, 0.50%)</title><rect x="133.3" y="1123.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/Bits.getIntB (1 samples, 0.50%)</title><rect x="133.3" y="1107.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="136.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer._get (1 samples, 0.50%)</title><rect x="133.3" y="1091.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.50%)</title><rect x="139.2" y="1171.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.50%)</title><rect x="139.2" y="1155.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="142.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.50%)</title><rect x="139.2" y="1139.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.50%)</title><rect x="139.2" y="1123.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.50%)</title><rect x="145.0" y="1251.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.50%)</title><rect x="145.0" y="1235.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="148.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.50%)</title><rect x="145.0" y="1219.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.50%)</title><rect x="145.0" y="1203.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.50%)</title><rect x="145.0" y="1187.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.50%)</title><rect x="145.0" y="1171.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.50%)</title><rect x="145.0" y="1155.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.50%)</title><rect x="145.0" y="1139.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.0" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.50%)</title><rect x="145.0" y="1123.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.50%)</title><rect x="145.0" y="1107.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.0" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.50%)</title><rect x="145.0" y="1091.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.0" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.50%)</title><rect x="145.0" y="1075.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.0" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.50%)</title><rect x="145.0" y="1059.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (55 samples, 27.36%)</title><rect x="150.9" y="1315.0" width="322.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.9" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (55 samples, 27.36%)</title><rect x="150.9" y="1299.0" width="322.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.9" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Work..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (55 samples, 27.36%)</title><rect x="150.9" y="1283.0" width="322.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.9" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runW..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/151177546.run (39 samples, 19.40%)</title><rect x="162.6" y="1267.0" width="229.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="165.6" y="1278.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (39 samples, 19.40%)</title><rect x="162.6" y="1251.0" width="229.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.6" y="1262.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (39 samples, 19.40%)</title><rect x="162.6" y="1235.0" width="229.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.6" y="1246.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (39 samples, 19.40%)</title><rect x="162.6" y="1219.0" width="229.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.6" y="1230.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (6 samples, 2.99%)</title><rect x="162.6" y="1203.0" width="35.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.6" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (5 samples, 2.49%)</title><rect x="162.6" y="1187.0" width="29.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.6" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/952615650.get (3 samples, 1.49%)</title><rect x="162.6" y="1171.0" width="17.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="165.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.49%)</title><rect x="162.6" y="1155.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.6" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.49%)</title><rect x="162.6" y="1139.0" width="17.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="165.6" y="1150.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.49%)</title><rect x="162.6" y="1123.0" width="17.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="165.6" y="1134.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 1.00%)</title><rect x="180.2" y="1171.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1721251609.linkToTargetMethod (2 samples, 1.00%)</title><rect x="180.2" y="1155.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1655160725.invokeStatic_JL_L (2 samples, 1.00%)</title><rect x="180.2" y="1139.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.2" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer$$Lambda$263/1818254441.get$Lambda (2 samples, 1.00%)</title><rect x="180.2" y="1123.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.2" y="1134.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer$$Lambda$263/1818254441.&lt;init&gt; (1 samples, 0.50%)</title><rect x="186.1" y="1107.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.1" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.50%)</title><rect x="186.1" y="1091.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="189.1" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.50%)</title><rect x="186.1" y="1075.0" width="5.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="189.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/RateLimiter.acquire (1 samples, 0.50%)</title><rect x="192.0" y="1187.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DynamicRateLimiter.acquire (1 samples, 0.50%)</title><rect x="192.0" y="1171.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.0" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.50%)</title><rect x="192.0" y="1155.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (6 samples, 2.99%)</title><rect x="197.9" y="1203.0" width="35.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.9" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (6 samples, 2.99%)</title><rect x="197.9" y="1187.0" width="35.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.9" y="1198.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (6 samples, 2.99%)</title><rect x="197.9" y="1171.0" width="35.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.9" y="1182.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 2.99%)</title><rect x="197.9" y="1155.0" width="35.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.9" y="1166.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 2.99%)</title><rect x="197.9" y="1139.0" width="35.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.9" y="1150.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 2.99%)</title><rect x="197.9" y="1123.0" width="35.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.9" y="1134.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.00%)</title><rect x="197.9" y="1107.0" width="11.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.00%)</title><rect x="197.9" y="1091.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.00%)</title><rect x="197.9" y="1075.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.50%)</title><rect x="197.9" y="1059.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.50%)</title><rect x="197.9" y="1043.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.50%)</title><rect x="203.7" y="1059.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.50%)</title><rect x="203.7" y="1043.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 1.99%)</title><rect x="209.6" y="1107.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.6" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.50%)</title><rect x="209.6" y="1091.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.50%)</title><rect x="209.6" y="1075.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="209.6" y="1059.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.50%)</title><rect x="209.6" y="1043.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.49%)</title><rect x="215.5" y="1091.0" width="17.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.49%)</title><rect x="215.5" y="1075.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.49%)</title><rect x="215.5" y="1059.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.49%)</title><rect x="215.5" y="1043.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.50%)</title><rect x="215.5" y="1027.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.50%)</title><rect x="215.5" y="1011.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.00%)</title><rect x="221.3" y="1027.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.00%)</title><rect x="221.3" y="1011.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.00%)</title><rect x="221.3" y="995.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.00%)</title><rect x="221.3" y="979.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.3" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.00%)</title><rect x="221.3" y="963.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.3" y="974.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 1.00%)</title><rect x="221.3" y="947.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.3" y="958.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.50%)</title><rect x="227.2" y="931.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (27 samples, 13.43%)</title><rect x="233.1" y="1203.0" width="158.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.1" y="1214.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.49%)</title><rect x="244.8" y="1187.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.8" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.49%)</title><rect x="244.8" y="1171.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.8" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.49%)</title><rect x="244.8" y="1155.0" width="17.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.8" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.50%)</title><rect x="244.8" y="1139.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.50%)</title><rect x="244.8" y="1123.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.50%)</title><rect x="244.8" y="1107.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.50%)</title><rect x="244.8" y="1091.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.00%)</title><rect x="250.7" y="1139.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.00%)</title><rect x="250.7" y="1123.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.50%)</title><rect x="256.6" y="1107.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="262.4" y="1187.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="262.4" y="1171.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.50%)</title><rect x="262.4" y="1155.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 6.97%)</title><rect x="268.3" y="1187.0" width="82.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.3" y="1198.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.50%)</title><rect x="268.3" y="1171.0" width="5.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="271.3" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.50%)</title><rect x="268.3" y="1155.0" width="5.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="271.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 6.47%)</title><rect x="274.2" y="1171.0" width="76.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.2" y="1182.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 3.98%)</title><rect x="274.2" y="1155.0" width="46.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.2" y="1166.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 3.98%)</title><rect x="274.2" y="1139.0" width="46.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.2" y="1150.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.99%)</title><rect x="285.9" y="1123.0" width="35.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.9" y="1134.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 2.49%)</title><rect x="291.8" y="1107.0" width="29.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.8" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 2.49%)</title><rect x="291.8" y="1091.0" width="29.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.8" y="1102.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.50%)</title><rect x="309.4" y="1075.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="312.4" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.50%)</title><rect x="315.3" y="1075.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="318.3" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.49%)</title><rect x="321.1" y="1155.0" width="29.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.1" y="1166.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.49%)</title><rect x="321.1" y="1139.0" width="29.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.1" y="1150.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.49%)</title><rect x="321.1" y="1123.0" width="29.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.1" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.99%)</title><rect x="327.0" y="1107.0" width="23.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.0" y="1118.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.49%)</title><rect x="350.5" y="1187.0" width="29.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.5" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.49%)</title><rect x="350.5" y="1171.0" width="29.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.5" y="1182.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/823236465.process (1 samples, 0.50%)</title><rect x="350.5" y="1155.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.50%)</title><rect x="350.5" y="1139.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.50%)</title><rect x="350.5" y="1123.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.50%)</title><rect x="350.5" y="1107.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.50%)</title><rect x="350.5" y="1091.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="353.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.50%)</title><rect x="350.5" y="1075.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.50%)</title><rect x="356.4" y="1155.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.50%)</title><rect x="362.2" y="1155.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.50%)</title><rect x="362.2" y="1139.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.50%)</title><rect x="368.1" y="1155.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.50%)</title><rect x="368.1" y="1139.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.50%)</title><rect x="374.0" y="1155.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/593008345.linkToTargetMethod (1 samples, 0.50%)</title><rect x="379.9" y="1187.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.50%)</title><rect x="379.9" y="1171.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="382.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/553980362.get$Lambda (1 samples, 0.50%)</title><rect x="379.9" y="1155.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.50%)</title><rect x="385.7" y="1187.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.50%)</title><rect x="385.7" y="1171.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.50%)</title><rect x="385.7" y="1155.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/553980362.accept (1 samples, 0.50%)</title><rect x="385.7" y="1139.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$0 (1 samples, 0.50%)</title><rect x="385.7" y="1123.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.50%)</title><rect x="385.7" y="1107.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.7" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.50%)</title><rect x="385.7" y="1091.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.7" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.50%)</title><rect x="385.7" y="1075.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.7" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.50%)</title><rect x="385.7" y="1059.0" width="5.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="388.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.50%)</title><rect x="385.7" y="1043.0" width="5.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="388.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.00%)</title><rect x="391.6" y="1267.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.00%)</title><rect x="391.6" y="1251.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.6" y="1262.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 1.00%)</title><rect x="391.6" y="1235.0" width="11.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="394.6" y="1246.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.50%)</title><rect x="397.5" y="1219.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="400.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 5.97%)</title><rect x="403.3" y="1267.0" width="70.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="1278.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 5.97%)</title><rect x="403.3" y="1251.0" width="70.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="1262.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 4.98%)</title><rect x="403.3" y="1235.0" width="58.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.3" y="1246.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 4.98%)</title><rect x="403.3" y="1219.0" width="58.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="1230.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 4.98%)</title><rect x="403.3" y="1203.0" width="58.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="1214.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Park (8 samples, 3.98%)</title><rect x="409.2" y="1187.0" width="47.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="412.2" y="1198.0">Unsa..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (2 samples, 1.00%)</title><rect x="409.2" y="1171.0" width="11.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="412.2" y="1182.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.50%)</title><rect x="420.9" y="1171.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="423.9" y="1182.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.50%)</title><rect x="426.8" y="1171.0" width="5.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="429.8" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.50%)</title><rect x="432.7" y="1171.0" width="5.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="435.7" y="1182.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.49%)</title><rect x="438.6" y="1171.0" width="17.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="441.6" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.50%)</title><rect x="456.2" y="1187.0" width="5.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="459.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.50%)</title><rect x="462.0" y="1235.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.50%)</title><rect x="462.0" y="1219.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.50%)</title><rect x="462.0" y="1203.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.50%)</title><rect x="462.0" y="1187.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.50%)</title><rect x="462.0" y="1171.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="465.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.50%)</title><rect x="467.9" y="1235.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.50%)</title><rect x="467.9" y="1219.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.9" y="1230.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.50%)</title><rect x="473.8" y="1315.0" width="5.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="476.8" y="1326.0"></text>
</g>
<g>
<title>start_thread (121 samples, 60.20%)</title><rect x="479.7" y="1315.0" width="710.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="482.7" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (121 samples, 60.20%)</title><rect x="479.7" y="1299.0" width="710.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="482.7" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 7.96%)</title><rect x="479.7" y="1283.0" width="93.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.7" y="1294.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 2.49%)</title><rect x="479.7" y="1267.0" width="29.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="482.7" y="1278.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.49%)</title><rect x="479.7" y="1251.0" width="29.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="482.7" y="1262.0">G1..</text>
</g>
<g>
<title>SpinPause (5 samples, 2.49%)</title><rect x="479.7" y="1235.0" width="29.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="482.7" y="1246.0">Sp..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 5.47%)</title><rect x="509.0" y="1267.0" width="64.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="512.0" y="1278.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 5.47%)</title><rect x="509.0" y="1251.0" width="64.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.0" y="1262.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.00%)</title><rect x="509.0" y="1235.0" width="11.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="512.0" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.50%)</title><rect x="514.9" y="1219.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="517.9" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.50%)</title><rect x="514.9" y="1203.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="517.9" y="1214.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.50%)</title><rect x="514.9" y="1187.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="517.9" y="1198.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.49%)</title><rect x="520.7" y="1235.0" width="17.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="523.7" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.00%)</title><rect x="538.4" y="1235.0" width="11.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="541.4" y="1246.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.49%)</title><rect x="550.1" y="1235.0" width="17.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="553.1" y="1246.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.50%)</title><rect x="567.7" y="1235.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.7" y="1246.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 51.74%)</title><rect x="573.6" y="1283.0" width="610.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="576.6" y="1294.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (103 samples, 51.24%)</title><rect x="573.6" y="1267.0" width="604.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="576.6" y="1278.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (103 samples, 51.24%)</title><rect x="573.6" y="1251.0" width="604.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="576.6" y="1262.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (100 samples, 49.75%)</title><rect x="573.6" y="1235.0" width="587.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="576.6" y="1246.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (99 samples, 49.25%)</title><rect x="573.6" y="1219.0" width="581.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="576.6" y="1230.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.50%)</title><rect x="573.6" y="1203.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="576.6" y="1214.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.50%)</title><rect x="573.6" y="1187.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="576.6" y="1198.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.50%)</title><rect x="573.6" y="1171.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="576.6" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.50%)</title><rect x="573.6" y="1155.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="576.6" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.50%)</title><rect x="573.6" y="1139.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="576.6" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="573.6" y="1123.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="576.6" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="573.6" y="1107.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="576.6" y="1118.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_dest() const (1 samples, 0.50%)</title><rect x="573.6" y="1091.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="576.6" y="1102.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 28.36%)</title><rect x="579.5" y="1203.0" width="334.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="582.5" y="1214.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.00%)</title><rect x="579.5" y="1187.0" width="11.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="582.5" y="1198.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.50%)</title><rect x="579.5" y="1171.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="582.5" y="1182.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.50%)</title><rect x="579.5" y="1155.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="582.5" y="1166.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.50%)</title><rect x="579.5" y="1139.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="582.5" y="1150.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.50%)</title><rect x="579.5" y="1123.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="582.5" y="1134.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.50%)</title><rect x="579.5" y="1107.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="582.5" y="1118.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.50%)</title><rect x="585.3" y="1171.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="588.3" y="1182.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.49%)</title><rect x="591.2" y="1187.0" width="17.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="594.2" y="1198.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 1.00%)</title><rect x="591.2" y="1171.0" width="11.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.2" y="1182.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.50%)</title><rect x="591.2" y="1155.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="594.2" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.50%)</title><rect x="591.2" y="1139.0" width="5.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="594.2" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.50%)</title><rect x="597.1" y="1155.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.1" y="1166.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.50%)</title><rect x="597.1" y="1139.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="600.1" y="1150.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.50%)</title><rect x="597.1" y="1123.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="600.1" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.50%)</title><rect x="602.9" y="1171.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="605.9" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.99%)</title><rect x="608.8" y="1187.0" width="23.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="611.8" y="1198.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.99%)</title><rect x="608.8" y="1171.0" width="23.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="611.8" y="1182.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.00%)</title><rect x="614.7" y="1155.0" width="11.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="617.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.50%)</title><rect x="620.5" y="1139.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="623.5" y="1150.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.50%)</title><rect x="620.5" y="1123.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="623.5" y="1134.0"></text>
</g>
<g>
<title>Node::add_prec(Node*) (1 samples, 0.50%)</title><rect x="626.4" y="1155.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="629.4" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.50%)</title><rect x="626.4" y="1139.0" width="5.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="629.4" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.50%)</title><rect x="632.3" y="1187.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="635.3" y="1198.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.50%)</title><rect x="632.3" y="1171.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="635.3" y="1182.0"></text>
</g>
<g>
<title>jmpConNode::ideal_Opcode() const (1 samples, 0.50%)</title><rect x="632.3" y="1155.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="635.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 2.49%)</title><rect x="638.2" y="1187.0" width="29.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="641.2" y="1198.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 2.49%)</title><rect x="638.2" y="1171.0" width="29.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="641.2" y="1182.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.50%)</title><rect x="644.0" y="1155.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="647.0" y="1166.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.50%)</title><rect x="644.0" y="1139.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="647.0" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.50%)</title><rect x="644.0" y="1123.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="647.0" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.50%)</title><rect x="644.0" y="1107.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="647.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.50%)</title><rect x="649.9" y="1155.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="652.9" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.50%)</title><rect x="649.9" y="1139.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="652.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 1.00%)</title><rect x="655.8" y="1155.0" width="11.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="658.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.50%)</title><rect x="655.8" y="1139.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="658.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.50%)</title><rect x="661.6" y="1139.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="664.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 20.40%)</title><rect x="667.5" y="1187.0" width="240.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="670.5" y="1198.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="673.4" y="1171.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="676.4" y="1182.0"></text>
</g>
<g>
<title>MachProjNode::out_RegMask() const (1 samples, 0.50%)</title><rect x="679.3" y="1171.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="682.3" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.00%)</title><rect x="685.1" y="1171.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="688.1" y="1182.0"></text>
</g>
<g>
<title>Block_Array::grow(unsigned int) (1 samples, 0.50%)</title><rect x="691.0" y="1155.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="694.0" y="1166.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.50%)</title><rect x="691.0" y="1139.0" width="5.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="694.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.50%)</title><rect x="696.9" y="1171.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="699.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.50%)</title><rect x="696.9" y="1155.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="699.9" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="696.9" y="1139.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="699.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.00%)</title><rect x="702.7" y="1171.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="705.7" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="702.7" y="1155.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="705.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.50%)</title><rect x="708.6" y="1155.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="711.6" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="708.6" y="1139.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="711.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.49%)</title><rect x="714.5" y="1171.0" width="29.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="717.5" y="1182.0">Ph..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.50%)</title><rect x="732.1" y="1155.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="735.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.50%)</title><rect x="738.0" y="1155.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="741.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.50%)</title><rect x="738.0" y="1139.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.0" y="1150.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.50%)</title><rect x="738.0" y="1123.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="741.0" y="1134.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.50%)</title><rect x="738.0" y="1107.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="741.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 4.98%)</title><rect x="743.8" y="1171.0" width="58.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.8" y="1182.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.50%)</title><rect x="767.3" y="1155.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="770.3" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="773.2" y="1155.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.99%)</title><rect x="779.1" y="1155.0" width="23.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="782.1" y="1166.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="796.7" y="1139.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.50%)</title><rect x="802.5" y="1171.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.5" y="1182.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.50%)</title><rect x="802.5" y="1155.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.49%)</title><rect x="808.4" y="1171.0" width="17.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.4" y="1182.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.50%)</title><rect x="820.1" y="1155.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="823.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.50%)</title><rect x="826.0" y="1171.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="829.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 2.49%)</title><rect x="831.9" y="1171.0" width="29.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="834.9" y="1182.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.49%)</title><rect x="843.6" y="1155.0" width="17.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.50%)</title><rect x="861.2" y="1171.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.49%)</title><rect x="867.1" y="1171.0" width="17.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="870.1" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.49%)</title><rect x="867.1" y="1155.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="870.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.50%)</title><rect x="867.1" y="1139.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.1" y="1150.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.50%)</title><rect x="867.1" y="1123.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="870.1" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.00%)</title><rect x="873.0" y="1139.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.0" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.50%)</title><rect x="873.0" y="1123.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.0" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="873.0" y="1107.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.50%)</title><rect x="878.9" y="1123.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="881.9" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="878.9" y="1107.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.50%)</title><rect x="884.7" y="1171.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="887.7" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.50%)</title><rect x="884.7" y="1155.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="887.7" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.49%)</title><rect x="890.6" y="1171.0" width="17.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.6" y="1182.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.50%)</title><rect x="902.3" y="1155.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="905.3" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.50%)</title><rect x="908.2" y="1187.0" width="5.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="911.2" y="1198.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 14.93%)</title><rect x="914.1" y="1203.0" width="176.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="917.1" y="1214.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.50%)</title><rect x="914.1" y="1187.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="917.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.50%)</title><rect x="914.1" y="1171.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="917.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 1.49%)</title><rect x="920.0" y="1187.0" width="17.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="923.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.50%)</title><rect x="920.0" y="1171.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.00%)</title><rect x="925.8" y="1171.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.50%)</title><rect x="925.8" y="1155.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="928.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1155.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1139.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1123.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1107.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="934.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1091.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1075.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1059.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1043.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1027.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="1011.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="934.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="995.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="934.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="979.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="963.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="934.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="947.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="931.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="915.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="899.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="883.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="867.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="851.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="835.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="819.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="803.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="787.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="934.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="771.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.50%)</title><rect x="931.7" y="755.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="934.7" y="766.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.50%)</title><rect x="931.7" y="739.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.7" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.00%)</title><rect x="937.6" y="1187.0" width="11.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="940.6" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.50%)</title><rect x="937.6" y="1171.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.6" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="937.6" y="1155.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="940.6" y="1166.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.50%)</title><rect x="937.6" y="1139.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.6" y="1150.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.50%)</title><rect x="943.4" y="1171.0" width="5.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="946.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 7.96%)</title><rect x="949.3" y="1187.0" width="93.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="952.3" y="1198.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.00%)</title><rect x="949.3" y="1171.0" width="11.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="952.3" y="1182.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.50%)</title><rect x="955.2" y="1155.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="958.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.50%)</title><rect x="961.0" y="1171.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 3.48%)</title><rect x="966.9" y="1171.0" width="41.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.9" y="1182.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 3.48%)</title><rect x="966.9" y="1155.0" width="41.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.9" y="1166.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.50%)</title><rect x="972.8" y="1139.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="975.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.49%)</title><rect x="978.7" y="1139.0" width="29.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.7" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 2.49%)</title><rect x="978.7" y="1123.0" width="29.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.7" y="1134.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.50%)</title><rect x="1008.0" y="1171.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1011.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.00%)</title><rect x="1013.9" y="1171.0" width="11.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1016.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.00%)</title><rect x="1013.9" y="1155.0" width="11.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.9" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.50%)</title><rect x="1013.9" y="1139.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.50%)</title><rect x="1019.8" y="1139.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.49%)</title><rect x="1025.6" y="1171.0" width="17.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.49%)</title><rect x="1025.6" y="1155.0" width="17.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.6" y="1166.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1031.5" y="1139.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.5" y="1150.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1031.5" y="1123.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.5" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.50%)</title><rect x="1037.4" y="1139.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 3.48%)</title><rect x="1043.2" y="1187.0" width="41.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.2" y="1198.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 3.48%)</title><rect x="1043.2" y="1171.0" width="41.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1046.2" y="1182.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1049.1" y="1155.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.1" y="1166.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.50%)</title><rect x="1049.1" y="1139.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.1" y="1150.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.50%)</title><rect x="1055.0" y="1155.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.0" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.50%)</title><rect x="1055.0" y="1139.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1058.0" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="1055.0" y="1123.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.0" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.50%)</title><rect x="1055.0" y="1107.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.0" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.50%)</title><rect x="1060.8" y="1155.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.8" y="1166.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.50%)</title><rect x="1060.8" y="1139.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.8" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.00%)</title><rect x="1066.7" y="1155.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.50%)</title><rect x="1066.7" y="1139.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.50%)</title><rect x="1066.7" y="1123.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.7" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.50%)</title><rect x="1066.7" y="1107.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.7" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.50%)</title><rect x="1072.6" y="1139.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.6" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.50%)</title><rect x="1078.5" y="1155.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.5" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.50%)</title><rect x="1084.3" y="1187.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.3" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.50%)</title><rect x="1084.3" y="1171.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.3" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.50%)</title><rect x="1084.3" y="1155.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.3" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_store(Node*, Node*, Node*, int, Node*, BasicType) (1 samples, 0.50%)</title><rect x="1084.3" y="1139.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.3" y="1150.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.50%)</title><rect x="1084.3" y="1123.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.3" y="1134.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.50%)</title><rect x="1084.3" y="1107.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.3" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 5.47%)</title><rect x="1090.2" y="1203.0" width="64.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.2" y="1214.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 5.47%)</title><rect x="1090.2" y="1187.0" width="64.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.2" y="1198.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 5.47%)</title><rect x="1090.2" y="1171.0" width="64.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.2" y="1182.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 5.47%)</title><rect x="1090.2" y="1155.0" width="64.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.2" y="1166.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 5.47%)</title><rect x="1090.2" y="1139.0" width="64.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.2" y="1150.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 5.47%)</title><rect x="1090.2" y="1123.0" width="64.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.2" y="1134.0">Parse::..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.99%)</title><rect x="1090.2" y="1107.0" width="35.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.2" y="1118.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.99%)</title><rect x="1090.2" y="1091.0" width="35.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.2" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.99%)</title><rect x="1090.2" y="1075.0" width="35.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.2" y="1086.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.99%)</title><rect x="1090.2" y="1059.0" width="35.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.2" y="1070.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.99%)</title><rect x="1090.2" y="1043.0" width="35.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.2" y="1054.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.49%)</title><rect x="1090.2" y="1027.0" width="29.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.2" y="1038.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.50%)</title><rect x="1090.2" y="1011.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.2" y="1022.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.50%)</title><rect x="1090.2" y="995.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.2" y="1006.0"></text>
</g>
<g>
<title>Compile::register_intrinsic(CallGenerator*) (1 samples, 0.50%)</title><rect x="1090.2" y="979.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.99%)</title><rect x="1096.1" y="1011.0" width="23.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.1" y="1022.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.99%)</title><rect x="1096.1" y="995.0" width="23.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.99%)</title><rect x="1096.1" y="979.0" width="23.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.1" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.99%)</title><rect x="1096.1" y="963.0" width="23.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.1" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.99%)</title><rect x="1096.1" y="947.0" width="23.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.1" y="958.0">P..</text>
</g>
<g>
<title>GraphKit::load_array_length(Node*) (1 samples, 0.50%)</title><rect x="1096.1" y="931.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.1" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.50%)</title><rect x="1096.1" y="915.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.1" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.50%)</title><rect x="1096.1" y="899.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.1" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.50%)</title><rect x="1096.1" y="883.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.1" y="894.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.50%)</title><rect x="1101.9" y="931.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.9" y="942.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.50%)</title><rect x="1101.9" y="915.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::g1_wb_post_Type() (1 samples, 0.50%)</title><rect x="1101.9" y="899.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.9" y="910.0"></text>
</g>
<g>
<title>TypeTuple::make(unsigned int, Type const**) (1 samples, 0.50%)</title><rect x="1101.9" y="883.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="931.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.8" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="915.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.8" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="899.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="883.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="867.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="851.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="835.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.8" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="819.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.8" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="803.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="787.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="771.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="755.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="739.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="723.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="707.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="691.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="675.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="659.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="643.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="627.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="611.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="595.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="579.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="563.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1107.8" y="547.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1107.8" y="531.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1107.8" y="515.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1107.8" y="499.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1107.8" y="483.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1107.8" y="467.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1107.8" y="451.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1107.8" y="435.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.8" y="446.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.50%)</title><rect x="1107.8" y="419.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.8" y="430.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.50%)</title><rect x="1107.8" y="403.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1113.7" y="931.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1113.7" y="915.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.7" y="926.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.50%)</title><rect x="1113.7" y="899.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.7" y="910.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.50%)</title><rect x="1113.7" y="883.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.7" y="894.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1113.7" y="867.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.7" y="878.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1113.7" y="851.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1119.6" y="1027.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1119.6" y="1011.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.50%)</title><rect x="1119.6" y="995.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.6" y="1006.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.50%)</title><rect x="1119.6" y="979.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.6" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.50%)</title><rect x="1119.6" y="963.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.6" y="974.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1119.6" y="947.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.6" y="958.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1119.6" y="931.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 2.49%)</title><rect x="1125.4" y="1107.0" width="29.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.4" y="1118.0">Pr..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.49%)</title><rect x="1125.4" y="1091.0" width="29.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.49%)</title><rect x="1125.4" y="1075.0" width="29.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.4" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.49%)</title><rect x="1125.4" y="1059.0" width="29.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.4" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.49%)</title><rect x="1125.4" y="1043.0" width="29.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.49%)</title><rect x="1125.4" y="1027.0" width="29.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.49%)</title><rect x="1125.4" y="1011.0" width="29.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.4" y="1022.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.49%)</title><rect x="1125.4" y="995.0" width="29.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.49%)</title><rect x="1125.4" y="979.0" width="29.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.49%)</title><rect x="1125.4" y="963.0" width="29.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.4" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.49%)</title><rect x="1125.4" y="947.0" width="29.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.4" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.49%)</title><rect x="1125.4" y="931.0" width="29.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="942.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.99%)</title><rect x="1125.4" y="915.0" width="23.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.4" y="926.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.99%)</title><rect x="1125.4" y="899.0" width="23.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.4" y="910.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.99%)</title><rect x="1125.4" y="883.0" width="23.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.49%)</title><rect x="1125.4" y="867.0" width="17.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.49%)</title><rect x="1125.4" y="851.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.49%)</title><rect x="1125.4" y="835.0" width="17.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.00%)</title><rect x="1125.4" y="819.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.00%)</title><rect x="1125.4" y="803.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.4" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.00%)</title><rect x="1125.4" y="787.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1125.4" y="771.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1125.4" y="755.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1125.4" y="739.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.4" y="723.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1125.4" y="707.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1125.4" y="691.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1125.4" y="675.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1125.4" y="659.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1125.4" y="643.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.4" y="627.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1125.4" y="611.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1125.4" y="595.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1125.4" y="579.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1125.4" y="563.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1125.4" y="547.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.4" y="531.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1125.4" y="515.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1125.4" y="499.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1125.4" y="483.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1125.4" y="467.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1125.4" y="451.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.4" y="435.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1125.4" y="419.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1125.4" y="403.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1125.4" y="387.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1125.4" y="371.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1125.4" y="355.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.4" y="339.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.50%)</title><rect x="1125.4" y="323.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.50%)</title><rect x="1125.4" y="307.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.50%)</title><rect x="1125.4" y="291.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.50%)</title><rect x="1125.4" y="275.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.50%)</title><rect x="1125.4" y="259.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.50%)</title><rect x="1125.4" y="243.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.4" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.50%)</title><rect x="1125.4" y="227.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.50%)</title><rect x="1125.4" y="211.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.4" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.50%)</title><rect x="1125.4" y="195.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.4" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.50%)</title><rect x="1125.4" y="179.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.4" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.50%)</title><rect x="1125.4" y="163.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1125.4" y="147.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.4" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.50%)</title><rect x="1125.4" y="131.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.4" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.50%)</title><rect x="1125.4" y="115.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.4" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.50%)</title><rect x="1125.4" y="99.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.4" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.50%)</title><rect x="1125.4" y="83.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.4" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.50%)</title><rect x="1125.4" y="67.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.50%)</title><rect x="1125.4" y="51.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.4" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.50%)</title><rect x="1125.4" y="35.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.50%)</title><rect x="1131.3" y="771.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_parameters_for_speculation() (1 samples, 0.50%)</title><rect x="1131.3" y="755.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::parameter_profiled_type(int) (1 samples, 0.50%)</title><rect x="1131.3" y="739.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1137.2" y="819.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1137.2" y="803.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.50%)</title><rect x="1137.2" y="787.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.2" y="798.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.50%)</title><rect x="1137.2" y="771.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.2" y="782.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.50%)</title><rect x="1137.2" y="755.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.50%)</title><rect x="1143.0" y="867.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.0" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.50%)</title><rect x="1143.0" y="851.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.0" y="862.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.50%)</title><rect x="1143.0" y="835.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.0" y="846.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.50%)</title><rect x="1143.0" y="819.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.50%)</title><rect x="1148.9" y="915.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.50%)</title><rect x="1148.9" y="899.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.9" y="910.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.50%)</title><rect x="1148.9" y="883.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.9" y="894.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.50%)</title><rect x="1148.9" y="867.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.9" y="878.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.50%)</title><rect x="1148.9" y="851.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.9" y="862.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.50%)</title><rect x="1148.9" y="835.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.50%)</title><rect x="1148.9" y="819.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="830.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.50%)</title><rect x="1148.9" y="803.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.9" y="814.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.50%)</title><rect x="1148.9" y="787.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.9" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.50%)</title><rect x="1154.8" y="1219.0" width="5.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1157.8" y="1230.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.49%)</title><rect x="1160.6" y="1235.0" width="17.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1246.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.49%)</title><rect x="1160.6" y="1219.0" width="17.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.49%)</title><rect x="1160.6" y="1203.0" width="17.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.6" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.49%)</title><rect x="1160.6" y="1187.0" width="17.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="1198.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.50%)</title><rect x="1160.6" y="1171.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.50%)</title><rect x="1160.6" y="1155.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.50%)</title><rect x="1160.6" y="1139.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.6" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.50%)</title><rect x="1160.6" y="1123.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.6" y="1134.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.00%)</title><rect x="1166.5" y="1171.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="1182.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.00%)</title><rect x="1166.5" y="1155.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="1166.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.50%)</title><rect x="1166.5" y="1139.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="1150.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.50%)</title><rect x="1166.5" y="1123.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="1134.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.50%)</title><rect x="1166.5" y="1107.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.5" y="1118.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1166.5" y="1091.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="1102.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.50%)</title><rect x="1172.4" y="1139.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.4" y="1150.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.50%)</title><rect x="1178.3" y="1267.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="1278.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.50%)</title><rect x="1178.3" y="1251.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.50%)</title><rect x="1178.3" y="1235.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="1246.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.50%)</title><rect x="1178.3" y="1219.0" width="5.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1181.3" y="1230.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1178.3" y="1203.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="1214.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.50%)</title><rect x="1178.3" y="1187.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="1198.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.50%)</title><rect x="1178.3" y="1171.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1182.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.50%)</title><rect x="1184.1" y="1283.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.50%)</title><rect x="1184.1" y="1267.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="1278.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.50%)</title><rect x="1184.1" y="1251.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="1262.0"></text>
</g>
</g>
</svg>
