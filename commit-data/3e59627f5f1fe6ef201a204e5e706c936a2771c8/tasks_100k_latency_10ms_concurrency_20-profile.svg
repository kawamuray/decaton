<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (259 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.39%)</title><rect x="10.0" y="1091.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.39%)</title><rect x="10.0" y="1075.0" width="4.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 7.34%)</title><rect x="14.6" y="1091.0" width="86.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.6" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.39%)</title><rect x="14.6" y="1075.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.39%)</title><rect x="14.6" y="1059.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.39%)</title><rect x="14.6" y="1043.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.39%)</title><rect x="14.6" y="1027.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="14.6" y="1011.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="14.6" y="995.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="14.6" y="979.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.39%)</title><rect x="14.6" y="963.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.39%)</title><rect x="14.6" y="947.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.39%)</title><rect x="14.6" y="931.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.39%)</title><rect x="14.6" y="915.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.39%)</title><rect x="14.6" y="899.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.39%)</title><rect x="14.6" y="883.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.39%)</title><rect x="14.6" y="867.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.6" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.39%)</title><rect x="14.6" y="851.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.39%)</title><rect x="14.6" y="835.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.6" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureWriteOpen (1 samples, 0.39%)</title><rect x="14.6" y="819.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (18 samples, 6.95%)</title><rect x="19.1" y="1075.0" width="82.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.1" y="1086.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.77%)</title><rect x="19.1" y="1059.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.77%)</title><rect x="19.1" y="1043.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.77%)</title><rect x="19.1" y="1027.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.77%)</title><rect x="19.1" y="1011.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.77%)</title><rect x="19.1" y="995.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.77%)</title><rect x="19.1" y="979.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.77%)</title><rect x="19.1" y="963.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.77%)</title><rect x="19.1" y="947.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.77%)</title><rect x="19.1" y="931.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.39%)</title><rect x="23.7" y="915.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.39%)</title><rect x="23.7" y="899.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.93%)</title><rect x="28.2" y="1059.0" width="22.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.2" y="1070.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/312979220.accept (5 samples, 1.93%)</title><rect x="28.2" y="1043.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="1054.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (5 samples, 1.93%)</title><rect x="28.2" y="1027.0" width="22.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.2" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.54%)</title><rect x="28.2" y="1011.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.54%)</title><rect x="28.2" y="995.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.54%)</title><rect x="28.2" y="979.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.54%)</title><rect x="28.2" y="963.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.54%)</title><rect x="28.2" y="947.0" width="18.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.54%)</title><rect x="28.2" y="931.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.2" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.39%)</title><rect x="41.9" y="915.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="44.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.39%)</title><rect x="46.4" y="1011.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.39%)</title><rect x="46.4" y="995.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.39%)</title><rect x="46.4" y="979.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.4" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.39%)</title><rect x="46.4" y="963.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.25%)</title><rect x="51.0" y="1059.0" width="50.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.0" y="1070.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.25%)</title><rect x="51.0" y="1043.0" width="50.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.0" y="1054.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.09%)</title><rect x="51.0" y="1027.0" width="36.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.0" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.77%)</title><rect x="51.0" y="1011.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.77%)</title><rect x="51.0" y="995.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.39%)</title><rect x="51.0" y="979.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.39%)</title><rect x="51.0" y="963.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.39%)</title><rect x="51.0" y="947.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.39%)</title><rect x="51.0" y="931.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.39%)</title><rect x="51.0" y="915.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.39%)</title><rect x="55.6" y="979.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="58.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.39%)</title><rect x="55.6" y="963.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.39%)</title><rect x="55.6" y="947.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.93%)</title><rect x="60.1" y="1011.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.1" y="1022.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.39%)</title><rect x="60.1" y="995.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.casTail (1 samples, 0.39%)</title><rect x="60.1" y="979.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.54%)</title><rect x="64.7" y="995.0" width="18.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.54%)</title><rect x="64.7" y="979.0" width="18.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.54%)</title><rect x="64.7" y="963.0" width="18.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.77%)</title><rect x="69.2" y="947.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.39%)</title><rect x="78.3" y="947.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.39%)</title><rect x="82.9" y="1011.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.39%)</title><rect x="82.9" y="995.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.39%)</title><rect x="82.9" y="979.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.9" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.39%)</title><rect x="82.9" y="963.0" width="4.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="85.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.39%)</title><rect x="87.5" y="1027.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.39%)</title><rect x="87.5" y="1011.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.39%)</title><rect x="92.0" y="1027.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.39%)</title><rect x="92.0" y="1011.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.39%)</title><rect x="92.0" y="995.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="92.0" y="979.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="92.0" y="963.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.39%)</title><rect x="92.0" y="947.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.39%)</title><rect x="92.0" y="931.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.39%)</title><rect x="92.0" y="915.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.39%)</title><rect x="92.0" y="899.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.39%)</title><rect x="92.0" y="883.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.validate (1 samples, 0.39%)</title><rect x="92.0" y="867.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.39%)</title><rect x="96.6" y="1027.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.39%)</title><rect x="96.6" y="1011.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.39%)</title><rect x="96.6" y="995.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.39%)</title><rect x="96.6" y="979.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.39%)</title><rect x="96.6" y="963.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="96.6" y="947.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.39%)</title><rect x="96.6" y="931.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (138 samples, 53.28%)</title><rect x="101.1" y="1091.0" width="628.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.1" y="1102.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (138 samples, 53.28%)</title><rect x="101.1" y="1075.0" width="628.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.1" y="1086.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (138 samples, 53.28%)</title><rect x="101.1" y="1059.0" width="628.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.1" y="1070.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run (131 samples, 50.58%)</title><rect x="101.1" y="1043.0" width="596.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.1" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (131 samples, 50.58%)</title><rect x="101.1" y="1027.0" width="596.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.1" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (131 samples, 50.58%)</title><rect x="101.1" y="1011.0" width="596.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.1" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="101.1" y="995.0" width="4.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="104.1" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="101.1" y="979.0" width="4.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="104.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (130 samples, 50.19%)</title><rect x="105.7" y="995.0" width="592.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.7" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (25 samples, 9.65%)</title><rect x="114.8" y="979.0" width="113.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.8" y="990.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (25 samples, 9.65%)</title><rect x="114.8" y="963.0" width="113.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.8" y="974.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 9.65%)</title><rect x="114.8" y="947.0" width="113.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.8" y="958.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.65%)</title><rect x="114.8" y="931.0" width="113.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.8" y="942.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.65%)</title><rect x="114.8" y="915.0" width="113.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.8" y="926.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 9.65%)</title><rect x="114.8" y="899.0" width="113.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.8" y="910.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.32%)</title><rect x="114.8" y="883.0" width="27.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.8" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.54%)</title><rect x="114.8" y="867.0" width="18.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.54%)</title><rect x="114.8" y="851.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 1.54%)</title><rect x="114.8" y="835.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.77%)</title><rect x="133.0" y="867.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.77%)</title><rect x="133.0" y="851.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.39%)</title><rect x="133.0" y="835.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="136.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.39%)</title><rect x="133.0" y="819.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.39%)</title><rect x="137.6" y="835.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.6" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="137.6" y="819.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="140.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.39%)</title><rect x="137.6" y="803.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="140.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="137.6" y="787.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="140.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.39%)</title><rect x="137.6" y="771.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="140.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 5.79%)</title><rect x="142.1" y="883.0" width="68.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.1" y="894.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.77%)</title><rect x="142.1" y="867.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.77%)</title><rect x="142.1" y="851.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.39%)</title><rect x="142.1" y="835.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.39%)</title><rect x="142.1" y="819.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.39%)</title><rect x="146.7" y="835.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.39%)</title><rect x="146.7" y="819.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.77%)</title><rect x="151.2" y="867.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.77%)</title><rect x="151.2" y="851.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.39%)</title><rect x="160.3" y="867.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.39%)</title><rect x="160.3" y="851.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="163.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.39%)</title><rect x="160.3" y="835.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.39%)</title><rect x="160.3" y="819.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.39%)</title><rect x="160.3" y="803.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 3.86%)</title><rect x="164.9" y="867.0" width="45.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.9" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.16%)</title><rect x="164.9" y="851.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.39%)</title><rect x="169.5" y="835.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="172.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.39%)</title><rect x="169.5" y="819.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.39%)</title><rect x="169.5" y="803.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.39%)</title><rect x="174.0" y="835.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.39%)</title><rect x="174.0" y="819.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.70%)</title><rect x="178.6" y="851.0" width="31.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.6" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.70%)</title><rect x="178.6" y="835.0" width="31.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.6" y="846.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.93%)</title><rect x="178.6" y="819.0" width="22.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.54%)</title><rect x="178.6" y="803.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.16%)</title><rect x="183.1" y="787.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.16%)</title><rect x="183.1" y="771.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="186.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.16%)</title><rect x="183.1" y="755.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.77%)</title><rect x="187.7" y="739.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.39%)</title><rect x="196.8" y="803.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (2 samples, 0.77%)</title><rect x="201.4" y="819.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.54%)</title><rect x="210.5" y="883.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.54%)</title><rect x="210.5" y="867.0" width="18.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.54%)</title><rect x="210.5" y="851.0" width="18.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.54%)</title><rect x="210.5" y="835.0" width="18.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.54%)</title><rect x="210.5" y="819.0" width="18.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (100 samples, 38.61%)</title><rect x="228.7" y="979.0" width="455.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.7" y="990.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (15 samples, 5.79%)</title><rect x="228.7" y="963.0" width="68.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.7" y="974.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 5.79%)</title><rect x="228.7" y="947.0" width="68.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.7" y="958.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 4.63%)</title><rect x="242.4" y="931.0" width="54.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.4" y="942.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 4.25%)</title><rect x="246.9" y="915.0" width="50.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.9" y="926.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.32%)</title><rect x="269.7" y="899.0" width="27.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.7" y="910.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.32%)</title><rect x="269.7" y="883.0" width="27.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.7" y="894.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.39%)</title><rect x="292.5" y="867.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.77%)</title><rect x="297.0" y="963.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.77%)</title><rect x="297.0" y="947.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.0" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.77%)</title><rect x="297.0" y="931.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 8.11%)</title><rect x="306.1" y="963.0" width="95.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="309.1" y="974.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 8.11%)</title><rect x="306.1" y="947.0" width="95.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.1" y="958.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 4.25%)</title><rect x="306.1" y="931.0" width="50.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.1" y="942.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 4.25%)</title><rect x="306.1" y="915.0" width="50.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.1" y="926.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.47%)</title><rect x="306.1" y="899.0" width="41.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.1" y="910.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 3.09%)</title><rect x="310.7" y="883.0" width="36.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="313.7" y="894.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 3.09%)</title><rect x="310.7" y="867.0" width="36.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.7" y="878.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 3.09%)</title><rect x="310.7" y="851.0" width="36.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.7" y="862.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.54%)</title><rect x="319.8" y="835.0" width="18.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="322.8" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 1.16%)</title><rect x="319.8" y="819.0" width="13.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="322.8" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.77%)</title><rect x="319.8" y="803.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="322.8" y="814.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.39%)</title><rect x="324.4" y="787.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="327.4" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.39%)</title><rect x="328.9" y="803.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="331.9" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.39%)</title><rect x="328.9" y="787.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="331.9" y="798.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.39%)</title><rect x="328.9" y="771.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="331.9" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.39%)</title><rect x="333.5" y="819.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="336.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.39%)</title><rect x="333.5" y="803.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="336.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.39%)</title><rect x="333.5" y="787.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="336.5" y="798.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.39%)</title><rect x="338.0" y="835.0" width="4.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="341.0" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.39%)</title><rect x="342.6" y="835.0" width="4.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="345.6" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.77%)</title><rect x="347.1" y="899.0" width="9.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="350.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 1.16%)</title><rect x="356.3" y="931.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="359.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.39%)</title><rect x="356.3" y="915.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="356.3" y="899.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="359.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="356.3" y="883.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="359.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.77%)</title><rect x="360.8" y="915.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.77%)</title><rect x="360.8" y="899.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.8" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.39%)</title><rect x="365.4" y="883.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.4" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.70%)</title><rect x="369.9" y="931.0" width="31.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.9" y="942.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.70%)</title><rect x="369.9" y="915.0" width="31.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="372.9" y="926.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.70%)</title><rect x="369.9" y="899.0" width="31.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.9" y="910.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.70%)</title><rect x="369.9" y="883.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="372.9" y="894.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.93%)</title><rect x="379.0" y="867.0" width="22.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.0" y="878.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.16%)</title><rect x="388.1" y="851.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="391.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="397.3" y="835.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="400.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.39%)</title><rect x="397.3" y="819.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="400.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="397.3" y="803.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="400.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.39%)</title><rect x="397.3" y="787.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="400.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (56 samples, 21.62%)</title><rect x="401.8" y="963.0" width="255.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.8" y="974.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (56 samples, 21.62%)</title><rect x="401.8" y="947.0" width="255.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.8" y="958.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/234677850.process (46 samples, 17.76%)</title><rect x="406.4" y="931.0" width="209.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.4" y="942.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (46 samples, 17.76%)</title><rect x="406.4" y="915.0" width="209.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.4" y="926.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (46 samples, 17.76%)</title><rect x="406.4" y="899.0" width="209.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.4" y="910.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (46 samples, 17.76%)</title><rect x="406.4" y="883.0" width="209.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.4" y="894.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (45 samples, 17.37%)</title><rect x="406.4" y="867.0" width="205.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.4" y="878.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 13.51%)</title><rect x="433.7" y="851.0" width="159.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="436.7" y="862.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.39%)</title><rect x="456.5" y="835.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="459.5" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.77%)</title><rect x="461.0" y="835.0" width="9.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="464.0" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.39%)</title><rect x="470.2" y="835.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="473.2" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.39%)</title><rect x="474.7" y="835.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.7" y="846.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (25 samples, 9.65%)</title><rect x="479.3" y="835.0" width="113.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="482.3" y="846.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.39%)</title><rect x="506.6" y="819.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="509.6" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.39%)</title><rect x="506.6" y="803.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="509.6" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="511.2" y="819.0" width="4.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="514.2" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="511.2" y="803.0" width="4.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="514.2" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.16%)</title><rect x="515.7" y="819.0" width="13.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="518.7" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 4.63%)</title><rect x="529.4" y="819.0" width="54.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="532.4" y="830.0">__pth..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.39%)</title><rect x="584.1" y="819.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="587.1" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.39%)</title><rect x="588.6" y="819.0" width="4.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="591.6" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.39%)</title><rect x="593.2" y="851.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="596.2" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.77%)</title><rect x="597.7" y="851.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="600.7" y="862.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.39%)</title><rect x="606.8" y="851.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="609.8" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.39%)</title><rect x="611.4" y="867.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="614.4" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="611.4" y="851.0" width="4.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="614.4" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 1.54%)</title><rect x="615.9" y="931.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="618.9" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 1.54%)</title><rect x="615.9" y="915.0" width="18.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1312653960.get$Lambda (4 samples, 1.54%)</title><rect x="615.9" y="899.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="618.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1312653960.&lt;init&gt; (4 samples, 1.54%)</title><rect x="615.9" y="883.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="618.9" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.54%)</title><rect x="634.2" y="931.0" width="18.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.2" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.77%)</title><rect x="643.3" y="915.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="646.3" y="926.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.77%)</title><rect x="643.3" y="899.0" width="9.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="646.3" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.39%)</title><rect x="652.4" y="931.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="655.4" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="652.4" y="915.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.39%)</title><rect x="652.4" y="899.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.4" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.39%)</title><rect x="652.4" y="883.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.32%)</title><rect x="656.9" y="963.0" width="27.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.9" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.32%)</title><rect x="656.9" y="947.0" width="27.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.9" y="958.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="679.7" y="931.0" width="4.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="682.7" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="679.7" y="915.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="682.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.16%)</title><rect x="684.3" y="979.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="687.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.16%)</title><rect x="684.3" y="963.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="687.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.39%)</title><rect x="688.8" y="947.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="691.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.39%)</title><rect x="693.4" y="947.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="696.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/304072643.accept (1 samples, 0.39%)</title><rect x="693.4" y="931.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="696.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.39%)</title><rect x="693.4" y="915.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="696.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.39%)</title><rect x="693.4" y="899.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="696.4" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.39%)</title><rect x="693.4" y="883.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="696.4" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.39%)</title><rect x="693.4" y="867.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 1.54%)</title><rect x="698.0" y="1043.0" width="18.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.54%)</title><rect x="698.0" y="1027.0" width="18.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.54%)</title><rect x="698.0" y="1011.0" width="18.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="701.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.54%)</title><rect x="698.0" y="995.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="701.0" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="711.6" y="979.0" width="4.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="714.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="711.6" y="963.0" width="4.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="714.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.16%)</title><rect x="716.2" y="1043.0" width="13.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.39%)</title><rect x="725.3" y="1027.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="728.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.39%)</title><rect x="725.3" y="1011.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="728.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.39%)</title><rect x="725.3" y="995.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.39%)</title><rect x="725.3" y="979.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.39%)</title><rect x="725.3" y="963.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="728.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.77%)</title><rect x="729.8" y="1091.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="732.8" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.39%)</title><rect x="729.8" y="1075.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.8" y="1086.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.39%)</title><rect x="729.8" y="1059.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="732.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.39%)</title><rect x="734.4" y="1075.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="737.4" y="1086.0"></text>
</g>
<g>
<title>start_thread (99 samples, 38.22%)</title><rect x="739.0" y="1091.0" width="451.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="742.0" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 38.22%)</title><rect x="739.0" y="1075.0" width="451.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="742.0" y="1086.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.39%)</title><rect x="739.0" y="1059.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.0" y="1070.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.39%)</title><rect x="739.0" y="1043.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="742.0" y="1054.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.39%)</title><rect x="739.0" y="1027.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="742.0" y="1038.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.39%)</title><rect x="739.0" y="1011.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="742.0" y="1022.0"></text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 3.86%)</title><rect x="743.5" y="1059.0" width="45.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.5" y="1070.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 3.86%)</title><rect x="743.5" y="1043.0" width="45.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.5" y="1054.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 3.47%)</title><rect x="743.5" y="1027.0" width="41.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.5" y="1038.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.39%)</title><rect x="743.5" y="1011.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="746.5" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 2.70%)</title><rect x="748.1" y="1011.0" width="31.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="751.1" y="1022.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.77%)</title><rect x="766.3" y="995.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="769.3" y="1006.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.39%)</title><rect x="770.8" y="979.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.8" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.39%)</title><rect x="775.4" y="995.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="778.4" y="1006.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.39%)</title><rect x="780.0" y="1011.0" width="4.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="783.0" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.39%)</title><rect x="784.5" y="1027.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="787.5" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.39%)</title><rect x="784.5" y="1011.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.39%)</title><rect x="784.5" y="995.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="787.5" y="1006.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.39%)</title><rect x="784.5" y="979.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.5" y="990.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.39%)</title><rect x="784.5" y="963.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.5" y="974.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.39%)</title><rect x="784.5" y="947.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.5" y="958.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.39%)</title><rect x="784.5" y="931.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="787.5" y="942.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.39%)</title><rect x="784.5" y="915.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="787.5" y="926.0"></text>
</g>
<g>
<title>JavaThread::run() (88 samples, 33.98%)</title><rect x="789.1" y="1059.0" width="400.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="792.1" y="1070.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 33.98%)</title><rect x="789.1" y="1043.0" width="400.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="792.1" y="1054.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (87 samples, 33.59%)</title><rect x="789.1" y="1027.0" width="396.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="792.1" y="1038.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (87 samples, 33.59%)</title><rect x="789.1" y="1011.0" width="396.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="792.1" y="1022.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (84 samples, 32.43%)</title><rect x="789.1" y="995.0" width="382.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="792.1" y="1006.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (84 samples, 32.43%)</title><rect x="789.1" y="979.0" width="382.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="792.1" y="990.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (53 samples, 20.46%)</title><rect x="789.1" y="963.0" width="241.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="792.1" y="974.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.16%)</title><rect x="789.1" y="947.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="792.1" y="958.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.77%)</title><rect x="789.1" y="931.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="792.1" y="942.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.39%)</title><rect x="793.6" y="915.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="796.6" y="926.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.39%)</title><rect x="798.2" y="931.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="801.2" y="942.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.39%)</title><rect x="798.2" y="915.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="801.2" y="926.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.39%)</title><rect x="798.2" y="899.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="801.2" y="910.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.39%)</title><rect x="798.2" y="883.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.2" y="894.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.39%)</title><rect x="798.2" y="867.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.2" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.77%)</title><rect x="802.7" y="947.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.7" y="958.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.39%)</title><rect x="802.7" y="931.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="805.7" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.39%)</title><rect x="802.7" y="915.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="805.7" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.39%)</title><rect x="802.7" y="899.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.7" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.39%)</title><rect x="807.3" y="931.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="810.3" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.39%)</title><rect x="807.3" y="915.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.3" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.93%)</title><rect x="811.9" y="947.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="814.9" y="958.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (3 samples, 1.16%)</title><rect x="811.9" y="931.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="814.9" y="942.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.39%)</title><rect x="821.0" y="915.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="824.0" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.77%)</title><rect x="825.5" y="931.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="828.5" y="942.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.39%)</title><rect x="825.5" y="915.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="828.5" y="926.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.39%)</title><rect x="830.1" y="915.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.1" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.39%)</title><rect x="830.1" y="899.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.1" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.39%)</title><rect x="830.1" y="883.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="833.1" y="894.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.39%)</title><rect x="830.1" y="867.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.1" y="878.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.39%)</title><rect x="830.1" y="851.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.1" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.39%)</title><rect x="834.6" y="947.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="837.6" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.39%)</title><rect x="834.6" y="931.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="837.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.39%)</title><rect x="834.6" y="915.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="837.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 16.22%)</title><rect x="839.2" y="947.0" width="191.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="842.2" y="958.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.39%)</title><rect x="848.3" y="931.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="851.3" y="942.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.77%)</title><rect x="852.9" y="931.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="855.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 1.93%)</title><rect x="862.0" y="931.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.0" y="942.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.77%)</title><rect x="866.5" y="915.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.39%)</title><rect x="875.6" y="915.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="878.6" y="926.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.39%)</title><rect x="875.6" y="899.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="878.6" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.39%)</title><rect x="880.2" y="915.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="883.2" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="880.2" y="899.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="883.2" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.16%)</title><rect x="884.7" y="931.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="887.7" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.77%)</title><rect x="884.7" y="915.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="887.7" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.39%)</title><rect x="893.9" y="915.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="896.9" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="893.9" y="899.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="896.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.16%)</title><rect x="898.4" y="931.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.47%)</title><rect x="912.1" y="931.0" width="41.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.1" y="942.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.16%)</title><rect x="921.2" y="915.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="924.2" y="926.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.39%)</title><rect x="934.9" y="915.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.39%)</title><rect x="939.4" y="915.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="942.4" y="926.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.39%)</title><rect x="944.0" y="915.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.0" y="926.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.39%)</title><rect x="948.5" y="915.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.54%)</title><rect x="953.1" y="931.0" width="18.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.1" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 1.16%)</title><rect x="957.6" y="915.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.39%)</title><rect x="971.3" y="931.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.39%)</title><rect x="971.3" y="915.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.3" y="926.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.77%)</title><rect x="975.9" y="931.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.9" y="942.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.39%)</title><rect x="975.9" y="915.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.9" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.39%)</title><rect x="980.4" y="915.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.4" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.39%)</title><rect x="980.4" y="899.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.4" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.77%)</title><rect x="985.0" y="931.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.0" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.77%)</title><rect x="985.0" y="915.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.0" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.93%)</title><rect x="994.1" y="931.0" width="22.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.1" y="942.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.39%)</title><rect x="1007.8" y="915.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.8" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.39%)</title><rect x="1012.3" y="915.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1015.3" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="1012.3" y="899.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.3" y="910.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.39%)</title><rect x="1016.9" y="931.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.9" y="942.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.39%)</title><rect x="1021.4" y="931.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.4" y="942.0"></text>
</g>
<g>
<title>os::free(void*, MemoryType) (1 samples, 0.39%)</title><rect x="1026.0" y="931.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.0" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 7.34%)</title><rect x="1030.5" y="963.0" width="86.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.5" y="974.0">Compile::O..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.39%)</title><rect x="1030.5" y="947.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.5" y="958.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.39%)</title><rect x="1030.5" y="931.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.5" y="942.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.77%)</title><rect x="1035.1" y="947.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1038.1" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.39%)</title><rect x="1039.7" y="931.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.7" y="942.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.39%)</title><rect x="1039.7" y="915.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.7" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.39%)</title><rect x="1039.7" y="899.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1042.7" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1039.7" y="883.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.7" y="894.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.39%)</title><rect x="1039.7" y="867.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.7" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.39%)</title><rect x="1044.2" y="947.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 4.25%)</title><rect x="1048.8" y="947.0" width="50.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.8" y="958.0">Phase..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.39%)</title><rect x="1048.8" y="931.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.16%)</title><rect x="1053.3" y="931.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.3" y="942.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.39%)</title><rect x="1062.4" y="915.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.39%)</title><rect x="1067.0" y="931.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.54%)</title><rect x="1071.5" y="931.0" width="18.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.16%)</title><rect x="1076.1" y="915.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.1" y="926.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.39%)</title><rect x="1076.1" y="899.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.77%)</title><rect x="1080.7" y="899.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.77%)</title><rect x="1080.7" y="883.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.77%)</title><rect x="1080.7" y="867.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.77%)</title><rect x="1089.8" y="931.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.39%)</title><rect x="1089.8" y="915.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.39%)</title><rect x="1089.8" y="899.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.39%)</title><rect x="1089.8" y="883.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.39%)</title><rect x="1094.3" y="915.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.39%)</title><rect x="1094.3" y="899.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.3" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.54%)</title><rect x="1098.9" y="947.0" width="18.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.54%)</title><rect x="1098.9" y="931.0" width="18.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.9" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.77%)</title><rect x="1098.9" y="915.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.9" y="926.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.39%)</title><rect x="1103.4" y="899.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.4" y="910.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.39%)</title><rect x="1103.4" y="883.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.4" y="894.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.77%)</title><rect x="1108.0" y="915.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.0" y="926.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.77%)</title><rect x="1108.0" y="899.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.77%)</title><rect x="1108.0" y="883.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.77%)</title><rect x="1108.0" y="867.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.77%)</title><rect x="1108.0" y="851.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.77%)</title><rect x="1108.0" y="835.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.39%)</title><rect x="1108.0" y="819.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.39%)</title><rect x="1108.0" y="803.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.39%)</title><rect x="1108.0" y="787.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.39%)</title><rect x="1108.0" y="771.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.39%)</title><rect x="1108.0" y="755.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.39%)</title><rect x="1108.0" y="739.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.0" y="750.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.39%)</title><rect x="1108.0" y="723.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.0" y="734.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.39%)</title><rect x="1108.0" y="707.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.0" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.39%)</title><rect x="1112.5" y="819.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.5" y="830.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.39%)</title><rect x="1112.5" y="803.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 4.63%)</title><rect x="1117.1" y="963.0" width="54.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.1" y="974.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 4.63%)</title><rect x="1117.1" y="947.0" width="54.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.1" y="958.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 4.25%)</title><rect x="1117.1" y="931.0" width="50.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.1" y="942.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 4.25%)</title><rect x="1117.1" y="915.0" width="50.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.1" y="926.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 4.25%)</title><rect x="1117.1" y="899.0" width="50.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.1" y="910.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 4.25%)</title><rect x="1117.1" y="883.0" width="50.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.1" y="894.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.39%)</title><rect x="1117.1" y="867.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.1" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.39%)</title><rect x="1117.1" y="851.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.1" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.39%)</title><rect x="1117.1" y="835.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.1" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.39%)</title><rect x="1117.1" y="819.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.1" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.39%)</title><rect x="1117.1" y="803.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.1" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.39%)</title><rect x="1117.1" y="787.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.09%)</title><rect x="1121.7" y="867.0" width="36.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.7" y="878.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.09%)</title><rect x="1121.7" y="851.0" width="36.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.7" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.09%)</title><rect x="1121.7" y="835.0" width="36.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.7" y="846.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.09%)</title><rect x="1121.7" y="819.0" width="36.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.7" y="830.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.09%)</title><rect x="1121.7" y="803.0" width="36.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.7" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.09%)</title><rect x="1121.7" y="787.0" width="36.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.7" y="798.0">Par..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1121.7" y="771.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.39%)</title><rect x="1121.7" y="755.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.7" y="766.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.39%)</title><rect x="1121.7" y="739.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.32%)</title><rect x="1126.2" y="771.0" width="27.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.2" y="782.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.32%)</title><rect x="1126.2" y="755.0" width="27.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.2" y="766.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.39%)</title><rect x="1126.2" y="739.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.39%)</title><rect x="1126.2" y="723.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.2" y="734.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.39%)</title><rect x="1126.2" y="707.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.2" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1126.2" y="691.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.2" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.39%)</title><rect x="1126.2" y="675.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.2" y="686.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.39%)</title><rect x="1126.2" y="659.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.2" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.39%)</title><rect x="1126.2" y="643.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.2" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.39%)</title><rect x="1126.2" y="627.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.93%)</title><rect x="1130.8" y="739.0" width="22.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.93%)</title><rect x="1130.8" y="723.0" width="22.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.8" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.93%)</title><rect x="1130.8" y="707.0" width="22.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.8" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.93%)</title><rect x="1130.8" y="691.0" width="22.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="702.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.93%)</title><rect x="1130.8" y="675.0" width="22.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.8" y="686.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.93%)</title><rect x="1130.8" y="659.0" width="22.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.8" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.93%)</title><rect x="1130.8" y="643.0" width="22.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.8" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.93%)</title><rect x="1130.8" y="627.0" width="22.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.8" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.39%)</title><rect x="1130.8" y="611.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="622.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.39%)</title><rect x="1130.8" y="595.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="606.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.39%)</title><rect x="1130.8" y="579.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="590.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.39%)</title><rect x="1130.8" y="563.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.8" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.39%)</title><rect x="1130.8" y="547.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.8" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1130.8" y="531.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.39%)</title><rect x="1130.8" y="515.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.8" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.39%)</title><rect x="1130.8" y="499.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.54%)</title><rect x="1135.3" y="611.0" width="18.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.54%)</title><rect x="1135.3" y="595.0" width="18.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.54%)</title><rect x="1135.3" y="579.0" width="18.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.54%)</title><rect x="1135.3" y="563.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.54%)</title><rect x="1135.3" y="547.0" width="18.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.54%)</title><rect x="1135.3" y="531.0" width="18.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.54%)</title><rect x="1135.3" y="515.0" width="18.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.16%)</title><rect x="1135.3" y="499.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.16%)</title><rect x="1135.3" y="483.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.16%)</title><rect x="1135.3" y="467.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.16%)</title><rect x="1135.3" y="451.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.16%)</title><rect x="1135.3" y="435.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.16%)</title><rect x="1135.3" y="419.0" width="13.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.16%)</title><rect x="1135.3" y="403.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.16%)</title><rect x="1135.3" y="387.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.16%)</title><rect x="1135.3" y="371.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.16%)</title><rect x="1135.3" y="355.0" width="13.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.16%)</title><rect x="1135.3" y="339.0" width="13.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.16%)</title><rect x="1135.3" y="323.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.3" y="334.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.39%)</title><rect x="1135.3" y="307.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.3" y="318.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.39%)</title><rect x="1135.3" y="291.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.3" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1135.3" y="275.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="286.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1135.3" y="259.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.3" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1135.3" y="243.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.77%)</title><rect x="1139.9" y="307.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1139.9" y="291.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1139.9" y="275.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1139.9" y="259.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1139.9" y="243.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1139.9" y="227.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1139.9" y="211.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.9" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1139.9" y="195.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.9" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1139.9" y="179.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1139.9" y="163.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1139.9" y="147.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1139.9" y="131.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1139.9" y="115.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.9" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1139.9" y="99.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.9" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1139.9" y="83.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.39%)</title><rect x="1139.9" y="67.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.9" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.39%)</title><rect x="1139.9" y="51.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.9" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.39%)</title><rect x="1139.9" y="35.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1144.4" y="291.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="302.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.39%)</title><rect x="1144.4" y="275.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.4" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1144.4" y="259.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.4" y="270.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.39%)</title><rect x="1144.4" y="243.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.4" y="254.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.39%)</title><rect x="1144.4" y="227.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="238.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.39%)</title><rect x="1144.4" y="211.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.4" y="222.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1144.4" y="195.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.4" y="206.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.39%)</title><rect x="1144.4" y="179.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.39%)</title><rect x="1149.0" y="499.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.39%)</title><rect x="1149.0" y="483.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.39%)</title><rect x="1149.0" y="467.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.0" y="478.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.39%)</title><rect x="1149.0" y="451.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.0" y="462.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.39%)</title><rect x="1149.0" y="435.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.0" y="446.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.39%)</title><rect x="1149.0" y="419.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.0" y="430.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.39%)</title><rect x="1149.0" y="403.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.0" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.6" y="771.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.6" y="755.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1153.6" y="739.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1153.6" y="723.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1153.6" y="707.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1153.6" y="691.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1153.6" y="675.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.6" y="659.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1153.6" y="643.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1153.6" y="627.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1153.6" y="611.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1153.6" y="595.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1153.6" y="579.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1153.6" y="563.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1153.6" y="547.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1153.6" y="531.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1153.6" y="515.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1153.6" y="499.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.39%)</title><rect x="1153.6" y="483.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.6" y="494.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.39%)</title><rect x="1153.6" y="467.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="478.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.39%)</title><rect x="1153.6" y="451.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="462.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.39%)</title><rect x="1153.6" y="435.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.6" y="446.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.39%)</title><rect x="1153.6" y="419.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.77%)</title><rect x="1158.1" y="867.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.77%)</title><rect x="1158.1" y="851.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.77%)</title><rect x="1158.1" y="835.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.77%)</title><rect x="1158.1" y="819.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.77%)</title><rect x="1158.1" y="803.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.77%)</title><rect x="1158.1" y="787.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.77%)</title><rect x="1158.1" y="771.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.77%)</title><rect x="1158.1" y="755.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.77%)</title><rect x="1158.1" y="739.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.77%)</title><rect x="1158.1" y="723.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.77%)</title><rect x="1158.1" y="707.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.77%)</title><rect x="1158.1" y="691.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.77%)</title><rect x="1158.1" y="675.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.77%)</title><rect x="1158.1" y="659.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.77%)</title><rect x="1158.1" y="643.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.77%)</title><rect x="1158.1" y="627.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.77%)</title><rect x="1158.1" y="611.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.77%)</title><rect x="1158.1" y="595.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.77%)</title><rect x="1158.1" y="579.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.77%)</title><rect x="1158.1" y="563.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.77%)</title><rect x="1158.1" y="547.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.77%)</title><rect x="1158.1" y="531.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.77%)</title><rect x="1158.1" y="515.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.77%)</title><rect x="1158.1" y="499.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.77%)</title><rect x="1158.1" y="483.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.1" y="494.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.39%)</title><rect x="1158.1" y="467.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.1" y="478.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.39%)</title><rect x="1158.1" y="451.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.1" y="462.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.39%)</title><rect x="1158.1" y="435.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.1" y="446.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.39%)</title><rect x="1158.1" y="419.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.1" y="430.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.39%)</title><rect x="1158.1" y="403.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1162.7" y="467.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1162.7" y="451.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1162.7" y="435.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1162.7" y="419.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1162.7" y="403.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1162.7" y="387.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1162.7" y="371.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1162.7" y="355.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1162.7" y="339.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1162.7" y="323.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1162.7" y="307.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.7" y="318.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.39%)</title><rect x="1162.7" y="291.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="302.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.39%)</title><rect x="1167.2" y="931.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="942.0"></text>
</g>
<g>
<title>Parse::fetch_interpreter_state(int, BasicType, Node*, Node*) (1 samples, 0.39%)</title><rect x="1167.2" y="915.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.39%)</title><rect x="1167.2" y="899.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="910.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.39%)</title><rect x="1167.2" y="883.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="894.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.39%)</title><rect x="1167.2" y="867.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="878.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.39%)</title><rect x="1167.2" y="851.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1167.2" y="835.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.2" y="846.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.16%)</title><rect x="1171.8" y="995.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.16%)</title><rect x="1171.8" y="979.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.16%)</title><rect x="1171.8" y="963.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.16%)</title><rect x="1171.8" y="947.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="958.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.77%)</title><rect x="1171.8" y="931.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="942.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.39%)</title><rect x="1171.8" y="915.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="926.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.39%)</title><rect x="1171.8" y="899.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.39%)</title><rect x="1171.8" y="883.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.39%)</title><rect x="1171.8" y="867.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.39%)</title><rect x="1171.8" y="851.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.39%)</title><rect x="1171.8" y="835.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1171.8" y="819.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1171.8" y="803.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.39%)</title><rect x="1171.8" y="787.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.39%)</title><rect x="1171.8" y="771.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.39%)</title><rect x="1171.8" y="755.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1171.8" y="739.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.39%)</title><rect x="1171.8" y="723.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.39%)</title><rect x="1171.8" y="707.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.39%)</title><rect x="1171.8" y="691.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.39%)</title><rect x="1171.8" y="675.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.39%)</title><rect x="1171.8" y="659.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1171.8" y="643.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1171.8" y="627.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.39%)</title><rect x="1171.8" y="611.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.39%)</title><rect x="1176.3" y="915.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="926.0"></text>
</g>
<g>
<title>non-virtual thunk to UseCountComputer::block_do(BlockBegin*) (1 samples, 0.39%)</title><rect x="1176.3" y="899.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.39%)</title><rect x="1180.9" y="931.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="942.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.39%)</title><rect x="1180.9" y="915.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="926.0"></text>
</g>
<g>
<title>CompilationResourceObj::operator new(unsigned long) (1 samples, 0.39%)</title><rect x="1180.9" y="899.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="910.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.39%)</title><rect x="1185.4" y="1027.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="1038.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.39%)</title><rect x="1185.4" y="1011.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.4" y="1022.0"></text>
</g>
<g>
<title>_dl_fixup (1 samples, 0.39%)</title><rect x="1185.4" y="995.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1188.4" y="1006.0"></text>
</g>
<g>
<title>_dl_lookup_symbol_x (1 samples, 0.39%)</title><rect x="1185.4" y="979.0" width="4.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1188.4" y="990.0"></text>
</g>
</g>
</svg>
