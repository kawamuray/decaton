<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (1,099 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (265 samples, 24.11%)</title><rect x="10.0" y="1187.0" width="284.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (264 samples, 24.02%)</title><rect x="11.1" y="1171.0" width="283.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1182.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.36%)</title><rect x="11.1" y="1155.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.36%)</title><rect x="11.1" y="1139.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1952376939.accept (4 samples, 0.36%)</title><rect x="11.1" y="1123.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.36%)</title><rect x="11.1" y="1107.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.36%)</title><rect x="11.1" y="1091.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.27%)</title><rect x="12.1" y="1075.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.18%)</title><rect x="15.4" y="1155.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.18%)</title><rect x="15.4" y="1139.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="15.4" y="1123.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="15.4" y="1107.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="15.4" y="1091.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="16.4" y="1091.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="16.4" y="1075.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="16.4" y="1059.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="16.4" y="1043.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="16.4" y="1027.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="16.4" y="1011.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/403011408.test (1 samples, 0.09%)</title><rect x="16.4" y="995.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.18%)</title><rect x="17.5" y="1155.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.18%)</title><rect x="17.5" y="1139.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="17.5" y="1123.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.09%)</title><rect x="17.5" y="1107.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="17.5" y="1091.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="18.6" y="1123.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="18.6" y="1107.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="18.6" y="1091.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="18.6" y="1075.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="18.6" y="1059.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="18.6" y="1043.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="18.6" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="18.6" y="1011.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/487517540.test (1 samples, 0.09%)</title><rect x="18.6" y="995.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (199 samples, 18.11%)</title><rect x="19.7" y="1155.0" width="213.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.7" y="1166.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1218505439.accept (192 samples, 17.47%)</title><rect x="20.7" y="1139.0" width="206.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.7" y="1150.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (192 samples, 17.47%)</title><rect x="20.7" y="1123.0" width="206.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.7" y="1134.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (158 samples, 14.38%)</title><rect x="20.7" y="1107.0" width="169.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="1118.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (158 samples, 14.38%)</title><rect x="20.7" y="1091.0" width="169.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.7" y="1102.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (158 samples, 14.38%)</title><rect x="20.7" y="1075.0" width="169.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="1086.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (158 samples, 14.38%)</title><rect x="20.7" y="1059.0" width="169.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.7" y="1070.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (158 samples, 14.38%)</title><rect x="20.7" y="1043.0" width="169.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.7" y="1054.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="34.7" y="1027.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (143 samples, 13.01%)</title><rect x="35.8" y="1027.0" width="153.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.8" y="1038.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 10.46%)</title><rect x="35.8" y="1011.0" width="123.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.8" y="1022.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (115 samples, 10.46%)</title><rect x="35.8" y="995.0" width="123.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.8" y="1006.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (115 samples, 10.46%)</title><rect x="35.8" y="979.0" width="123.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.8" y="990.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (115 samples, 10.46%)</title><rect x="35.8" y="963.0" width="123.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.8" y="974.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (115 samples, 10.46%)</title><rect x="35.8" y="947.0" width="123.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.8" y="958.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 6.37%)</title><rect x="84.1" y="931.0" width="75.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.1" y="942.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (62 samples, 5.64%)</title><rect x="85.2" y="915.0" width="66.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="88.2" y="926.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (5 samples, 0.45%)</title><rect x="88.4" y="899.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="91.4" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.64%)</title><rect x="93.7" y="899.0" width="43.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="96.7" y="910.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="136.7" y="899.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="139.7" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.09%)</title><rect x="138.8" y="899.0" width="12.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="141.8" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.45%)</title><rect x="151.7" y="915.0" width="5.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="154.7" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="157.1" y="915.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="160.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 2.55%)</title><rect x="159.2" y="1011.0" width="30.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.2" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 2.55%)</title><rect x="159.2" y="995.0" width="30.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.2" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 2.55%)</title><rect x="159.2" y="979.0" width="30.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.2" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 2.55%)</title><rect x="159.2" y="963.0" width="30.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.2" y="974.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="189.3" y="1027.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="192.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (13 samples, 1.18%)</title><rect x="190.4" y="1107.0" width="13.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (9 samples, 0.82%)</title><rect x="194.7" y="1091.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.45%)</title><rect x="204.3" y="1107.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.45%)</title><rect x="204.3" y="1091.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.45%)</title><rect x="204.3" y="1075.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (16 samples, 1.46%)</title><rect x="209.7" y="1107.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 1.00%)</title><rect x="212.9" y="1091.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 1.00%)</title><rect x="212.9" y="1075.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.64%)</title><rect x="212.9" y="1059.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.64%)</title><rect x="212.9" y="1043.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.64%)</title><rect x="212.9" y="1027.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.9" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="216.2" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="219.2" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="216.2" y="995.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="219.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="216.2" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="219.2" y="990.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="216.2" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="219.2" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="217.2" y="1011.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="220.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.27%)</title><rect x="220.4" y="1059.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="223.7" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.7" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="224.7" y="1091.0" width="2.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="227.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="226.9" y="1139.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="226.9" y="1123.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="226.9" y="1107.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="226.9" y="1091.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="226.9" y="1075.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.36%)</title><rect x="228.0" y="1139.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.36%)</title><rect x="228.0" y="1123.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.36%)</title><rect x="228.0" y="1107.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.36%)</title><rect x="228.0" y="1091.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.0" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.36%)</title><rect x="228.0" y="1075.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="232.3" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="232.3" y="1123.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 5.19%)</title><rect x="233.3" y="1155.0" width="61.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.3" y="1166.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 5.19%)</title><rect x="233.3" y="1139.0" width="61.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.3" y="1150.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (39 samples, 3.55%)</title><rect x="233.3" y="1123.0" width="41.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.3" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (39 samples, 3.55%)</title><rect x="233.3" y="1107.0" width="41.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.3" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (38 samples, 3.46%)</title><rect x="233.3" y="1091.0" width="40.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.3" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 3.18%)</title><rect x="233.3" y="1075.0" width="37.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.3" y="1086.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 3.18%)</title><rect x="233.3" y="1059.0" width="37.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.3" y="1070.0">org..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="234.4" y="1043.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.4" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="234.4" y="1027.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.4" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="234.4" y="1011.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.4" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="234.4" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="234.4" y="979.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (21 samples, 1.91%)</title><rect x="235.5" y="1043.0" width="22.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.91%)</title><rect x="247.3" y="1027.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.91%)</title><rect x="247.3" y="1011.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.91%)</title><rect x="247.3" y="995.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.91%)</title><rect x="247.3" y="979.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.91%)</title><rect x="247.3" y="963.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.91%)</title><rect x="247.3" y="947.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.91%)</title><rect x="247.3" y="931.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.09%)</title><rect x="258.0" y="1043.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 1.00%)</title><rect x="259.1" y="1027.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.73%)</title><rect x="261.2" y="1011.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.73%)</title><rect x="261.2" y="995.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.2" y="1006.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="268.8" y="979.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="271.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.09%)</title><rect x="269.8" y="1011.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="270.9" y="1075.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="270.9" y="1059.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="270.9" y="1043.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="270.9" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="270.9" y="1011.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="270.9" y="995.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.0" y="1043.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.0" y="1027.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.0" y="1011.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="272.0" y="995.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.09%)</title><rect x="272.0" y="979.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="273.1" y="1075.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="273.1" y="1059.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.1" y="1043.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.1" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.1" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.09%)</title><rect x="274.1" y="1091.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$255/53476486.iterator (1 samples, 0.09%)</title><rect x="274.1" y="1075.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.release (1 samples, 0.09%)</title><rect x="275.2" y="1123.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 0.36%)</title><rect x="276.3" y="1123.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.36%)</title><rect x="276.3" y="1107.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.18%)</title><rect x="276.3" y="1091.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="276.3" y="1075.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1439321916.accept (1 samples, 0.09%)</title><rect x="276.3" y="1059.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="276.3" y="1043.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="276.3" y="1027.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="276.3" y="1011.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="276.3" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="276.3" y="979.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="277.4" y="1075.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="277.4" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="277.4" y="1043.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="277.4" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="277.4" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="277.4" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="277.4" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="277.4" y="963.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.18%)</title><rect x="278.4" y="1091.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="278.4" y="1075.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="278.4" y="1059.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="279.5" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="279.5" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="279.5" y="1011.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="279.5" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="279.5" y="979.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="279.5" y="963.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.5" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="279.5" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.09%)</title><rect x="280.6" y="1123.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.64%)</title><rect x="281.6" y="1123.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.64%)</title><rect x="281.6" y="1107.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.09%)</title><rect x="281.6" y="1091.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.09%)</title><rect x="281.6" y="1075.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.09%)</title><rect x="281.6" y="1059.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.55%)</title><rect x="282.7" y="1091.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="282.7" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="282.7" y="1059.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.09%)</title><rect x="282.7" y="1043.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="282.7" y="1027.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.27%)</title><rect x="283.8" y="1075.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="283.8" y="1059.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="283.8" y="1043.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="283.8" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="286.8" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="283.8" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="286.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="284.9" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="284.9" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="284.9" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="284.9" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="284.9" y="995.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="284.9" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.09%)</title><rect x="284.9" y="963.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.9" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.09%)</title><rect x="284.9" y="947.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.9" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.09%)</title><rect x="284.9" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="285.9" y="1059.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="285.9" y="1043.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="285.9" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="285.9" y="1011.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="285.9" y="995.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="285.9" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.9" y="990.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="285.9" y="963.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="288.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.18%)</title><rect x="287.0" y="1075.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 0.18%)</title><rect x="287.0" y="1059.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.18%)</title><rect x="287.0" y="1043.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.0" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.18%)</title><rect x="287.0" y="1027.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.0" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (2 samples, 0.18%)</title><rect x="287.0" y="1011.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (2 samples, 0.18%)</title><rect x="287.0" y="995.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.0" y="1006.0"></text>
</g>
<g>
<title>__GI_epoll_wait (2 samples, 0.18%)</title><rect x="287.0" y="979.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="290.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.45%)</title><rect x="289.2" y="1123.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.45%)</title><rect x="289.2" y="1107.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="290.2" y="1091.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/815766703.accept (1 samples, 0.09%)</title><rect x="290.2" y="1075.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="290.2" y="1059.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="290.2" y="1043.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="291.3" y="1091.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="291.3" y="1075.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="291.3" y="1059.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="292.4" y="1091.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="292.4" y="1075.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="293.5" y="1091.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="293.5" y="1075.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.5" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="293.5" y="1059.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="293.5" y="1043.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="293.5" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="293.5" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (685 samples, 62.33%)</title><rect x="294.5" y="1187.0" width="735.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.5" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (684 samples, 62.24%)</title><rect x="295.6" y="1171.0" width="734.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.6" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (684 samples, 62.24%)</title><rect x="295.6" y="1155.0" width="734.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.6" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/194043057.run (469 samples, 42.68%)</title><rect x="299.9" y="1139.0" width="503.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.9" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1940..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (469 samples, 42.68%)</title><rect x="299.9" y="1123.0" width="503.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.9" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (467 samples, 42.49%)</title><rect x="302.0" y="1107.0" width="501.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.0" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (457 samples, 41.58%)</title><rect x="302.0" y="1091.0" width="490.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.0" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="316.0" y="1075.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="319.0" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="316.0" y="1059.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="319.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="317.1" y="1075.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="320.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.09%)</title><rect x="318.2" y="1075.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.09%)</title><rect x="318.2" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/512054577.get (1 samples, 0.09%)</title><rect x="318.2" y="1043.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="318.2" y="1027.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="318.2" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="321.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (145 samples, 13.19%)</title><rect x="319.2" y="1075.0" width="155.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.2" y="1086.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (145 samples, 13.19%)</title><rect x="319.2" y="1059.0" width="155.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.2" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (145 samples, 13.19%)</title><rect x="319.2" y="1043.0" width="155.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.2" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="319.2" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="322.2" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="319.2" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="322.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="319.2" y="995.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="322.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="319.2" y="979.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="322.2" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="319.2" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="322.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 13.10%)</title><rect x="320.3" y="1027.0" width="154.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.3" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 13.10%)</title><rect x="320.3" y="1011.0" width="154.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.3" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (144 samples, 13.10%)</title><rect x="320.3" y="995.0" width="154.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.3" y="1006.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (51 samples, 4.64%)</title><rect x="320.3" y="979.0" width="54.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.3" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (25 samples, 2.27%)</title><rect x="320.3" y="963.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.3" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (25 samples, 2.27%)</title><rect x="320.3" y="947.0" width="26.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.3" y="958.0">c..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="330.0" y="931.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="333.0" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.82%)</title><rect x="332.1" y="931.0" width="9.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="335.1" y="942.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.64%)</title><rect x="334.3" y="915.0" width="7.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="337.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="341.8" y="931.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.36%)</title><rect x="342.8" y="931.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.36%)</title><rect x="342.8" y="915.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.36%)</title><rect x="342.8" y="899.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.36%)</title><rect x="342.8" y="883.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.37%)</title><rect x="347.1" y="963.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.1" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (4 samples, 0.36%)</title><rect x="347.1" y="947.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="350.4" y="931.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 2.00%)</title><rect x="351.4" y="947.0" width="23.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.4" y="958.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="356.8" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="359.8" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="356.8" y="915.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="359.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="356.8" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="359.8" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="359.8" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="867.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.8" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="356.8" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="359.8" y="862.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="356.8" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="359.8" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.8" y="830.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="356.8" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="359.8" y="814.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="356.8" y="787.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="359.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.18%)</title><rect x="357.9" y="931.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="359.0" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.36%)</title><rect x="360.0" y="931.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.36%)</title><rect x="360.0" y="915.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.18%)</title><rect x="360.0" y="899.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.18%)</title><rect x="360.0" y="883.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="363.0" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.18%)</title><rect x="360.0" y="867.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="363.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="360.0" y="851.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="363.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="360.0" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="363.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="360.0" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="363.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="361.1" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="364.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.18%)</title><rect x="362.2" y="899.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 0.82%)</title><rect x="364.3" y="931.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="372.9" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="372.9" y="899.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="375.9" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="372.9" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="375.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="372.9" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="375.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="372.9" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="375.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="372.9" y="835.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="375.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="374.0" y="931.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (85 samples, 7.73%)</title><rect x="375.1" y="979.0" width="91.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.1" y="990.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.55%)</title><rect x="375.1" y="963.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.55%)</title><rect x="375.1" y="947.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.27%)</title><rect x="377.2" y="931.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.27%)</title><rect x="377.2" y="915.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.09%)</title><rect x="380.4" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="383.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.55%)</title><rect x="381.5" y="963.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.55%)</title><rect x="381.5" y="947.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.27%)</title><rect x="382.6" y="931.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.18%)</title><rect x="385.8" y="931.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.27%)</title><rect x="387.9" y="963.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="387.9" y="947.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="387.9" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="387.9" y="915.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.09%)</title><rect x="389.0" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.09%)</title><rect x="389.0" y="915.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.09%)</title><rect x="389.0" y="899.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="392.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="389.0" y="883.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="390.1" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="393.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.64%)</title><rect x="391.2" y="963.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="393.3" y="947.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.36%)</title><rect x="394.4" y="947.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (63 samples, 5.73%)</title><rect x="398.7" y="963.0" width="67.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.7" y="974.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.82%)</title><rect x="399.8" y="947.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.8" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.18%)</title><rect x="403.0" y="931.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.82%)</title><rect x="405.1" y="931.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.82%)</title><rect x="405.1" y="915.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.82%)</title><rect x="405.1" y="899.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.18%)</title><rect x="412.6" y="883.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.18%)</title><rect x="412.6" y="867.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="414.8" y="931.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="414.8" y="915.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.36%)</title><rect x="416.9" y="931.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (42 samples, 3.82%)</title><rect x="421.2" y="947.0" width="45.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.2" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 3.82%)</title><rect x="421.2" y="931.0" width="45.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.2" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 3.82%)</title><rect x="421.2" y="915.0" width="45.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.2" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.55%)</title><rect x="430.9" y="899.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.18%)</title><rect x="435.2" y="883.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.27%)</title><rect x="437.3" y="883.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.27%)</title><rect x="437.3" y="867.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.27%)</title><rect x="437.3" y="851.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="437.3" y="835.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="438.4" y="835.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.27%)</title><rect x="440.6" y="883.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.27%)</title><rect x="440.6" y="867.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="441.6" y="851.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (4 samples, 0.36%)</title><rect x="443.8" y="883.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="448.1" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="451.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.73%)</title><rect x="449.1" y="899.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="452.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.55%)</title><rect x="451.3" y="883.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.55%)</title><rect x="451.3" y="867.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.55%)</title><rect x="451.3" y="851.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.55%)</title><rect x="451.3" y="835.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="457.7" y="899.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.18%)</title><rect x="458.8" y="899.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.18%)</title><rect x="458.8" y="883.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="461.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.18%)</title><rect x="458.8" y="867.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.18%)</title><rect x="458.8" y="851.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.8" y="862.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.18%)</title><rect x="458.8" y="835.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.8" y="846.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.18%)</title><rect x="458.8" y="819.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.8" y="830.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (2 samples, 0.18%)</title><rect x="458.8" y="803.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.27%)</title><rect x="461.0" y="899.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="461.0" y="883.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="464.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="461.0" y="867.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="462.0" y="851.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="464.2" y="899.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="467.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.73%)</title><rect x="466.3" y="979.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="469.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.73%)</title><rect x="466.3" y="963.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.73%)</title><rect x="466.3" y="947.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.09%)</title><rect x="467.4" y="931.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.27%)</title><rect x="468.5" y="931.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="471.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.27%)</title><rect x="471.7" y="931.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.27%)</title><rect x="471.7" y="915.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (279 samples, 25.39%)</title><rect x="474.9" y="1075.0" width="299.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="477.9" y="1086.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 4.46%)</title><rect x="476.0" y="1059.0" width="52.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.0" y="1070.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="476.0" y="1043.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.0" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (48 samples, 4.37%)</title><rect x="477.1" y="1043.0" width="51.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.1" y="1054.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 4.19%)</title><rect x="479.2" y="1027.0" width="49.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.2" y="1038.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.55%)</title><rect x="482.4" y="1011.0" width="18.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="485.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (17 samples, 1.55%)</title><rect x="482.4" y="995.0" width="18.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.55%)</title><rect x="482.4" y="979.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.55%)</title><rect x="482.4" y="963.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.09%)</title><rect x="500.7" y="1011.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (12 samples, 1.09%)</title><rect x="500.7" y="995.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (12 samples, 1.09%)</title><rect x="500.7" y="979.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.36%)</title><rect x="509.3" y="963.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 1.27%)</title><rect x="513.6" y="1011.0" width="15.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 0.91%)</title><rect x="517.9" y="995.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.91%)</title><rect x="517.9" y="979.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="527.5" y="963.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="530.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.36%)</title><rect x="528.6" y="1059.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.36%)</title><rect x="528.6" y="1043.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.36%)</title><rect x="528.6" y="1027.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (159 samples, 14.47%)</title><rect x="532.9" y="1059.0" width="170.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.9" y="1070.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (159 samples, 14.47%)</title><rect x="532.9" y="1043.0" width="170.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.9" y="1054.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.45%)</title><rect x="546.9" y="1027.0" width="5.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="549.9" y="1038.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.45%)</title><rect x="546.9" y="1011.0" width="5.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="549.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 5.73%)</title><rect x="552.2" y="1027.0" width="67.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.2" y="1038.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (49 samples, 4.46%)</title><rect x="560.8" y="1011.0" width="52.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.8" y="1022.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (45 samples, 4.09%)</title><rect x="565.1" y="995.0" width="48.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="568.1" y="1006.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22 samples, 2.00%)</title><rect x="579.1" y="979.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.1" y="990.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (22 samples, 2.00%)</title><rect x="579.1" y="963.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.1" y="974.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 2.00%)</title><rect x="579.1" y="947.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.1" y="958.0">j..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.18%)</title><rect x="584.4" y="931.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="587.4" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.73%)</title><rect x="586.6" y="931.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.45%)</title><rect x="587.7" y="915.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="590.7" y="926.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="587.7" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="590.7" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.36%)</title><rect x="588.7" y="899.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="591.7" y="910.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.36%)</title><rect x="588.7" y="883.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="591.7" y="894.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="588.7" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="591.7" y="878.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="589.8" y="867.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="592.8" y="878.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="589.8" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="592.8" y="862.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.18%)</title><rect x="590.9" y="867.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="593.9" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.18%)</title><rect x="593.0" y="915.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="596.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="593.0" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="596.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="593.0" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="593.0" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.0" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="593.0" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="596.0" y="862.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.09%)</title><rect x="593.0" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="594.1" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="597.1" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.64%)</title><rect x="595.2" y="931.0" width="7.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="598.2" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.45%)</title><rect x="602.7" y="979.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.7" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="608.1" y="979.0" width="2.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="611.1" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="610.2" y="979.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="613.2" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="613.4" y="1011.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.4" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="613.4" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="616.4" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="613.4" y="979.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.4" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="614.5" y="1011.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="617.5" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="616.6" y="1011.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="619.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="619.9" y="1027.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.64%)</title><rect x="620.9" y="1027.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.18%)</title><rect x="620.9" y="1011.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="623.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.18%)</title><rect x="620.9" y="995.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="623.9" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="622.0" y="979.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="625.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="622.0" y="963.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.45%)</title><rect x="623.1" y="1011.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.45%)</title><rect x="623.1" y="995.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.1" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (70 samples, 6.37%)</title><rect x="628.5" y="1027.0" width="75.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="631.5" y="1038.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (68 samples, 6.19%)</title><rect x="630.6" y="1011.0" width="73.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.6" y="1022.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (21 samples, 1.91%)</title><rect x="640.3" y="995.0" width="22.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.3" y="1006.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (21 samples, 1.91%)</title><rect x="640.3" y="979.0" width="22.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="643.3" y="990.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (21 samples, 1.91%)</title><rect x="640.3" y="963.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="643.3" y="974.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (21 samples, 1.91%)</title><rect x="640.3" y="947.0" width="22.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.3" y="958.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="662.8" y="995.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="665.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="662.8" y="979.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="662.8" y="963.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (37 samples, 3.37%)</title><rect x="663.9" y="995.0" width="39.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.9" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (32 samples, 2.91%)</title><rect x="669.3" y="979.0" width="34.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="672.3" y="990.0">ja..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.09%)</title><rect x="671.4" y="963.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.45%)</title><rect x="672.5" y="963.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="675.5" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.45%)</title><rect x="672.5" y="947.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="675.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (24 samples, 2.18%)</title><rect x="677.8" y="963.0" width="25.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.8" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.18%)</title><rect x="691.8" y="947.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="694.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.64%)</title><rect x="693.9" y="947.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.9" y="958.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="700.4" y="931.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="703.4" y="942.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.18%)</title><rect x="701.5" y="947.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="704.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 3.82%)</title><rect x="703.6" y="1059.0" width="45.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="706.6" y="1070.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (41 samples, 3.73%)</title><rect x="704.7" y="1043.0" width="44.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="707.7" y="1054.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1702093299.process (25 samples, 2.27%)</title><rect x="706.8" y="1027.0" width="26.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.8" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (22 samples, 2.00%)</title><rect x="710.1" y="1011.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="713.1" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.82%)</title><rect x="710.1" y="995.0" width="21.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.1" y="1006.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.36%)</title><rect x="718.6" y="979.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.6" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.36%)</title><rect x="718.6" y="963.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.6" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.36%)</title><rect x="718.6" y="947.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.6" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.36%)</title><rect x="718.6" y="931.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="721.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.27%)</title><rect x="719.7" y="915.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="721.9" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="724.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.55%)</title><rect x="722.9" y="979.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.9" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.55%)</title><rect x="722.9" y="963.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="722.9" y="947.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="725.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="729.4" y="979.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="730.5" y="979.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="730.5" y="963.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="733.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="730.5" y="947.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.access$400 (1 samples, 0.09%)</title><rect x="730.5" y="931.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="731.5" y="995.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="731.5" y="979.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="734.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="731.5" y="963.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="731.5" y="947.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="734.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="733.7" y="1027.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="736.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="733.7" y="1011.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="736.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.55%)</title><rect x="736.9" y="1027.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.27%)</title><rect x="740.1" y="1011.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="740.1" y="995.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="743.1" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="742.3" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="745.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="743.3" y="1027.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="743.3" y="1011.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.36%)</title><rect x="744.4" y="1027.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="747.6" y="1011.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="750.6" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="747.6" y="995.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.6" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="747.6" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="750.6" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="747.6" y="963.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="750.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="747.6" y="947.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="747.6" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="750.6" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="747.6" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.6" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="747.6" y="899.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="750.6" y="910.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="747.6" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="747.6" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="750.6" y="878.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="747.6" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="750.6" y="862.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="747.6" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="750.6" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/350407142.linkToTargetMethod (1 samples, 0.09%)</title><rect x="748.7" y="1059.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="748.7" y="1043.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/1581817384.get$Lambda (1 samples, 0.09%)</title><rect x="748.7" y="1027.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.7" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="748.7" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="751.7" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="748.7" y="995.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="751.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 2.09%)</title><rect x="749.8" y="1059.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="752.8" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 2.09%)</title><rect x="749.8" y="1043.0" width="24.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.8" y="1054.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="756.2" y="1027.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="759.2" y="1038.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="757.3" y="1011.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="760.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.18%)</title><rect x="760.5" y="1027.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="763.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/1581817384.accept (12 samples, 1.09%)</title><rect x="760.5" y="1011.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (12 samples, 1.09%)</title><rect x="760.5" y="995.0" width="12.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="763.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 1.09%)</title><rect x="760.5" y="979.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.5" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 1.09%)</title><rect x="760.5" y="963.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.5" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 1.09%)</title><rect x="760.5" y="947.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="763.5" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.55%)</title><rect x="767.0" y="931.0" width="6.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="770.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.45%)</title><rect x="768.0" y="915.0" width="5.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="771.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1558967458.accept (1 samples, 0.09%)</title><rect x="773.4" y="1011.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.4" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="773.4" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="776.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.00%)</title><rect x="774.5" y="1075.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.00%)</title><rect x="774.5" y="1059.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.5" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="775.6" y="1043.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="778.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="775.6" y="1027.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="778.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.82%)</title><rect x="776.6" y="1043.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/1581817384.accept (9 samples, 0.82%)</title><rect x="776.6" y="1027.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.82%)</title><rect x="776.6" y="1011.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.82%)</title><rect x="776.6" y="995.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.6" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.82%)</title><rect x="776.6" y="979.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="779.6" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.82%)</title><rect x="776.6" y="963.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.55%)</title><rect x="786.3" y="1075.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="789.3" y="1086.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="786.3" y="1059.0" width="6.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="789.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (10 samples, 0.91%)</title><rect x="792.7" y="1091.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.7" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.55%)</title><rect x="797.0" y="1075.0" width="6.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="800.0" y="1086.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="797.0" y="1059.0" width="6.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="800.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.36%)</title><rect x="803.5" y="1139.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.36%)</title><rect x="803.5" y="1123.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.36%)</title><rect x="803.5" y="1107.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="806.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.36%)</title><rect x="803.5" y="1091.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (207 samples, 18.84%)</title><rect x="807.8" y="1139.0" width="222.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.8" y="1150.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (206 samples, 18.74%)</title><rect x="808.8" y="1123.0" width="221.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.8" y="1134.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.18%)</title><rect x="820.6" y="1107.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.09%)</title><rect x="821.7" y="1091.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (2 samples, 0.18%)</title><rect x="822.8" y="1107.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="825.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (184 samples, 16.74%)</title><rect x="824.9" y="1107.0" width="197.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.9" y="1118.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (21 samples, 1.91%)</title><rect x="828.2" y="1091.0" width="22.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="831.2" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 1.09%)</title><rect x="850.7" y="1091.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="853.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.09%)</title><rect x="850.7" y="1075.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.09%)</title><rect x="850.7" y="1059.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="853.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.09%)</title><rect x="850.7" y="1043.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (148 samples, 13.47%)</title><rect x="863.6" y="1091.0" width="158.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.6" y="1102.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (148 samples, 13.47%)</title><rect x="863.6" y="1075.0" width="158.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.6" y="1086.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="865.7" y="1059.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.7" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.18%)</title><rect x="866.8" y="1059.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.8" y="1070.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="869.0" y="1059.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.0" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.36%)</title><rect x="871.1" y="1059.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="874.1" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Park (126 samples, 11.46%)</title><rect x="875.4" y="1059.0" width="135.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="878.4" y="1070.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="877.6" y="1043.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.6" y="1054.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.18%)</title><rect x="879.7" y="1043.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.7" y="1054.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="881.8" y="1043.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="884.8" y="1054.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.46%)</title><rect x="884.0" y="1043.0" width="29.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="887.0" y="1054.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (16 samples, 1.46%)</title><rect x="889.4" y="1027.0" width="17.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.4" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 0.82%)</title><rect x="891.5" y="1011.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (7 samples, 0.64%)</title><rect x="893.7" y="995.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="896.7" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (5 samples, 0.45%)</title><rect x="901.2" y="1011.0" width="5.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="904.2" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.45%)</title><rect x="906.5" y="1027.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="909.5" y="1038.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="911.9" y="1027.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.9" y="1038.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="913.0" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="916.0" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="914.1" y="1043.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="917.1" y="1054.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.36%)</title><rect x="916.2" y="1043.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="919.2" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 2.46%)</title><rect x="920.5" y="1043.0" width="29.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="923.5" y="1054.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 4.28%)</title><rect x="949.5" y="1043.0" width="50.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="952.5" y="1054.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.27%)</title><rect x="1000.0" y="1043.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1003.0" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.27%)</title><rect x="1003.2" y="1043.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1006.2" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1006.4" y="1043.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1009.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1007.5" y="1043.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1010.5" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1008.5" y="1043.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1011.5" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1009.6" y="1043.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1012.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (7 samples, 0.64%)</title><rect x="1010.7" y="1059.0" width="7.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1013.7" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1018.2" y="1059.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.2" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.27%)</title><rect x="1019.3" y="1059.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.64%)</title><rect x="1022.5" y="1107.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1025.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.64%)</title><rect x="1022.5" y="1091.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1025.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.45%)</title><rect x="1023.6" y="1075.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="1028.9" y="1075.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1031.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="1028.9" y="1059.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="1028.9" y="1043.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1031.9" y="1054.0"></text>
</g>
<g>
<title>start_thread (149 samples, 13.56%)</title><rect x="1030.0" y="1187.0" width="160.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1033.0" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (149 samples, 13.56%)</title><rect x="1030.0" y="1171.0" width="160.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1033.0" y="1182.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 2.18%)</title><rect x="1030.0" y="1155.0" width="25.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.0" y="1166.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.36%)</title><rect x="1030.0" y="1139.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.0" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.36%)</title><rect x="1030.0" y="1123.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1033.0" y="1134.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1030.0" y="1107.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.0" y="1118.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.27%)</title><rect x="1031.1" y="1107.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1034.1" y="1118.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.82%)</title><rect x="1034.3" y="1139.0" width="21.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.3" y="1150.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.45%)</title><rect x="1034.3" y="1123.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.3" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1034.3" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.3" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1034.3" y="1091.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.3" y="1102.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1035.4" y="1107.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.4" y="1118.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="1037.5" y="1107.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1040.5" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (10 samples, 0.91%)</title><rect x="1039.7" y="1123.0" width="10.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.7" y="1134.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1039.7" y="1107.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1042.7" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.45%)</title><rect x="1040.8" y="1107.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.8" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.18%)</title><rect x="1040.8" y="1091.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.8" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.18%)</title><rect x="1040.8" y="1075.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1043.8" y="1086.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.18%)</title><rect x="1040.8" y="1059.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1043.8" y="1070.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1041.8" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1044.8" y="1054.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.27%)</title><rect x="1042.9" y="1091.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.9" y="1102.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1044.0" y="1075.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.0" y="1086.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.09%)</title><rect x="1044.0" y="1059.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.0" y="1070.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.09%)</title><rect x="1044.0" y="1043.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.0" y="1054.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.09%)</title><rect x="1044.0" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.0" y="1038.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.09%)</title><rect x="1044.0" y="1011.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.0" y="1022.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.09%)</title><rect x="1045.1" y="1059.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.1" y="1070.0"></text>
</g>
<g>
<title>metadata_Relocation::value() (1 samples, 0.09%)</title><rect x="1045.1" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.1" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.36%)</title><rect x="1046.1" y="1107.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.1" y="1118.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.36%)</title><rect x="1046.1" y="1091.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.1" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.45%)</title><rect x="1050.4" y="1123.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.4" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.45%)</title><rect x="1050.4" y="1107.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.4" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.45%)</title><rect x="1050.4" y="1091.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.4" y="1102.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.45%)</title><rect x="1050.4" y="1075.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.4" y="1086.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.45%)</title><rect x="1050.4" y="1059.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.4" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.45%)</title><rect x="1050.4" y="1043.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.4" y="1054.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1054.7" y="1027.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.7" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (122 samples, 11.10%)</title><rect x="1055.8" y="1155.0" width="131.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.8" y="1166.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (122 samples, 11.10%)</title><rect x="1055.8" y="1139.0" width="131.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.8" y="1150.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (122 samples, 11.10%)</title><rect x="1055.8" y="1123.0" width="131.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.8" y="1134.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (122 samples, 11.10%)</title><rect x="1055.8" y="1107.0" width="131.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.8" y="1118.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (121 samples, 11.01%)</title><rect x="1055.8" y="1091.0" width="129.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.8" y="1102.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (121 samples, 11.01%)</title><rect x="1055.8" y="1075.0" width="129.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.8" y="1086.0">Compile::Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 4.91%)</title><rect x="1055.8" y="1059.0" width="58.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.8" y="1070.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.18%)</title><rect x="1055.8" y="1043.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.8" y="1054.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1055.8" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.8" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1056.9" y="1027.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.9" y="1038.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1056.9" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.9" y="1022.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1056.9" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.9" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.27%)</title><rect x="1057.9" y="1043.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.9" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1057.9" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.9" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1057.9" y="1011.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1060.9" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1057.9" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.9" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1059.0" y="1027.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.0" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1059.0" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1062.0" y="1022.0"></text>
</g>
<g>
<title>castP2XNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1060.1" y="1027.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.55%)</title><rect x="1061.2" y="1043.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.2" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.18%)</title><rect x="1061.2" y="1027.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1064.2" y="1038.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.09%)</title><rect x="1062.2" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.2" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.36%)</title><rect x="1063.3" y="1027.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.3" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.27%)</title><rect x="1063.3" y="1011.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.3" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1066.5" y="1011.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.5" y="1022.0"></text>
</g>
<g>
<title>CmpNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1066.5" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.5" y="1006.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1067.6" y="1043.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.6" y="1054.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="1067.6" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.6" y="1038.0"></text>
</g>
<g>
<title>Block::succ_fall_through(unsigned int) (1 samples, 0.09%)</title><rect x="1067.6" y="1011.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="1068.7" y="1043.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="1068.7" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.27%)</title><rect x="1069.7" y="1043.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="1069.7" y="1027.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1069.7" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.18%)</title><rect x="1070.8" y="1011.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.09%)</title><rect x="1071.9" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 3.46%)</title><rect x="1073.0" y="1043.0" width="40.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.0" y="1054.0">Pha..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.09%)</title><rect x="1073.0" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.0" y="1038.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.18%)</title><rect x="1074.0" y="1027.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.0" y="1038.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1075.1" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1076.2" y="1027.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.55%)</title><rect x="1077.3" y="1027.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.3" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1079.4" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.27%)</title><rect x="1080.5" y="1011.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1081.6" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1082.6" y="995.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.45%)</title><rect x="1083.7" y="1027.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1088.0" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1088.0" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.0" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.09%)</title><rect x="1088.0" y="979.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.45%)</title><rect x="1089.1" y="1027.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.18%)</title><rect x="1091.2" y="1011.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1092.3" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.3" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1093.4" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1094.4" y="1027.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1094.4" y="1011.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1095.5" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.5" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1095.5" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.27%)</title><rect x="1096.6" y="1027.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1098.7" y="1011.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1098.7" y="995.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.7" y="1006.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1098.7" y="979.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1099.8" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1100.9" y="1027.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.9" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1100.9" y="1011.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.9" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1100.9" y="995.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.9" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1100.9" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.9" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1102.0" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1102.0" y="1011.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.18%)</title><rect x="1103.0" y="1027.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1103.0" y="1011.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1104.1" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.1" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.64%)</title><rect x="1105.2" y="1027.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.2" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.55%)</title><rect x="1106.3" y="1011.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.3" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1109.5" y="995.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.5" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1111.6" y="995.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1114.6" y="1006.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.09%)</title><rect x="1112.7" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.7" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (56 samples, 5.10%)</title><rect x="1113.8" y="1059.0" width="60.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.8" y="1070.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1113.8" y="1043.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.8" y="1054.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1113.8" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.8" y="1038.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.09%)</title><rect x="1113.8" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.18%)</title><rect x="1114.8" y="1043.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.18%)</title><rect x="1114.8" y="1027.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="995.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="931.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="899.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="867.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="851.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="771.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="563.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="547.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="531.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="499.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="483.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="451.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="435.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="403.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="371.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="339.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="307.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="291.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="275.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="227.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="211.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="195.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="179.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="163.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="147.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="131.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="115.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="99.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="83.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="67.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1114.8" y="51.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.8" y="62.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1114.8" y="35.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.8" y="46.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.09%)</title><rect x="1115.9" y="1011.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.9" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1117.0" y="1043.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.0" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1117.0" y="1027.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.0" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1117.0" y="1011.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1118.1" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1118.1" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (41 samples, 3.73%)</title><rect x="1119.1" y="1043.0" width="44.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.1" y="1054.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1121.3" y="1027.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.3" y="1038.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.18%)</title><rect x="1121.3" y="1011.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1123.4" y="1027.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1124.5" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 2.55%)</title><rect x="1125.6" y="1027.0" width="30.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.6" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (22 samples, 2.00%)</title><rect x="1132.0" y="1011.0" width="23.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.0" y="1022.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1133.1" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (20 samples, 1.82%)</title><rect x="1134.2" y="995.0" width="21.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.2" y="1006.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1151.3" y="979.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.27%)</title><rect x="1152.4" y="979.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.27%)</title><rect x="1155.6" y="1027.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.6" y="1038.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1157.8" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1158.9" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="1038.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1158.9" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1159.9" y="1027.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1159.9" y="1011.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.9" y="1022.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1159.9" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="1006.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1159.9" y="979.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1161.0" y="995.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="1006.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1162.1" y="1027.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.73%)</title><rect x="1163.2" y="1043.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.73%)</title><rect x="1163.2" y="1027.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1163.2" y="1011.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="1022.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.2" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1164.2" y="995.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1164.2" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.2" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1165.3" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.18%)</title><rect x="1166.4" y="1011.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1167.5" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="1006.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1167.5" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1167.5" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1168.5" y="1011.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.5" y="1022.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1168.5" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1169.6" y="1011.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="1022.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.18%)</title><rect x="1169.6" y="995.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1171.7" y="1043.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1171.7" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1171.7" y="1011.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.7" y="995.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="1006.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.09%)</title><rect x="1171.7" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1172.8" y="1043.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1175.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.73%)</title><rect x="1173.9" y="1059.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.73%)</title><rect x="1173.9" y="1043.0" width="8.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.73%)</title><rect x="1173.9" y="1027.0" width="8.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.73%)</title><rect x="1173.9" y="1011.0" width="8.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.73%)</title><rect x="1173.9" y="995.0" width="8.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.73%)</title><rect x="1173.9" y="979.0" width="8.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.9" y="947.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1173.9" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1173.9" y="915.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1173.9" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.9" y="883.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.9" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1173.9" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1173.9" y="819.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.9" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.9" y="787.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1173.9" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1173.9" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.9" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1173.9" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1175.0" y="963.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1175.0" y="947.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1175.0" y="931.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1175.0" y="915.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1175.0" y="899.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1175.0" y="883.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.0" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.0" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1175.0" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1175.0" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1175.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1175.0" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.0" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.0" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.0" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.0" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1175.0" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1175.0" y="707.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.0" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.0" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1175.0" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.0" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1175.0" y="643.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.0" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.0" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.0" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.0" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="606.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.0" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1175.0" y="563.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1176.0" y="867.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1176.0" y="851.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1176.0" y="835.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1176.0" y="819.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1176.0" y="803.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1176.0" y="787.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1176.0" y="771.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1176.0" y="755.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.0" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.0" y="723.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.0" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.0" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.0" y="675.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.0" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.0" y="643.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.0" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.0" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.0" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.0" y="579.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.0" y="563.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.0" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.0" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.0" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.0" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.0" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.0" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.0" y="451.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.0" y="435.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.0" y="419.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.0" y="403.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.0" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.0" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.0" y="355.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.0" y="339.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.0" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.0" y="307.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.0" y="291.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.0" y="275.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.0" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.0" y="243.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.0" y="227.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.0" y="211.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.0" y="195.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1176.0" y="179.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1176.0" y="163.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1176.0" y="147.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1176.0" y="131.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1176.0" y="115.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1176.0" y="99.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="110.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.09%)</title><rect x="1176.0" y="83.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1177.1" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1177.1" y="723.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.2" y="771.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.2" y="755.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.2" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.2" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.2" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.2" y="691.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.2" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="686.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.2" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="670.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.2" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1178.2" y="627.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1179.3" y="963.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1179.3" y="947.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1179.3" y="931.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1179.3" y="915.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1179.3" y="899.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1179.3" y="883.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1179.3" y="867.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.3" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.3" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.3" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.3" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.3" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.3" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.09%)</title><rect x="1179.3" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.3" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.3" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1179.3" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.3" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.3" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.3" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="830.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1180.3" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.09%)</title><rect x="1180.3" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="947.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="931.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.4" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.4" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.4" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.4" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="851.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="846.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1181.4" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="830.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="814.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="798.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1181.4" y="771.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="782.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.27%)</title><rect x="1182.5" y="1059.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="1070.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1182.5" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1183.6" y="1043.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1184.6" y="1043.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1187.6" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.7" y="1091.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.7" y="1075.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.7" y="1059.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.7" y="1043.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1185.7" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1185.7" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="1022.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.09%)</title><rect x="1185.7" y="995.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.09%)</title><rect x="1185.7" y="979.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.09%)</title><rect x="1185.7" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="974.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.09%)</title><rect x="1185.7" y="947.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="958.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.09%)</title><rect x="1185.7" y="931.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="942.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.09%)</title><rect x="1185.7" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="926.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.27%)</title><rect x="1186.8" y="1155.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="1166.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.27%)</title><rect x="1186.8" y="1139.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="1150.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.18%)</title><rect x="1186.8" y="1123.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.8" y="1134.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="1102.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="1075.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.9" y="1086.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="1059.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.9" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="1187.9" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.9" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.09%)</title><rect x="1188.9" y="1123.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.9" y="1134.0"></text>
</g>
</g>
</svg>
