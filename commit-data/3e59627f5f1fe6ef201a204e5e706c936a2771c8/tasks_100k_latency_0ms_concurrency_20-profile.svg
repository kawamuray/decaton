<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (144 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.69%)</title><rect x="10.0" y="755.0" width="8.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 21.53%)</title><rect x="18.2" y="755.0" width="254.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.2" y="766.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (31 samples, 21.53%)</title><rect x="18.2" y="739.0" width="254.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.2" y="750.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.69%)</title><rect x="18.2" y="723.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.69%)</title><rect x="18.2" y="707.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.69%)</title><rect x="18.2" y="691.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.69%)</title><rect x="18.2" y="675.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.69%)</title><rect x="18.2" y="659.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.69%)</title><rect x="18.2" y="643.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.69%)</title><rect x="18.2" y="627.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.69%)</title><rect x="18.2" y="611.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.69%)</title><rect x="18.2" y="595.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.69%)</title><rect x="18.2" y="579.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.69%)</title><rect x="18.2" y="563.0" width="8.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="21.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 13.19%)</title><rect x="26.4" y="723.0" width="155.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.4" y="734.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/598853106.accept (17 samples, 11.81%)</title><rect x="26.4" y="707.0" width="139.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.4" y="718.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 11.81%)</title><rect x="26.4" y="691.0" width="139.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.4" y="702.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 9.72%)</title><rect x="26.4" y="675.0" width="114.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.4" y="686.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 9.72%)</title><rect x="26.4" y="659.0" width="114.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.4" y="670.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 9.72%)</title><rect x="26.4" y="643.0" width="114.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.4" y="654.0">com/linecorp/d..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 9.72%)</title><rect x="26.4" y="627.0" width="114.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.4" y="638.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 9.72%)</title><rect x="26.4" y="611.0" width="114.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.4" y="622.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 9.72%)</title><rect x="26.4" y="595.0" width="114.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.4" y="606.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 6.94%)</title><rect x="26.4" y="579.0" width="81.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.4" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.69%)</title><rect x="26.4" y="563.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.69%)</title><rect x="26.4" y="547.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 6.25%)</title><rect x="34.6" y="563.0" width="73.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.6" y="574.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 6.25%)</title><rect x="34.6" y="547.0" width="73.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.6" y="558.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 6.25%)</title><rect x="34.6" y="531.0" width="73.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.6" y="542.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 5.56%)</title><rect x="42.8" y="515.0" width="65.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.8" y="526.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 5.56%)</title><rect x="42.8" y="499.0" width="65.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.8" y="510.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 5.56%)</title><rect x="42.8" y="483.0" width="65.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="45.8" y="494.0">Unsafe_..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.69%)</title><rect x="42.8" y="467.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="45.8" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 4.17%)</title><rect x="51.0" y="467.0" width="49.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="54.0" y="478.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.69%)</title><rect x="100.1" y="467.0" width="8.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="103.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 2.08%)</title><rect x="108.3" y="579.0" width="24.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.3" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 2.08%)</title><rect x="108.3" y="563.0" width="24.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.3" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 2.08%)</title><rect x="108.3" y="547.0" width="24.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.3" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.69%)</title><rect x="132.9" y="579.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.69%)</title><rect x="132.9" y="563.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.69%)</title><rect x="132.9" y="547.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 1.39%)</title><rect x="141.1" y="675.0" width="16.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.69%)</title><rect x="149.3" y="659.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.69%)</title><rect x="157.5" y="675.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.69%)</title><rect x="157.5" y="659.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="160.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.69%)</title><rect x="165.7" y="707.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.69%)</title><rect x="165.7" y="691.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.69%)</title><rect x="165.7" y="675.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.69%)</title><rect x="165.7" y="659.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.69%)</title><rect x="165.7" y="643.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.69%)</title><rect x="165.7" y="627.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.69%)</title><rect x="173.9" y="707.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.69%)</title><rect x="173.9" y="691.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.69%)</title><rect x="173.9" y="675.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.69%)</title><rect x="173.9" y="659.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 7.64%)</title><rect x="182.1" y="723.0" width="90.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.1" y="734.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 7.64%)</title><rect x="182.1" y="707.0" width="90.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="185.1" y="718.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 4.17%)</title><rect x="182.1" y="691.0" width="49.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.1" y="702.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 4.17%)</title><rect x="182.1" y="675.0" width="49.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.1" y="686.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 3.47%)</title><rect x="182.1" y="659.0" width="41.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.1" y="670.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.78%)</title><rect x="182.1" y="643.0" width="32.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.1" y="654.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.78%)</title><rect x="182.1" y="627.0" width="32.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.1" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 2.08%)</title><rect x="190.3" y="611.0" width="24.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.3" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.69%)</title><rect x="198.5" y="595.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.69%)</title><rect x="206.7" y="595.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.69%)</title><rect x="206.7" y="579.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.69%)</title><rect x="206.7" y="563.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.69%)</title><rect x="206.7" y="547.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.69%)</title><rect x="206.7" y="531.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.69%)</title><rect x="206.7" y="515.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.69%)</title><rect x="206.7" y="499.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="209.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.69%)</title><rect x="214.9" y="643.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.69%)</title><rect x="214.9" y="627.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.69%)</title><rect x="214.9" y="611.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.69%)</title><rect x="214.9" y="595.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.69%)</title><rect x="214.9" y="579.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.69%)</title><rect x="214.9" y="563.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.69%)</title><rect x="214.9" y="547.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.69%)</title><rect x="214.9" y="531.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.9" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.69%)</title><rect x="214.9" y="515.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.69%)</title><rect x="223.1" y="659.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2200 (1 samples, 0.69%)</title><rect x="223.1" y="643.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.39%)</title><rect x="231.2" y="691.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.39%)</title><rect x="231.2" y="675.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 1.39%)</title><rect x="231.2" y="659.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 1.39%)</title><rect x="231.2" y="643.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.69%)</title><rect x="231.2" y="627.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.69%)</title><rect x="231.2" y="611.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.69%)</title><rect x="231.2" y="595.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.69%)</title><rect x="231.2" y="579.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.69%)</title><rect x="231.2" y="563.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.69%)</title><rect x="231.2" y="547.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.69%)</title><rect x="231.2" y="531.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.2" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.69%)</title><rect x="231.2" y="515.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.69%)</title><rect x="231.2" y="499.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.makeRef (1 samples, 0.69%)</title><rect x="239.4" y="627.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.39%)</title><rect x="247.6" y="691.0" width="16.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$100 (1 samples, 0.69%)</title><rect x="247.6" y="675.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.maybeUpdateAssignment (1 samples, 0.69%)</title><rect x="247.6" y="659.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.69%)</title><rect x="247.6" y="643.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.69%)</title><rect x="255.8" y="675.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.69%)</title><rect x="264.0" y="691.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.69%)</title><rect x="264.0" y="675.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (54 samples, 37.50%)</title><rect x="272.2" y="755.0" width="442.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.2" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (54 samples, 37.50%)</title><rect x="272.2" y="739.0" width="442.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.2" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (54 samples, 37.50%)</title><rect x="272.2" y="723.0" width="442.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.2" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/952734339.run (25 samples, 17.36%)</title><rect x="288.6" y="707.0" width="204.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="291.6" y="718.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (25 samples, 17.36%)</title><rect x="288.6" y="691.0" width="204.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.6" y="702.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (25 samples, 17.36%)</title><rect x="288.6" y="675.0" width="204.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.6" y="686.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (25 samples, 17.36%)</title><rect x="288.6" y="659.0" width="204.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.6" y="670.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.69%)</title><rect x="296.8" y="643.0" width="8.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="299.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 6.94%)</title><rect x="305.0" y="643.0" width="81.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.0" y="654.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 6.94%)</title><rect x="305.0" y="627.0" width="81.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="638.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 6.94%)</title><rect x="305.0" y="611.0" width="81.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="622.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.94%)</title><rect x="305.0" y="595.0" width="81.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.0" y="606.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.94%)</title><rect x="305.0" y="579.0" width="81.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="308.0" y="590.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 6.94%)</title><rect x="305.0" y="563.0" width="81.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.0" y="574.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.39%)</title><rect x="305.0" y="547.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.69%)</title><rect x="313.2" y="531.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.69%)</title><rect x="313.2" y="515.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.69%)</title><rect x="313.2" y="499.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.69%)</title><rect x="313.2" y="483.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.2" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.69%)</title><rect x="313.2" y="467.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.69%)</title><rect x="313.2" y="451.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="316.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.86%)</title><rect x="321.4" y="547.0" width="57.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="324.4" y="558.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.69%)</title><rect x="329.6" y="531.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 3.47%)</title><rect x="337.8" y="531.0" width="41.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.8" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.39%)</title><rect x="337.8" y="515.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.69%)</title><rect x="337.8" y="499.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.69%)</title><rect x="346.0" y="499.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.69%)</title><rect x="346.0" y="483.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.69%)</title><rect x="346.0" y="467.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.69%)</title><rect x="346.0" y="451.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 2.08%)</title><rect x="354.2" y="515.0" width="24.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="357.2" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 2.08%)</title><rect x="354.2" y="499.0" width="24.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.2" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 2.08%)</title><rect x="354.2" y="483.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.2" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.69%)</title><rect x="354.2" y="467.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.69%)</title><rect x="354.2" y="451.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="357.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.69%)</title><rect x="354.2" y="435.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.69%)</title><rect x="354.2" y="419.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.69%)</title><rect x="354.2" y="403.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.69%)</title><rect x="354.2" y="387.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="357.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.39%)</title><rect x="362.4" y="467.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.39%)</title><rect x="362.4" y="451.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.39%)</title><rect x="362.4" y="435.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.39%)</title><rect x="362.4" y="419.0" width="16.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.4" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.39%)</title><rect x="362.4" y="403.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.4" y="414.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 1.39%)</title><rect x="362.4" y="387.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.4" y="398.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 1.39%)</title><rect x="362.4" y="371.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.69%)</title><rect x="378.8" y="547.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.69%)</title><rect x="378.8" y="531.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="381.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.69%)</title><rect x="378.8" y="515.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.69%)</title><rect x="378.8" y="499.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.69%)</title><rect x="378.8" y="483.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (12 samples, 8.33%)</title><rect x="386.9" y="643.0" width="98.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.9" y="654.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 2.08%)</title><rect x="386.9" y="627.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.9" y="638.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 2.08%)</title><rect x="386.9" y="611.0" width="24.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.9" y="622.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 2.08%)</title><rect x="386.9" y="595.0" width="24.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.9" y="606.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 2.08%)</title><rect x="386.9" y="579.0" width="24.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.9" y="590.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.39%)</title><rect x="395.1" y="563.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.39%)</title><rect x="395.1" y="547.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (6 samples, 4.17%)</title><rect x="411.5" y="627.0" width="49.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.5" y="638.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (6 samples, 4.17%)</title><rect x="411.5" y="611.0" width="49.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.5" y="622.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.39%)</title><rect x="419.7" y="595.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.39%)</title><rect x="419.7" y="579.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="422.7" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.39%)</title><rect x="419.7" y="563.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.7" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.39%)</title><rect x="419.7" y="547.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.7" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.69%)</title><rect x="427.9" y="531.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.9" y="542.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 2.08%)</title><rect x="436.1" y="595.0" width="24.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="439.1" y="606.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 2.08%)</title><rect x="436.1" y="579.0" width="24.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.1" y="590.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 2.08%)</title><rect x="436.1" y="563.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="439.1" y="574.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 2.08%)</title><rect x="436.1" y="547.0" width="24.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="439.1" y="558.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.69%)</title><rect x="452.5" y="531.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 1.39%)</title><rect x="460.7" y="627.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 1.39%)</title><rect x="460.7" y="611.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/701735847.process (1 samples, 0.69%)</title><rect x="460.7" y="595.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.69%)</title><rect x="460.7" y="579.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.69%)</title><rect x="460.7" y="563.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.69%)</title><rect x="460.7" y="547.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.69%)</title><rect x="460.7" y="531.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.69%)</title><rect x="460.7" y="515.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="463.7" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.69%)</title><rect x="468.9" y="595.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.9" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.69%)</title><rect x="468.9" y="579.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="471.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/866885499.get$Lambda (1 samples, 0.69%)</title><rect x="468.9" y="563.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/866885499.&lt;init&gt; (1 samples, 0.69%)</title><rect x="468.9" y="547.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.69%)</title><rect x="477.1" y="627.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.69%)</title><rect x="485.3" y="643.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.69%)</title><rect x="485.3" y="627.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.69%)</title><rect x="485.3" y="611.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="488.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/69483305.accept (1 samples, 0.69%)</title><rect x="485.3" y="595.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.69%)</title><rect x="485.3" y="579.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1857286701.complete (1 samples, 0.69%)</title><rect x="485.3" y="563.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.69%)</title><rect x="485.3" y="547.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.69%)</title><rect x="485.3" y="531.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.3" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.69%)</title><rect x="485.3" y="515.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.3" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.69%)</title><rect x="485.3" y="499.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.3" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.69%)</title><rect x="485.3" y="483.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.3" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.69%)</title><rect x="485.3" y="467.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.69%)</title><rect x="493.5" y="707.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.69%)</title><rect x="493.5" y="691.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.69%)</title><rect x="493.5" y="675.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.39%)</title><rect x="501.7" y="707.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.69%)</title><rect x="509.9" y="691.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.69%)</title><rect x="509.9" y="675.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (24 samples, 16.67%)</title><rect x="518.1" y="707.0" width="196.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.1" y="718.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (24 samples, 16.67%)</title><rect x="518.1" y="691.0" width="196.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.1" y="702.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.69%)</title><rect x="542.6" y="675.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (19 samples, 13.19%)</title><rect x="550.8" y="675.0" width="155.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.8" y="686.0">java/util/concurrent..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 2.08%)</title><rect x="550.8" y="659.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.8" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (16 samples, 11.11%)</title><rect x="575.4" y="659.0" width="131.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="578.4" y="670.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (16 samples, 11.11%)</title><rect x="575.4" y="643.0" width="131.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.4" y="654.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>Unsafe_Park (14 samples, 9.72%)</title><rect x="583.6" y="627.0" width="114.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="586.6" y="638.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.69%)</title><rect x="583.6" y="611.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="586.6" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 2.08%)</title><rect x="591.8" y="611.0" width="24.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="594.8" y="622.0">P..</text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.69%)</title><rect x="616.4" y="611.0" width="8.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="619.4" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.78%)</title><rect x="624.6" y="611.0" width="32.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="627.6" y="622.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.39%)</title><rect x="657.4" y="611.0" width="16.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="660.4" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.69%)</title><rect x="673.8" y="611.0" width="8.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="676.8" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.69%)</title><rect x="681.9" y="611.0" width="8.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="684.9" y="622.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.69%)</title><rect x="690.1" y="611.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="693.1" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.69%)</title><rect x="698.3" y="627.0" width="8.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="701.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.69%)</title><rect x="706.5" y="675.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.69%)</title><rect x="706.5" y="659.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="709.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.69%)</title><rect x="706.5" y="643.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.69%)</title><rect x="706.5" y="627.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.69%)</title><rect x="706.5" y="611.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="709.5" y="622.0"></text>
</g>
<g>
<title>start_thread (58 samples, 40.28%)</title><rect x="714.7" y="755.0" width="475.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="717.7" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (58 samples, 40.28%)</title><rect x="714.7" y="739.0" width="475.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="717.7" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 9.72%)</title><rect x="714.7" y="723.0" width="114.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.7" y="734.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.69%)</title><rect x="714.7" y="707.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="717.7" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.69%)</title><rect x="714.7" y="691.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="717.7" y="702.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.69%)</title><rect x="714.7" y="675.0" width="8.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="717.7" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 9.03%)</title><rect x="722.9" y="707.0" width="106.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="725.9" y="718.0">G1ParTask::wo..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 6.94%)</title><rect x="722.9" y="691.0" width="82.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="725.9" y="702.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.69%)</title><rect x="722.9" y="675.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="725.9" y="686.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.69%)</title><rect x="722.9" y="659.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="725.9" y="670.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.69%)</title><rect x="722.9" y="643.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="725.9" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (7 samples, 4.86%)</title><rect x="731.1" y="675.0" width="57.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="734.1" y="686.0">Generi..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.69%)</title><rect x="788.5" y="675.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="791.5" y="686.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.69%)</title><rect x="796.7" y="675.0" width="8.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="799.7" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.39%)</title><rect x="804.9" y="691.0" width="16.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.9" y="702.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.69%)</title><rect x="804.9" y="675.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.9" y="686.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.69%)</title><rect x="804.9" y="659.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.9" y="670.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.69%)</title><rect x="804.9" y="643.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.9" y="654.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.69%)</title><rect x="804.9" y="627.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="807.9" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.69%)</title><rect x="804.9" y="611.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.9" y="622.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.69%)</title><rect x="804.9" y="595.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.9" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.69%)</title><rect x="804.9" y="579.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="807.9" y="590.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.69%)</title><rect x="813.1" y="675.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="816.1" y="686.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.69%)</title><rect x="813.1" y="659.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="816.1" y="670.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.69%)</title><rect x="813.1" y="643.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="816.1" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.69%)</title><rect x="813.1" y="627.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="816.1" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.69%)</title><rect x="821.2" y="691.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="824.2" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.69%)</title><rect x="821.2" y="675.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="824.2" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.69%)</title><rect x="821.2" y="659.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="824.2" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.69%)</title><rect x="821.2" y="643.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.2" y="654.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.69%)</title><rect x="821.2" y="627.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="824.2" y="638.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.69%)</title><rect x="821.2" y="611.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="824.2" y="622.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.69%)</title><rect x="821.2" y="595.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="824.2" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (44 samples, 30.56%)</title><rect x="829.4" y="723.0" width="360.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="832.4" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (44 samples, 30.56%)</title><rect x="829.4" y="707.0" width="360.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="832.4" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (44 samples, 30.56%)</title><rect x="829.4" y="691.0" width="360.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.4" y="702.0">CompileBroker::invoke_compiler_on_method(CompileT..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (42 samples, 29.17%)</title><rect x="829.4" y="675.0" width="344.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="832.4" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (42 samples, 29.17%)</title><rect x="829.4" y="659.0" width="344.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.4" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 18.06%)</title><rect x="829.4" y="643.0" width="213.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.4" y="654.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.39%)</title><rect x="829.4" y="627.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="832.4" y="638.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.69%)</title><rect x="829.4" y="611.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.4" y="622.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.69%)</title><rect x="829.4" y="595.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="832.4" y="606.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.69%)</title><rect x="837.6" y="611.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="840.6" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.69%)</title><rect x="837.6" y="595.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.6" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.69%)</title><rect x="837.6" y="579.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="840.6" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 3.47%)</title><rect x="845.8" y="627.0" width="41.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.8" y="638.0">Mat..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.69%)</title><rect x="845.8" y="611.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.8" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.78%)</title><rect x="854.0" y="611.0" width="32.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.0" y="622.0">Ma..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.39%)</title><rect x="870.4" y="595.0" width="16.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.4" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.39%)</title><rect x="870.4" y="579.0" width="16.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="873.4" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.39%)</title><rect x="870.4" y="563.0" width="16.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.4" y="574.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.69%)</title><rect x="878.6" y="547.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.6" y="558.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.69%)</title><rect x="878.6" y="531.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="881.6" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.69%)</title><rect x="886.8" y="627.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.8" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.69%)</title><rect x="886.8" y="611.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.8" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.69%)</title><rect x="895.0" y="627.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="898.0" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.69%)</title><rect x="895.0" y="611.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.69%)</title><rect x="895.0" y="595.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="898.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (17 samples, 11.81%)</title><rect x="903.2" y="627.0" width="139.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.2" y="638.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.69%)</title><rect x="903.2" y="611.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.2" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.69%)</title><rect x="903.2" y="595.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="906.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.69%)</title><rect x="911.4" y="611.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="914.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 2.78%)</title><rect x="919.6" y="611.0" width="32.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.6" y="622.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.69%)</title><rect x="919.6" y="595.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.6" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.69%)</title><rect x="927.8" y="595.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="930.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.39%)</title><rect x="936.0" y="595.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.69%)</title><rect x="952.4" y="611.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="955.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 1.39%)</title><rect x="960.6" y="611.0" width="16.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 2.08%)</title><rect x="976.9" y="611.0" width="24.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.9" y="622.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.69%)</title><rect x="985.1" y="595.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="988.1" y="606.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.69%)</title><rect x="993.3" y="595.0" width="8.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="996.3" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.69%)</title><rect x="1001.5" y="611.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.5" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.78%)</title><rect x="1009.7" y="611.0" width="32.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.7" y="622.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 2.08%)</title><rect x="1017.9" y="595.0" width="24.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.9" y="606.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.39%)</title><rect x="1026.1" y="579.0" width="16.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.1" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 8.33%)</title><rect x="1042.5" y="643.0" width="98.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="654.0">Compile::Opt..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 5.56%)</title><rect x="1042.5" y="627.0" width="65.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.5" y="638.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.39%)</title><rect x="1042.5" y="611.0" width="16.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.5" y="622.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.69%)</title><rect x="1050.7" y="595.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.69%)</title><rect x="1058.9" y="611.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.69%)</title><rect x="1067.1" y="611.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 2.08%)</title><rect x="1075.3" y="611.0" width="24.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.3" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.39%)</title><rect x="1083.5" y="595.0" width="16.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.69%)</title><rect x="1083.5" y="579.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_shenandoah_read_barrier(Node*, Node*) (1 samples, 0.69%)</title><rect x="1091.7" y="579.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.69%)</title><rect x="1099.9" y="611.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.9" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.69%)</title><rect x="1099.9" y="595.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.9" y="606.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.69%)</title><rect x="1099.9" y="579.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.9" y="590.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.69%)</title><rect x="1099.9" y="563.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.9" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.39%)</title><rect x="1108.1" y="627.0" width="16.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.1" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.39%)</title><rect x="1108.1" y="611.0" width="16.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.1" y="622.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.69%)</title><rect x="1108.1" y="595.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.1" y="606.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.69%)</title><rect x="1108.1" y="579.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.1" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.69%)</title><rect x="1108.1" y="563.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.1" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.69%)</title><rect x="1108.1" y="547.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.1" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.69%)</title><rect x="1108.1" y="531.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.1" y="542.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.69%)</title><rect x="1108.1" y="515.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.1" y="526.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.69%)</title><rect x="1116.2" y="595.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.2" y="606.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.69%)</title><rect x="1116.2" y="579.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.2" y="590.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.69%)</title><rect x="1124.4" y="627.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.4" y="638.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.69%)</title><rect x="1124.4" y="611.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.4" y="622.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.69%)</title><rect x="1124.4" y="595.0" width="8.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1127.4" y="606.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.69%)</title><rect x="1132.6" y="627.0" width="8.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1135.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.78%)</title><rect x="1140.8" y="643.0" width="32.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.8" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.78%)</title><rect x="1140.8" y="627.0" width="32.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.78%)</title><rect x="1140.8" y="611.0" width="32.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.8" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.78%)</title><rect x="1140.8" y="595.0" width="32.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.78%)</title><rect x="1140.8" y="579.0" width="32.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.78%)</title><rect x="1140.8" y="563.0" width="32.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.8" y="574.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.39%)</title><rect x="1140.8" y="547.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.8" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.39%)</title><rect x="1140.8" y="531.0" width="16.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.39%)</title><rect x="1140.8" y="515.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.39%)</title><rect x="1140.8" y="499.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.39%)</title><rect x="1140.8" y="483.0" width="16.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.39%)</title><rect x="1140.8" y="467.0" width="16.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.69%)</title><rect x="1140.8" y="451.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.69%)</title><rect x="1140.8" y="435.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="446.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.69%)</title><rect x="1140.8" y="419.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.69%)</title><rect x="1149.0" y="451.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.69%)</title><rect x="1149.0" y="435.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.0" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.69%)</title><rect x="1149.0" y="419.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.0" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.69%)</title><rect x="1149.0" y="403.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.0" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.69%)</title><rect x="1149.0" y="387.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.0" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.69%)</title><rect x="1149.0" y="371.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.0" y="382.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.69%)</title><rect x="1149.0" y="355.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.0" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.69%)</title><rect x="1149.0" y="339.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.0" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.69%)</title><rect x="1149.0" y="323.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.0" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.69%)</title><rect x="1149.0" y="307.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.0" y="318.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.69%)</title><rect x="1149.0" y="291.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.39%)</title><rect x="1157.2" y="547.0" width="16.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.39%)</title><rect x="1157.2" y="531.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.39%)</title><rect x="1157.2" y="515.0" width="16.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.39%)</title><rect x="1157.2" y="499.0" width="16.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.39%)</title><rect x="1157.2" y="483.0" width="16.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.69%)</title><rect x="1157.2" y="467.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.69%)</title><rect x="1157.2" y="451.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.69%)</title><rect x="1157.2" y="435.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.69%)</title><rect x="1157.2" y="419.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.69%)</title><rect x="1157.2" y="403.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.69%)</title><rect x="1157.2" y="387.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.69%)</title><rect x="1157.2" y="371.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.69%)</title><rect x="1157.2" y="355.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.69%)</title><rect x="1157.2" y="339.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.69%)</title><rect x="1157.2" y="323.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.69%)</title><rect x="1157.2" y="307.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.69%)</title><rect x="1157.2" y="291.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.69%)</title><rect x="1157.2" y="275.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.69%)</title><rect x="1157.2" y="259.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.69%)</title><rect x="1157.2" y="243.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.69%)</title><rect x="1157.2" y="227.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.69%)</title><rect x="1157.2" y="211.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.69%)</title><rect x="1157.2" y="195.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.69%)</title><rect x="1157.2" y="179.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.69%)</title><rect x="1157.2" y="163.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.69%)</title><rect x="1157.2" y="147.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.69%)</title><rect x="1157.2" y="131.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.69%)</title><rect x="1157.2" y="115.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.69%)</title><rect x="1157.2" y="99.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.69%)</title><rect x="1157.2" y="83.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.2" y="94.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.69%)</title><rect x="1157.2" y="67.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.2" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.69%)</title><rect x="1157.2" y="51.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.2" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.69%)</title><rect x="1157.2" y="35.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.2" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.69%)</title><rect x="1165.4" y="467.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.4" y="478.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.69%)</title><rect x="1165.4" y="451.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.69%)</title><rect x="1165.4" y="435.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.69%)</title><rect x="1165.4" y="419.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="430.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.69%)</title><rect x="1165.4" y="403.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.4" y="414.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.39%)</title><rect x="1173.6" y="675.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.39%)</title><rect x="1173.6" y="659.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.39%)</title><rect x="1173.6" y="643.0" width="16.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.39%)</title><rect x="1173.6" y="627.0" width="16.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="638.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.69%)</title><rect x="1173.6" y="611.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="622.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.69%)</title><rect x="1173.6" y="595.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="606.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.69%)</title><rect x="1173.6" y="579.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="590.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.69%)</title><rect x="1173.6" y="563.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="574.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.69%)</title><rect x="1181.8" y="611.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="622.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.69%)</title><rect x="1181.8" y="595.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.69%)</title><rect x="1181.8" y="579.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.69%)</title><rect x="1181.8" y="563.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
</g>
</svg>
