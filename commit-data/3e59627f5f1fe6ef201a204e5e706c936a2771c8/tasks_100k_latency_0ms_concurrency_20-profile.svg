<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (244 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 10.66%)</title><rect x="10.0" y="1139.0" width="125.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.41%)</title><rect x="10.0" y="1123.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.41%)</title><rect x="10.0" y="1107.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.41%)</title><rect x="10.0" y="1091.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.41%)</title><rect x="10.0" y="1075.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.41%)</title><rect x="10.0" y="1059.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.41%)</title><rect x="10.0" y="1043.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.41%)</title><rect x="10.0" y="1027.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.41%)</title><rect x="10.0" y="1011.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.41%)</title><rect x="10.0" y="995.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.41%)</title><rect x="10.0" y="979.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.41%)</title><rect x="10.0" y="963.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.41%)</title><rect x="10.0" y="947.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.41%)</title><rect x="10.0" y="931.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.41%)</title><rect x="10.0" y="915.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.41%)</title><rect x="10.0" y="899.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 10.25%)</title><rect x="14.8" y="1123.0" width="120.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.41%)</title><rect x="14.8" y="1107.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.41%)</title><rect x="14.8" y="1091.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/990289064.accept (1 samples, 0.41%)</title><rect x="14.8" y="1075.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.41%)</title><rect x="14.8" y="1059.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.41%)</title><rect x="14.8" y="1043.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.41%)</title><rect x="14.8" y="1027.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (14 samples, 5.74%)</title><rect x="19.7" y="1107.0" width="67.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.7" y="1118.0">java/la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1631608305.accept (14 samples, 5.74%)</title><rect x="19.7" y="1091.0" width="67.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.7" y="1102.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (14 samples, 5.74%)</title><rect x="19.7" y="1075.0" width="67.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.7" y="1086.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (10 samples, 4.10%)</title><rect x="19.7" y="1059.0" width="48.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.7" y="1070.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (10 samples, 4.10%)</title><rect x="19.7" y="1043.0" width="48.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.7" y="1054.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (10 samples, 4.10%)</title><rect x="19.7" y="1027.0" width="48.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.7" y="1038.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 4.10%)</title><rect x="19.7" y="1011.0" width="48.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.7" y="1022.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 4.10%)</title><rect x="19.7" y="995.0" width="48.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.7" y="1006.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 4.10%)</title><rect x="19.7" y="979.0" width="48.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.7" y="990.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 2.87%)</title><rect x="19.7" y="963.0" width="33.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.7" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 2.87%)</title><rect x="19.7" y="947.0" width="33.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.7" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.87%)</title><rect x="19.7" y="931.0" width="33.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.7" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.46%)</title><rect x="19.7" y="915.0" width="29.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.7" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.46%)</title><rect x="19.7" y="899.0" width="29.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.7" y="910.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (6 samples, 2.46%)</title><rect x="19.7" y="883.0" width="29.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.7" y="894.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 2.46%)</title><rect x="19.7" y="867.0" width="29.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="22.7" y="878.0">Un..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.41%)</title><rect x="19.7" y="851.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.7" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 1.64%)</title><rect x="24.5" y="851.0" width="19.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="27.5" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.41%)</title><rect x="43.9" y="851.0" width="4.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="46.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.41%)</title><rect x="48.7" y="915.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.23%)</title><rect x="53.5" y="963.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.23%)</title><rect x="53.5" y="947.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 1.23%)</title><rect x="53.5" y="931.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.5" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="63.2" y="915.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="66.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.41%)</title><rect x="68.0" y="1059.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.41%)</title><rect x="68.0" y="1043.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.41%)</title><rect x="68.0" y="1027.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.23%)</title><rect x="72.9" y="1059.0" width="14.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.82%)</title><rect x="77.7" y="1043.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.41%)</title><rect x="82.5" y="1027.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.41%)</title><rect x="82.5" y="1011.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.41%)</title><rect x="82.5" y="995.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.10%)</title><rect x="87.4" y="1107.0" width="48.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.4" y="1118.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.10%)</title><rect x="87.4" y="1091.0" width="48.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.4" y="1102.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.23%)</title><rect x="87.4" y="1075.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.23%)</title><rect x="87.4" y="1059.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.23%)</title><rect x="87.4" y="1043.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.82%)</title><rect x="87.4" y="1027.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.82%)</title><rect x="87.4" y="1011.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.4" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.41%)</title><rect x="87.4" y="995.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.4" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.41%)</title><rect x="87.4" y="979.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.4" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.41%)</title><rect x="87.4" y="963.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.41%)</title><rect x="92.2" y="995.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.41%)</title><rect x="92.2" y="979.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.41%)</title><rect x="92.2" y="963.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.41%)</title><rect x="92.2" y="947.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.41%)</title><rect x="92.2" y="931.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.41%)</title><rect x="92.2" y="915.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarlong (1 samples, 0.41%)</title><rect x="92.2" y="899.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.2" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.41%)</title><rect x="92.2" y="883.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.41%)</title><rect x="97.0" y="1027.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.41%)</title><rect x="97.0" y="1011.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.41%)</title><rect x="97.0" y="995.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.0" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.41%)</title><rect x="97.0" y="979.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.41%)</title><rect x="97.0" y="963.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.41%)</title><rect x="101.9" y="1075.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.41%)</title><rect x="101.9" y="1059.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.41%)</title><rect x="101.9" y="1043.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.41%)</title><rect x="101.9" y="1027.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1292840822.accept (1 samples, 0.41%)</title><rect x="101.9" y="1011.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.41%)</title><rect x="101.9" y="995.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.41%)</title><rect x="101.9" y="979.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="104.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.41%)</title><rect x="101.9" y="963.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.41%)</title><rect x="101.9" y="947.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.41%)</title><rect x="101.9" y="931.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.82%)</title><rect x="106.7" y="1075.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.82%)</title><rect x="106.7" y="1059.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.maybeUpdate (1 samples, 0.41%)</title><rect x="106.7" y="1043.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.41%)</title><rect x="111.6" y="1043.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.41%)</title><rect x="111.6" y="1027.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.41%)</title><rect x="111.6" y="1011.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.41%)</title><rect x="111.6" y="995.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.41%)</title><rect x="111.6" y="979.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.41%)</title><rect x="111.6" y="963.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.41%)</title><rect x="111.6" y="947.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.6" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.41%)</title><rect x="111.6" y="931.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.6" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.41%)</title><rect x="111.6" y="915.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.41%)</title><rect x="111.6" y="899.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.6" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.41%)</title><rect x="111.6" y="883.0" width="4.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="114.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 1.64%)</title><rect x="116.4" y="1075.0" width="19.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 1.23%)</title><rect x="121.2" y="1059.0" width="14.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 1.23%)</title><rect x="121.2" y="1043.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.41%)</title><rect x="121.2" y="1027.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.41%)</title><rect x="121.2" y="1011.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.82%)</title><rect x="126.1" y="1027.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="129.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.41%)</title><rect x="126.1" y="1011.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.41%)</title><rect x="126.1" y="995.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="129.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.41%)</title><rect x="130.9" y="1011.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.41%)</title><rect x="130.9" y="995.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.41%)</title><rect x="130.9" y="979.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="133.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.41%)</title><rect x="130.9" y="963.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.41%)</title><rect x="130.9" y="947.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.9" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.41%)</title><rect x="130.9" y="931.0" width="4.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="133.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 20.90%)</title><rect x="135.7" y="1139.0" width="246.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="138.7" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 20.90%)</title><rect x="135.7" y="1123.0" width="246.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.7" y="1134.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 20.90%)</title><rect x="135.7" y="1107.0" width="246.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.7" y="1118.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1583312751.run (34 samples, 13.93%)</title><rect x="135.7" y="1091.0" width="164.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.7" y="1102.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (34 samples, 13.93%)</title><rect x="135.7" y="1075.0" width="164.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.7" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (34 samples, 13.93%)</title><rect x="135.7" y="1059.0" width="164.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.7" y="1070.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (34 samples, 13.93%)</title><rect x="135.7" y="1043.0" width="164.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.7" y="1054.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (6 samples, 2.46%)</title><rect x="140.6" y="1027.0" width="29.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.6" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (6 samples, 2.46%)</title><rect x="140.6" y="1011.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.6" y="1022.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (6 samples, 2.46%)</title><rect x="140.6" y="995.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.6" y="1006.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 2.46%)</title><rect x="140.6" y="979.0" width="29.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.6" y="990.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 2.46%)</title><rect x="140.6" y="963.0" width="29.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.6" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 2.46%)</title><rect x="140.6" y="947.0" width="29.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.6" y="958.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.41%)</title><rect x="140.6" y="931.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.41%)</title><rect x="140.6" y="915.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.41%)</title><rect x="140.6" y="899.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.41%)</title><rect x="140.6" y="883.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.41%)</title><rect x="140.6" y="867.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.41%)</title><rect x="140.6" y="851.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 1.23%)</title><rect x="145.4" y="931.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.41%)</title><rect x="145.4" y="915.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.41%)</title><rect x="145.4" y="899.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.41%)</title><rect x="145.4" y="883.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.41%)</title><rect x="145.4" y="867.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.41%)</title><rect x="145.4" y="851.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.41%)</title><rect x="145.4" y="835.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 0.82%)</title><rect x="150.2" y="915.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.82%)</title><rect x="150.2" y="899.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.41%)</title><rect x="150.2" y="883.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.41%)</title><rect x="155.1" y="883.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.41%)</title><rect x="155.1" y="867.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.41%)</title><rect x="155.1" y="851.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.82%)</title><rect x="159.9" y="931.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.82%)</title><rect x="159.9" y="915.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.82%)</title><rect x="159.9" y="899.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.82%)</title><rect x="159.9" y="883.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.82%)</title><rect x="159.9" y="867.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (26 samples, 10.66%)</title><rect x="169.6" y="1027.0" width="125.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.6" y="1038.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.05%)</title><rect x="169.6" y="1011.0" width="24.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.6" y="1022.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.05%)</title><rect x="169.6" y="995.0" width="24.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.6" y="1006.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.05%)</title><rect x="169.6" y="979.0" width="24.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.6" y="990.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.82%)</title><rect x="169.6" y="963.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.82%)</title><rect x="169.6" y="947.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.82%)</title><rect x="169.6" y="931.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.82%)</title><rect x="169.6" y="915.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.23%)</title><rect x="179.3" y="963.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.41%)</title><rect x="188.9" y="947.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.41%)</title><rect x="188.9" y="931.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.9" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.41%)</title><rect x="188.9" y="915.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 6.15%)</title><rect x="193.8" y="1011.0" width="72.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.8" y="1022.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 6.15%)</title><rect x="193.8" y="995.0" width="72.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.8" y="1006.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 3.28%)</title><rect x="198.6" y="979.0" width="38.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.6" y="990.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.64%)</title><rect x="208.3" y="963.0" width="19.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.3" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.64%)</title><rect x="208.3" y="947.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.3" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.82%)</title><rect x="218.0" y="931.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.82%)</title><rect x="218.0" y="915.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.0" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.82%)</title><rect x="218.0" y="899.0" width="9.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="221.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.41%)</title><rect x="227.6" y="963.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.6" y="974.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.41%)</title><rect x="227.6" y="947.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.6" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.41%)</title><rect x="227.6" y="931.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.6" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="227.6" y="915.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="230.6" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="232.5" y="963.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="235.5" y="974.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.82%)</title><rect x="237.3" y="979.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.3" y="990.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.41%)</title><rect x="242.1" y="963.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.1" y="974.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.41%)</title><rect x="242.1" y="947.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.partition (1 samples, 0.41%)</title><rect x="247.0" y="979.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.0" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.23%)</title><rect x="251.8" y="979.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.8" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.23%)</title><rect x="251.8" y="963.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.41%)</title><rect x="251.8" y="947.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.41%)</title><rect x="251.8" y="931.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.41%)</title><rect x="251.8" y="915.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.41%)</title><rect x="251.8" y="899.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 0.82%)</title><rect x="256.6" y="947.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.82%)</title><rect x="256.6" y="931.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.41%)</title><rect x="261.5" y="915.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 1.64%)</title><rect x="266.3" y="1011.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 1.64%)</title><rect x="266.3" y="995.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.3" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.41%)</title><rect x="266.3" y="979.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="269.3" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.41%)</title><rect x="266.3" y="963.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="269.3" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.41%)</title><rect x="266.3" y="947.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="269.3" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.41%)</title><rect x="266.3" y="931.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="269.3" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.41%)</title><rect x="266.3" y="915.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="269.3" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.41%)</title><rect x="266.3" y="899.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="269.3" y="910.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.41%)</title><rect x="266.3" y="883.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="269.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/340408986.process (1 samples, 0.41%)</title><rect x="271.1" y="979.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.41%)</title><rect x="271.1" y="963.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.41%)</title><rect x="271.1" y="947.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.41%)</title><rect x="271.1" y="931.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.41%)</title><rect x="271.1" y="915.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.41%)</title><rect x="271.1" y="899.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.41%)</title><rect x="271.1" y="883.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.1" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.41%)</title><rect x="276.0" y="979.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.41%)</title><rect x="276.0" y="963.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/42971572.get$Lambda (1 samples, 0.41%)</title><rect x="276.0" y="947.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/42971572.&lt;init&gt; (1 samples, 0.41%)</title><rect x="276.0" y="931.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.41%)</title><rect x="276.0" y="915.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.41%)</title><rect x="280.8" y="979.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.41%)</title><rect x="280.8" y="963.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.8" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.41%)</title><rect x="280.8" y="947.0" width="4.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="283.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.82%)</title><rect x="285.7" y="1011.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.82%)</title><rect x="285.7" y="995.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.82%)</title><rect x="285.7" y="979.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/1591332597.accept (2 samples, 0.82%)</title><rect x="285.7" y="963.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 0.82%)</title><rect x="285.7" y="947.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.82%)</title><rect x="285.7" y="931.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.7" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.82%)</title><rect x="285.7" y="915.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.7" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.82%)</title><rect x="285.7" y="899.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.7" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="290.5" y="883.0" width="4.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="293.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="290.5" y="867.0" width="4.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="293.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.41%)</title><rect x="295.3" y="1027.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.41%)</title><rect x="295.3" y="1011.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.41%)</title><rect x="295.3" y="995.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/467360586.accept (1 samples, 0.41%)</title><rect x="295.3" y="979.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.41%)</title><rect x="295.3" y="963.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1839743959.complete (1 samples, 0.41%)</title><rect x="295.3" y="947.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.41%)</title><rect x="295.3" y="931.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.41%)</title><rect x="295.3" y="915.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="298.3" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.41%)</title><rect x="295.3" y="899.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.3" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.41%)</title><rect x="295.3" y="883.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.41%)</title><rect x="300.2" y="1091.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.41%)</title><rect x="300.2" y="1075.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.2" y="1086.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.41%)</title><rect x="300.2" y="1059.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="303.2" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.273] (1 samples, 0.41%)</title><rect x="300.2" y="1043.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="303.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.41%)</title><rect x="305.0" y="1091.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 6.15%)</title><rect x="309.8" y="1091.0" width="72.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.8" y="1102.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 6.15%)</title><rect x="309.8" y="1075.0" width="72.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.8" y="1086.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.41%)</title><rect x="319.5" y="1059.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 4.92%)</title><rect x="324.3" y="1059.0" width="58.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.3" y="1070.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.82%)</title><rect x="334.0" y="1043.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (2 samples, 0.82%)</title><rect x="334.0" y="1027.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.41%)</title><rect x="343.7" y="1043.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.41%)</title><rect x="343.7" y="1027.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="346.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.41%)</title><rect x="343.7" y="1011.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.41%)</title><rect x="343.7" y="995.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 2.87%)</title><rect x="348.5" y="1043.0" width="33.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.5" y="1054.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (7 samples, 2.87%)</title><rect x="348.5" y="1027.0" width="33.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.5" y="1038.0">su..</text>
</g>
<g>
<title>Unsafe_Park (7 samples, 2.87%)</title><rect x="348.5" y="1011.0" width="33.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="351.5" y="1022.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.41%)</title><rect x="348.5" y="995.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="351.5" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.82%)</title><rect x="353.4" y="995.0" width="9.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="356.4" y="1006.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 1.64%)</title><rect x="363.0" y="995.0" width="19.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="366.0" y="1006.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.41%)</title><rect x="382.4" y="1139.0" width="4.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="385.4" y="1150.0"></text>
</g>
<g>
<title>start_thread (166 samples, 68.03%)</title><rect x="387.2" y="1139.0" width="802.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="390.2" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (166 samples, 68.03%)</title><rect x="387.2" y="1123.0" width="802.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="390.2" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.92%)</title><rect x="387.2" y="1107.0" width="58.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="390.2" y="1118.0">GangWo..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.41%)</title><rect x="387.2" y="1091.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="390.2" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.41%)</title><rect x="387.2" y="1075.0" width="4.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="390.2" y="1086.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 4.51%)</title><rect x="392.0" y="1091.0" width="53.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="395.0" y="1102.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 3.28%)</title><rect x="392.0" y="1075.0" width="38.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="395.0" y="1086.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.82%)</title><rect x="396.9" y="1059.0" width="9.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="399.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.41%)</title><rect x="401.7" y="1043.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="404.7" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.82%)</title><rect x="406.6" y="1059.0" width="9.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="409.6" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.41%)</title><rect x="406.6" y="1043.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="409.6" y="1054.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.41%)</title><rect x="406.6" y="1027.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="409.6" y="1038.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.41%)</title><rect x="406.6" y="1011.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="409.6" y="1022.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_range_nv(oopDesc*, G1ParScanClosure*, int, int) (1 samples, 0.41%)</title><rect x="411.4" y="1043.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="414.4" y="1054.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.41%)</title><rect x="411.4" y="1027.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="414.4" y="1038.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.23%)</title><rect x="416.2" y="1059.0" width="14.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="419.2" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.82%)</title><rect x="430.7" y="1075.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="433.7" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.41%)</title><rect x="430.7" y="1059.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="433.7" y="1070.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.41%)</title><rect x="430.7" y="1043.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="433.7" y="1054.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.41%)</title><rect x="430.7" y="1027.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="433.7" y="1038.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.41%)</title><rect x="435.6" y="1059.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="438.6" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.41%)</title><rect x="440.4" y="1075.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="443.4" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.41%)</title><rect x="440.4" y="1059.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="443.4" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.41%)</title><rect x="440.4" y="1043.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="443.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.41%)</title><rect x="440.4" y="1027.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="443.4" y="1038.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.41%)</title><rect x="440.4" y="1011.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="443.4" y="1022.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.41%)</title><rect x="440.4" y="995.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="443.4" y="1006.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (154 samples, 63.11%)</title><rect x="445.2" y="1107.0" width="744.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.2" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (153 samples, 62.70%)</title><rect x="445.2" y="1091.0" width="740.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="448.2" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (152 samples, 62.30%)</title><rect x="445.2" y="1075.0" width="735.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="448.2" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (147 samples, 60.25%)</title><rect x="445.2" y="1059.0" width="710.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="448.2" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (147 samples, 60.25%)</title><rect x="445.2" y="1043.0" width="710.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="448.2" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (74 samples, 30.33%)</title><rect x="445.2" y="1027.0" width="357.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="448.2" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 2.05%)</title><rect x="445.2" y="1011.0" width="24.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="448.2" y="1022.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.41%)</title><rect x="445.2" y="995.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="448.2" y="1006.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.41%)</title><rect x="445.2" y="979.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="448.2" y="990.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.41%)</title><rect x="445.2" y="963.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="448.2" y="974.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 1.64%)</title><rect x="450.1" y="995.0" width="19.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="453.1" y="1006.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (4 samples, 1.64%)</title><rect x="450.1" y="979.0" width="19.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="453.1" y="990.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.82%)</title><rect x="459.8" y="963.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="462.8" y="974.0"></text>
</g>
<g>
<title>loadNNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.41%)</title><rect x="459.8" y="947.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="462.8" y="958.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.41%)</title><rect x="459.8" y="931.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="462.8" y="942.0"></text>
</g>
<g>
<title>methodOper::method() const (1 samples, 0.41%)</title><rect x="464.6" y="947.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="467.6" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.23%)</title><rect x="469.4" y="1011.0" width="14.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="472.4" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.82%)</title><rect x="474.3" y="995.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="477.3" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.41%)</title><rect x="479.1" y="979.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="482.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.87%)</title><rect x="483.9" y="1011.0" width="33.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="486.9" y="1022.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.41%)</title><rect x="483.9" y="995.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="486.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 2.46%)</title><rect x="488.8" y="995.0" width="29.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="491.8" y="1006.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.41%)</title><rect x="498.4" y="979.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="501.4" y="990.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.41%)</title><rect x="503.3" y="979.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="506.3" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.41%)</title><rect x="503.3" y="963.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="506.3" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.82%)</title><rect x="508.1" y="979.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="511.1" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.41%)</title><rect x="513.0" y="963.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="516.0" y="974.0"></text>
</g>
<g>
<title>State::_sub_Op_If(Node const*) (1 samples, 0.41%)</title><rect x="513.0" y="947.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.0" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 2.46%)</title><rect x="517.8" y="1011.0" width="29.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="520.8" y="1022.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.41%)</title><rect x="517.8" y="995.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="520.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.41%)</title><rect x="522.6" y="995.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.6" y="1006.0"></text>
</g>
<g>
<title>Block::update_uncommon_branch(Block*) (1 samples, 0.41%)</title><rect x="522.6" y="979.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="525.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.64%)</title><rect x="527.5" y="995.0" width="19.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="530.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.23%)</title><rect x="527.5" y="979.0" width="14.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="530.5" y="990.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.41%)</title><rect x="527.5" y="963.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="530.5" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.41%)</title><rect x="532.3" y="963.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="535.3" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.41%)</title><rect x="537.1" y="963.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="540.1" y="974.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.41%)</title><rect x="537.1" y="947.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.1" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.41%)</title><rect x="537.1" y="931.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.1" y="942.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.41%)</title><rect x="537.1" y="915.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="540.1" y="926.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.41%)</title><rect x="542.0" y="979.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="545.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (53 samples, 21.72%)</title><rect x="546.8" y="1011.0" width="256.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="549.8" y="1022.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.82%)</title><rect x="546.8" y="995.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="549.8" y="1006.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.41%)</title><rect x="556.5" y="995.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="559.5" y="1006.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.41%)</title><rect x="561.3" y="995.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="564.3" y="1006.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.82%)</title><rect x="566.1" y="995.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="569.1" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.82%)</title><rect x="575.8" y="995.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="578.8" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.41%)</title><rect x="580.7" y="979.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="583.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.82%)</title><rect x="585.5" y="995.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="588.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.23%)</title><rect x="595.2" y="995.0" width="14.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="598.2" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="595.2" y="979.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="598.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.82%)</title><rect x="600.0" y="979.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="603.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 2.87%)</title><rect x="609.7" y="995.0" width="33.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="612.7" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 3.28%)</title><rect x="643.5" y="995.0" width="38.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.5" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 2.05%)</title><rect x="648.4" y="979.0" width="24.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.4" y="990.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="667.7" y="963.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="670.7" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.41%)</title><rect x="672.5" y="979.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="675.5" y="990.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.41%)</title><rect x="677.4" y="979.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="680.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 0.82%)</title><rect x="682.2" y="995.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="685.2" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.41%)</title><rect x="687.0" y="979.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="690.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.23%)</title><rect x="691.9" y="995.0" width="14.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="694.9" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.41%)</title><rect x="701.6" y="979.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="704.6" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.41%)</title><rect x="701.6" y="963.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="704.6" y="974.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.41%)</title><rect x="701.6" y="947.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="704.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.41%)</title><rect x="706.4" y="995.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="709.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.64%)</title><rect x="711.2" y="995.0" width="19.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="714.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.23%)</title><rect x="716.1" y="979.0" width="14.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="719.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.41%)</title><rect x="730.6" y="995.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="733.6" y="1006.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.41%)</title><rect x="730.6" y="979.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="733.6" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.82%)</title><rect x="735.4" y="995.0" width="9.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="738.4" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.82%)</title><rect x="735.4" y="979.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="738.4" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.82%)</title><rect x="735.4" y="963.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="738.4" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.41%)</title><rect x="735.4" y="947.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.4" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.41%)</title><rect x="740.2" y="947.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="743.2" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.41%)</title><rect x="745.1" y="995.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="748.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.41%)</title><rect x="749.9" y="995.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.9" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 2.87%)</title><rect x="754.8" y="995.0" width="33.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="757.8" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.23%)</title><rect x="774.1" y="979.0" width="14.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="777.1" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.41%)</title><rect x="774.1" y="963.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="777.1" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.82%)</title><rect x="778.9" y="963.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="781.9" y="974.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.41%)</title><rect x="788.6" y="995.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="791.6" y="1006.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.41%)</title><rect x="793.4" y="995.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="796.4" y="1006.0"></text>
</g>
<g>
<title>negI_rRegNode::two_adr() const (1 samples, 0.41%)</title><rect x="798.3" y="995.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="801.3" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (58 samples, 23.77%)</title><rect x="803.1" y="1027.0" width="280.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="806.1" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.82%)</title><rect x="803.1" y="1011.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.1" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.82%)</title><rect x="803.1" y="995.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.1" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.41%)</title><rect x="812.8" y="1011.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="815.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.41%)</title><rect x="812.8" y="995.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="815.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.41%)</title><rect x="812.8" y="979.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="815.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.41%)</title><rect x="812.8" y="963.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="815.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.41%)</title><rect x="817.6" y="1011.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="820.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.41%)</title><rect x="817.6" y="995.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="820.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="979.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="820.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="963.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="820.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="947.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="820.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="931.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="820.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="915.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="820.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="899.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="820.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="883.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="820.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="867.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="820.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="851.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="820.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="835.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="820.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.41%)</title><rect x="817.6" y="819.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="820.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::step_through_mergemem(MergeMemNode*, int, TypeOopPtr const*) (1 samples, 0.41%)</title><rect x="817.6" y="803.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="820.6" y="814.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.41%)</title><rect x="822.5" y="1011.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="825.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.41%)</title><rect x="827.3" y="1011.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="830.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (43 samples, 17.62%)</title><rect x="832.1" y="1011.0" width="208.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="835.1" y="1022.0">PhaseIdealLoop::build_and_o..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 1.23%)</title><rect x="832.1" y="995.0" width="14.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="835.1" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="979.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.1" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="963.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="835.1" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="947.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="835.1" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="931.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.1" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="915.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="835.1" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="899.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="835.1" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="883.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.1" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="867.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.1" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="851.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.1" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="835.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.1" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="819.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="835.1" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="803.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="832.1" y="787.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="835.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.41%)</title><rect x="832.1" y="771.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="835.1" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="837.0" y="979.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="840.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.41%)</title><rect x="837.0" y="963.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.0" y="974.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.41%)</title><rect x="837.0" y="947.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="840.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="841.8" y="979.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="841.8" y="963.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.41%)</title><rect x="841.8" y="947.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.8" y="958.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.41%)</title><rect x="846.6" y="995.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="849.6" y="1006.0"></text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.82%)</title><rect x="851.5" y="995.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="854.5" y="1006.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.41%)</title><rect x="861.1" y="995.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="864.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 2.05%)</title><rect x="866.0" y="995.0" width="24.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.0" y="1006.0">P..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.41%)</title><rect x="880.5" y="979.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="883.5" y="990.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.41%)</title><rect x="885.3" y="979.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 2.46%)</title><rect x="890.2" y="995.0" width="29.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.2" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.82%)</title><rect x="909.5" y="979.0" width="9.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 6.56%)</title><rect x="919.2" y="995.0" width="77.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.2" y="1006.0">PhaseIdea..</text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.41%)</title><rect x="933.7" y="979.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 4.92%)</title><rect x="938.5" y="979.0" width="58.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.5" y="990.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 4.10%)</title><rect x="948.2" y="963.0" width="48.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="951.2" y="974.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.41%)</title><rect x="948.2" y="947.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="951.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.41%)</title><rect x="953.0" y="947.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 3.28%)</title><rect x="957.9" y="947.0" width="38.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.9" y="958.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.82%)</title><rect x="996.6" y="995.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="999.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.41%)</title><rect x="1001.4" y="979.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.41%)</title><rect x="1006.2" y="995.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.82%)</title><rect x="1011.1" y="995.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.41%)</title><rect x="1015.9" y="979.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.41%)</title><rect x="1015.9" y="963.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1018.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.41%)</title><rect x="1015.9" y="947.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.64%)</title><rect x="1020.7" y="995.0" width="19.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1023.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.64%)</title><rect x="1020.7" y="979.0" width="19.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.7" y="990.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseTransform*) const (1 samples, 0.41%)</title><rect x="1020.7" y="963.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.7" y="974.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.41%)</title><rect x="1020.7" y="947.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.7" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.41%)</title><rect x="1020.7" y="931.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.7" y="942.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.41%)</title><rect x="1020.7" y="915.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1023.7" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.82%)</title><rect x="1025.6" y="963.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1028.6" y="974.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.41%)</title><rect x="1030.4" y="947.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.4" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1035.2" y="963.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1038.2" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.41%)</title><rect x="1035.2" y="947.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.2" y="958.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.41%)</title><rect x="1035.2" y="931.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.2" y="942.0"></text>
</g>
<g>
<title>TypeInt::hash() const (1 samples, 0.41%)</title><rect x="1035.2" y="915.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.2" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.28%)</title><rect x="1040.1" y="1011.0" width="38.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.1" y="1022.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 3.28%)</title><rect x="1040.1" y="995.0" width="38.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.1" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.41%)</title><rect x="1040.1" y="979.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.1" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.41%)</title><rect x="1040.1" y="963.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1043.1" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.41%)</title><rect x="1040.1" y="947.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.1" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.82%)</title><rect x="1044.9" y="979.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.41%)</title><rect x="1044.9" y="963.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.9" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.41%)</title><rect x="1044.9" y="947.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.9" y="958.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.41%)</title><rect x="1044.9" y="931.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.9" y="942.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.41%)</title><rect x="1049.8" y="963.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1052.8" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 1.23%)</title><rect x="1054.6" y="979.0" width="14.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.82%)</title><rect x="1054.6" y="963.0" width="9.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="947.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="931.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="915.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="899.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="883.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1057.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="867.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="851.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="835.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="819.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="803.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.6" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="787.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.6" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.82%)</title><rect x="1054.6" y="771.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.6" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="755.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1057.6" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="739.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.6" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="723.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.6" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="707.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.6" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="691.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.6" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="675.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.6" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="659.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.6" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="643.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.6" y="654.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.41%)</title><rect x="1054.6" y="627.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.6" y="638.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="1054.6" y="611.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.6" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.41%)</title><rect x="1059.4" y="755.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.4" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="1059.4" y="739.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.4" y="750.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.41%)</title><rect x="1064.3" y="963.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.3" y="974.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.41%)</title><rect x="1069.1" y="979.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.1" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.41%)</title><rect x="1069.1" y="963.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.1" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.41%)</title><rect x="1069.1" y="947.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.1" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="1069.1" y="931.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.1" y="942.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.41%)</title><rect x="1073.9" y="979.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.9" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.41%)</title><rect x="1078.8" y="1011.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.41%)</title><rect x="1078.8" y="995.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.41%)</title><rect x="1078.8" y="979.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.8" y="990.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.41%)</title><rect x="1078.8" y="963.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.8" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.41%)</title><rect x="1078.8" y="947.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.8" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.41%)</title><rect x="1078.8" y="931.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.8" y="942.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.41%)</title><rect x="1083.6" y="1027.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.6" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.41%)</title><rect x="1083.6" y="1011.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.6" y="1022.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.41%)</title><rect x="1083.6" y="995.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.6" y="1006.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.41%)</title><rect x="1083.6" y="979.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 4.92%)</title><rect x="1088.4" y="1027.0" width="58.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.4" y="1038.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 4.92%)</title><rect x="1088.4" y="1011.0" width="58.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.4" y="1022.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 4.92%)</title><rect x="1088.4" y="995.0" width="58.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.4" y="1006.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 4.92%)</title><rect x="1088.4" y="979.0" width="58.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="990.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 4.92%)</title><rect x="1088.4" y="963.0" width="58.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.4" y="974.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (12 samples, 4.92%)</title><rect x="1088.4" y="947.0" width="58.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.4" y="958.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 3.69%)</title><rect x="1088.4" y="931.0" width="43.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.4" y="942.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 3.69%)</title><rect x="1088.4" y="915.0" width="43.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.4" y="926.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 3.69%)</title><rect x="1088.4" y="899.0" width="43.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.4" y="910.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 3.69%)</title><rect x="1088.4" y="883.0" width="43.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.4" y="894.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 3.69%)</title><rect x="1088.4" y="867.0" width="43.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="878.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.28%)</title><rect x="1088.4" y="851.0" width="38.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.4" y="862.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.87%)</title><rect x="1088.4" y="835.0" width="33.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.87%)</title><rect x="1088.4" y="819.0" width="33.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.4" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.87%)</title><rect x="1088.4" y="803.0" width="33.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.4" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.87%)</title><rect x="1088.4" y="787.0" width="33.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.4" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.87%)</title><rect x="1088.4" y="771.0" width="33.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.4" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.87%)</title><rect x="1088.4" y="755.0" width="33.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.4" y="766.0">Pa..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.41%)</title><rect x="1088.4" y="739.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.4" y="750.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.41%)</title><rect x="1088.4" y="723.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.46%)</title><rect x="1093.3" y="739.0" width="29.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.3" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.46%)</title><rect x="1093.3" y="723.0" width="29.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.3" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.05%)</title><rect x="1093.3" y="707.0" width="24.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.3" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.05%)</title><rect x="1093.3" y="691.0" width="24.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.3" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.05%)</title><rect x="1093.3" y="675.0" width="24.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.3" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.64%)</title><rect x="1093.3" y="659.0" width="19.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.64%)</title><rect x="1093.3" y="643.0" width="19.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.64%)</title><rect x="1093.3" y="627.0" width="19.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.64%)</title><rect x="1093.3" y="611.0" width="19.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.64%)</title><rect x="1093.3" y="595.0" width="19.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.64%)</title><rect x="1093.3" y="579.0" width="19.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.64%)</title><rect x="1093.3" y="563.0" width="19.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.64%)</title><rect x="1093.3" y="547.0" width="19.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.64%)</title><rect x="1093.3" y="531.0" width="19.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.64%)</title><rect x="1093.3" y="515.0" width="19.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.64%)</title><rect x="1093.3" y="499.0" width="19.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.64%)</title><rect x="1093.3" y="483.0" width="19.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.64%)</title><rect x="1093.3" y="467.0" width="19.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.3" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1093.3" y="451.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.3" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.41%)</title><rect x="1093.3" y="435.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1096.3" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.41%)</title><rect x="1093.3" y="419.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.3" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.41%)</title><rect x="1093.3" y="403.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.3" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.41%)</title><rect x="1093.3" y="387.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.3" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1093.3" y="371.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.3" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1093.3" y="355.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.3" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="1093.3" y="339.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.3" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.41%)</title><rect x="1093.3" y="323.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.3" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.41%)</title><rect x="1093.3" y="307.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.3" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1093.3" y="291.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.3" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1093.3" y="275.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.3" y="286.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.41%)</title><rect x="1093.3" y="259.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.3" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.41%)</title><rect x="1093.3" y="243.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.3" y="254.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.41%)</title><rect x="1093.3" y="227.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.3" y="238.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.41%)</title><rect x="1093.3" y="211.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.3" y="222.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.41%)</title><rect x="1093.3" y="195.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.3" y="206.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.41%)</title><rect x="1093.3" y="179.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.3" y="190.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.41%)</title><rect x="1093.3" y="163.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.3" y="174.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.41%)</title><rect x="1093.3" y="147.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.41%)</title><rect x="1098.1" y="451.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.1" y="462.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.41%)</title><rect x="1098.1" y="435.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.1" y="446.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.41%)</title><rect x="1098.1" y="419.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.1" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1098.1" y="403.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.1" y="414.0"></text>
</g>
<g>
<title>ciInstanceKlass::unique_concrete_subklass() (1 samples, 0.41%)</title><rect x="1098.1" y="387.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1103.0" y="451.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1103.0" y="435.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1103.0" y="419.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1103.0" y="403.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1103.0" y="387.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.82%)</title><rect x="1103.0" y="371.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1103.0" y="355.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1103.0" y="339.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1103.0" y="323.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1103.0" y="307.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1103.0" y="291.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1103.0" y="275.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1103.0" y="259.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1103.0" y="243.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1103.0" y="227.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1103.0" y="211.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1103.0" y="195.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1103.0" y="179.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1103.0" y="163.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.0" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1103.0" y="147.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1103.0" y="131.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1103.0" y="115.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1103.0" y="99.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.0" y="110.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.41%)</title><rect x="1103.0" y="83.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.0" y="94.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.41%)</title><rect x="1103.0" y="67.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.0" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.41%)</title><rect x="1103.0" y="51.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.0" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.41%)</title><rect x="1103.0" y="35.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.41%)</title><rect x="1107.8" y="275.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.41%)</title><rect x="1107.8" y="259.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.8" y="270.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.41%)</title><rect x="1107.8" y="243.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.8" y="254.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1107.8" y="227.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.8" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.41%)</title><rect x="1107.8" y="211.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1110.8" y="222.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.41%)</title><rect x="1107.8" y="195.0" width="4.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1110.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.41%)</title><rect x="1112.6" y="659.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.41%)</title><rect x="1112.6" y="643.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.6" y="654.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.41%)</title><rect x="1112.6" y="627.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.6" y="638.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.41%)</title><rect x="1112.6" y="611.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.6" y="622.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.41%)</title><rect x="1112.6" y="595.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.6" y="606.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.41%)</title><rect x="1112.6" y="579.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.6" y="590.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.41%)</title><rect x="1112.6" y="563.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.6" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.41%)</title><rect x="1112.6" y="547.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.6" y="558.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.41%)</title><rect x="1117.5" y="707.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.5" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.41%)</title><rect x="1117.5" y="691.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.5" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.41%)</title><rect x="1117.5" y="675.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.5" y="686.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.41%)</title><rect x="1117.5" y="659.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.5" y="670.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.41%)</title><rect x="1117.5" y="643.0" width="4.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1120.5" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1122.3" y="835.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1122.3" y="819.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1122.3" y="803.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1122.3" y="787.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1122.3" y="771.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1122.3" y="755.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1122.3" y="739.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1122.3" y="723.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1122.3" y="707.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1122.3" y="691.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1122.3" y="675.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1122.3" y="659.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1122.3" y="643.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1122.3" y="627.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1122.3" y="611.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1122.3" y="595.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1122.3" y="579.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1122.3" y="563.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1122.3" y="547.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1122.3" y="531.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1122.3" y="515.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1122.3" y="499.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1122.3" y="483.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1122.3" y="467.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.3" y="478.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.41%)</title><rect x="1122.3" y="451.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.41%)</title><rect x="1127.1" y="851.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.1" y="862.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.41%)</title><rect x="1127.1" y="835.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.1" y="846.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.41%)</title><rect x="1127.1" y="819.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.1" y="830.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.41%)</title><rect x="1127.1" y="803.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.1" y="814.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long*, unsigned long) (1 samples, 0.41%)</title><rect x="1127.1" y="787.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.1" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.23%)</title><rect x="1132.0" y="931.0" width="14.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.23%)</title><rect x="1132.0" y="915.0" width="14.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.23%)</title><rect x="1132.0" y="899.0" width="14.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.23%)</title><rect x="1132.0" y="883.0" width="14.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.23%)</title><rect x="1132.0" y="867.0" width="14.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.23%)</title><rect x="1132.0" y="851.0" width="14.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.23%)</title><rect x="1132.0" y="835.0" width="14.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1132.0" y="819.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1132.0" y="803.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1132.0" y="787.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1132.0" y="771.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1132.0" y="755.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.82%)</title><rect x="1132.0" y="739.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.82%)</title><rect x="1132.0" y="723.0" width="9.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.82%)</title><rect x="1132.0" y="707.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.82%)</title><rect x="1132.0" y="691.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.82%)</title><rect x="1132.0" y="675.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.82%)</title><rect x="1132.0" y="659.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1132.0" y="643.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.0" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1132.0" y="627.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1132.0" y="611.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1132.0" y="595.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1132.0" y="579.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1132.0" y="563.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1132.0" y="547.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1132.0" y="531.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1132.0" y="515.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1132.0" y="499.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1132.0" y="483.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1132.0" y="467.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1132.0" y="451.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1132.0" y="435.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1132.0" y="419.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1132.0" y="403.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1132.0" y="387.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1132.0" y="371.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1132.0" y="355.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1132.0" y="339.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1132.0" y="323.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.0" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1132.0" y="307.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.0" y="318.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.41%)</title><rect x="1132.0" y="291.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.0" y="302.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.41%)</title><rect x="1132.0" y="275.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.0" y="286.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.41%)</title><rect x="1132.0" y="259.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.41%)</title><rect x="1136.8" y="643.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.41%)</title><rect x="1136.8" y="627.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.8" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1136.8" y="611.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.8" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.41%)</title><rect x="1136.8" y="595.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.8" y="606.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.41%)</title><rect x="1136.8" y="579.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1139.8" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1141.6" y="819.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1141.6" y="803.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1141.6" y="787.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1141.6" y="771.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1141.6" y="755.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1141.6" y="739.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1141.6" y="723.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.6" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1141.6" y="707.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1141.6" y="691.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1141.6" y="675.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1141.6" y="659.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1141.6" y="643.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1141.6" y="627.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1141.6" y="611.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.6" y="622.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1141.6" y="595.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.6" y="606.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.41%)</title><rect x="1141.6" y="579.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.6" y="590.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_current_thread(Node*&amp;) (1 samples, 0.41%)</title><rect x="1141.6" y="563.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.6" y="574.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.41%)</title><rect x="1141.6" y="547.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.6" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.41%)</title><rect x="1141.6" y="531.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.6" y="542.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1141.6" y="515.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.6" y="526.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.82%)</title><rect x="1146.5" y="1027.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="1038.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.82%)</title><rect x="1146.5" y="1011.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.5" y="1022.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.64%)</title><rect x="1156.1" y="1059.0" width="19.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.1" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.64%)</title><rect x="1156.1" y="1043.0" width="19.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.1" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.64%)</title><rect x="1156.1" y="1027.0" width="19.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.1" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.23%)</title><rect x="1156.1" y="1011.0" width="14.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.1" y="1022.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.41%)</title><rect x="1156.1" y="995.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.1" y="1006.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.41%)</title><rect x="1156.1" y="979.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.1" y="990.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.41%)</title><rect x="1156.1" y="963.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.41%)</title><rect x="1156.1" y="947.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.41%)</title><rect x="1156.1" y="931.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.41%)</title><rect x="1156.1" y="915.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.1" y="926.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.41%)</title><rect x="1156.1" y="899.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.1" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.41%)</title><rect x="1161.0" y="995.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.0" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.41%)</title><rect x="1161.0" y="979.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="990.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.41%)</title><rect x="1165.8" y="995.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.8" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.41%)</title><rect x="1165.8" y="979.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="990.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.41%)</title><rect x="1165.8" y="963.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.8" y="974.0"></text>
</g>
<g>
<title>LinearScan::add_def(LIR_OprDesc*, int, IntervalUseKind) (1 samples, 0.41%)</title><rect x="1165.8" y="947.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.8" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.41%)</title><rect x="1170.7" y="1011.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="1022.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.41%)</title><rect x="1170.7" y="995.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="1006.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.41%)</title><rect x="1170.7" y="979.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="990.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.41%)</title><rect x="1170.7" y="963.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.7" y="974.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.41%)</title><rect x="1170.7" y="947.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="958.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.41%)</title><rect x="1175.5" y="1059.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1070.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.41%)</title><rect x="1180.3" y="1075.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.41%)</title><rect x="1180.3" y="1059.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.41%)</title><rect x="1180.3" y="1043.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.41%)</title><rect x="1180.3" y="1027.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="1038.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.41%)</title><rect x="1180.3" y="1011.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.41%)</title><rect x="1180.3" y="995.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="1006.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.41%)</title><rect x="1185.2" y="1091.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="1102.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.41%)</title><rect x="1185.2" y="1075.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="1086.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.41%)</title><rect x="1185.2" y="1059.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1070.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.41%)</title><rect x="1185.2" y="1043.0" width="4.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1188.2" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.41%)</title><rect x="1185.2" y="1027.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1038.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.41%)</title><rect x="1185.2" y="1011.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
</g>
</svg>
