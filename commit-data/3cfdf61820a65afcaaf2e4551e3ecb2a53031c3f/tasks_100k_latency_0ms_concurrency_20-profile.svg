<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (149 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.67%)</title><rect x="10.0" y="659.0" width="7.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.67%)</title><rect x="10.0" y="643.0" width="7.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (37 samples, 24.83%)</title><rect x="17.9" y="659.0" width="293.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.9" y="670.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (37 samples, 24.83%)</title><rect x="17.9" y="643.0" width="293.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.9" y="654.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.67%)</title><rect x="17.9" y="627.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.67%)</title><rect x="17.9" y="611.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.9" y="622.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (24 samples, 16.11%)</title><rect x="25.8" y="627.0" width="190.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="638.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/579708423.accept (23 samples, 15.44%)</title><rect x="25.8" y="611.0" width="182.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.8" y="622.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (23 samples, 15.44%)</title><rect x="25.8" y="595.0" width="182.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.8" y="606.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (19 samples, 12.75%)</title><rect x="33.8" y="579.0" width="150.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.8" y="590.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (19 samples, 12.75%)</title><rect x="33.8" y="563.0" width="150.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.8" y="574.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (19 samples, 12.75%)</title><rect x="33.8" y="547.0" width="150.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.8" y="558.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (19 samples, 12.75%)</title><rect x="33.8" y="531.0" width="150.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="542.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 12.75%)</title><rect x="33.8" y="515.0" width="150.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.8" y="526.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (19 samples, 12.75%)</title><rect x="33.8" y="499.0" width="150.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.8" y="510.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (14 samples, 9.40%)</title><rect x="49.6" y="483.0" width="110.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.6" y="494.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.34%)</title><rect x="49.6" y="467.0" width="15.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="52.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.34%)</title><rect x="49.6" y="451.0" width="15.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.34%)</title><rect x="49.6" y="435.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 8.05%)</title><rect x="65.4" y="467.0" width="95.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.4" y="478.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 8.05%)</title><rect x="65.4" y="451.0" width="95.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.4" y="462.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 8.05%)</title><rect x="65.4" y="435.0" width="95.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.4" y="446.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 8.05%)</title><rect x="65.4" y="419.0" width="95.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.4" y="430.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (11 samples, 7.38%)</title><rect x="73.4" y="403.0" width="87.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.4" y="414.0">sun/misc/U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.67%)</title><rect x="73.4" y="387.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="76.4" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.67%)</title><rect x="81.3" y="387.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="84.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 4.03%)</title><rect x="89.2" y="387.0" width="47.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="92.2" y="398.0">Unsa..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 2.01%)</title><rect x="89.2" y="371.0" width="23.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="92.2" y="382.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.67%)</title><rect x="113.0" y="371.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="116.0" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.34%)</title><rect x="120.9" y="371.0" width="15.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="123.9" y="382.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.34%)</title><rect x="136.7" y="387.0" width="15.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="139.7" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.67%)</title><rect x="152.6" y="387.0" width="7.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="155.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.67%)</title><rect x="160.5" y="483.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="163.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.67%)</title><rect x="160.5" y="467.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.67%)</title><rect x="160.5" y="451.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.5" y="462.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 1.34%)</title><rect x="168.4" y="483.0" width="15.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="171.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 2.01%)</title><rect x="184.2" y="579.0" width="23.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.2" y="590.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.34%)</title><rect x="184.2" y="563.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.2" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.67%)</title><rect x="200.1" y="563.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.67%)</title><rect x="200.1" y="547.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.1" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.67%)</title><rect x="200.1" y="531.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.1" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.67%)</title><rect x="200.1" y="515.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="203.1" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.67%)</title><rect x="200.1" y="499.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="203.1" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.67%)</title><rect x="200.1" y="483.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="203.1" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.67%)</title><rect x="200.1" y="467.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="203.1" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.67%)</title><rect x="200.1" y="451.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="203.1" y="462.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.67%)</title><rect x="200.1" y="435.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="203.1" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.67%)</title><rect x="200.1" y="419.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="203.1" y="430.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.67%)</title><rect x="200.1" y="403.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="203.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.67%)</title><rect x="208.0" y="611.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.67%)</title><rect x="208.0" y="595.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.67%)</title><rect x="208.0" y="579.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.67%)</title><rect x="208.0" y="563.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.67%)</title><rect x="208.0" y="547.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.67%)</title><rect x="208.0" y="531.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 8.05%)</title><rect x="215.9" y="627.0" width="95.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.9" y="638.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 8.05%)</title><rect x="215.9" y="611.0" width="95.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.9" y="622.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.67%)</title><rect x="215.9" y="595.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.67%)</title><rect x="215.9" y="579.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 4.03%)</title><rect x="223.8" y="595.0" width="47.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.8" y="606.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 4.03%)</title><rect x="223.8" y="579.0" width="47.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.8" y="590.0">org/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.67%)</title><rect x="223.8" y="563.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 3.36%)</title><rect x="231.7" y="563.0" width="39.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.7" y="574.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.68%)</title><rect x="231.7" y="547.0" width="31.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.7" y="558.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.68%)</title><rect x="231.7" y="531.0" width="31.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.7" y="542.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.34%)</title><rect x="239.7" y="515.0" width="15.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 1.34%)</title><rect x="239.7" y="499.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 1.34%)</title><rect x="239.7" y="483.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 1.34%)</title><rect x="239.7" y="467.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 1.34%)</title><rect x="239.7" y="451.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 1.34%)</title><rect x="239.7" y="435.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 1.34%)</title><rect x="239.7" y="419.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.34%)</title><rect x="239.7" y="403.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.67%)</title><rect x="255.5" y="515.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.67%)</title><rect x="263.4" y="547.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.67%)</title><rect x="263.4" y="531.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.67%)</title><rect x="263.4" y="515.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.67%)</title><rect x="263.4" y="499.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.67%)</title><rect x="263.4" y="483.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.67%)</title><rect x="263.4" y="467.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 2.68%)</title><rect x="271.3" y="595.0" width="31.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.3" y="606.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.34%)</title><rect x="271.3" y="579.0" width="15.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 1.34%)</title><rect x="271.3" y="563.0" width="15.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.67%)</title><rect x="271.3" y="547.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.spliterator (1 samples, 0.67%)</title><rect x="271.3" y="531.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.&lt;init&gt; (1 samples, 0.67%)</title><rect x="271.3" y="515.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.67%)</title><rect x="279.3" y="547.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.67%)</title><rect x="279.3" y="531.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.3" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.67%)</title><rect x="279.3" y="515.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 1.34%)</title><rect x="287.2" y="579.0" width="15.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.67%)</title><rect x="287.2" y="563.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.67%)</title><rect x="295.1" y="563.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.67%)</title><rect x="295.1" y="547.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="298.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.67%)</title><rect x="303.0" y="595.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.0" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.67%)</title><rect x="303.0" y="579.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (56 samples, 37.58%)</title><rect x="310.9" y="659.0" width="443.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.9" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (56 samples, 37.58%)</title><rect x="310.9" y="643.0" width="443.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.9" y="654.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (56 samples, 37.58%)</title><rect x="310.9" y="627.0" width="443.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.9" y="638.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/36971569.run (37 samples, 24.83%)</title><rect x="334.7" y="611.0" width="293.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.7" y="622.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (37 samples, 24.83%)</title><rect x="334.7" y="595.0" width="293.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.7" y="606.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (37 samples, 24.83%)</title><rect x="334.7" y="579.0" width="293.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.7" y="590.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 24.16%)</title><rect x="334.7" y="563.0" width="285.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.7" y="574.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (7 samples, 4.70%)</title><rect x="334.7" y="547.0" width="55.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.7" y="558.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (7 samples, 4.70%)</title><rect x="334.7" y="531.0" width="55.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.7" y="542.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (7 samples, 4.70%)</title><rect x="334.7" y="515.0" width="55.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.7" y="526.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (7 samples, 4.70%)</title><rect x="334.7" y="499.0" width="55.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.7" y="510.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (7 samples, 4.70%)</title><rect x="334.7" y="483.0" width="55.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="337.7" y="494.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (7 samples, 4.70%)</title><rect x="334.7" y="467.0" width="55.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.7" y="478.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.34%)</title><rect x="334.7" y="451.0" width="15.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.34%)</title><rect x="334.7" y="435.0" width="15.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.34%)</title><rect x="334.7" y="419.0" width="15.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.67%)</title><rect x="334.7" y="403.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.67%)</title><rect x="334.7" y="387.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.67%)</title><rect x="342.6" y="403.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.67%)</title><rect x="342.6" y="387.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.67%)</title><rect x="342.6" y="371.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="345.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 2.68%)</title><rect x="350.5" y="451.0" width="31.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.5" y="462.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.67%)</title><rect x="350.5" y="435.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.67%)</title><rect x="350.5" y="419.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 2.01%)</title><rect x="358.5" y="435.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.5" y="446.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.67%)</title><rect x="358.5" y="419.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.67%)</title><rect x="358.5" y="403.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.67%)</title><rect x="358.5" y="387.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.67%)</title><rect x="358.5" y="371.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.67%)</title><rect x="358.5" y="355.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.34%)</title><rect x="366.4" y="419.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.34%)</title><rect x="366.4" y="403.0" width="15.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.34%)</title><rect x="366.4" y="387.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.67%)</title><rect x="366.4" y="371.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.67%)</title><rect x="366.4" y="355.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.67%)</title><rect x="366.4" y="339.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.67%)</title><rect x="366.4" y="323.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.67%)</title><rect x="374.3" y="371.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="377.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.67%)</title><rect x="374.3" y="355.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.67%)</title><rect x="374.3" y="339.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.67%)</title><rect x="374.3" y="323.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="377.3" y="334.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.67%)</title><rect x="374.3" y="307.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.67%)</title><rect x="382.2" y="451.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.67%)</title><rect x="382.2" y="435.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.67%)</title><rect x="382.2" y="419.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.67%)</title><rect x="382.2" y="403.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.67%)</title><rect x="382.2" y="387.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.2" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (25 samples, 16.78%)</title><rect x="390.1" y="547.0" width="198.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.1" y="558.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 3.36%)</title><rect x="390.1" y="531.0" width="39.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.1" y="542.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 3.36%)</title><rect x="390.1" y="515.0" width="39.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.1" y="526.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 3.36%)</title><rect x="390.1" y="499.0" width="39.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.1" y="510.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.67%)</title><rect x="398.1" y="483.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.1" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.67%)</title><rect x="398.1" y="467.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.1" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.67%)</title><rect x="398.1" y="451.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.67%)</title><rect x="398.1" y="435.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.1" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 2.01%)</title><rect x="406.0" y="483.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.0" y="494.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.34%)</title><rect x="413.9" y="467.0" width="15.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 1.34%)</title><rect x="413.9" y="451.0" width="15.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 1.34%)</title><rect x="413.9" y="435.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="416.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 8.72%)</title><rect x="429.7" y="531.0" width="103.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.7" y="542.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 8.72%)</title><rect x="429.7" y="515.0" width="103.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.7" y="526.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.34%)</title><rect x="437.7" y="499.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.34%)</title><rect x="437.7" y="483.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.7" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.34%)</title><rect x="437.7" y="467.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.67%)</title><rect x="445.6" y="451.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.6" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.67%)</title><rect x="445.6" y="435.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="448.6" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.67%)</title><rect x="445.6" y="419.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="448.6" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.67%)</title><rect x="445.6" y="403.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="448.6" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.67%)</title><rect x="445.6" y="387.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="448.6" y="398.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 6.71%)</title><rect x="453.5" y="499.0" width="79.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.5" y="510.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 6.71%)</title><rect x="453.5" y="483.0" width="79.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.5" y="494.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 2.68%)</title><rect x="453.5" y="467.0" width="31.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.5" y="478.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 2.68%)</title><rect x="453.5" y="451.0" width="31.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="456.5" y="462.0">ja..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 4.03%)</title><rect x="485.2" y="467.0" width="47.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.2" y="478.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 3.36%)</title><rect x="493.1" y="451.0" width="39.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.1" y="462.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 2.01%)</title><rect x="508.9" y="435.0" width="23.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.9" y="446.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 1.34%)</title><rect x="516.8" y="419.0" width="15.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.8" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (3 samples, 2.01%)</title><rect x="532.7" y="531.0" width="23.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.7" y="542.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 2.01%)</title><rect x="532.7" y="515.0" width="23.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.7" y="526.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.67%)</title><rect x="540.6" y="499.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.6" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.67%)</title><rect x="540.6" y="483.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.6" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.67%)</title><rect x="548.5" y="499.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.5" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.67%)</title><rect x="548.5" y="483.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="551.5" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.67%)</title><rect x="548.5" y="467.0" width="7.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="551.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.68%)</title><rect x="556.4" y="531.0" width="31.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.4" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 2.68%)</title><rect x="556.4" y="515.0" width="31.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="559.4" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.34%)</title><rect x="572.3" y="499.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/463722760.accept (2 samples, 1.34%)</title><rect x="572.3" y="483.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.34%)</title><rect x="572.3" y="467.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="575.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 1.34%)</title><rect x="572.3" y="451.0" width="15.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="575.3" y="462.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.34%)</title><rect x="572.3" y="435.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.3" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 1.34%)</title><rect x="572.3" y="419.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="575.3" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.34%)</title><rect x="572.3" y="403.0" width="15.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="575.3" y="414.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.34%)</title><rect x="572.3" y="387.0" width="15.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="575.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.68%)</title><rect x="588.1" y="547.0" width="31.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.1" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 2.68%)</title><rect x="588.1" y="531.0" width="31.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.1" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 2.68%)</title><rect x="588.1" y="515.0" width="31.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.1" y="526.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/463722760.accept (4 samples, 2.68%)</title><rect x="588.1" y="499.0" width="31.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.1" y="510.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (4 samples, 2.68%)</title><rect x="588.1" y="483.0" width="31.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="591.1" y="494.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 2.68%)</title><rect x="588.1" y="467.0" width="31.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.1" y="478.0">co..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 2.68%)</title><rect x="588.1" y="451.0" width="31.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.1" y="462.0">ja..</text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 2.68%)</title><rect x="588.1" y="435.0" width="31.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="591.1" y="446.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.67%)</title><rect x="619.8" y="563.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="622.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 2.01%)</title><rect x="627.7" y="611.0" width="23.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.7" y="622.0">j..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.34%)</title><rect x="635.6" y="595.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.6" y="606.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 1.34%)</title><rect x="635.6" y="579.0" width="15.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="638.6" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (1 samples, 0.67%)</title><rect x="643.6" y="563.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="646.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.34%)</title><rect x="651.5" y="611.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.34%)</title><rect x="651.5" y="595.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.67%)</title><rect x="659.4" y="579.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="662.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.34%)</title><rect x="667.3" y="611.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/36971569.run (1 samples, 0.67%)</title><rect x="675.2" y="595.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 6.04%)</title><rect x="683.2" y="611.0" width="71.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.2" y="622.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 6.04%)</title><rect x="683.2" y="595.0" width="71.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="686.2" y="606.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (7 samples, 4.70%)</title><rect x="691.1" y="579.0" width="55.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.1" y="590.0">java/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.67%)</title><rect x="691.1" y="563.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 4.03%)</title><rect x="699.0" y="563.0" width="47.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.0" y="574.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (6 samples, 4.03%)</title><rect x="699.0" y="547.0" width="47.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.0" y="558.0">sun/..</text>
</g>
<g>
<title>Unsafe_Park (6 samples, 4.03%)</title><rect x="699.0" y="531.0" width="47.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="702.0" y="542.0">Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.67%)</title><rect x="699.0" y="515.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="702.0" y="526.0"></text>
</g>
<g>
<title>ttyLocker::break_tty_lock_for_safepoint(long) (1 samples, 0.67%)</title><rect x="699.0" y="499.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="702.0" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 2.01%)</title><rect x="706.9" y="515.0" width="23.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="709.9" y="526.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 1.34%)</title><rect x="730.7" y="515.0" width="15.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="733.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.67%)</title><rect x="746.5" y="579.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.5" y="590.0"></text>
</g>
<g>
<title>start_thread (55 samples, 36.91%)</title><rect x="754.4" y="659.0" width="435.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="757.4" y="670.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (55 samples, 36.91%)</title><rect x="754.4" y="643.0" width="435.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="757.4" y="654.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 10.74%)</title><rect x="754.4" y="627.0" width="126.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.4" y="638.0">GangWorker::loop()</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.67%)</title><rect x="754.4" y="611.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="757.4" y="622.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 2.01%)</title><rect x="762.3" y="611.0" width="23.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="765.3" y="622.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 2.01%)</title><rect x="762.3" y="595.0" width="23.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.3" y="606.0">G..</text>
</g>
<g>
<title>SpinPause (3 samples, 2.01%)</title><rect x="762.3" y="579.0" width="23.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="765.3" y="590.0">S..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 8.05%)</title><rect x="786.1" y="611.0" width="95.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="789.1" y="622.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 6.71%)</title><rect x="786.1" y="595.0" width="79.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.1" y="606.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 2.01%)</title><rect x="794.0" y="579.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="797.0" y="590.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.34%)</title><rect x="794.0" y="563.0" width="15.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="797.0" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.67%)</title><rect x="801.9" y="547.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="804.9" y="558.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.67%)</title><rect x="801.9" y="531.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="804.9" y="542.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.67%)</title><rect x="809.9" y="563.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="812.9" y="574.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.68%)</title><rect x="817.8" y="579.0" width="31.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="820.8" y="590.0">Ge..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.34%)</title><rect x="849.5" y="579.0" width="15.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.5" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.34%)</title><rect x="865.3" y="595.0" width="15.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="868.3" y="606.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.67%)</title><rect x="865.3" y="579.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.3" y="590.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.67%)</title><rect x="865.3" y="563.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="868.3" y="574.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.67%)</title><rect x="865.3" y="547.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="868.3" y="558.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.67%)</title><rect x="865.3" y="531.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="868.3" y="542.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.67%)</title><rect x="865.3" y="515.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.3" y="526.0"></text>
</g>
<g>
<title>java_lang_Class::oop_size(oopDesc*) (1 samples, 0.67%)</title><rect x="865.3" y="499.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.3" y="510.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.67%)</title><rect x="873.2" y="579.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.67%)</title><rect x="873.2" y="563.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="876.2" y="574.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.67%)</title><rect x="873.2" y="547.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.2" y="558.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.67%)</title><rect x="873.2" y="531.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.2" y="542.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (39 samples, 26.17%)</title><rect x="881.1" y="627.0" width="308.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="884.1" y="638.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (39 samples, 26.17%)</title><rect x="881.1" y="611.0" width="308.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="884.1" y="622.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (38 samples, 25.50%)</title><rect x="881.1" y="595.0" width="301.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="884.1" y="606.0">CompileBroker::invoke_compiler_on_method..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (37 samples, 24.83%)</title><rect x="881.1" y="579.0" width="293.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="884.1" y="590.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (37 samples, 24.83%)</title><rect x="881.1" y="563.0" width="293.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.1" y="574.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 10.74%)</title><rect x="881.1" y="547.0" width="126.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="884.1" y="558.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.67%)</title><rect x="881.1" y="531.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="884.1" y="542.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.67%)</title><rect x="881.1" y="515.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="884.1" y="526.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.67%)</title><rect x="889.1" y="531.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.1" y="542.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.67%)</title><rect x="889.1" y="515.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.1" y="526.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.67%)</title><rect x="889.1" y="499.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="892.1" y="510.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.67%)</title><rect x="889.1" y="483.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="892.1" y="494.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.67%)</title><rect x="889.1" y="467.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.1" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.34%)</title><rect x="897.0" y="531.0" width="15.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="900.0" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.34%)</title><rect x="897.0" y="515.0" width="15.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.0" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.34%)</title><rect x="897.0" y="499.0" width="15.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="900.0" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.67%)</title><rect x="897.0" y="483.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="900.0" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.67%)</title><rect x="904.9" y="483.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.9" y="494.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.67%)</title><rect x="904.9" y="467.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="907.9" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 8.05%)</title><rect x="912.8" y="531.0" width="95.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="915.8" y="542.0">PhaseChaiti..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.67%)</title><rect x="912.8" y="515.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.8" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.67%)</title><rect x="912.8" y="499.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.8" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.67%)</title><rect x="912.8" y="483.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.8" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.34%)</title><rect x="920.7" y="515.0" width="15.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.7" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.67%)</title><rect x="928.7" y="499.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.67%)</title><rect x="936.6" y="515.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.6" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.67%)</title><rect x="936.6" y="499.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.6" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.67%)</title><rect x="936.6" y="483.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.6" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.67%)</title><rect x="944.5" y="515.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.5" y="526.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.67%)</title><rect x="944.5" y="499.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.5" y="510.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.67%)</title><rect x="944.5" y="483.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.5" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.34%)</title><rect x="952.4" y="515.0" width="15.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="955.4" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.34%)</title><rect x="968.3" y="515.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.3" y="526.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.34%)</title><rect x="984.1" y="515.0" width="15.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.1" y="526.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.67%)</title><rect x="984.1" y="499.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.1" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.67%)</title><rect x="984.1" y="483.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.1" y="494.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.67%)</title><rect x="992.0" y="499.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.0" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.67%)</title><rect x="992.0" y="483.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.0" y="494.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.67%)</title><rect x="999.9" y="515.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.9" y="526.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 10.07%)</title><rect x="1007.9" y="547.0" width="118.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1010.9" y="558.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.67%)</title><rect x="1007.9" y="531.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.9" y="542.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.67%)</title><rect x="1007.9" y="515.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.9" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.67%)</title><rect x="1015.8" y="531.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.8" y="542.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseTransform*) const (1 samples, 0.67%)</title><rect x="1015.8" y="515.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 8.05%)</title><rect x="1023.7" y="531.0" width="95.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.7" y="542.0">PhaseIdealL..</text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1023.7" y="515.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.7" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1023.7" y="499.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.7" y="510.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1031.6" y="515.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.6" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1031.6" y="499.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.6" y="510.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1031.6" y="483.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.6" y="494.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1031.6" y="467.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.6" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1031.6" y="451.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.6" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.67%)</title><rect x="1031.6" y="435.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1034.6" y="446.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.67%)</title><rect x="1031.6" y="419.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.6" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.67%)</title><rect x="1039.5" y="515.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.5" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 4.03%)</title><rect x="1047.4" y="515.0" width="47.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1050.4" y="526.0">Phas..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.67%)</title><rect x="1079.1" y="499.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.67%)</title><rect x="1087.0" y="499.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.0" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.67%)</title><rect x="1095.0" y="515.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.67%)</title><rect x="1095.0" y="499.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.0" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.67%)</title><rect x="1102.9" y="515.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.9" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.67%)</title><rect x="1102.9" y="499.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.9" y="510.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.67%)</title><rect x="1102.9" y="483.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.9" y="494.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.67%)</title><rect x="1102.9" y="467.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.9" y="478.0"></text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 0.67%)</title><rect x="1110.8" y="515.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.8" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.67%)</title><rect x="1118.7" y="531.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.67%)</title><rect x="1118.7" y="515.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.7" y="526.0"></text>
</g>
<g>
<title>DecodeNNode::Value(PhaseTransform*) const (1 samples, 0.67%)</title><rect x="1118.7" y="499.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.7" y="510.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.67%)</title><rect x="1126.6" y="547.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="558.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.67%)</title><rect x="1126.6" y="531.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1126.6" y="515.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1126.6" y="499.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1126.6" y="483.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1126.6" y="467.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1126.6" y="451.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1126.6" y="435.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1126.6" y="419.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1126.6" y="403.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1126.6" y="387.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1126.6" y="371.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1126.6" y="355.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.67%)</title><rect x="1126.6" y="339.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.67%)</title><rect x="1126.6" y="323.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="334.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.67%)</title><rect x="1126.6" y="307.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="318.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.67%)</title><rect x="1126.6" y="291.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.6" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.67%)</title><rect x="1126.6" y="275.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.6" y="286.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.67%)</title><rect x="1126.6" y="259.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.6" y="270.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.67%)</title><rect x="1126.6" y="243.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="254.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.67%)</title><rect x="1126.6" y="227.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.6" y="238.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.67%)</title><rect x="1126.6" y="211.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.01%)</title><rect x="1134.6" y="547.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="558.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.01%)</title><rect x="1134.6" y="531.0" width="23.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.01%)</title><rect x="1134.6" y="515.0" width="23.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.6" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.01%)</title><rect x="1134.6" y="499.0" width="23.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.01%)</title><rect x="1134.6" y="483.0" width="23.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.01%)</title><rect x="1134.6" y="467.0" width="23.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.6" y="478.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.01%)</title><rect x="1134.6" y="451.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="462.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.01%)</title><rect x="1134.6" y="435.0" width="23.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.6" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.01%)</title><rect x="1134.6" y="419.0" width="23.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.6" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.01%)</title><rect x="1134.6" y="403.0" width="23.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.6" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.01%)</title><rect x="1134.6" y="387.0" width="23.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.01%)</title><rect x="1134.6" y="371.0" width="23.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.6" y="382.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.01%)</title><rect x="1134.6" y="355.0" width="23.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.6" y="366.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.01%)</title><rect x="1134.6" y="339.0" width="23.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.01%)</title><rect x="1134.6" y="323.0" width="23.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.6" y="334.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.01%)</title><rect x="1134.6" y="307.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="318.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.01%)</title><rect x="1134.6" y="291.0" width="23.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.6" y="302.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.01%)</title><rect x="1134.6" y="275.0" width="23.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="286.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.01%)</title><rect x="1134.6" y="259.0" width="23.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="270.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.01%)</title><rect x="1134.6" y="243.0" width="23.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.6" y="254.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.01%)</title><rect x="1134.6" y="227.0" width="23.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="238.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.34%)</title><rect x="1134.6" y="211.0" width="15.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.34%)</title><rect x="1134.6" y="195.0" width="15.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.67%)</title><rect x="1134.6" y="179.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.6" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.67%)</title><rect x="1134.6" y="163.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.6" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.67%)</title><rect x="1134.6" y="147.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.67%)</title><rect x="1134.6" y="131.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.67%)</title><rect x="1134.6" y="115.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.67%)</title><rect x="1134.6" y="99.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.67%)</title><rect x="1134.6" y="83.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.67%)</title><rect x="1134.6" y="67.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.6" y="78.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.67%)</title><rect x="1134.6" y="51.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.6" y="62.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.67%)</title><rect x="1134.6" y="35.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.6" y="46.0"></text>
</g>
<g>
<title>SubLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.67%)</title><rect x="1142.5" y="179.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.5" y="190.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.67%)</title><rect x="1150.4" y="211.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="222.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.34%)</title><rect x="1158.3" y="547.0" width="15.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.3" y="558.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.67%)</title><rect x="1158.3" y="531.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.3" y="542.0"></text>
</g>
<g>
<title>XorLNode::Opcode() const (1 samples, 0.67%)</title><rect x="1166.2" y="531.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.2" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.67%)</title><rect x="1174.2" y="579.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.2" y="590.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.67%)</title><rect x="1174.2" y="563.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.2" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.67%)</title><rect x="1174.2" y="547.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.67%)</title><rect x="1174.2" y="531.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="542.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.67%)</title><rect x="1174.2" y="515.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="526.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.67%)</title><rect x="1174.2" y="499.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="510.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.67%)</title><rect x="1174.2" y="483.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="494.0"></text>
</g>
<g>
<title>BlockEnd::as_BlockEnd() (1 samples, 0.67%)</title><rect x="1174.2" y="467.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="478.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.67%)</title><rect x="1182.1" y="595.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="606.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.67%)</title><rect x="1182.1" y="579.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="590.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.67%)</title><rect x="1182.1" y="563.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="574.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.67%)</title><rect x="1182.1" y="547.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.67%)</title><rect x="1182.1" y="531.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
</g>
</svg>
