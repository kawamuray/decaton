<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1317"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1317"> </text>
<g id="frames">
<g>
<title>all (240 samples, 100.00%)</title><rect x="10.0" y="1283.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.42%)</title><rect x="10.0" y="1267.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.42%)</title><rect x="10.0" y="1251.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.222.b10-1.el7_7.x86_64/jre/lib/amd64/server/libjvm.so (1 samples, 0.42%)</title><rect x="10.0" y="1235.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.42%)</title><rect x="10.0" y="1219.0" width="4.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.42%)</title><rect x="10.0" y="1203.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 10.83%)</title><rect x="14.9" y="1267.0" width="127.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.9" y="1278.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 10.83%)</title><rect x="14.9" y="1251.0" width="127.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1262.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.42%)</title><rect x="14.9" y="1235.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.42%)</title><rect x="14.9" y="1219.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.42%)</title><rect x="14.9" y="1203.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.42%)</title><rect x="14.9" y="1187.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 6.67%)</title><rect x="19.8" y="1235.0" width="78.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.8" y="1246.0">java/lang..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1287423904.accept (16 samples, 6.67%)</title><rect x="19.8" y="1219.0" width="78.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.8" y="1230.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (16 samples, 6.67%)</title><rect x="19.8" y="1203.0" width="78.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.8" y="1214.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (12 samples, 5.00%)</title><rect x="19.8" y="1187.0" width="59.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.8" y="1198.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (12 samples, 5.00%)</title><rect x="19.8" y="1171.0" width="59.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.8" y="1182.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (12 samples, 5.00%)</title><rect x="19.8" y="1155.0" width="59.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.8" y="1166.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 5.00%)</title><rect x="19.8" y="1139.0" width="59.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.8" y="1150.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 5.00%)</title><rect x="19.8" y="1123.0" width="59.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.8" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (8 samples, 3.33%)</title><rect x="39.5" y="1107.0" width="39.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.5" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 2.92%)</title><rect x="39.5" y="1091.0" width="34.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.5" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 2.92%)</title><rect x="39.5" y="1075.0" width="34.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.5" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.92%)</title><rect x="39.5" y="1059.0" width="34.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.5" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.92%)</title><rect x="39.5" y="1043.0" width="34.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.5" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 2.92%)</title><rect x="39.5" y="1027.0" width="34.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.5" y="1038.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.08%)</title><rect x="49.3" y="1011.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.3" y="1022.0">s..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.08%)</title><rect x="49.3" y="995.0" width="24.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="52.3" y="1006.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.08%)</title><rect x="49.3" y="979.0" width="24.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="52.3" y="990.0">_..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.42%)</title><rect x="73.9" y="1091.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.42%)</title><rect x="73.9" y="1075.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.42%)</title><rect x="73.9" y="1059.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.42%)</title><rect x="73.9" y="1043.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.83%)</title><rect x="78.8" y="1187.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.83%)</title><rect x="78.8" y="1171.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.83%)</title><rect x="78.8" y="1155.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.83%)</title><rect x="88.7" y="1187.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.83%)</title><rect x="88.7" y="1171.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.42%)</title><rect x="93.6" y="1155.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.42%)</title><rect x="93.6" y="1139.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.42%)</title><rect x="93.6" y="1123.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.75%)</title><rect x="98.5" y="1235.0" width="44.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.5" y="1246.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.75%)</title><rect x="98.5" y="1219.0" width="44.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.5" y="1230.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.25%)</title><rect x="98.5" y="1203.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.25%)</title><rect x="98.5" y="1187.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.25%)</title><rect x="98.5" y="1171.0" width="14.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.83%)</title><rect x="98.5" y="1155.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.83%)</title><rect x="98.5" y="1139.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.42%)</title><rect x="98.5" y="1123.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.42%)</title><rect x="103.4" y="1123.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.42%)</title><rect x="103.4" y="1107.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.42%)</title><rect x="103.4" y="1091.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.4" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.42%)</title><rect x="103.4" y="1075.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.42%)</title><rect x="108.3" y="1155.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.42%)</title><rect x="108.3" y="1139.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.42%)</title><rect x="108.3" y="1123.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="111.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.42%)</title><rect x="108.3" y="1107.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.42%)</title><rect x="108.3" y="1091.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 2.08%)</title><rect x="113.2" y="1203.0" width="24.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.2" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 2.08%)</title><rect x="113.2" y="1187.0" width="24.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.2" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 2.08%)</title><rect x="113.2" y="1171.0" width="24.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="116.2" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 1.67%)</title><rect x="118.2" y="1155.0" width="19.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toSet (1 samples, 0.42%)</title><rect x="118.2" y="1139.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.42%)</title><rect x="118.2" y="1123.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 1.25%)</title><rect x="123.1" y="1139.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 1.25%)</title><rect x="123.1" y="1123.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 1.25%)</title><rect x="123.1" y="1107.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 1.25%)</title><rect x="123.1" y="1091.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.83%)</title><rect x="123.1" y="1075.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.83%)</title><rect x="123.1" y="1059.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.83%)</title><rect x="123.1" y="1043.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.83%)</title><rect x="123.1" y="1027.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.83%)</title><rect x="123.1" y="1011.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.83%)</title><rect x="123.1" y="995.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.1" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.42%)</title><rect x="123.1" y="979.0" width="4.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="126.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/1272902117.get (1 samples, 0.42%)</title><rect x="128.0" y="979.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.42%)</title><rect x="132.9" y="1075.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.42%)</title><rect x="132.9" y="1059.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.42%)</title><rect x="137.8" y="1203.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.42%)</title><rect x="137.8" y="1187.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.42%)</title><rect x="137.8" y="1171.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="140.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.42%)</title><rect x="137.8" y="1155.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.42%)</title><rect x="137.8" y="1139.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.42%)</title><rect x="137.8" y="1123.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (58 samples, 24.17%)</title><rect x="142.8" y="1267.0" width="285.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.8" y="1278.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (58 samples, 24.17%)</title><rect x="142.8" y="1251.0" width="285.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.8" y="1262.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (58 samples, 24.17%)</title><rect x="142.8" y="1235.0" width="285.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.8" y="1246.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1786762707.run (38 samples, 15.83%)</title><rect x="152.6" y="1219.0" width="186.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.6" y="1230.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (38 samples, 15.83%)</title><rect x="152.6" y="1203.0" width="186.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.6" y="1214.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (38 samples, 15.83%)</title><rect x="152.6" y="1187.0" width="186.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.6" y="1198.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (37 samples, 15.42%)</title><rect x="152.6" y="1171.0" width="181.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.6" y="1182.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 4.17%)</title><rect x="157.5" y="1155.0" width="49.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.5" y="1166.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 4.17%)</title><rect x="157.5" y="1139.0" width="49.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="1150.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 4.17%)</title><rect x="157.5" y="1123.0" width="49.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="160.5" y="1134.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.17%)</title><rect x="157.5" y="1107.0" width="49.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="160.5" y="1118.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.17%)</title><rect x="157.5" y="1091.0" width="49.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="1102.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 4.17%)</title><rect x="157.5" y="1075.0" width="49.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.5" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 0.83%)</title><rect x="157.5" y="1059.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.83%)</title><rect x="157.5" y="1043.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="160.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.83%)</title><rect x="157.5" y="1027.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.42%)</title><rect x="157.5" y="1011.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.42%)</title><rect x="157.5" y="995.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.42%)</title><rect x="162.4" y="1011.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.42%)</title><rect x="162.4" y="995.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.42%)</title><rect x="162.4" y="979.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.42%)</title><rect x="162.4" y="963.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (1 samples, 0.42%)</title><rect x="162.4" y="947.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 2.92%)</title><rect x="167.3" y="1059.0" width="34.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="170.3" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.42%)</title><rect x="167.3" y="1043.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="170.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.42%)</title><rect x="167.3" y="1027.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.42%)</title><rect x="172.2" y="1043.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="175.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.42%)</title><rect x="172.2" y="1027.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.42%)</title><rect x="172.2" y="1011.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.08%)</title><rect x="177.2" y="1043.0" width="24.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.2" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.67%)</title><rect x="177.2" y="1027.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="180.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.42%)</title><rect x="191.9" y="1011.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.42%)</title><rect x="196.8" y="1027.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.42%)</title><rect x="196.8" y="1011.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.42%)</title><rect x="196.8" y="995.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.42%)</title><rect x="196.8" y="979.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.42%)</title><rect x="196.8" y="963.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.42%)</title><rect x="196.8" y="947.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.42%)</title><rect x="196.8" y="931.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.8" y="942.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.42%)</title><rect x="196.8" y="915.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.8" y="926.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.42%)</title><rect x="196.8" y="899.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.8" y="910.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.42%)</title><rect x="196.8" y="883.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.42%)</title><rect x="201.8" y="1059.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.42%)</title><rect x="201.8" y="1043.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.42%)</title><rect x="201.8" y="1027.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.42%)</title><rect x="201.8" y="1011.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.42%)</title><rect x="201.8" y="995.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (24 samples, 10.00%)</title><rect x="206.7" y="1155.0" width="118.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.7" y="1166.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.42%)</title><rect x="206.7" y="1139.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.7" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="206.7" y="1123.0" width="4.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="209.7" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="206.7" y="1107.0" width="4.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="209.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 2.50%)</title><rect x="211.6" y="1139.0" width="29.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.6" y="1150.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 2.50%)</title><rect x="211.6" y="1123.0" width="29.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.6" y="1134.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 2.50%)</title><rect x="211.6" y="1107.0" width="29.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.6" y="1118.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.25%)</title><rect x="211.6" y="1091.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.25%)</title><rect x="211.6" y="1075.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.25%)</title><rect x="211.6" y="1059.0" width="14.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.83%)</title><rect x="216.5" y="1043.0" width="9.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.83%)</title><rect x="216.5" y="1027.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.25%)</title><rect x="226.3" y="1091.0" width="14.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.83%)</title><rect x="231.2" y="1075.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.83%)</title><rect x="231.2" y="1059.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.42%)</title><rect x="236.2" y="1043.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 4.58%)</title><rect x="241.1" y="1139.0" width="54.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.1" y="1150.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 4.58%)</title><rect x="241.1" y="1123.0" width="54.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.1" y="1134.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.67%)</title><rect x="241.1" y="1107.0" width="19.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.83%)</title><rect x="241.1" y="1091.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.83%)</title><rect x="241.1" y="1075.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.42%)</title><rect x="241.1" y="1059.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.42%)</title><rect x="246.0" y="1059.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.83%)</title><rect x="250.9" y="1091.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.83%)</title><rect x="250.9" y="1075.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.9" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.83%)</title><rect x="250.9" y="1059.0" width="9.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="253.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 1.25%)</title><rect x="260.8" y="1107.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 1.25%)</title><rect x="260.8" y="1091.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 1.25%)</title><rect x="260.8" y="1075.0" width="14.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.8" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.42%)</title><rect x="270.6" y="1059.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.6" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 1.67%)</title><rect x="275.5" y="1107.0" width="19.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.5" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 1.67%)</title><rect x="275.5" y="1091.0" width="19.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.5" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.42%)</title><rect x="275.5" y="1075.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.42%)</title><rect x="275.5" y="1059.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.42%)</title><rect x="275.5" y="1043.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.42%)</title><rect x="275.5" y="1027.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.42%)</title><rect x="275.5" y="1011.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.25%)</title><rect x="280.4" y="1075.0" width="14.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.25%)</title><rect x="280.4" y="1059.0" width="14.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.25%)</title><rect x="280.4" y="1043.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.83%)</title><rect x="285.3" y="1027.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 2.50%)</title><rect x="295.2" y="1139.0" width="29.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.2" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 2.50%)</title><rect x="295.2" y="1123.0" width="29.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.2" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1823890470.process (1 samples, 0.42%)</title><rect x="295.2" y="1107.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.42%)</title><rect x="300.1" y="1107.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.42%)</title><rect x="305.0" y="1107.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.42%)</title><rect x="305.0" y="1091.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.42%)</title><rect x="309.9" y="1107.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.42%)</title><rect x="309.9" y="1091.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1726896024.get$Lambda (1 samples, 0.42%)</title><rect x="309.9" y="1075.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1726896024.&lt;init&gt; (1 samples, 0.42%)</title><rect x="309.9" y="1059.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="309.9" y="1043.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="314.8" y="1107.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="314.8" y="1091.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.8" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.42%)</title><rect x="314.8" y="1075.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.42%)</title><rect x="319.8" y="1107.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="322.8" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.42%)</title><rect x="319.8" y="1091.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.8" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.42%)</title><rect x="319.8" y="1075.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.83%)</title><rect x="324.7" y="1155.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.83%)</title><rect x="324.7" y="1139.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.83%)</title><rect x="324.7" y="1123.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/969013478.accept (2 samples, 0.83%)</title><rect x="324.7" y="1107.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (2 samples, 0.83%)</title><rect x="324.7" y="1091.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1047637760.complete (2 samples, 0.83%)</title><rect x="324.7" y="1075.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 0.83%)</title><rect x="324.7" y="1059.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.83%)</title><rect x="324.7" y="1043.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.7" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.83%)</title><rect x="324.7" y="1027.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.83%)</title><rect x="324.7" y="1011.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.42%)</title><rect x="334.5" y="1171.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="334.5" y="1155.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="337.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.42%)</title><rect x="339.4" y="1219.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.42%)</title><rect x="339.4" y="1203.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.42%)</title><rect x="339.4" y="1187.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.42%)</title><rect x="344.3" y="1219.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.42%)</title><rect x="344.3" y="1203.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.42%)</title><rect x="344.3" y="1187.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 6.67%)</title><rect x="349.3" y="1219.0" width="78.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.3" y="1230.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 6.67%)</title><rect x="349.3" y="1203.0" width="78.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.3" y="1214.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 5.00%)</title><rect x="359.1" y="1187.0" width="59.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.1" y="1198.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 5.00%)</title><rect x="359.1" y="1171.0" width="59.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.1" y="1182.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 4.58%)</title><rect x="364.0" y="1155.0" width="54.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="367.0" y="1166.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Park (11 samples, 4.58%)</title><rect x="364.0" y="1139.0" width="54.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="367.0" y="1150.0">Unsaf..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.42%)</title><rect x="364.0" y="1123.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="367.0" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.42%)</title><rect x="364.0" y="1107.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="367.0" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.42%)</title><rect x="368.9" y="1123.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="371.9" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.83%)</title><rect x="373.8" y="1123.0" width="9.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="376.8" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.08%)</title><rect x="383.7" y="1123.0" width="24.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="386.7" y="1134.0">_..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.42%)</title><rect x="408.3" y="1123.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="411.3" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.42%)</title><rect x="413.2" y="1123.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="416.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.83%)</title><rect x="418.1" y="1187.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="421.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.83%)</title><rect x="418.1" y="1171.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.83%)</title><rect x="418.1" y="1155.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="421.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.83%)</title><rect x="418.1" y="1139.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="421.1" y="1150.0"></text>
</g>
<g>
<title>start_thread (155 samples, 64.58%)</title><rect x="427.9" y="1267.0" width="762.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="430.9" y="1278.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (155 samples, 64.58%)</title><rect x="427.9" y="1251.0" width="762.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="430.9" y="1262.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 8.33%)</title><rect x="427.9" y="1235.0" width="98.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="430.9" y="1246.0">GangWorker::..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (20 samples, 8.33%)</title><rect x="427.9" y="1219.0" width="98.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="430.9" y="1230.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (17 samples, 7.08%)</title><rect x="427.9" y="1203.0" width="83.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="430.9" y="1214.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.08%)</title><rect x="432.8" y="1187.0" width="24.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="435.8" y="1198.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.67%)</title><rect x="432.8" y="1171.0" width="19.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="435.8" y="1182.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.42%)</title><rect x="442.7" y="1155.0" width="4.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="445.7" y="1166.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.42%)</title><rect x="447.6" y="1155.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="450.6" y="1166.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.42%)</title><rect x="452.5" y="1171.0" width="4.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="455.5" y="1182.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.83%)</title><rect x="457.4" y="1187.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="460.4" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.83%)</title><rect x="467.2" y="1187.0" width="9.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="470.2" y="1198.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 2.50%)</title><rect x="477.1" y="1187.0" width="29.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="480.1" y="1198.0">Sp..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.42%)</title><rect x="506.6" y="1187.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.6" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.42%)</title><rect x="511.5" y="1203.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="514.5" y="1214.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.42%)</title><rect x="511.5" y="1187.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="514.5" y="1198.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.42%)</title><rect x="511.5" y="1171.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="514.5" y="1182.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.42%)</title><rect x="511.5" y="1155.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="514.5" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.42%)</title><rect x="511.5" y="1139.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="514.5" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.42%)</title><rect x="511.5" y="1123.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.5" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.83%)</title><rect x="516.4" y="1203.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="519.4" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.83%)</title><rect x="516.4" y="1187.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="519.4" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.42%)</title><rect x="516.4" y="1171.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="519.4" y="1182.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.42%)</title><rect x="516.4" y="1155.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="519.4" y="1166.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (1 samples, 0.42%)</title><rect x="516.4" y="1139.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="519.4" y="1150.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.42%)</title><rect x="516.4" y="1123.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.4" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) [clone .part.174] (1 samples, 0.42%)</title><rect x="516.4" y="1107.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.4" y="1118.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.42%)</title><rect x="516.4" y="1091.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="519.4" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.42%)</title><rect x="521.3" y="1171.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="524.3" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.42%)</title><rect x="521.3" y="1155.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="524.3" y="1166.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.42%)</title><rect x="521.3" y="1139.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="524.3" y="1150.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.42%)</title><rect x="521.3" y="1123.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="524.3" y="1134.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.42%)</title><rect x="521.3" y="1107.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="524.3" y="1118.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (135 samples, 56.25%)</title><rect x="526.2" y="1235.0" width="663.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="529.2" y="1246.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (134 samples, 55.83%)</title><rect x="526.2" y="1219.0" width="658.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="529.2" y="1230.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (134 samples, 55.83%)</title><rect x="526.2" y="1203.0" width="658.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="529.2" y="1214.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (130 samples, 54.17%)</title><rect x="526.2" y="1187.0" width="639.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="529.2" y="1198.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (130 samples, 54.17%)</title><rect x="526.2" y="1171.0" width="639.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="529.2" y="1182.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (69 samples, 28.75%)</title><rect x="526.2" y="1155.0" width="339.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.2" y="1166.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 1.67%)</title><rect x="526.2" y="1139.0" width="19.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="529.2" y="1150.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 1.67%)</title><rect x="526.2" y="1123.0" width="19.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="529.2" y="1134.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.42%)</title><rect x="541.0" y="1107.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="544.0" y="1118.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.42%)</title><rect x="541.0" y="1091.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="544.0" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="541.0" y="1075.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="544.0" y="1086.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.42%)</title><rect x="541.0" y="1059.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="544.0" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.83%)</title><rect x="545.9" y="1139.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="548.9" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.42%)</title><rect x="545.9" y="1123.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="548.9" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.42%)</title><rect x="545.9" y="1107.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="548.9" y="1118.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.42%)</title><rect x="550.8" y="1123.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="553.8" y="1134.0"></text>
</g>
<g>
<title>MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.42%)</title><rect x="550.8" y="1107.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="553.8" y="1118.0"></text>
</g>
<g>
<title>Assembler::cmpq(Address, int) (1 samples, 0.42%)</title><rect x="550.8" y="1091.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="553.8" y="1102.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.42%)</title><rect x="550.8" y="1075.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="553.8" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.92%)</title><rect x="555.8" y="1139.0" width="34.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="558.8" y="1150.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 2.92%)</title><rect x="555.8" y="1123.0" width="34.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="558.8" y="1134.0">Ma..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 2.08%)</title><rect x="560.7" y="1107.0" width="24.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="563.7" y="1118.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.42%)</title><rect x="575.4" y="1091.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="578.4" y="1102.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.42%)</title><rect x="575.4" y="1075.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="578.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.42%)</title><rect x="575.4" y="1059.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="578.4" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.42%)</title><rect x="575.4" y="1043.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="578.4" y="1054.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.42%)</title><rect x="575.4" y="1027.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="578.4" y="1038.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.42%)</title><rect x="575.4" y="1011.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="578.4" y="1022.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.42%)</title><rect x="580.3" y="1091.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="583.3" y="1102.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.42%)</title><rect x="585.2" y="1107.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="588.2" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.25%)</title><rect x="590.2" y="1139.0" width="14.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="593.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.42%)</title><rect x="590.2" y="1123.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="593.2" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.42%)</title><rect x="590.2" y="1107.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="593.2" y="1118.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.42%)</title><rect x="590.2" y="1091.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="593.2" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.83%)</title><rect x="595.1" y="1123.0" width="9.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.42%)</title><rect x="600.0" y="1107.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="603.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.42%)</title><rect x="600.0" y="1091.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="603.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.42%)</title><rect x="604.9" y="1139.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="607.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.42%)</title><rect x="609.8" y="1139.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="612.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (51 samples, 21.25%)</title><rect x="614.7" y="1139.0" width="250.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="617.7" y="1150.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.42%)</title><rect x="614.7" y="1123.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="617.7" y="1134.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 1.25%)</title><rect x="619.7" y="1123.0" width="14.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="622.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.67%)</title><rect x="634.4" y="1123.0" width="19.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="637.4" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="634.4" y="1107.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="637.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.42%)</title><rect x="639.3" y="1107.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="642.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.83%)</title><rect x="644.2" y="1107.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="647.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.83%)</title><rect x="654.1" y="1123.0" width="9.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="657.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.83%)</title><rect x="654.1" y="1107.0" width="9.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="657.1" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.83%)</title><rect x="654.1" y="1091.0" width="9.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="657.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 2.92%)</title><rect x="663.9" y="1123.0" width="34.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="666.9" y="1134.0">Ph..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.42%)</title><rect x="693.4" y="1107.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="696.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 5.00%)</title><rect x="698.3" y="1123.0" width="59.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="701.3" y="1134.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.83%)</title><rect x="727.8" y="1107.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="730.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.25%)</title><rect x="737.7" y="1107.0" width="14.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="740.7" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="747.5" y="1091.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="750.5" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.42%)</title><rect x="752.4" y="1107.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="755.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.42%)</title><rect x="757.3" y="1123.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="760.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.42%)</title><rect x="762.2" y="1123.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="765.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 0.83%)</title><rect x="767.2" y="1123.0" width="9.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.2" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.42%)</title><rect x="772.1" y="1107.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="775.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 0.83%)</title><rect x="777.0" y="1123.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="780.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.83%)</title><rect x="777.0" y="1107.0" width="9.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="780.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.25%)</title><rect x="786.8" y="1123.0" width="14.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.83%)</title><rect x="786.8" y="1107.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="789.8" y="1118.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.42%)</title><rect x="796.7" y="1107.0" width="4.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="799.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.42%)</title><rect x="801.6" y="1123.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.42%)</title><rect x="801.6" y="1107.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="804.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.42%)</title><rect x="806.5" y="1123.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="809.5" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.42%)</title><rect x="806.5" y="1107.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="809.5" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.42%)</title><rect x="806.5" y="1091.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.42%)</title><rect x="806.5" y="1075.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="809.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.42%)</title><rect x="811.4" y="1123.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="814.4" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="811.4" y="1107.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="814.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.42%)</title><rect x="816.3" y="1123.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.3" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 2.92%)</title><rect x="821.2" y="1123.0" width="34.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="824.2" y="1134.0">Ph..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.42%)</title><rect x="831.1" y="1107.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="834.1" y="1118.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.42%)</title><rect x="836.0" y="1107.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="839.0" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.25%)</title><rect x="840.9" y="1107.0" width="14.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="843.9" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.83%)</title><rect x="845.8" y="1091.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.8" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.42%)</title><rect x="855.7" y="1123.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="858.7" y="1134.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.42%)</title><rect x="860.6" y="1123.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="863.6" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (49 samples, 20.42%)</title><rect x="865.5" y="1155.0" width="240.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.5" y="1166.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 1.25%)</title><rect x="865.5" y="1139.0" width="14.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="868.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.83%)</title><rect x="865.5" y="1123.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.5" y="1134.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.42%)</title><rect x="870.4" y="1107.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.42%)</title><rect x="875.3" y="1123.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="878.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 2.08%)</title><rect x="880.2" y="1139.0" width="24.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.2" y="1150.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 2.08%)</title><rect x="880.2" y="1123.0" width="24.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="883.2" y="1134.0">C..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.42%)</title><rect x="885.2" y="1107.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.42%)</title><rect x="885.2" y="1091.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.2" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.42%)</title><rect x="885.2" y="1075.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="888.2" y="1086.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.42%)</title><rect x="885.2" y="1059.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="888.2" y="1070.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.42%)</title><rect x="885.2" y="1043.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.2" y="1054.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.42%)</title><rect x="885.2" y="1027.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="888.2" y="1038.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.42%)</title><rect x="885.2" y="1011.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="888.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 1.25%)</title><rect x="890.1" y="1107.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.83%)</title><rect x="890.1" y="1091.0" width="9.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="893.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.83%)</title><rect x="890.1" y="1075.0" width="9.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.83%)</title><rect x="890.1" y="1059.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="893.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.83%)</title><rect x="890.1" y="1043.0" width="9.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.83%)</title><rect x="890.1" y="1027.0" width="9.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="1011.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="893.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="995.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="979.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="963.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="893.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="947.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="931.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="915.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="899.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="883.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="893.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="867.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="851.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="893.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="835.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="819.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="803.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="893.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="787.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="893.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="771.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="755.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="893.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="739.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="893.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="723.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="893.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="707.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="893.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="691.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="893.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="675.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="893.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="659.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="893.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="643.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="627.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="893.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="611.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="893.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="595.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="579.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="563.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="893.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="547.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="893.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="531.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="893.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="515.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="499.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="483.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="467.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="451.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="893.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="435.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="893.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="419.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="893.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="403.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="387.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="893.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="371.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="893.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="355.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="339.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="893.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="323.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="893.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="307.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="893.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="291.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="893.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="275.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="893.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="259.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="243.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="227.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="211.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="195.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="179.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="163.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="893.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="147.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="131.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="893.1" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="115.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.1" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="99.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.1" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="83.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="893.1" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="67.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="893.1" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="51.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="893.1" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.42%)</title><rect x="890.1" y="35.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.1" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="1011.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="995.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="979.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="898.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="963.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="947.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="931.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="915.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="899.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="898.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="883.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="867.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="898.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="851.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="835.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="819.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="803.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="787.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.42%)</title><rect x="895.0" y="771.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.0" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.42%)</title><rect x="899.9" y="1091.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.42%)</title><rect x="899.9" y="1075.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="902.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.83%)</title><rect x="904.8" y="1139.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="907.8" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="909.8" y="1123.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.8" y="1134.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.42%)</title><rect x="909.8" y="1107.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 12.08%)</title><rect x="914.7" y="1139.0" width="142.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="917.7" y="1150.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.42%)</title><rect x="914.7" y="1123.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.7" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.42%)</title><rect x="914.7" y="1107.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="917.7" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.42%)</title><rect x="914.7" y="1091.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="917.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.42%)</title><rect x="914.7" y="1075.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="917.7" y="1086.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.42%)</title><rect x="919.6" y="1123.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.6" y="1134.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.42%)</title><rect x="924.5" y="1123.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.42%)</title><rect x="929.4" y="1123.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="932.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.42%)</title><rect x="934.3" y="1123.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 4.17%)</title><rect x="939.2" y="1123.0" width="49.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.2" y="1134.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 2.92%)</title><rect x="954.0" y="1107.0" width="34.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.0" y="1118.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 2.92%)</title><rect x="954.0" y="1091.0" width="34.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.0" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 2.92%)</title><rect x="954.0" y="1075.0" width="34.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.0" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.25%)</title><rect x="988.4" y="1123.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.4" y="1134.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.42%)</title><rect x="993.3" y="1107.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.3" y="1118.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.42%)</title><rect x="998.2" y="1107.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.67%)</title><rect x="1003.2" y="1123.0" width="19.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1006.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.83%)</title><rect x="1013.0" y="1107.0" width="9.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (2 samples, 0.83%)</title><rect x="1013.0" y="1091.0" width="9.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.0" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.42%)</title><rect x="1013.0" y="1075.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.42%)</title><rect x="1017.9" y="1075.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.9" y="1086.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.42%)</title><rect x="1017.9" y="1059.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 2.92%)</title><rect x="1022.8" y="1123.0" width="34.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.8" y="1134.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 2.50%)</title><rect x="1027.7" y="1107.0" width="29.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.7" y="1118.0">Ph..</text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.42%)</title><rect x="1027.7" y="1091.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.7" y="1102.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1032.7" y="1091.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.7" y="1102.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1032.7" y="1075.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.7" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.42%)</title><rect x="1037.6" y="1091.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.42%)</title><rect x="1042.5" y="1091.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.5" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.42%)</title><rect x="1042.5" y="1075.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.5" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.83%)</title><rect x="1047.4" y="1091.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1050.4" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.83%)</title><rect x="1047.4" y="1075.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.4" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="1059.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.4" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="1043.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.4" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="1027.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.4" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="1011.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.4" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="995.0" width="9.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.4" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="979.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.4" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="963.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.4" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="947.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.4" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="931.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.4" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="915.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.4" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="899.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.4" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="883.0" width="9.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.4" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="867.0" width="9.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.4" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="851.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.4" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="835.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1050.4" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="819.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.4" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="803.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="787.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.83%)</title><rect x="1047.4" y="771.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.42%)</title><rect x="1047.4" y="755.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.4" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1047.4" y="739.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.4" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1047.4" y="723.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.4" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1052.3" y="755.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.3" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1052.3" y="739.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 2.92%)</title><rect x="1057.2" y="1139.0" width="34.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.2" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 2.92%)</title><rect x="1057.2" y="1123.0" width="34.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.2" y="1134.0">Ph..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1057.2" y="1107.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.2" y="1118.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1057.2" y="1091.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.2" y="1102.0"></text>
</g>
<g>
<title>HaltNode::hash() const (1 samples, 0.42%)</title><rect x="1057.2" y="1075.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.2" y="1086.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1062.2" y="1107.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.42%)</title><rect x="1062.2" y="1091.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.2" y="1102.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.42%)</title><rect x="1062.2" y="1075.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.2" y="1086.0"></text>
</g>
<g>
<title>LoadNKlassNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1067.1" y="1107.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.1" y="1118.0"></text>
</g>
<g>
<title>LoadNode::klass_identity_common(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1067.1" y="1091.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.1" y="1102.0"></text>
</g>
<g>
<title>ShenandoahBarrierNode::skip_through_barrier(Node*) (1 samples, 0.42%)</title><rect x="1067.1" y="1075.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.1" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.42%)</title><rect x="1072.0" y="1107.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.42%)</title><rect x="1076.9" y="1107.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.9" y="1118.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1081.8" y="1107.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.8" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.42%)</title><rect x="1081.8" y="1091.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.8" y="1102.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1086.8" y="1107.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.8" y="1118.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1086.8" y="1091.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.8" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1086.8" y="1075.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.8" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1086.8" y="1059.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.8" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.83%)</title><rect x="1091.7" y="1139.0" width="9.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.7" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.83%)</title><rect x="1091.7" y="1123.0" width="9.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.42%)</title><rect x="1091.7" y="1107.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.42%)</title><rect x="1091.7" y="1091.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.7" y="1102.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.42%)</title><rect x="1091.7" y="1075.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.7" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="1096.6" y="1107.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.6" y="1118.0"></text>
</g>
<g>
<title>SafePointScalarObjectNode::SafePointScalarObjectNode(TypeOopPtr const*, unsigned int, unsigned int) (1 samples, 0.42%)</title><rect x="1096.6" y="1091.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.6" y="1102.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.42%)</title><rect x="1096.6" y="1075.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.6" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.42%)</title><rect x="1101.5" y="1139.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.42%)</title><rect x="1101.5" y="1123.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.42%)</title><rect x="1101.5" y="1107.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.5" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1101.5" y="1091.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.5" y="1102.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.42%)</title><rect x="1101.5" y="1075.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.5" y="1086.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.42%)</title><rect x="1101.5" y="1059.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.5" y="1070.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.42%)</title><rect x="1101.5" y="1043.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.5" y="1054.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.83%)</title><rect x="1106.4" y="1155.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.4" y="1166.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.83%)</title><rect x="1106.4" y="1139.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.4" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.83%)</title><rect x="1106.4" y="1123.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.4" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.83%)</title><rect x="1106.4" y="1107.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.83%)</title><rect x="1106.4" y="1091.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.83%)</title><rect x="1106.4" y="1075.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.83%)</title><rect x="1106.4" y="1059.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.83%)</title><rect x="1106.4" y="1043.0" width="9.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.4" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.83%)</title><rect x="1106.4" y="1027.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.4" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.83%)</title><rect x="1106.4" y="1011.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.83%)</title><rect x="1106.4" y="995.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.83%)</title><rect x="1106.4" y="979.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.83%)</title><rect x="1106.4" y="963.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.83%)</title><rect x="1106.4" y="947.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.83%)</title><rect x="1106.4" y="931.0" width="9.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.83%)</title><rect x="1106.4" y="915.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.83%)</title><rect x="1106.4" y="899.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.83%)</title><rect x="1106.4" y="883.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.83%)</title><rect x="1106.4" y="867.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.4" y="878.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.42%)</title><rect x="1106.4" y="851.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.4" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.42%)</title><rect x="1106.4" y="835.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.4" y="846.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.42%)</title><rect x="1106.4" y="819.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.4" y="830.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.42%)</title><rect x="1106.4" y="803.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.4" y="814.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.42%)</title><rect x="1106.4" y="787.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.4" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.42%)</title><rect x="1106.4" y="771.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1109.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1111.3" y="851.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1111.3" y="835.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1111.3" y="819.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::sync_jvms() const (1 samples, 0.42%)</title><rect x="1111.3" y="803.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 3.75%)</title><rect x="1116.2" y="1155.0" width="44.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.2" y="1166.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 3.75%)</title><rect x="1116.2" y="1139.0" width="44.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.2" y="1150.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 3.75%)</title><rect x="1116.2" y="1123.0" width="44.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.2" y="1134.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 3.75%)</title><rect x="1116.2" y="1107.0" width="44.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.2" y="1118.0">Pars..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.42%)</title><rect x="1116.2" y="1091.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.2" y="1102.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.42%)</title><rect x="1116.2" y="1075.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.2" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.42%)</title><rect x="1116.2" y="1059.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.2" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.42%)</title><rect x="1116.2" y="1043.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.33%)</title><rect x="1121.2" y="1091.0" width="39.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.2" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.33%)</title><rect x="1121.2" y="1075.0" width="39.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.2" y="1086.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1121.2" y="1059.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.2" y="1070.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1121.2" y="1043.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.2" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.42%)</title><rect x="1121.2" y="1027.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.2" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.42%)</title><rect x="1121.2" y="1011.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.2" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.42%)</title><rect x="1121.2" y="995.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.2" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1121.2" y="979.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.2" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1121.2" y="963.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.2" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.42%)</title><rect x="1121.2" y="947.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.2" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.42%)</title><rect x="1121.2" y="931.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.50%)</title><rect x="1126.1" y="1059.0" width="29.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.1" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.50%)</title><rect x="1126.1" y="1043.0" width="29.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.1" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.50%)</title><rect x="1126.1" y="1027.0" width="29.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.1" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.50%)</title><rect x="1126.1" y="1011.0" width="29.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.1" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.50%)</title><rect x="1126.1" y="995.0" width="29.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.1" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.50%)</title><rect x="1126.1" y="979.0" width="29.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.1" y="990.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.50%)</title><rect x="1126.1" y="963.0" width="29.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.50%)</title><rect x="1126.1" y="947.0" width="29.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.1" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.50%)</title><rect x="1126.1" y="931.0" width="29.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.1" y="942.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.50%)</title><rect x="1126.1" y="915.0" width="29.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.1" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.50%)</title><rect x="1126.1" y="899.0" width="29.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.1" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.50%)</title><rect x="1126.1" y="883.0" width="29.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.1" y="894.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.50%)</title><rect x="1126.1" y="867.0" width="29.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.1" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.50%)</title><rect x="1126.1" y="851.0" width="29.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.1" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.50%)</title><rect x="1126.1" y="835.0" width="29.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.1" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.50%)</title><rect x="1126.1" y="819.0" width="29.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.1" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.50%)</title><rect x="1126.1" y="803.0" width="29.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.1" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.08%)</title><rect x="1126.1" y="787.0" width="24.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="798.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1126.1" y="771.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.1" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1126.1" y="755.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.1" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1126.1" y="739.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.1" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.42%)</title><rect x="1126.1" y="723.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.1" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.42%)</title><rect x="1126.1" y="707.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.1" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.42%)</title><rect x="1126.1" y="691.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.1" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1126.1" y="675.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.1" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1126.1" y="659.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.1" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.42%)</title><rect x="1126.1" y="643.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.67%)</title><rect x="1131.0" y="771.0" width="19.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.67%)</title><rect x="1131.0" y="755.0" width="19.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.67%)</title><rect x="1131.0" y="739.0" width="19.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.67%)</title><rect x="1131.0" y="723.0" width="19.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.67%)</title><rect x="1131.0" y="707.0" width="19.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.67%)</title><rect x="1131.0" y="691.0" width="19.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.67%)</title><rect x="1131.0" y="675.0" width="19.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.67%)</title><rect x="1131.0" y="659.0" width="19.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.67%)</title><rect x="1131.0" y="643.0" width="19.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.67%)</title><rect x="1131.0" y="627.0" width="19.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.67%)</title><rect x="1131.0" y="611.0" width="19.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.25%)</title><rect x="1131.0" y="595.0" width="14.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1131.0" y="579.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.0" y="590.0"></text>
</g>
<g>
<title>ProfileData::is_ReceiverTypeData() const (1 samples, 0.42%)</title><rect x="1131.0" y="563.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1135.9" y="579.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1135.9" y="563.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.9" y="574.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.42%)</title><rect x="1135.9" y="547.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.9" y="558.0"></text>
</g>
<g>
<title>Parse::Block::init_graph(Parse*) (1 samples, 0.42%)</title><rect x="1135.9" y="531.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.9" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.42%)</title><rect x="1140.8" y="579.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.8" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1140.8" y="563.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.8" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1140.8" y="547.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.8" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1140.8" y="531.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.8" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.42%)</title><rect x="1140.8" y="515.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.42%)</title><rect x="1145.8" y="595.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.42%)</title><rect x="1145.8" y="579.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.8" y="590.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.42%)</title><rect x="1145.8" y="563.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="574.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.42%)</title><rect x="1145.8" y="547.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="558.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.42%)</title><rect x="1145.8" y="531.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.8" y="542.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.42%)</title><rect x="1145.8" y="515.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.8" y="526.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.42%)</title><rect x="1145.8" y="499.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.8" y="510.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.42%)</title><rect x="1145.8" y="483.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.8" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.42%)</title><rect x="1145.8" y="467.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="478.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.42%)</title><rect x="1145.8" y="451.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.42%)</title><rect x="1150.7" y="787.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.7" y="798.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.42%)</title><rect x="1150.7" y="771.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.42%)</title><rect x="1150.7" y="755.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.7" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.6" y="1059.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.6" y="1043.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.6" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1155.6" y="1027.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1155.6" y="1011.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1155.6" y="995.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1155.6" y="979.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1155.6" y="963.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.6" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1155.6" y="947.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.6" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1155.6" y="931.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1155.6" y="915.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1155.6" y="899.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1155.6" y="883.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1155.6" y="867.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.6" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1155.6" y="851.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.6" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1155.6" y="835.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.6" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.42%)</title><rect x="1155.6" y="819.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.42%)</title><rect x="1155.6" y="803.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.6" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.42%)</title><rect x="1155.6" y="787.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.6" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1155.6" y="771.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.6" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1155.6" y="755.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.42%)</title><rect x="1155.6" y="739.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.6" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.42%)</title><rect x="1155.6" y="723.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.6" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.42%)</title><rect x="1155.6" y="707.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.6" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1155.6" y="691.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.6" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1155.6" y="675.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.6" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.42%)</title><rect x="1155.6" y="659.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.6" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.42%)</title><rect x="1155.6" y="643.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.6" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1155.6" y="627.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.6" y="638.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.42%)</title><rect x="1155.6" y="611.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.6" y="622.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.42%)</title><rect x="1155.6" y="595.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.6" y="606.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.42%)</title><rect x="1160.5" y="1155.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.5" y="1166.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.42%)</title><rect x="1160.5" y="1139.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.5" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.25%)</title><rect x="1165.4" y="1187.0" width="14.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.4" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.25%)</title><rect x="1165.4" y="1171.0" width="14.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.4" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.25%)</title><rect x="1165.4" y="1155.0" width="14.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.4" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.25%)</title><rect x="1165.4" y="1139.0" width="14.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="1150.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.42%)</title><rect x="1165.4" y="1123.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="1134.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.42%)</title><rect x="1165.4" y="1107.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.4" y="1118.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.42%)</title><rect x="1165.4" y="1091.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.4" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.42%)</title><rect x="1165.4" y="1075.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.4" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.42%)</title><rect x="1165.4" y="1059.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.42%)</title><rect x="1165.4" y="1043.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.42%)</title><rect x="1165.4" y="1027.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.42%)</title><rect x="1165.4" y="1011.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.42%)</title><rect x="1165.4" y="995.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.4" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.42%)</title><rect x="1165.4" y="979.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.42%)</title><rect x="1165.4" y="963.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.42%)</title><rect x="1165.4" y="947.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.42%)</title><rect x="1165.4" y="931.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.42%)</title><rect x="1165.4" y="915.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.42%)</title><rect x="1165.4" y="899.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.42%)</title><rect x="1165.4" y="883.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.42%)</title><rect x="1165.4" y="867.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.42%)</title><rect x="1165.4" y="851.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.4" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1165.4" y="835.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1165.4" y="819.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.42%)</title><rect x="1165.4" y="803.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.42%)</title><rect x="1165.4" y="787.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="798.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1165.4" y="771.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.42%)</title><rect x="1165.4" y="755.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.42%)</title><rect x="1165.4" y="739.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.42%)</title><rect x="1170.3" y="1123.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="1134.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.42%)</title><rect x="1170.3" y="1107.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="1118.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.42%)</title><rect x="1170.3" y="1091.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="1102.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.42%)</title><rect x="1170.3" y="1075.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="1086.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.42%)</title><rect x="1175.3" y="1123.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="1134.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.42%)</title><rect x="1180.2" y="1187.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.42%)</title><rect x="1180.2" y="1171.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.42%)</title><rect x="1185.1" y="1219.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="1230.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.42%)</title><rect x="1185.1" y="1203.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="1214.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.42%)</title><rect x="1185.1" y="1187.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="1198.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.42%)</title><rect x="1185.1" y="1171.0" width="4.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1188.1" y="1182.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.42%)</title><rect x="1185.1" y="1155.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.1" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.42%)</title><rect x="1185.1" y="1139.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.42%)</title><rect x="1185.1" y="1123.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="1134.0"></text>
</g>
</g>
</svg>
