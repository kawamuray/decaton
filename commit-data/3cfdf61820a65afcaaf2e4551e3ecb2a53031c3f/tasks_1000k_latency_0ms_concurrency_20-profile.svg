<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (1,055 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (265 samples, 25.12%)</title><rect x="10.0" y="979.0" width="296.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="12.2" y="963.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.2" y="947.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="12.2" y="931.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.09%)</title><rect x="12.2" y="915.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="899.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="883.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.2" y="867.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="12.2" y="851.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="12.2" y="835.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="12.2" y="819.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="12.2" y="803.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.09%)</title><rect x="12.2" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (262 samples, 24.83%)</title><rect x="13.4" y="963.0" width="293.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="974.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (7 samples, 0.66%)</title><rect x="14.5" y="947.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.66%)</title><rect x="14.5" y="931.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1787602502.accept (7 samples, 0.66%)</title><rect x="14.5" y="915.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (7 samples, 0.66%)</title><rect x="14.5" y="899.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.57%)</title><rect x="15.6" y="883.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.47%)</title><rect x="16.7" y="867.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.38%)</title><rect x="22.3" y="947.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.28%)</title><rect x="23.4" y="931.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.28%)</title><rect x="23.4" y="915.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.28%)</title><rect x="23.4" y="899.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.28%)</title><rect x="23.4" y="883.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.28%)</title><rect x="23.4" y="867.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.28%)</title><rect x="23.4" y="851.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="23.4" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="23.4" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="23.4" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="23.4" y="787.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="26.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="24.5" y="835.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="24.5" y="819.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="24.5" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="24.5" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="24.5" y="771.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="27.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="25.7" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.7" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="25.7" y="819.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="28.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (185 samples, 17.54%)</title><rect x="26.8" y="947.0" width="206.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.8" y="958.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/312979220.accept (176 samples, 16.68%)</title><rect x="27.9" y="931.0" width="196.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.9" y="942.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (176 samples, 16.68%)</title><rect x="27.9" y="915.0" width="196.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.9" y="926.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="30.1" y="899.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (134 samples, 12.70%)</title><rect x="31.3" y="899.0" width="149.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.3" y="910.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (134 samples, 12.70%)</title><rect x="31.3" y="883.0" width="149.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.3" y="894.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (134 samples, 12.70%)</title><rect x="31.3" y="867.0" width="149.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.3" y="878.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (134 samples, 12.70%)</title><rect x="31.3" y="851.0" width="149.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.3" y="862.0">java/util/concurren..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.09%)</title><rect x="51.4" y="835.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (115 samples, 10.90%)</title><rect x="52.5" y="835.0" width="128.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.5" y="846.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (115 samples, 10.90%)</title><rect x="52.5" y="819.0" width="128.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.5" y="830.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (93 samples, 8.82%)</title><rect x="52.5" y="803.0" width="104.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.5" y="814.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.80%)</title><rect x="52.5" y="787.0" width="21.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.5" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.80%)</title><rect x="52.5" y="771.0" width="21.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.5" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.80%)</title><rect x="52.5" y="755.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.5" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 7.01%)</title><rect x="73.8" y="787.0" width="82.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.8" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 7.01%)</title><rect x="73.8" y="771.0" width="82.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.8" y="782.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 7.01%)</title><rect x="73.8" y="755.0" width="82.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.8" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 7.01%)</title><rect x="73.8" y="739.0" width="82.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.8" y="750.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 6.64%)</title><rect x="78.2" y="723.0" width="78.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.2" y="734.0">sun/misc/..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="78.2" y="707.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="81.2" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (63 samples, 5.97%)</title><rect x="79.3" y="707.0" width="70.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="82.3" y="718.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="80.5" y="691.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="83.5" y="702.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="81.6" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.6" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="82.7" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="85.7" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.79%)</title><rect x="83.8" y="691.0" width="44.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="86.8" y="702.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="128.6" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="131.6" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.71%)</title><rect x="129.7" y="691.0" width="20.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="132.7" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.28%)</title><rect x="149.8" y="707.0" width="3.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="152.8" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="153.2" y="707.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="156.2" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="155.4" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="158.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 2.09%)</title><rect x="156.5" y="803.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.5" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 2.09%)</title><rect x="156.5" y="787.0" width="24.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.5" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 2.09%)</title><rect x="156.5" y="771.0" width="24.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.5" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 2.09%)</title><rect x="156.5" y="755.0" width="24.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.5" y="766.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (12 samples, 1.14%)</title><rect x="181.1" y="899.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 0.76%)</title><rect x="185.6" y="883.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.09%)</title><rect x="193.4" y="867.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.47%)</title><rect x="194.5" y="899.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.47%)</title><rect x="194.5" y="883.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.47%)</title><rect x="194.5" y="867.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (22 samples, 2.09%)</title><rect x="200.1" y="899.0" width="24.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="910.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 2.09%)</title><rect x="200.1" y="883.0" width="24.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.1" y="894.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.90%)</title><rect x="201.3" y="867.0" width="22.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.3" y="878.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 1.04%)</title><rect x="201.3" y="851.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.3" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 1.04%)</title><rect x="201.3" y="835.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.3" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 1.04%)</title><rect x="201.3" y="819.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.3" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="206.9" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="209.9" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="206.9" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="209.9" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="206.9" y="771.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="209.9" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="206.9" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="209.9" y="766.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="206.9" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="209.9" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.47%)</title><rect x="208.0" y="803.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="211.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (8 samples, 0.76%)</title><rect x="213.6" y="851.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.6" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="219.2" y="835.0" width="3.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="222.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="222.5" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.5" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="223.6" y="867.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="226.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="224.7" y="931.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="224.7" y="915.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="224.7" y="899.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="224.7" y="883.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.66%)</title><rect x="225.9" y="931.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.66%)</title><rect x="225.9" y="915.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.66%)</title><rect x="225.9" y="899.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.66%)</title><rect x="225.9" y="883.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (7 samples, 0.66%)</title><rect x="225.9" y="867.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (7 samples, 0.66%)</title><rect x="225.9" y="851.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (65 samples, 6.16%)</title><rect x="233.7" y="947.0" width="72.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.7" y="958.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (65 samples, 6.16%)</title><rect x="233.7" y="931.0" width="72.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.7" y="942.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="233.7" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (42 samples, 3.98%)</title><rect x="234.8" y="915.0" width="47.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.8" y="926.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (41 samples, 3.89%)</title><rect x="235.9" y="899.0" width="45.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.9" y="910.0">org/..</text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="235.9" y="883.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 3.70%)</title><rect x="237.1" y="883.0" width="43.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.1" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (34 samples, 3.22%)</title><rect x="238.2" y="867.0" width="38.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.2" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (34 samples, 3.22%)</title><rect x="238.2" y="851.0" width="38.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.2" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (19 samples, 1.80%)</title><rect x="239.3" y="835.0" width="21.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.3" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.76%)</title><rect x="250.5" y="819.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.76%)</title><rect x="250.5" y="803.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.76%)</title><rect x="250.5" y="787.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.76%)</title><rect x="250.5" y="771.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.76%)</title><rect x="250.5" y="755.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.76%)</title><rect x="250.5" y="739.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.76%)</title><rect x="250.5" y="723.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.09%)</title><rect x="259.4" y="819.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="259.4" y="803.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="259.4" y="787.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.33%)</title><rect x="260.5" y="835.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.33%)</title><rect x="260.5" y="819.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (11 samples, 1.04%)</title><rect x="260.5" y="803.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.5" y="814.0"></text>
</g>
<g>
<title>java/util/Optional.of (11 samples, 1.04%)</title><rect x="260.5" y="787.0" width="12.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.28%)</title><rect x="272.8" y="803.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.8" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.28%)</title><rect x="272.8" y="787.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.19%)</title><rect x="276.2" y="867.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.19%)</title><rect x="276.2" y="851.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="276.2" y="835.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="276.2" y="819.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="277.3" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$FetchPosition.&lt;init&gt; (1 samples, 0.09%)</title><rect x="278.4" y="867.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.09%)</title><rect x="279.6" y="867.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.6" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.09%)</title><rect x="279.6" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="282.6" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="279.6" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.6" y="846.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.09%)</title><rect x="279.6" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="282.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="280.7" y="883.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="280.7" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="280.7" y="851.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.7" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="280.7" y="835.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="280.7" y="819.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="280.7" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.57%)</title><rect x="281.8" y="915.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.38%)</title><rect x="282.9" y="899.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.38%)</title><rect x="282.9" y="883.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.9" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="282.9" y="867.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/2117579856.accept (1 samples, 0.09%)</title><rect x="282.9" y="851.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="282.9" y="835.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="282.9" y="819.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="284.0" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="284.0" y="851.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.0" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="284.0" y="835.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="284.0" y="819.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="284.0" y="803.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="284.0" y="787.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.0" y="798.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="284.0" y="771.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="287.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.19%)</title><rect x="285.1" y="867.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.19%)</title><rect x="285.1" y="851.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="285.1" y="835.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="285.1" y="819.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="285.1" y="803.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="285.1" y="787.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="285.1" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.1" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="285.1" y="755.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.1" y="766.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="285.1" y="739.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="285.1" y="723.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="285.1" y="707.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="285.1" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/1866263707.test (1 samples, 0.09%)</title><rect x="285.1" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.getMask (1 samples, 0.09%)</title><rect x="286.3" y="835.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="287.4" y="899.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.09%)</title><rect x="287.4" y="883.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.09%)</title><rect x="287.4" y="867.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="288.5" y="915.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="288.5" y="899.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.09%)</title><rect x="288.5" y="883.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="291.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="288.5" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.76%)</title><rect x="289.6" y="915.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.66%)</title><rect x="289.6" y="899.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="289.6" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="289.6" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="289.6" y="851.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="289.6" y="835.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="289.6" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="289.6" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="289.6" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.09%)</title><rect x="289.6" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.57%)</title><rect x="290.7" y="883.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="290.7" y="867.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.7" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="290.7" y="851.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="293.7" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="290.7" y="835.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="293.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="291.9" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="291.9" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="291.9" y="819.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="291.9" y="803.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="291.9" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.09%)</title><rect x="291.9" y="771.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.38%)</title><rect x="293.0" y="867.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.38%)</title><rect x="293.0" y="851.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.38%)</title><rect x="293.0" y="835.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.28%)</title><rect x="293.0" y="819.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.28%)</title><rect x="293.0" y="803.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.28%)</title><rect x="293.0" y="787.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.28%)</title><rect x="293.0" y="771.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="293.0" y="755.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="296.0" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="295.2" y="755.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="298.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.memoryAllocated (1 samples, 0.09%)</title><rect x="296.3" y="819.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="297.5" y="899.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="297.5" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="297.5" y="867.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="297.5" y="851.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="297.5" y="835.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="297.5" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.09%)</title><rect x="297.5" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.09%)</title><rect x="297.5" y="787.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="297.5" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.57%)</title><rect x="298.6" y="915.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.47%)</title><rect x="299.7" y="899.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.47%)</title><rect x="299.7" y="883.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="299.7" y="867.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="299.7" y="851.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="299.7" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.7" y="846.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="299.7" y="819.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="302.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (4 samples, 0.38%)</title><rect x="300.8" y="867.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.38%)</title><rect x="300.8" y="851.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.38%)</title><rect x="300.8" y="835.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.38%)</title><rect x="300.8" y="819.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.38%)</title><rect x="300.8" y="803.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.28%)</title><rect x="300.8" y="787.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.8" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (3 samples, 0.28%)</title><rect x="300.8" y="771.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.8" y="782.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (3 samples, 0.28%)</title><rect x="300.8" y="755.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3 samples, 0.28%)</title><rect x="300.8" y="739.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (3 samples, 0.28%)</title><rect x="300.8" y="723.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3 samples, 0.28%)</title><rect x="300.8" y="707.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="300.8" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$170/971726447.accept (1 samples, 0.09%)</title><rect x="300.8" y="675.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/786916829.test (2 samples, 0.19%)</title><rect x="301.9" y="691.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="304.2" y="787.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="304.2" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="304.2" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="304.2" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="305.3" y="915.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="305.3" y="899.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="305.3" y="883.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="305.3" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (673 samples, 63.79%)</title><rect x="306.4" y="979.0" width="752.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.4" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (673 samples, 63.79%)</title><rect x="306.4" y="963.0" width="752.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.4" y="974.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (673 samples, 63.79%)</title><rect x="306.4" y="947.0" width="752.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.4" y="958.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run (464 samples, 43.98%)</title><rect x="307.5" y="931.0" width="519.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.5" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (464 samples, 43.98%)</title><rect x="307.5" y="915.0" width="519.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.5" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (464 samples, 43.98%)</title><rect x="307.5" y="899.0" width="519.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.5" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (457 samples, 43.32%)</title><rect x="307.5" y="883.0" width="511.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.5" y="894.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProc..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.19%)</title><rect x="318.7" y="867.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (172 samples, 16.30%)</title><rect x="320.9" y="867.0" width="192.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.9" y="878.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (172 samples, 16.30%)</title><rect x="320.9" y="851.0" width="192.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.9" y="862.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (172 samples, 16.30%)</title><rect x="320.9" y="835.0" width="192.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.9" y="846.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (172 samples, 16.30%)</title><rect x="320.9" y="819.0" width="192.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.9" y="830.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (172 samples, 16.30%)</title><rect x="320.9" y="803.0" width="192.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.9" y="814.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (172 samples, 16.30%)</title><rect x="320.9" y="787.0" width="192.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.9" y="798.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (63 samples, 5.97%)</title><rect x="320.9" y="771.0" width="70.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.9" y="782.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (30 samples, 2.84%)</title><rect x="320.9" y="755.0" width="33.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.9" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (27 samples, 2.56%)</title><rect x="320.9" y="739.0" width="30.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.9" y="750.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="335.5" y="723.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="338.5" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="336.6" y="723.0" width="4.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="339.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="337.7" y="707.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="340.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="341.1" y="723.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.76%)</title><rect x="342.2" y="723.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="345.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.76%)</title><rect x="342.2" y="707.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="345.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.76%)</title><rect x="342.2" y="691.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.76%)</title><rect x="342.2" y="675.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (3 samples, 0.28%)</title><rect x="351.1" y="739.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="351.1" y="723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.19%)</title><rect x="352.3" y="723.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.3" y="734.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.19%)</title><rect x="352.3" y="707.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="355.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 3.13%)</title><rect x="354.5" y="755.0" width="36.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="357.5" y="766.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.28%)</title><rect x="354.5" y="739.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="357.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.28%)</title><rect x="354.5" y="723.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="357.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.28%)</title><rect x="354.5" y="707.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="357.5" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="354.5" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="357.5" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="355.6" y="691.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="358.6" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="355.6" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="358.6" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="355.6" y="659.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="358.6" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="355.6" y="643.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="358.6" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="355.6" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="358.6" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="355.6" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="358.6" y="622.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="356.7" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (6 samples, 0.57%)</title><rect x="357.8" y="739.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="360.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="363.4" y="723.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 2.27%)</title><rect x="364.6" y="739.0" width="26.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.6" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="370.2" y="723.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.19%)</title><rect x="371.3" y="723.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="372.4" y="707.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.57%)</title><rect x="373.5" y="723.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.57%)</title><rect x="373.5" y="707.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.57%)</title><rect x="373.5" y="691.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (10 samples, 0.95%)</title><rect x="380.2" y="723.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (97 samples, 9.19%)</title><rect x="391.4" y="771.0" width="108.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.4" y="782.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.38%)</title><rect x="391.4" y="755.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.38%)</title><rect x="391.4" y="739.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.28%)</title><rect x="391.4" y="723.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.19%)</title><rect x="392.5" y="707.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.09%)</title><rect x="394.8" y="723.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="397.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.76%)</title><rect x="395.9" y="755.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="398.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.76%)</title><rect x="395.9" y="739.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="397.0" y="723.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.19%)</title><rect x="401.5" y="723.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.09%)</title><rect x="403.7" y="723.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.57%)</title><rect x="404.8" y="755.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.38%)</title><rect x="405.9" y="739.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="408.2" y="723.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="408.2" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="409.3" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="410.4" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (15 samples, 1.42%)</title><rect x="411.5" y="755.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (15 samples, 1.42%)</title><rect x="411.5" y="739.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="413.8" y="723.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="416.8" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="413.8" y="707.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="416.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="414.9" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="417.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="414.9" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="417.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="414.9" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="417.9" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="414.9" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="417.9" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="414.9" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="417.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="414.9" y="611.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="417.9" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="414.9" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="417.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="416.0" y="723.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (10 samples, 0.95%)</title><rect x="417.1" y="723.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (10 samples, 0.95%)</title><rect x="417.1" y="707.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (10 samples, 0.95%)</title><rect x="417.1" y="691.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 6.07%)</title><rect x="428.3" y="755.0" width="71.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="431.3" y="766.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.71%)</title><rect x="428.3" y="739.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.38%)</title><rect x="429.4" y="723.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.38%)</title><rect x="429.4" y="707.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.38%)</title><rect x="429.4" y="691.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.85%)</title><rect x="433.9" y="723.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.28%)</title><rect x="444.0" y="723.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.28%)</title><rect x="444.0" y="707.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="447.3" y="723.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (46 samples, 4.36%)</title><rect x="448.4" y="739.0" width="51.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.4" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (46 samples, 4.36%)</title><rect x="448.4" y="723.0" width="51.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.4" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (46 samples, 4.36%)</title><rect x="448.4" y="707.0" width="51.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.4" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.95%)</title><rect x="469.7" y="691.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.38%)</title><rect x="473.1" y="675.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.38%)</title><rect x="473.1" y="659.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.38%)</title><rect x="473.1" y="643.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="476.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.38%)</title><rect x="473.1" y="627.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.19%)</title><rect x="477.5" y="675.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="479.8" y="675.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="479.8" y="659.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="482.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.76%)</title><rect x="480.9" y="691.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.76%)</title><rect x="480.9" y="675.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="483.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.76%)</title><rect x="480.9" y="659.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="483.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.76%)</title><rect x="480.9" y="643.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.9" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.76%)</title><rect x="480.9" y="627.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.9" y="638.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.76%)</title><rect x="480.9" y="611.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.9" y="622.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (8 samples, 0.76%)</title><rect x="480.9" y="595.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="483.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.85%)</title><rect x="489.8" y="691.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.85%)</title><rect x="489.8" y="675.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.85%)</title><rect x="489.8" y="659.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.14%)</title><rect x="499.9" y="771.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.14%)</title><rect x="499.9" y="755.0" width="13.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.14%)</title><rect x="499.9" y="739.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.19%)</title><rect x="499.9" y="723.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 0.38%)</title><rect x="502.1" y="723.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.57%)</title><rect x="506.6" y="723.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="509.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.57%)</title><rect x="506.6" y="707.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="509.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (250 samples, 23.70%)</title><rect x="513.3" y="867.0" width="279.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="516.3" y="878.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (39 samples, 3.70%)</title><rect x="513.3" y="851.0" width="43.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="516.3" y="862.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="513.3" y="835.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.3" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (38 samples, 3.60%)</title><rect x="514.4" y="835.0" width="42.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.4" y="846.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (37 samples, 3.51%)</title><rect x="515.6" y="819.0" width="41.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="518.6" y="830.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.66%)</title><rect x="516.7" y="803.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.66%)</title><rect x="516.7" y="787.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.66%)</title><rect x="516.7" y="771.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.66%)</title><rect x="516.7" y="755.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (29 samples, 2.75%)</title><rect x="524.5" y="803.0" width="32.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="527.5" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.85%)</title><rect x="546.9" y="787.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="549.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="546.9" y="771.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="549.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="546.9" y="755.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="549.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.76%)</title><rect x="548.0" y="771.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="555.8" y="755.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="558.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="556.9" y="851.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="559.2" y="835.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="559.2" y="819.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (146 samples, 13.84%)</title><rect x="561.4" y="851.0" width="163.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="564.4" y="862.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (146 samples, 13.84%)</title><rect x="561.4" y="835.0" width="163.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="564.4" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="572.6" y="819.0" width="5.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="575.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="572.6" y="803.0" width="5.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="575.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (48 samples, 4.55%)</title><rect x="578.2" y="819.0" width="53.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.2" y="830.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (47 samples, 4.45%)</title><rect x="578.2" y="803.0" width="52.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="581.2" y="814.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 3.60%)</title><rect x="579.3" y="787.0" width="42.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.3" y="798.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 2.18%)</title><rect x="590.5" y="771.0" width="25.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.5" y="782.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 2.18%)</title><rect x="590.5" y="755.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="593.5" y="766.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 2.18%)</title><rect x="590.5" y="739.0" width="25.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.5" y="750.0">j..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="593.8" y="723.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="596.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.42%)</title><rect x="595.0" y="723.0" width="16.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="598.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (11 samples, 1.04%)</title><rect x="595.0" y="707.0" width="12.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="598.0" y="718.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="596.1" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.1" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="597.2" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="600.2" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (8 samples, 0.76%)</title><rect x="598.3" y="691.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="601.3" y="702.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (7 samples, 0.66%)</title><rect x="599.4" y="675.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="602.4" y="686.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.09%)</title><rect x="600.6" y="659.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="603.6" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (4 samples, 0.38%)</title><rect x="601.7" y="659.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.7" y="670.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="605.0" y="643.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="608.0" y="654.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="606.2" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="609.2" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.38%)</title><rect x="607.3" y="707.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="610.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.38%)</title><rect x="607.3" y="691.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="610.3" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.19%)</title><rect x="608.4" y="675.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="611.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.19%)</title><rect x="608.4" y="659.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="611.4" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (2 samples, 0.19%)</title><rect x="608.4" y="643.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="611.4" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.19%)</title><rect x="608.4" y="627.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="611.4" y="638.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (2 samples, 0.19%)</title><rect x="608.4" y="611.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="611.4" y="622.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (2 samples, 0.19%)</title><rect x="608.4" y="595.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="611.4" y="606.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="608.4" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="611.4" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="609.5" y="579.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="612.5" y="590.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="609.5" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="612.5" y="574.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="610.6" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.6" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.38%)</title><rect x="611.7" y="723.0" width="4.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="614.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="616.2" y="771.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="619.2" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="618.5" y="771.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="621.5" y="782.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.38%)</title><rect x="621.8" y="787.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="624.8" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.38%)</title><rect x="626.3" y="787.0" width="4.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="629.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="630.8" y="803.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="633.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="630.8" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="633.8" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="630.8" y="771.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="630.8" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="633.8" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="630.8" y="739.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="630.8" y="723.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="633.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="630.8" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="633.8" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="630.8" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="633.8" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="630.8" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.8" y="686.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="630.8" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="633.8" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="630.8" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="633.8" y="654.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.09%)</title><rect x="630.8" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="633.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="631.9" y="819.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.85%)</title><rect x="634.1" y="819.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.85%)</title><rect x="634.1" y="803.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="637.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.85%)</title><rect x="634.1" y="787.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.1" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="643.1" y="771.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="646.1" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (72 samples, 6.82%)</title><rect x="644.2" y="819.0" width="80.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.2" y="830.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (70 samples, 6.64%)</title><rect x="646.4" y="803.0" width="78.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.4" y="814.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.85%)</title><rect x="646.4" y="787.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.85%)</title><rect x="646.4" y="771.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="649.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.85%)</title><rect x="646.4" y="755.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.85%)</title><rect x="646.4" y="739.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.19%)</title><rect x="654.2" y="723.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="657.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.19%)</title><rect x="654.2" y="707.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (61 samples, 5.78%)</title><rect x="656.5" y="787.0" width="68.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.5" y="798.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (55 samples, 5.21%)</title><rect x="663.2" y="771.0" width="61.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.2" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.56%)</title><rect x="694.5" y="755.0" width="30.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.5" y="766.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.57%)</title><rect x="709.1" y="739.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="712.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.47%)</title><rect x="715.8" y="739.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="718.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="720.2" y="723.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="723.2" y="734.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.28%)</title><rect x="721.4" y="739.0" width="3.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="724.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (38 samples, 3.60%)</title><rect x="724.7" y="851.0" width="42.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="727.7" y="862.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (38 samples, 3.60%)</title><rect x="724.7" y="835.0" width="42.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="727.7" y="846.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/234677850.process (23 samples, 2.18%)</title><rect x="725.8" y="819.0" width="25.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="728.8" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.90%)</title><rect x="729.2" y="803.0" width="22.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.2" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.61%)</title><rect x="732.5" y="787.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.5" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.28%)</title><rect x="733.7" y="771.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.28%)</title><rect x="733.7" y="755.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.28%)</title><rect x="733.7" y="739.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.28%)</title><rect x="733.7" y="723.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="736.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.19%)</title><rect x="734.8" y="707.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="735.9" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.57%)</title><rect x="737.0" y="771.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.57%)</title><rect x="737.0" y="755.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="740.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.57%)</title><rect x="737.0" y="739.0" width="6.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="740.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.66%)</title><rect x="743.7" y="771.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.28%)</title><rect x="751.6" y="819.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="754.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="751.6" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="754.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="751.6" y="787.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="754.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="751.6" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="754.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="751.6" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="754.6" y="766.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="751.6" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="754.6" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="751.6" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="754.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="752.7" y="803.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="755.7" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.09%)</title><rect x="754.9" y="819.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="757.9" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="754.9" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1167479049.get$Lambda (1 samples, 0.09%)</title><rect x="754.9" y="787.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1167479049.&lt;init&gt; (1 samples, 0.09%)</title><rect x="754.9" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.9" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="756.0" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.19%)</title><rect x="757.1" y="819.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="760.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.19%)</title><rect x="757.1" y="803.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.1" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="757.1" y="787.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="760.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="758.3" y="787.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.19%)</title><rect x="759.4" y="819.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.19%)</title><rect x="759.4" y="803.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.4" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.09%)</title><rect x="760.5" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.5" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.09%)</title><rect x="760.5" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.47%)</title><rect x="761.6" y="819.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.6" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="763.9" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.9" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="763.9" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="766.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.19%)</title><rect x="765.0" y="803.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="768.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="767.2" y="851.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="770.2" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="767.2" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="770.2" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="767.2" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.2" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="767.2" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 2.09%)</title><rect x="768.3" y="851.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.3" y="862.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.57%)</title><rect x="773.9" y="835.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="776.9" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.57%)</title><rect x="773.9" y="819.0" width="6.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="776.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.95%)</title><rect x="780.6" y="835.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.85%)</title><rect x="781.8" y="819.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="784.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/778024104.accept (9 samples, 0.85%)</title><rect x="781.8" y="803.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="784.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.85%)</title><rect x="781.8" y="787.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.8" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.85%)</title><rect x="781.8" y="771.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.8" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.85%)</title><rect x="781.8" y="755.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.8" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="787.3" y="739.0" width="4.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="790.3" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="787.3" y="723.0" width="4.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="790.3" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.09%)</title><rect x="791.8" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.80%)</title><rect x="792.9" y="867.0" width="21.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.9" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.80%)</title><rect x="792.9" y="851.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.9" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.19%)</title><rect x="797.4" y="835.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="800.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.23%)</title><rect x="799.6" y="835.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/778024104.accept (13 samples, 1.23%)</title><rect x="799.6" y="819.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (13 samples, 1.23%)</title><rect x="799.6" y="803.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 1.23%)</title><rect x="799.6" y="787.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="802.6" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 1.23%)</title><rect x="799.6" y="771.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="802.6" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 1.23%)</title><rect x="799.6" y="755.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="802.6" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.38%)</title><rect x="814.2" y="867.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="817.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="814.2" y="851.0" width="4.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="817.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.66%)</title><rect x="818.7" y="883.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.7" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="824.3" y="867.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="827.3" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="824.3" y="851.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="827.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.76%)</title><rect x="826.5" y="931.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="829.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.76%)</title><rect x="826.5" y="915.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.76%)</title><rect x="826.5" y="899.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.76%)</title><rect x="826.5" y="883.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="829.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (200 samples, 18.96%)</title><rect x="835.4" y="931.0" width="223.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="838.4" y="942.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (199 samples, 18.86%)</title><rect x="836.6" y="915.0" width="222.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="839.6" y="926.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (183 samples, 17.35%)</title><rect x="836.6" y="899.0" width="204.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.6" y="910.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.61%)</title><rect x="847.7" y="883.0" width="19.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.76%)</title><rect x="866.8" y="883.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="869.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.76%)</title><rect x="866.8" y="867.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.76%)</title><rect x="866.8" y="851.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="869.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.76%)</title><rect x="866.8" y="835.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="869.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (8 samples, 0.76%)</title><rect x="875.7" y="883.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="878.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (8 samples, 0.76%)</title><rect x="875.7" y="867.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="878.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (139 samples, 13.18%)</title><rect x="884.7" y="883.0" width="155.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="887.7" y="894.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (138 samples, 13.08%)</title><rect x="885.8" y="867.0" width="154.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.8" y="878.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="893.6" y="851.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="896.6" y="862.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.19%)</title><rect x="894.7" y="851.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.7" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="897.0" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="900.0" y="862.0"></text>
</g>
<g>
<title>Unsafe_Park (124 samples, 11.75%)</title><rect x="898.1" y="851.0" width="138.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="901.1" y="862.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="898.1" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="901.1" y="846.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 2.18%)</title><rect x="899.2" y="835.0" width="25.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="902.2" y="846.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.95%)</title><rect x="910.4" y="819.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.4" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.47%)</title><rect x="910.4" y="803.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="913.4" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.19%)</title><rect x="913.7" y="787.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="916.7" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="916.0" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="919.0" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.38%)</title><rect x="917.1" y="803.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="920.1" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.19%)</title><rect x="921.6" y="819.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="924.6" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="923.8" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.8" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.09%)</title><rect x="923.8" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="926.8" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="923.8" y="787.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.8" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="923.8" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.8" y="782.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="924.9" y="835.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="927.9" y="846.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.66%)</title><rect x="926.0" y="835.0" width="7.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="929.0" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 2.65%)</title><rect x="933.9" y="835.0" width="31.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="936.9" y="846.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 4.64%)</title><rect x="965.2" y="835.0" width="54.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="968.2" y="846.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.19%)</title><rect x="1020.0" y="835.0" width="2.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1023.0" y="846.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1022.2" y="835.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1025.2" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.47%)</title><rect x="1023.3" y="835.0" width="5.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1026.3" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1028.9" y="835.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1031.9" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1031.2" y="835.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1034.2" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1032.3" y="835.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.3" y="846.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="1034.5" y="835.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.5" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1036.8" y="851.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1039.8" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1039.0" y="851.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.0" y="862.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="1040.1" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1043.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.52%)</title><rect x="1041.2" y="899.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1044.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.52%)</title><rect x="1041.2" y="883.0" width="17.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1044.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.52%)</title><rect x="1041.2" y="867.0" width="17.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1044.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.52%)</title><rect x="1041.2" y="851.0" width="17.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1044.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="1059.1" y="979.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1062.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="1059.1" y="963.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1062.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="1059.1" y="947.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.09%)</title><rect x="1059.1" y="931.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1062.1" y="942.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="1059.1" y="915.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1062.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1060.3" y="979.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1060.3" y="963.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1063.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1060.3" y="947.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1063.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="1060.3" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1063.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="1060.3" y="915.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1063.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="1060.3" y="899.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1063.3" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="1060.3" y="883.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="1060.3" y="867.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1063.3" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="1060.3" y="851.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.3" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.09%)</title><rect x="1060.3" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1063.3" y="846.0"></text>
</g>
<g>
<title>__read (1 samples, 0.09%)</title><rect x="1060.3" y="819.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1063.3" y="830.0"></text>
</g>
<g>
<title>start_thread (115 samples, 10.90%)</title><rect x="1061.4" y="979.0" width="128.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1064.4" y="990.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (115 samples, 10.90%)</title><rect x="1061.4" y="963.0" width="128.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1064.4" y="974.0">java_start(Threa..</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 2.37%)</title><rect x="1061.4" y="947.0" width="27.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1064.4" y="958.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (11 samples, 1.04%)</title><rect x="1061.4" y="931.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.4" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 1.04%)</title><rect x="1061.4" y="915.0" width="12.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1064.4" y="926.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (6 samples, 0.57%)</title><rect x="1061.4" y="899.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1064.4" y="910.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.09%)</title><rect x="1067.0" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.0" y="894.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.38%)</title><rect x="1068.1" y="899.0" width="4.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1071.1" y="910.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.09%)</title><rect x="1072.6" y="899.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1075.6" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.33%)</title><rect x="1073.7" y="931.0" width="15.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.7" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="1073.7" y="915.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.7" y="926.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1073.7" y="899.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1076.7" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.66%)</title><rect x="1074.8" y="915.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.8" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.38%)</title><rect x="1074.8" y="899.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.8" y="910.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.28%)</title><rect x="1074.8" y="883.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.8" y="894.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.28%)</title><rect x="1074.8" y="867.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.8" y="878.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.28%)</title><rect x="1074.8" y="851.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.8" y="862.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1077.0" y="835.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.0" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1077.0" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.0" y="830.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1077.0" y="803.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1077.0" y="787.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.0" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1078.2" y="883.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.2" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1078.2" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.2" y="878.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.09%)</title><rect x="1078.2" y="851.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.2" y="862.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1078.2" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.2" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.28%)</title><rect x="1079.3" y="899.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.3" y="910.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.28%)</title><rect x="1079.3" y="883.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.3" y="894.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1081.5" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.5" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.57%)</title><rect x="1082.6" y="915.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.6" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.57%)</title><rect x="1082.6" y="899.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.57%)</title><rect x="1082.6" y="883.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.6" y="894.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.57%)</title><rect x="1082.6" y="867.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.6" y="878.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.57%)</title><rect x="1082.6" y="851.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.6" y="862.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.57%)</title><rect x="1082.6" y="835.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.6" y="846.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.47%)</title><rect x="1083.7" y="819.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.7" y="830.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.19%)</title><rect x="1086.0" y="803.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.0" y="814.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1088.2" y="803.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.2" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (88 samples, 8.34%)</title><rect x="1089.3" y="947.0" width="98.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.3" y="958.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 8.34%)</title><rect x="1089.3" y="931.0" width="98.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.3" y="942.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (88 samples, 8.34%)</title><rect x="1089.3" y="915.0" width="98.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.3" y="926.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (88 samples, 8.34%)</title><rect x="1089.3" y="899.0" width="98.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.3" y="910.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (86 samples, 8.15%)</title><rect x="1089.3" y="883.0" width="96.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.3" y="894.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (86 samples, 8.15%)</title><rect x="1089.3" y="867.0" width="96.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.3" y="878.0">Compile::Co..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1089.3" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.3" y="862.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1089.3" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.3" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1089.3" y="819.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1089.3" y="803.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1089.3" y="787.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1089.3" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1089.3" y="755.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1089.3" y="739.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1089.3" y="723.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.3" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1089.3" y="707.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.3" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1089.3" y="691.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.3" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1089.3" y="675.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.3" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1089.3" y="659.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.3" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1089.3" y="643.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.3" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1089.3" y="627.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.3" y="638.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1089.3" y="611.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.3" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1089.3" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.3" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1089.3" y="579.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.3" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1089.3" y="563.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.3" y="574.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="1089.3" y="547.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.3" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.09%)</title><rect x="1089.3" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.3" y="542.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 3.89%)</title><rect x="1090.5" y="851.0" width="45.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.5" y="862.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.19%)</title><rect x="1090.5" y="835.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.5" y="846.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1090.5" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.5" y="830.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1091.6" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.6" y="830.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1091.6" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.6" y="814.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1091.6" y="787.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.6" y="798.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.09%)</title><rect x="1091.6" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.6" y="782.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.09%)</title><rect x="1091.6" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.6" y="766.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.09%)</title><rect x="1091.6" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.6" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.19%)</title><rect x="1092.7" y="835.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.7" y="846.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1092.7" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.7" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1092.7" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.7" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1092.7" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.7" y="798.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.09%)</title><rect x="1093.8" y="819.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.8" y="830.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.09%)</title><rect x="1094.9" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.9" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.38%)</title><rect x="1096.0" y="835.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.0" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.28%)</title><rect x="1096.0" y="819.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.0" y="830.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1097.2" y="803.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.2" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1097.2" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.2" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1097.2" y="771.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.2" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1098.3" y="803.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.3" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1098.3" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.3" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1098.3" y="771.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.3" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1098.3" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.3" y="766.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1098.3" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.3" y="750.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.09%)</title><rect x="1098.3" y="723.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.3" y="734.0"></text>
</g>
<g>
<title>MulLNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1099.4" y="819.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.4" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.19%)</title><rect x="1100.5" y="835.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.5" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.19%)</title><rect x="1100.5" y="819.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.5" y="830.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1100.5" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.5" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1101.6" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1101.6" y="787.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 2.75%)</title><rect x="1102.8" y="835.0" width="32.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.8" y="846.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.19%)</title><rect x="1102.8" y="819.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1102.8" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.8" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1103.9" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.9" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1103.9" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.38%)</title><rect x="1105.0" y="819.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.85%)</title><rect x="1109.5" y="819.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.5" y="830.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1111.7" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.57%)</title><rect x="1112.8" y="803.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.8" y="814.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1113.9" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.9" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.38%)</title><rect x="1115.1" y="787.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1119.5" y="819.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.38%)</title><rect x="1120.7" y="819.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.7" y="830.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1122.9" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.9" y="814.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.09%)</title><rect x="1124.0" y="803.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.0" y="814.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.09%)</title><rect x="1124.0" y="787.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.19%)</title><rect x="1125.1" y="819.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1127.4" y="819.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&amp;, Node_List&amp;, int, int) (1 samples, 0.09%)</title><rect x="1128.5" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1129.6" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.6" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.28%)</title><rect x="1130.7" y="819.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.7" y="830.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1133.0" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.0" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1134.1" y="819.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1137.1" y="830.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.09%)</title><rect x="1135.2" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.2" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 3.22%)</title><rect x="1136.3" y="851.0" width="38.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.3" y="862.0">Com..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.19%)</title><rect x="1136.3" y="835.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.3" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1138.5" y="835.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 2.18%)</title><rect x="1139.7" y="835.0" width="25.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.7" y="846.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1139.7" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1139.7" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1139.7" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.7" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1139.7" y="771.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1142.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1140.8" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="830.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1140.8" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.19%)</title><rect x="1141.9" y="819.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.9" y="830.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1143.0" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 1.33%)</title><rect x="1144.1" y="819.0" width="15.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 1.04%)</title><rect x="1147.5" y="803.0" width="12.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.5" y="814.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1149.7" y="787.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1150.9" y="787.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.66%)</title><rect x="1152.0" y="787.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1157.6" y="771.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1158.7" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.28%)</title><rect x="1159.8" y="819.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.8" y="830.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.09%)</title><rect x="1162.0" y="803.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.19%)</title><rect x="1163.2" y="819.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.19%)</title><rect x="1163.2" y="803.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="814.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1163.2" y="787.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.3" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.66%)</title><rect x="1165.4" y="835.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.66%)</title><rect x="1165.4" y="819.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="830.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1165.4" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.4" y="814.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1165.4" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.4" y="798.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1165.4" y="771.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1165.4" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1165.4" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="750.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.5" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="814.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.5" y="787.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="798.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1166.5" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.5" y="782.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1166.5" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1166.5" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1166.5" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1166.5" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.19%)</title><rect x="1167.6" y="803.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.6" y="814.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1168.7" y="787.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="798.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.09%)</title><rect x="1168.7" y="771.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.7" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1168.7" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="766.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.09%)</title><rect x="1168.7" y="739.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.9" y="803.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1169.9" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1169.9" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1169.9" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.0" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="814.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1171.0" y="787.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="798.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1172.1" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.1" y="814.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1172.1" y="787.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.1" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="739.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.1" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.1" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.1" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="691.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.1" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.1" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.1" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="643.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.1" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.1" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="611.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="595.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.1" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.1" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.1" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1172.1" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.1" y="526.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1172.1" y="499.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.1" y="510.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1173.2" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.2" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1173.2" y="819.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.2" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1173.2" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.09%)</title><rect x="1173.2" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.2" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.2" y="771.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.2" y="782.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.09%)</title><rect x="1174.3" y="851.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.3" y="862.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.09%)</title><rect x="1174.3" y="835.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.3" y="819.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.3" y="803.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.3" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.3" y="771.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.3" y="755.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="739.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="723.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="734.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1174.3" y="691.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.3" y="702.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="686.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="670.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1174.3" y="643.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="654.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1174.3" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.57%)</title><rect x="1175.5" y="851.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.57%)</title><rect x="1175.5" y="835.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.57%)</title><rect x="1175.5" y="819.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.57%)</title><rect x="1175.5" y="803.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.57%)</title><rect x="1175.5" y="787.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.57%)</title><rect x="1175.5" y="771.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="782.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1175.5" y="755.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1175.5" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="750.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.09%)</title><rect x="1175.5" y="723.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="734.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.09%)</title><rect x="1175.5" y="707.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.5" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1176.6" y="755.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1176.6" y="739.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="750.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1176.6" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1176.6" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1176.6" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1176.6" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1177.7" y="723.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1177.7" y="707.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1177.7" y="691.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1177.7" y="675.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.7" y="659.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1177.7" y="643.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1177.7" y="627.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1177.7" y="611.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1177.7" y="595.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1177.7" y="579.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.7" y="563.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1177.7" y="547.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1177.7" y="531.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1177.7" y="515.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1177.7" y="499.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1177.7" y="483.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1177.7" y="467.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1177.7" y="451.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1177.7" y="435.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1177.7" y="419.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1177.7" y="403.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1177.7" y="387.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.7" y="371.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>pass_initial_checks(ciMethod*, int, ciMethod*) (1 samples, 0.09%)</title><rect x="1177.7" y="355.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="371.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.8" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.8" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.8" y="323.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.8" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.8" y="291.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="275.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.8" y="259.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.8" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.8" y="227.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.8" y="211.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1178.8" y="195.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.8" y="179.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="190.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="163.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="643.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="627.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="611.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="595.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="579.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="547.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="531.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="515.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="499.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="483.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="467.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="451.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="435.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="403.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="387.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="371.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="355.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="323.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="307.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="291.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="275.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="259.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.09%)</title><rect x="1179.9" y="243.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>VirtualCallData::cell_count() const (1 samples, 0.09%)</title><rect x="1179.9" y="227.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="723.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="627.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="595.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="547.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="515.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="435.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="419.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="403.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="371.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="355.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="339.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="307.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="275.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="243.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="227.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="211.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="195.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="179.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="163.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="147.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="131.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="115.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="99.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="83.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="67.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="51.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1181.1" y="35.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1184.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1182.2" y="851.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1182.2" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.19%)</title><rect x="1183.3" y="851.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.19%)</title><rect x="1183.3" y="835.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.09%)</title><rect x="1183.3" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1184.4" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="830.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.09%)</title><rect x="1184.4" y="803.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="814.0"></text>
</g>
<g>
<title>CodeBlob::set_oop_maps(OopMapSet*) (1 samples, 0.09%)</title><rect x="1184.4" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="798.0"></text>
</g>
<g>
<title>OopMapSet::heap_size() const (1 samples, 0.09%)</title><rect x="1184.4" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.19%)</title><rect x="1185.5" y="883.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="894.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.19%)</title><rect x="1185.5" y="867.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.19%)</title><rect x="1185.5" y="851.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.19%)</title><rect x="1185.5" y="835.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.19%)</title><rect x="1185.5" y="819.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="830.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.19%)</title><rect x="1185.5" y="803.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="814.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.09%)</title><rect x="1185.5" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="798.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.09%)</title><rect x="1185.5" y="771.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="782.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.09%)</title><rect x="1185.5" y="755.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="766.0"></text>
</g>
<g>
<title>LinearScanWalker::insert_move(int, Interval*, Interval*) (1 samples, 0.09%)</title><rect x="1185.5" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="750.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.09%)</title><rect x="1186.6" y="787.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="798.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.09%)</title><rect x="1186.6" y="771.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="782.0"></text>
</g>
<g>
<title>as_BasicType(LIR_OprDesc::OprType) (1 samples, 0.09%)</title><rect x="1186.6" y="755.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="947.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="931.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.8" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="926.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="915.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="926.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.9" y="910.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="883.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1188.9" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>G1CodeRootSet::clear() (1 samples, 0.09%)</title><rect x="1188.9" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
</g>
</svg>
