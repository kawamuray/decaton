<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (187 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 16.04%)</title><rect x="10.0" y="531.0" width="189.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="542.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 16.04%)</title><rect x="10.0" y="515.0" width="189.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="526.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.53%)</title><rect x="10.0" y="499.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.53%)</title><rect x="10.0" y="483.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/713644957.accept (1 samples, 0.53%)</title><rect x="10.0" y="467.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.53%)</title><rect x="10.0" y="451.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.53%)</title><rect x="10.0" y="435.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 10.16%)</title><rect x="16.3" y="499.0" width="119.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="510.0">java/lang/Itera..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/370619068.accept (17 samples, 9.09%)</title><rect x="16.3" y="483.0" width="107.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.3" y="494.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 9.09%)</title><rect x="16.3" y="467.0" width="107.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.3" y="478.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 7.49%)</title><rect x="16.3" y="451.0" width="88.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="462.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 7.49%)</title><rect x="16.3" y="435.0" width="88.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="446.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 7.49%)</title><rect x="16.3" y="419.0" width="88.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="430.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 7.49%)</title><rect x="16.3" y="403.0" width="88.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.3" y="414.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 7.49%)</title><rect x="16.3" y="387.0" width="88.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="398.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 7.49%)</title><rect x="16.3" y="371.0" width="88.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="382.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 3.74%)</title><rect x="16.3" y="355.0" width="44.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.3" y="366.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.07%)</title><rect x="16.3" y="339.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.07%)</title><rect x="16.3" y="323.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.07%)</title><rect x="16.3" y="307.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 1.07%)</title><rect x="16.3" y="291.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.67%)</title><rect x="28.9" y="339.0" width="31.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.67%)</title><rect x="28.9" y="323.0" width="31.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.9" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.67%)</title><rect x="28.9" y="307.0" width="31.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.67%)</title><rect x="28.9" y="291.0" width="31.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.9" y="302.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.67%)</title><rect x="28.9" y="275.0" width="31.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.9" y="286.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 2.14%)</title><rect x="28.9" y="259.0" width="25.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="31.9" y="270.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 1.07%)</title><rect x="28.9" y="243.0" width="12.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="31.9" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.53%)</title><rect x="41.6" y="243.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="44.6" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.53%)</title><rect x="47.9" y="243.0" width="6.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="50.9" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.53%)</title><rect x="54.2" y="259.0" width="6.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="57.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 3.74%)</title><rect x="60.5" y="355.0" width="44.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="63.5" y="366.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 3.74%)</title><rect x="60.5" y="339.0" width="44.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.5" y="350.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 3.74%)</title><rect x="60.5" y="323.0" width="44.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.5" y="334.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 1.07%)</title><rect x="92.0" y="307.0" width="12.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="95.0" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.53%)</title><rect x="104.7" y="451.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.53%)</title><rect x="104.7" y="435.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.7" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.07%)</title><rect x="111.0" y="451.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 1.07%)</title><rect x="123.6" y="483.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 1.07%)</title><rect x="123.6" y="467.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.07%)</title><rect x="123.6" y="451.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 1.07%)</title><rect x="123.6" y="435.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 1.07%)</title><rect x="123.6" y="419.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 1.07%)</title><rect x="123.6" y="403.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.35%)</title><rect x="136.2" y="499.0" width="63.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.2" y="510.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.35%)</title><rect x="136.2" y="483.0" width="63.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.2" y="494.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.60%)</title><rect x="136.2" y="467.0" width="18.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.60%)</title><rect x="136.2" y="451.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.60%)</title><rect x="136.2" y="435.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.60%)</title><rect x="136.2" y="419.0" width="18.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.60%)</title><rect x="136.2" y="403.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.60%)</title><rect x="136.2" y="387.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.2" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.60%)</title><rect x="136.2" y="371.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.53%)</title><rect x="136.2" y="355.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.2" y="366.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.53%)</title><rect x="136.2" y="339.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 1.07%)</title><rect x="142.5" y="355.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.5" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 1.07%)</title><rect x="142.5" y="339.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.5" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.60%)</title><rect x="155.1" y="467.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="158.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 1.07%)</title><rect x="155.1" y="451.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="158.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.53%)</title><rect x="161.4" y="435.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.53%)</title><rect x="161.4" y="419.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.53%)</title><rect x="167.8" y="451.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.53%)</title><rect x="167.8" y="435.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.53%)</title><rect x="174.1" y="467.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.53%)</title><rect x="174.1" y="451.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.53%)</title><rect x="174.1" y="435.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.60%)</title><rect x="180.4" y="467.0" width="18.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.60%)</title><rect x="180.4" y="451.0" width="18.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.53%)</title><rect x="180.4" y="435.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.53%)</title><rect x="180.4" y="419.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.53%)</title><rect x="180.4" y="403.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.4" y="414.0"></text>
</g>
<g>
<title>java/util/Optional.filter (1 samples, 0.53%)</title><rect x="180.4" y="387.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.4" y="398.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$273/1707245345.test (1 samples, 0.53%)</title><rect x="180.4" y="371.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.4" y="382.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (1 samples, 0.53%)</title><rect x="180.4" y="355.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.07%)</title><rect x="186.7" y="435.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 1.07%)</title><rect x="186.7" y="419.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 1.07%)</title><rect x="186.7" y="403.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 1.07%)</title><rect x="186.7" y="387.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 1.07%)</title><rect x="186.7" y="371.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.7" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.53%)</title><rect x="186.7" y="355.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.7" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.53%)</title><rect x="186.7" y="339.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.53%)</title><rect x="186.7" y="323.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.7" y="334.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.53%)</title><rect x="186.7" y="307.0" width="6.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="189.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.53%)</title><rect x="193.0" y="355.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.53%)</title><rect x="193.0" y="339.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.0" y="350.0"></text>
</g>
<g>
<title>java/util/BitSet.get (1 samples, 0.53%)</title><rect x="193.0" y="323.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (88 samples, 47.06%)</title><rect x="199.3" y="531.0" width="555.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.3" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (88 samples, 47.06%)</title><rect x="199.3" y="515.0" width="555.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.3" y="526.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (88 samples, 47.06%)</title><rect x="199.3" y="499.0" width="555.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.3" y="510.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.53%)</title><rect x="199.3" y="483.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1943322771.run (63 samples, 33.69%)</title><rect x="205.6" y="483.0" width="397.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.6" y="494.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (63 samples, 33.69%)</title><rect x="205.6" y="467.0" width="397.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.6" y="478.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (63 samples, 33.69%)</title><rect x="205.6" y="451.0" width="397.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.6" y="462.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (61 samples, 32.62%)</title><rect x="205.6" y="435.0" width="384.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.6" y="446.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (6 samples, 3.21%)</title><rect x="205.6" y="419.0" width="37.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="430.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (6 samples, 3.21%)</title><rect x="205.6" y="403.0" width="37.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.6" y="414.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (6 samples, 3.21%)</title><rect x="205.6" y="387.0" width="37.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.6" y="398.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 3.21%)</title><rect x="205.6" y="371.0" width="37.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.6" y="382.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 3.21%)</title><rect x="205.6" y="355.0" width="37.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="366.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 3.21%)</title><rect x="205.6" y="339.0" width="37.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.6" y="350.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 3.21%)</title><rect x="205.6" y="323.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.6" y="334.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.53%)</title><rect x="205.6" y="307.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.53%)</title><rect x="205.6" y="291.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.53%)</title><rect x="205.6" y="275.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.53%)</title><rect x="205.6" y="259.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.6" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.07%)</title><rect x="211.9" y="307.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.07%)</title><rect x="211.9" y="291.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.53%)</title><rect x="218.2" y="275.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.53%)</title><rect x="218.2" y="259.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.53%)</title><rect x="224.5" y="307.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.53%)</title><rect x="224.5" y="291.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.5" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.53%)</title><rect x="224.5" y="275.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.5" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 1.07%)</title><rect x="230.9" y="307.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.07%)</title><rect x="230.9" y="291.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.07%)</title><rect x="230.9" y="275.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.07%)</title><rect x="230.9" y="259.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.9" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.53%)</title><rect x="230.9" y="243.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.53%)</title><rect x="230.9" y="227.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.53%)</title><rect x="230.9" y="211.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.53%)</title><rect x="230.9" y="195.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.9" y="206.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.53%)</title><rect x="230.9" y="179.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.9" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.53%)</title><rect x="237.2" y="243.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.2" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="237.2" y="227.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.2" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="237.2" y="211.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.2" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.53%)</title><rect x="237.2" y="195.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.2" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.53%)</title><rect x="237.2" y="179.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.2" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (55 samples, 29.41%)</title><rect x="243.5" y="419.0" width="347.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.5" y="430.0">com/linecorp/decaton/processor/runtime/ProcessP..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.07%)</title><rect x="243.5" y="403.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.5" y="414.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.07%)</title><rect x="243.5" y="387.0" width="12.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.5" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.07%)</title><rect x="243.5" y="371.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.5" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.53%)</title><rect x="243.5" y="355.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.53%)</title><rect x="243.5" y="339.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.5" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.53%)</title><rect x="243.5" y="323.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.5" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.53%)</title><rect x="243.5" y="307.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.5" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.53%)</title><rect x="249.8" y="355.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.53%)</title><rect x="249.8" y="339.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.8" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.07%)</title><rect x="256.1" y="403.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.1" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.07%)</title><rect x="256.1" y="387.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.1" y="398.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 1.07%)</title><rect x="256.1" y="371.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.1" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (43 samples, 22.99%)</title><rect x="268.7" y="403.0" width="271.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.7" y="414.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (43 samples, 22.99%)</title><rect x="268.7" y="387.0" width="271.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.7" y="398.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.53%)</title><rect x="268.7" y="371.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.7" y="382.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.53%)</title><rect x="268.7" y="355.0" width="6.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="271.7" y="366.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="268.7" y="339.0" width="6.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="271.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (32 samples, 17.11%)</title><rect x="275.0" y="371.0" width="202.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.0" y="382.0">java/lang/String.valueOf</text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.53%)</title><rect x="477.0" y="371.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.0" y="382.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 4.81%)</title><rect x="483.3" y="371.0" width="56.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.3" y="382.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 4.81%)</title><rect x="483.3" y="355.0" width="56.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.3" y="366.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.53%)</title><rect x="483.3" y="339.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="486.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.53%)</title><rect x="483.3" y="323.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.53%)</title><rect x="483.3" y="307.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.3" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.53%)</title><rect x="483.3" y="291.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="486.3" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 4.28%)</title><rect x="489.6" y="339.0" width="50.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="492.6" y="350.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 3.74%)</title><rect x="495.9" y="323.0" width="44.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.9" y="334.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.67%)</title><rect x="508.5" y="307.0" width="31.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.5" y="318.0">ja..</text>
</g>
<g>
<title>vtable stub (2 samples, 1.07%)</title><rect x="527.4" y="291.0" width="12.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="530.4" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 3.21%)</title><rect x="540.1" y="403.0" width="37.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.1" y="414.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 3.21%)</title><rect x="540.1" y="387.0" width="37.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.1" y="398.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2098216011.process (4 samples, 2.14%)</title><rect x="540.1" y="371.0" width="25.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="543.1" y="382.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (4 samples, 2.14%)</title><rect x="540.1" y="355.0" width="25.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.1" y="366.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.07%)</title><rect x="540.1" y="339.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="543.1" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.07%)</title><rect x="540.1" y="323.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.1" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.07%)</title><rect x="540.1" y="307.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.1" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.07%)</title><rect x="540.1" y="291.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.1" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.07%)</title><rect x="540.1" y="275.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.1" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.53%)</title><rect x="546.4" y="259.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="549.4" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.53%)</title><rect x="546.4" y="243.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="549.4" y="254.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="546.4" y="227.0" width="6.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="549.4" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.07%)</title><rect x="552.7" y="339.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.07%)</title><rect x="552.7" y="323.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.7" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.53%)</title><rect x="552.7" y="307.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.7" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.53%)</title><rect x="552.7" y="291.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="555.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.53%)</title><rect x="552.7" y="275.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="555.7" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.53%)</title><rect x="559.0" y="307.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="562.0" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.53%)</title><rect x="559.0" y="291.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.0" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.53%)</title><rect x="559.0" y="275.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.0" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.53%)</title><rect x="559.0" y="259.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="562.0" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.07%)</title><rect x="565.3" y="371.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="568.3" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.53%)</title><rect x="571.6" y="355.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.6" y="366.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.53%)</title><rect x="571.6" y="339.0" width="6.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="574.6" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.53%)</title><rect x="577.9" y="403.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="580.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.53%)</title><rect x="584.2" y="403.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.53%)</title><rect x="584.2" y="387.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="587.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.53%)</title><rect x="584.2" y="371.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="587.2" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1216335402.accept (1 samples, 0.53%)</title><rect x="584.2" y="355.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="587.2" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.53%)</title><rect x="584.2" y="339.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="587.2" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.53%)</title><rect x="584.2" y="323.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="587.2" y="334.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.53%)</title><rect x="584.2" y="307.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="587.2" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 1.07%)</title><rect x="590.5" y="435.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="593.5" y="446.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.53%)</title><rect x="596.8" y="419.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="599.8" y="430.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="596.8" y="403.0" width="6.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="599.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.07%)</title><rect x="603.2" y="483.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="606.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.07%)</title><rect x="603.2" y="467.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="606.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.60%)</title><rect x="615.8" y="483.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="618.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.07%)</title><rect x="622.1" y="467.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="625.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.53%)</title><rect x="622.1" y="451.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.53%)</title><rect x="628.4" y="451.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="631.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.53%)</title><rect x="628.4" y="435.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="631.4" y="446.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.53%)</title><rect x="628.4" y="419.0" width="6.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="631.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 10.16%)</title><rect x="634.7" y="483.0" width="119.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.7" y="494.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (19 samples, 10.16%)</title><rect x="634.7" y="467.0" width="119.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="637.7" y="478.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 8.56%)</title><rect x="647.3" y="451.0" width="101.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.3" y="462.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 7.49%)</title><rect x="659.9" y="435.0" width="88.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="662.9" y="446.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (14 samples, 7.49%)</title><rect x="659.9" y="419.0" width="88.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.9" y="430.0">sun/misc/U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.53%)</title><rect x="659.9" y="403.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="662.9" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park (12 samples, 6.42%)</title><rect x="666.3" y="403.0" width="75.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="669.3" y="414.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.53%)</title><rect x="666.3" y="387.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="669.3" y="398.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.53%)</title><rect x="672.6" y="387.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="675.6" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 1.60%)</title><rect x="678.9" y="387.0" width="18.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="681.9" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.53%)</title><rect x="691.5" y="371.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="694.5" y="382.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.07%)</title><rect x="697.8" y="387.0" width="12.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="700.8" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.14%)</title><rect x="710.4" y="387.0" width="25.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="713.4" y="398.0">_..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.53%)</title><rect x="735.7" y="387.0" width="6.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="738.7" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.53%)</title><rect x="742.0" y="403.0" width="6.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="745.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.53%)</title><rect x="748.3" y="451.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.53%)</title><rect x="748.3" y="435.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.53%)</title><rect x="748.3" y="419.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.53%)</title><rect x="748.3" y="403.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="751.3" y="414.0"></text>
</g>
<g>
<title>start_thread (69 samples, 36.90%)</title><rect x="754.6" y="531.0" width="435.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="757.6" y="542.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (69 samples, 36.90%)</title><rect x="754.6" y="515.0" width="435.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="757.6" y="526.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 7.49%)</title><rect x="754.6" y="499.0" width="88.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.6" y="510.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.53%)</title><rect x="754.6" y="483.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.6" y="494.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.53%)</title><rect x="754.6" y="467.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="757.6" y="478.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.53%)</title><rect x="754.6" y="451.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="757.6" y="462.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 6.95%)</title><rect x="760.9" y="483.0" width="82.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="763.9" y="494.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 4.81%)</title><rect x="760.9" y="467.0" width="56.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="763.9" y="478.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.21%)</title><rect x="760.9" y="451.0" width="37.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="763.9" y="462.0">G1P..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.53%)</title><rect x="773.5" y="435.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.5" y="446.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.07%)</title><rect x="779.8" y="435.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.8" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.07%)</title><rect x="779.8" y="419.0" width="12.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="782.8" y="430.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.53%)</title><rect x="786.1" y="403.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="789.1" y="414.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.53%)</title><rect x="792.5" y="435.0" width="6.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="795.5" y="446.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.07%)</title><rect x="798.8" y="451.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.8" y="462.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.53%)</title><rect x="811.4" y="451.0" width="6.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="814.4" y="462.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.60%)</title><rect x="817.7" y="467.0" width="18.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="820.7" y="478.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 1.60%)</title><rect x="817.7" y="451.0" width="18.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="820.7" y="462.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (2 samples, 1.07%)</title><rect x="824.0" y="435.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.0" y="446.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 1.07%)</title><rect x="824.0" y="419.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="827.0" y="430.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.07%)</title><rect x="824.0" y="403.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="827.0" y="414.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="836.6" y="467.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="839.6" y="478.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="836.6" y="451.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.6" y="462.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="836.6" y="435.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.6" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.53%)</title><rect x="836.6" y="419.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.6" y="430.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.53%)</title><rect x="836.6" y="403.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.6" y="414.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.53%)</title><rect x="836.6" y="387.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.6" y="398.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.53%)</title><rect x="836.6" y="371.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.6" y="382.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.53%)</title><rect x="836.6" y="355.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="839.6" y="366.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.53%)</title><rect x="836.6" y="339.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="839.6" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (55 samples, 29.41%)</title><rect x="842.9" y="499.0" width="347.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="845.9" y="510.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (55 samples, 29.41%)</title><rect x="842.9" y="483.0" width="347.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="845.9" y="494.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (55 samples, 29.41%)</title><rect x="842.9" y="467.0" width="347.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="845.9" y="478.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (52 samples, 27.81%)</title><rect x="842.9" y="451.0" width="328.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="845.9" y="462.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (52 samples, 27.81%)</title><rect x="842.9" y="435.0" width="328.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="845.9" y="446.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 15.51%)</title><rect x="842.9" y="419.0" width="183.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.9" y="430.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.53%)</title><rect x="842.9" y="403.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.9" y="414.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.53%)</title><rect x="842.9" y="387.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="845.9" y="398.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.53%)</title><rect x="842.9" y="371.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="845.9" y="382.0"></text>
</g>
<g>
<title>storePNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.53%)</title><rect x="842.9" y="355.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.9" y="366.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.53%)</title><rect x="849.3" y="403.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="852.3" y="414.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.14%)</title><rect x="855.6" y="403.0" width="25.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="858.6" y="414.0">M..</text>
</g>
<g>
<title>AddLNode::Opcode() const (1 samples, 0.53%)</title><rect x="855.6" y="387.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.6" y="398.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.60%)</title><rect x="861.9" y="387.0" width="18.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.9" y="398.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.53%)</title><rect x="861.9" y="371.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="864.9" y="382.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.07%)</title><rect x="868.2" y="371.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="871.2" y="382.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.53%)</title><rect x="874.5" y="355.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.5" y="366.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.53%)</title><rect x="874.5" y="339.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="877.5" y="350.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.53%)</title><rect x="874.5" y="323.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.5" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.07%)</title><rect x="880.8" y="403.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.8" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.07%)</title><rect x="880.8" y="387.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="883.8" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.53%)</title><rect x="887.1" y="371.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.1" y="382.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.53%)</title><rect x="887.1" y="355.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.1" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 11.23%)</title><rect x="893.4" y="403.0" width="132.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="896.4" y="414.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.53%)</title><rect x="893.4" y="387.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="896.4" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.07%)</title><rect x="899.7" y="387.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="902.7" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 3.74%)</title><rect x="912.4" y="387.0" width="44.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.4" y="398.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.14%)</title><rect x="918.7" y="371.0" width="25.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.7" y="382.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.07%)</title><rect x="931.3" y="355.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.3" y="366.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.53%)</title><rect x="943.9" y="371.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.9" y="382.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.53%)</title><rect x="950.2" y="371.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.2" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.53%)</title><rect x="956.5" y="387.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="959.5" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.53%)</title><rect x="956.5" y="371.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.5" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.07%)</title><rect x="962.8" y="387.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.8" y="398.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.53%)</title><rect x="969.1" y="371.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.1" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.53%)</title><rect x="975.5" y="387.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.5" y="398.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.07%)</title><rect x="981.8" y="387.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.8" y="398.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.07%)</title><rect x="981.8" y="371.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="984.8" y="382.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.07%)</title><rect x="981.8" y="355.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.8" y="366.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.53%)</title><rect x="981.8" y="339.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.8" y="350.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.53%)</title><rect x="981.8" y="323.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.8" y="334.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.53%)</title><rect x="988.1" y="339.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.1" y="350.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.53%)</title><rect x="994.4" y="387.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.4" y="398.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="994.4" y="371.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.4" y="382.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.60%)</title><rect x="1000.7" y="387.0" width="18.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1003.7" y="398.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.53%)</title><rect x="1007.0" y="371.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1010.0" y="382.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.53%)</title><rect x="1013.3" y="371.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.3" y="382.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="1013.3" y="355.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.3" y="366.0"></text>
</g>
<g>
<title>storeLNode::oper_input_base() const (1 samples, 0.53%)</title><rect x="1019.6" y="387.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.6" y="398.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 9.63%)</title><rect x="1025.9" y="419.0" width="113.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.9" y="430.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.53%)</title><rect x="1025.9" y="403.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.9" y="414.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.53%)</title><rect x="1025.9" y="387.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.9" y="398.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseTransform*) const (1 samples, 0.53%)</title><rect x="1032.2" y="403.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.2" y="414.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 1.07%)</title><rect x="1038.6" y="403.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.6" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.53%)</title><rect x="1038.6" y="387.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1041.6" y="398.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.53%)</title><rect x="1038.6" y="371.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1041.6" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.53%)</title><rect x="1044.9" y="387.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.9" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.53%)</title><rect x="1044.9" y="371.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.9" y="382.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.53%)</title><rect x="1044.9" y="355.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.9" y="366.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.53%)</title><rect x="1044.9" y="339.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.9" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 5.35%)</title><rect x="1051.2" y="403.0" width="63.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.2" y="414.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="387.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.2" y="398.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="371.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.2" y="382.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="355.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.2" y="366.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="339.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.2" y="350.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="323.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.2" y="334.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="307.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.2" y="318.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="291.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.2" y="302.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="275.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.2" y="286.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1051.2" y="259.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.2" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.53%)</title><rect x="1051.2" y="243.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.2" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.53%)</title><rect x="1051.2" y="227.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.2" y="238.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.53%)</title><rect x="1051.2" y="211.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.2" y="222.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.60%)</title><rect x="1057.5" y="387.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.5" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.53%)</title><rect x="1070.1" y="371.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.1" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.07%)</title><rect x="1076.4" y="387.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.4" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.07%)</title><rect x="1076.4" y="371.0" width="12.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.07%)</title><rect x="1076.4" y="355.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.53%)</title><rect x="1076.4" y="339.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.53%)</title><rect x="1082.7" y="339.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.7" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.53%)</title><rect x="1089.0" y="387.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.0" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.53%)</title><rect x="1089.0" y="371.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.0" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.53%)</title><rect x="1095.3" y="387.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.3" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.53%)</title><rect x="1095.3" y="371.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.3" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.53%)</title><rect x="1095.3" y="355.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.3" y="366.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.53%)</title><rect x="1095.3" y="339.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.3" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.07%)</title><rect x="1101.7" y="387.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.7" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.07%)</title><rect x="1101.7" y="371.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.7" y="382.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1108.0" y="355.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.0" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.53%)</title><rect x="1108.0" y="339.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.0" y="350.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.53%)</title><rect x="1108.0" y="323.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.0" y="334.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.53%)</title><rect x="1108.0" y="307.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.0" y="318.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.53%)</title><rect x="1108.0" y="291.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.0" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.14%)</title><rect x="1114.3" y="403.0" width="25.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.3" y="414.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.14%)</title><rect x="1114.3" y="387.0" width="25.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.3" y="398.0">P..</text>
</g>
<g>
<title>ConPNode::Opcode() const (1 samples, 0.53%)</title><rect x="1114.3" y="371.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.3" y="382.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1120.6" y="371.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.6" y="382.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1126.9" y="371.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.9" y="382.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.53%)</title><rect x="1126.9" y="355.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.9" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="339.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.9" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="323.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.9" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="307.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.9" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="291.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.9" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="275.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.9" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="259.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.9" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="243.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.9" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="227.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.9" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="211.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.9" y="222.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.53%)</title><rect x="1126.9" y="195.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="206.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1126.9" y="179.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.9" y="190.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.53%)</title><rect x="1133.2" y="371.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.2" y="382.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.53%)</title><rect x="1133.2" y="355.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="366.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.53%)</title><rect x="1133.2" y="339.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.2" y="350.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1133.2" y="323.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.14%)</title><rect x="1139.5" y="419.0" width="25.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.5" y="430.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.14%)</title><rect x="1139.5" y="403.0" width="25.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.5" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.14%)</title><rect x="1139.5" y="387.0" width="25.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.14%)</title><rect x="1139.5" y="371.0" width="25.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.5" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.14%)</title><rect x="1139.5" y="355.0" width="25.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.5" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.07%)</title><rect x="1145.8" y="339.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.07%)</title><rect x="1145.8" y="323.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.07%)</title><rect x="1145.8" y="307.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.07%)</title><rect x="1145.8" y="291.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.07%)</title><rect x="1145.8" y="275.0" width="12.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.07%)</title><rect x="1145.8" y="259.0" width="12.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.07%)</title><rect x="1145.8" y="243.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.07%)</title><rect x="1145.8" y="227.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.07%)</title><rect x="1145.8" y="211.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.07%)</title><rect x="1145.8" y="195.0" width="12.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.07%)</title><rect x="1145.8" y="179.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.07%)</title><rect x="1145.8" y="163.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="174.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.53%)</title><rect x="1145.8" y="147.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.8" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.53%)</title><rect x="1145.8" y="131.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.8" y="142.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1145.8" y="115.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.8" y="126.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.53%)</title><rect x="1145.8" y="99.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="110.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.53%)</title><rect x="1145.8" y="83.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.8" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.53%)</title><rect x="1145.8" y="67.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.8" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.53%)</title><rect x="1145.8" y="51.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.8" y="62.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.53%)</title><rect x="1145.8" y="35.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1152.1" y="147.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1152.1" y="131.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.53%)</title><rect x="1152.1" y="115.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.1" y="126.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.53%)</title><rect x="1152.1" y="99.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.53%)</title><rect x="1152.1" y="83.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="94.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.53%)</title><rect x="1152.1" y="67.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.1" y="78.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.53%)</title><rect x="1152.1" y="51.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.1" y="62.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1158.4" y="339.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1158.4" y="323.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.4" y="334.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.53%)</title><rect x="1158.4" y="307.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.4" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.53%)</title><rect x="1158.4" y="291.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.53%)</title><rect x="1158.4" y="275.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.4" y="286.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.53%)</title><rect x="1158.4" y="259.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.4" y="270.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.53%)</title><rect x="1158.4" y="243.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="254.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.53%)</title><rect x="1158.4" y="227.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="238.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.53%)</title><rect x="1158.4" y="211.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.4" y="222.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.53%)</title><rect x="1158.4" y="195.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="206.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.53%)</title><rect x="1164.8" y="419.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.8" y="430.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.53%)</title><rect x="1164.8" y="403.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.8" y="414.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.60%)</title><rect x="1171.1" y="451.0" width="18.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="462.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.60%)</title><rect x="1171.1" y="435.0" width="18.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.1" y="446.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.60%)</title><rect x="1171.1" y="419.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.1" y="430.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.60%)</title><rect x="1171.1" y="403.0" width="18.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.1" y="414.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.53%)</title><rect x="1171.1" y="387.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.1" y="398.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.53%)</title><rect x="1171.1" y="371.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.1" y="382.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.53%)</title><rect x="1171.1" y="355.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.1" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.53%)</title><rect x="1171.1" y="339.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.1" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.53%)</title><rect x="1171.1" y="323.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.1" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.53%)</title><rect x="1171.1" y="307.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.53%)</title><rect x="1171.1" y="291.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.53%)</title><rect x="1171.1" y="275.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.1" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.53%)</title><rect x="1171.1" y="259.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.1" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.53%)</title><rect x="1171.1" y="243.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.1" y="254.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.53%)</title><rect x="1171.1" y="227.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.1" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1171.1" y="211.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.1" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1171.1" y="195.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.53%)</title><rect x="1171.1" y="179.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.1" y="190.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.53%)</title><rect x="1171.1" y="163.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="174.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 1.07%)</title><rect x="1177.4" y="387.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="398.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.53%)</title><rect x="1177.4" y="371.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="382.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.53%)</title><rect x="1177.4" y="355.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="366.0"></text>
</g>
<g>
<title>Assembler::addq(Address, int) (1 samples, 0.53%)</title><rect x="1177.4" y="339.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="350.0"></text>
</g>
<g>
<title>Assembler::emit_arith_operand(int, RegisterImpl*, Address, int) (1 samples, 0.53%)</title><rect x="1177.4" y="323.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="334.0"></text>
</g>
<g>
<title>Assembler::emit_data(int, RelocationHolder const&amp;, int) (1 samples, 0.53%)</title><rect x="1177.4" y="307.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="318.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.53%)</title><rect x="1183.7" y="371.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>G1PreBarrierStub::emit_code(LIR_Assembler*) (1 samples, 0.53%)</title><rect x="1183.7" y="355.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>Assembler::cmpq(RegisterImpl*, int) (1 samples, 0.53%)</title><rect x="1183.7" y="339.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="350.0"></text>
</g>
</g>
</svg>
