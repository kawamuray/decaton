<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (1,052 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="10.0" y="1059.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.10%)</title><rect x="10.0" y="1043.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (255 samples, 24.24%)</title><rect x="11.1" y="1059.0" width="286.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1070.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (255 samples, 24.24%)</title><rect x="11.1" y="1043.0" width="286.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="1054.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.19%)</title><rect x="12.2" y="1027.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.19%)</title><rect x="12.2" y="1011.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$263/939614554.accept (1 samples, 0.10%)</title><rect x="13.4" y="995.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.10%)</title><rect x="13.4" y="979.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.10%)</title><rect x="13.4" y="963.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.10%)</title><rect x="13.4" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.4" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="13.4" y="931.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.10%)</title><rect x="14.5" y="1027.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="14.5" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="14.5" y="995.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="14.5" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="14.5" y="963.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="14.5" y="947.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="14.5" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="14.5" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.5" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="14.5" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 0.29%)</title><rect x="15.6" y="1027.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.6" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="16.7" y="1011.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="17.9" y="1011.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (188 samples, 17.87%)</title><rect x="19.0" y="1027.0" width="210.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.0" y="1038.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/1016162798.accept (174 samples, 16.54%)</title><rect x="19.0" y="1011.0" width="195.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.0" y="1022.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (174 samples, 16.54%)</title><rect x="19.0" y="995.0" width="195.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="1006.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (140 samples, 13.31%)</title><rect x="19.0" y="979.0" width="157.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="990.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (140 samples, 13.31%)</title><rect x="19.0" y="963.0" width="157.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="974.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (140 samples, 13.31%)</title><rect x="19.0" y="947.0" width="157.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.0" y="958.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (140 samples, 13.31%)</title><rect x="19.0" y="931.0" width="157.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="942.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (140 samples, 13.31%)</title><rect x="19.0" y="915.0" width="157.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.0" y="926.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 13.31%)</title><rect x="19.0" y="899.0" width="157.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.0" y="910.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (85 samples, 8.08%)</title><rect x="19.0" y="883.0" width="95.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="894.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.71%)</title><rect x="19.0" y="867.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.71%)</title><rect x="19.0" y="851.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="26.8" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (10 samples, 0.95%)</title><rect x="27.9" y="835.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (10 samples, 0.95%)</title><rect x="27.9" y="819.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 1.14%)</title><rect x="39.2" y="867.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (12 samples, 1.14%)</title><rect x="39.2" y="851.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.29%)</title><rect x="41.4" y="835.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.4" y="846.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.29%)</title><rect x="41.4" y="819.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="44.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.67%)</title><rect x="44.8" y="835.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (55 samples, 5.23%)</title><rect x="52.6" y="867.0" width="61.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.6" y="878.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (55 samples, 5.23%)</title><rect x="52.6" y="851.0" width="61.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.6" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (55 samples, 5.23%)</title><rect x="52.6" y="835.0" width="61.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.6" y="846.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (55 samples, 5.23%)</title><rect x="52.6" y="819.0" width="61.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.6" y="830.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (55 samples, 5.23%)</title><rect x="52.6" y="803.0" width="61.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.6" y="814.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="52.6" y="787.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="55.6" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (50 samples, 4.75%)</title><rect x="53.7" y="787.0" width="56.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="56.7" y="798.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.38%)</title><rect x="53.7" y="771.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.7" y="782.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.19%)</title><rect x="58.2" y="771.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="61.2" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (32 samples, 3.04%)</title><rect x="60.5" y="771.0" width="35.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="63.5" y="782.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.38%)</title><rect x="96.4" y="771.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="99.4" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.76%)</title><rect x="100.9" y="771.0" width="8.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="103.9" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.38%)</title><rect x="109.8" y="787.0" width="4.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="112.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (48 samples, 4.56%)</title><rect x="114.3" y="883.0" width="53.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.3" y="894.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (48 samples, 4.56%)</title><rect x="114.3" y="867.0" width="53.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.3" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (48 samples, 4.56%)</title><rect x="114.3" y="851.0" width="53.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.3" y="862.0">java/..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="165.9" y="835.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="168.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.29%)</title><rect x="168.2" y="883.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.29%)</title><rect x="168.2" y="867.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.29%)</title><rect x="168.2" y="851.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="171.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="170.4" y="835.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.38%)</title><rect x="171.5" y="883.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.38%)</title><rect x="171.5" y="867.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.38%)</title><rect x="171.5" y="851.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.38%)</title><rect x="171.5" y="835.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (9 samples, 0.86%)</title><rect x="176.0" y="979.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (6 samples, 0.57%)</title><rect x="179.4" y="963.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.48%)</title><rect x="186.1" y="979.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.48%)</title><rect x="186.1" y="963.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.48%)</title><rect x="186.1" y="947.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (20 samples, 1.90%)</title><rect x="191.7" y="979.0" width="22.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.7" y="990.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (20 samples, 1.90%)</title><rect x="191.7" y="963.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.7" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 1.05%)</title><rect x="196.2" y="947.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.2" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.86%)</title><rect x="196.2" y="931.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.2" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.86%)</title><rect x="196.2" y="915.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.2" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.86%)</title><rect x="196.2" y="899.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.2" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="205.2" y="883.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="208.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="206.3" y="931.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.3" y="942.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="208.5" y="947.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="211.5" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.38%)</title><rect x="209.7" y="947.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="212.7" y="958.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.19%)</title><rect x="214.1" y="1011.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="217.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (10 samples, 0.95%)</title><rect x="216.4" y="1011.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (10 samples, 0.95%)</title><rect x="216.4" y="995.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (10 samples, 0.95%)</title><rect x="216.4" y="979.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (10 samples, 0.95%)</title><rect x="216.4" y="963.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.19%)</title><rect x="227.6" y="1011.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.19%)</title><rect x="227.6" y="995.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.70%)</title><rect x="229.8" y="1027.0" width="67.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.8" y="1038.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.70%)</title><rect x="229.8" y="1011.0" width="67.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.8" y="1022.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 3.61%)</title><rect x="229.8" y="995.0" width="42.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.8" y="1006.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.10%)</title><rect x="229.8" y="979.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="229.8" y="963.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.10%)</title><rect x="229.8" y="947.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="232.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.52%)</title><rect x="231.0" y="979.0" width="41.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.0" y="990.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 3.52%)</title><rect x="231.0" y="963.0" width="41.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.0" y="974.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (36 samples, 3.42%)</title><rect x="231.0" y="947.0" width="40.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.0" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (36 samples, 3.42%)</title><rect x="231.0" y="931.0" width="40.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.0" y="942.0">org..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.19%)</title><rect x="232.1" y="915.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.1" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (2 samples, 0.19%)</title><rect x="232.1" y="899.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.1" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (2 samples, 0.19%)</title><rect x="232.1" y="883.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.1" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.19%)</title><rect x="232.1" y="867.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.1" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.19%)</title><rect x="232.1" y="851.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.71%)</title><rect x="234.3" y="915.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.10%)</title><rect x="244.4" y="899.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.10%)</title><rect x="244.4" y="883.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.10%)</title><rect x="244.4" y="867.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.10%)</title><rect x="244.4" y="851.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.4" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="244.4" y="835.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.67%)</title><rect x="245.6" y="899.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.67%)</title><rect x="245.6" y="883.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.67%)</title><rect x="245.6" y="867.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.67%)</title><rect x="245.6" y="851.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.67%)</title><rect x="245.6" y="835.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.67%)</title><rect x="245.6" y="819.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.67%)</title><rect x="245.6" y="803.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="253.4" y="899.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.43%)</title><rect x="254.5" y="915.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.43%)</title><rect x="254.5" y="899.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="254.5" y="883.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="257.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="254.5" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="257.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="254.5" y="851.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="257.5" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="254.5" y="835.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="257.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (14 samples, 1.33%)</title><rect x="255.6" y="883.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.6" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (14 samples, 1.33%)</title><rect x="255.6" y="867.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.6" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.86%)</title><rect x="261.3" y="851.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (9 samples, 0.86%)</title><rect x="261.3" y="835.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (9 samples, 0.86%)</title><rect x="261.3" y="819.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (9 samples, 0.86%)</title><rect x="261.3" y="803.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.3" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="270.2" y="787.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="273.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.10%)</title><rect x="271.3" y="947.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="271.3" y="931.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="271.3" y="915.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.3" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="271.3" y="899.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="271.3" y="883.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.release (1 samples, 0.10%)</title><rect x="272.5" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.48%)</title><rect x="273.6" y="995.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.38%)</title><rect x="273.6" y="979.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.29%)</title><rect x="273.6" y="963.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.19%)</title><rect x="273.6" y="947.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="274.7" y="931.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.7" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="274.7" y="915.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.7" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.10%)</title><rect x="274.7" y="899.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="275.8" y="947.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="278.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="275.8" y="931.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="275.8" y="915.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="275.8" y="899.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="275.8" y="883.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="275.8" y="867.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="275.8" y="851.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="275.8" y="835.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="275.8" y="819.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="275.8" y="803.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="275.8" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.8" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="275.8" y="771.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="278.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.10%)</title><rect x="277.0" y="963.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.10%)</title><rect x="277.0" y="947.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="277.0" y="931.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="277.0" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="277.0" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="277.0" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="277.0" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="277.0" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="277.0" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.10%)</title><rect x="277.0" y="819.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="278.1" y="979.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="278.1" y="963.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="278.1" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.10%)</title><rect x="278.1" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.10%)</title><rect x="278.1" y="915.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.10%)</title><rect x="278.1" y="899.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="278.1" y="883.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="278.1" y="867.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.1" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="278.1" y="851.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.19%)</title><rect x="279.2" y="995.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.10%)</title><rect x="279.2" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.10%)</title><rect x="279.2" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.10%)</title><rect x="280.3" y="979.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.10%)</title><rect x="280.3" y="963.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="280.3" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="280.3" y="931.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.10%)</title><rect x="280.3" y="915.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.29%)</title><rect x="281.4" y="995.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.29%)</title><rect x="281.4" y="979.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.29%)</title><rect x="281.4" y="963.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="281.4" y="947.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="281.4" y="931.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="281.4" y="915.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.10%)</title><rect x="281.4" y="899.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="282.6" y="947.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.10%)</title><rect x="282.6" y="931.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.10%)</title><rect x="282.6" y="915.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.10%)</title><rect x="282.6" y="899.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.10%)</title><rect x="282.6" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.6" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.10%)</title><rect x="282.6" y="867.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.10%)</title><rect x="282.6" y="851.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.10%)</title><rect x="282.6" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.6" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.10%)</title><rect x="282.6" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.6" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.10%)</title><rect x="282.6" y="803.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.10%)</title><rect x="282.6" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.6" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.10%)</title><rect x="282.6" y="771.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.6" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.10%)</title><rect x="282.6" y="755.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="283.7" y="931.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="283.7" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="283.7" y="899.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="283.7" y="883.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="283.7" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="283.7" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.7" y="862.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="283.7" y="835.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="286.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.86%)</title><rect x="284.8" y="995.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.86%)</title><rect x="284.8" y="979.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.29%)</title><rect x="285.9" y="963.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.9" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="285.9" y="947.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="288.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$255/402864720.accept (2 samples, 0.19%)</title><rect x="287.1" y="947.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.19%)</title><rect x="287.1" y="931.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="287.1" y="915.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.10%)</title><rect x="287.1" y="899.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="287.1" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="287.1" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="288.2" y="915.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="288.2" y="899.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="288.2" y="883.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.2" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="288.2" y="867.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="291.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="288.2" y="851.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.2" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.10%)</title><rect x="289.3" y="963.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.29%)</title><rect x="290.4" y="963.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.19%)</title><rect x="290.4" y="947.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.19%)</title><rect x="290.4" y="931.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.19%)</title><rect x="290.4" y="915.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.10%)</title><rect x="290.4" y="899.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.4" y="910.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="291.5" y="899.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="294.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="292.7" y="947.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="293.8" y="963.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.8" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.10%)</title><rect x="293.8" y="947.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.19%)</title><rect x="294.9" y="995.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="294.9" y="979.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="296.0" y="963.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="296.0" y="947.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="296.0" y="931.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (672 samples, 63.88%)</title><rect x="297.1" y="1059.0" width="753.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.1" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (672 samples, 63.88%)</title><rect x="297.1" y="1043.0" width="753.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.1" y="1054.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (672 samples, 63.88%)</title><rect x="297.1" y="1027.0" width="753.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.1" y="1038.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1001794699.run (463 samples, 44.01%)</title><rect x="297.1" y="1011.0" width="519.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.1" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1001794..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (463 samples, 44.01%)</title><rect x="297.1" y="995.0" width="519.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.1" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (463 samples, 44.01%)</title><rect x="297.1" y="979.0" width="519.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.1" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (459 samples, 43.63%)</title><rect x="297.1" y="963.0" width="514.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.1" y="974.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProc..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.10%)</title><rect x="305.0" y="947.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (172 samples, 16.35%)</title><rect x="306.1" y="947.0" width="192.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.1" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (172 samples, 16.35%)</title><rect x="306.1" y="931.0" width="192.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.1" y="942.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (172 samples, 16.35%)</title><rect x="306.1" y="915.0" width="192.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.1" y="926.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (172 samples, 16.35%)</title><rect x="306.1" y="899.0" width="192.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.1" y="910.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (172 samples, 16.35%)</title><rect x="306.1" y="883.0" width="192.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.1" y="894.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (172 samples, 16.35%)</title><rect x="306.1" y="867.0" width="192.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.1" y="878.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (50 samples, 4.75%)</title><rect x="306.1" y="851.0" width="56.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.1" y="862.0">com/fa..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="320.7" y="835.0" width="2.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="323.7" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.86%)</title><rect x="322.9" y="835.0" width="10.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="325.9" y="846.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.48%)</title><rect x="327.4" y="819.0" width="5.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="330.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.67%)</title><rect x="333.0" y="835.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.29%)</title><rect x="337.5" y="819.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.19%)</title><rect x="338.7" y="803.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="338.7" y="787.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="338.7" y="771.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="341.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="338.7" y="755.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.71%)</title><rect x="340.9" y="835.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.38%)</title><rect x="356.6" y="819.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="356.6" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.29%)</title><rect x="357.7" y="803.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.29%)</title><rect x="357.7" y="787.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.7" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="361.1" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="364.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (114 samples, 10.84%)</title><rect x="362.2" y="851.0" width="127.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.2" y="862.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.29%)</title><rect x="363.3" y="835.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.19%)</title><rect x="366.7" y="835.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.19%)</title><rect x="368.9" y="835.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.19%)</title><rect x="368.9" y="819.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.76%)</title><rect x="371.2" y="835.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.67%)</title><rect x="372.3" y="819.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="375.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.48%)</title><rect x="374.5" y="803.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.48%)</title><rect x="374.5" y="787.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="377.9" y="771.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.67%)</title><rect x="380.2" y="835.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.48%)</title><rect x="382.4" y="819.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (89 samples, 8.46%)</title><rect x="388.0" y="835.0" width="99.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.0" y="846.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.90%)</title><rect x="389.1" y="819.0" width="22.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="392.1" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.57%)</title><rect x="389.1" y="803.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="392.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.57%)</title><rect x="389.1" y="787.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.57%)</title><rect x="389.1" y="771.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="392.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.24%)</title><rect x="395.9" y="803.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="410.4" y="803.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="410.4" y="787.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="411.6" y="819.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="414.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (67 samples, 6.37%)</title><rect x="412.7" y="819.0" width="75.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="415.7" y="830.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (67 samples, 6.37%)</title><rect x="412.7" y="803.0" width="75.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="415.7" y="814.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (66 samples, 6.27%)</title><rect x="413.8" y="787.0" width="74.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.8" y="798.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 2.38%)</title><rect x="414.9" y="771.0" width="28.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.9" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (13 samples, 1.24%)</title><rect x="416.0" y="755.0" width="14.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (13 samples, 1.24%)</title><rect x="416.0" y="739.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (13 samples, 1.24%)</title><rect x="416.0" y="723.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="419.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.57%)</title><rect x="423.9" y="707.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="426.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.57%)</title><rect x="423.9" y="691.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.19%)</title><rect x="428.4" y="675.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.19%)</title><rect x="428.4" y="659.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.38%)</title><rect x="430.6" y="755.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.57%)</title><rect x="435.1" y="755.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.57%)</title><rect x="435.1" y="739.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="440.7" y="723.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="441.8" y="755.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 1.14%)</title><rect x="443.0" y="771.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (11 samples, 1.05%)</title><rect x="444.1" y="755.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.10%)</title><rect x="444.1" y="739.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="447.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.10%)</title><rect x="444.1" y="723.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.10%)</title><rect x="444.1" y="707.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="447.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="444.1" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="447.1" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="444.1" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="447.1" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="444.1" y="659.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="447.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="444.1" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="447.1" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.10%)</title><rect x="444.1" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="447.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.95%)</title><rect x="445.2" y="739.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.95%)</title><rect x="445.2" y="723.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.95%)</title><rect x="445.2" y="707.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (15 samples, 1.43%)</title><rect x="456.4" y="771.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (15 samples, 1.43%)</title><rect x="456.4" y="755.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="459.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (15 samples, 1.43%)</title><rect x="456.4" y="739.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (15 samples, 1.43%)</title><rect x="456.4" y="723.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.4" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (15 samples, 1.43%)</title><rect x="456.4" y="707.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.4" y="718.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (12 samples, 1.14%)</title><rect x="457.5" y="691.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.5" y="702.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (6 samples, 0.57%)</title><rect x="464.3" y="675.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.3" y="686.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.19%)</title><rect x="471.0" y="691.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.76%)</title><rect x="473.3" y="771.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.76%)</title><rect x="473.3" y="755.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.76%)</title><rect x="473.3" y="739.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.48%)</title><rect x="482.2" y="771.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.19%)</title><rect x="487.8" y="835.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.76%)</title><rect x="490.1" y="851.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.76%)</title><rect x="490.1" y="835.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="493.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.76%)</title><rect x="490.1" y="819.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.76%)</title><rect x="490.1" y="803.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.76%)</title><rect x="490.1" y="787.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (254 samples, 24.14%)</title><rect x="499.0" y="947.0" width="285.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.0" y="958.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (45 samples, 4.28%)</title><rect x="502.4" y="931.0" width="50.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.4" y="942.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (3 samples, 0.29%)</title><rect x="502.4" y="915.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.4" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (42 samples, 3.99%)</title><rect x="505.8" y="915.0" width="47.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.8" y="926.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (38 samples, 3.61%)</title><rect x="510.3" y="899.0" width="42.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="513.3" y="910.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.86%)</title><rect x="513.6" y="883.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="516.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.86%)</title><rect x="513.6" y="867.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="516.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.86%)</title><rect x="513.6" y="851.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="516.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.86%)</title><rect x="513.6" y="835.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="516.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.38%)</title><rect x="519.2" y="819.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="522.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.38%)</title><rect x="519.2" y="803.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.2" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (26 samples, 2.47%)</title><rect x="523.7" y="883.0" width="29.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.7" y="894.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 2.09%)</title><rect x="528.2" y="867.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.2" y="878.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.57%)</title><rect x="546.2" y="851.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="549.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="552.9" y="931.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.38%)</title><rect x="552.9" y="915.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="552.9" y="899.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="555.9" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="552.9" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="555.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="552.9" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="555.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="552.9" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="555.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="552.9" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="555.9" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="552.9" y="819.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="555.9" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="552.9" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="555.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="552.9" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="555.9" y="798.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="552.9" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="555.9" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="552.9" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="555.9" y="766.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.10%)</title><rect x="552.9" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="555.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.29%)</title><rect x="554.0" y="899.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (153 samples, 14.54%)</title><rect x="557.4" y="931.0" width="171.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="560.4" y="942.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="557.4" y="915.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="557.4" y="899.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="560.4" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="557.4" y="883.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="560.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="557.4" y="867.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="560.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (152 samples, 14.45%)</title><rect x="558.5" y="915.0" width="170.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.5" y="926.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="567.5" y="899.0" width="4.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="570.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="568.6" y="883.0" width="3.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="571.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (60 samples, 5.70%)</title><rect x="572.0" y="899.0" width="67.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="575.0" y="910.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="579.8" y="883.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.8" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="579.8" y="867.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="579.8" y="851.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="582.8" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="579.8" y="835.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="582.8" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="579.8" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="582.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="579.8" y="803.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="582.8" y="814.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="579.8" y="787.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="582.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 4.56%)</title><rect x="580.9" y="883.0" width="53.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.9" y="894.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (47 samples, 4.47%)</title><rect x="582.1" y="867.0" width="52.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="585.1" y="878.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (32 samples, 3.04%)</title><rect x="591.0" y="851.0" width="35.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.0" y="862.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (32 samples, 3.04%)</title><rect x="591.0" y="835.0" width="35.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.0" y="846.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (32 samples, 3.04%)</title><rect x="591.0" y="819.0" width="35.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.0" y="830.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (14 samples, 1.33%)</title><rect x="601.1" y="803.0" width="15.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.1" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.48%)</title><rect x="601.1" y="787.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="604.1" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.19%)</title><rect x="601.1" y="771.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="604.1" y="782.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.10%)</title><rect x="603.4" y="771.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="606.4" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="604.5" y="771.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="607.5" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="604.5" y="755.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="607.5" y="766.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="604.5" y="739.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="607.5" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="604.5" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.5" y="734.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="605.6" y="739.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="608.6" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.86%)</title><rect x="606.7" y="787.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.29%)</title><rect x="610.1" y="771.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="613.1" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="610.1" y="755.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="613.1" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="610.1" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="613.1" y="750.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="610.1" y="723.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="613.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="610.1" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="613.1" y="718.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.10%)</title><rect x="610.1" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="613.1" y="702.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="611.2" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="614.2" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="612.3" y="755.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="615.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="613.5" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="616.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="614.6" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="617.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="615.7" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="618.7" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.76%)</title><rect x="616.8" y="803.0" width="9.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="619.8" y="814.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="625.8" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="628.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.48%)</title><rect x="626.9" y="851.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.9" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="632.5" y="851.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="635.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="634.8" y="883.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="634.8" y="867.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="637.8" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="634.8" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="637.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="634.8" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="637.8" y="846.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="635.9" y="883.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="638.9" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="637.0" y="883.0" width="2.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="640.0" y="894.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.57%)</title><rect x="639.3" y="899.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.3" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.57%)</title><rect x="639.3" y="883.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="642.3" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.19%)</title><rect x="639.3" y="867.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.3" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.19%)</title><rect x="639.3" y="851.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="642.3" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="639.3" y="835.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="639.3" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="642.3" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="639.3" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.3" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="639.3" y="787.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="639.3" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="642.3" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="639.3" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="642.3" y="766.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="639.3" y="739.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="642.3" y="750.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.10%)</title><rect x="639.3" y="723.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="642.3" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.10%)</title><rect x="640.4" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="643.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.38%)</title><rect x="641.5" y="867.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="644.5" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (74 samples, 7.03%)</title><rect x="646.0" y="899.0" width="83.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="649.0" y="910.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (74 samples, 7.03%)</title><rect x="646.0" y="883.0" width="83.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.0" y="894.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.48%)</title><rect x="646.0" y="867.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.48%)</title><rect x="646.0" y="851.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="649.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.48%)</title><rect x="646.0" y="835.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.48%)</title><rect x="646.0" y="819.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="649.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="650.5" y="803.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="653.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="650.5" y="787.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (69 samples, 6.56%)</title><rect x="651.6" y="867.0" width="77.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="654.6" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (59 samples, 5.61%)</title><rect x="662.8" y="851.0" width="66.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="665.8" y="862.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (30 samples, 2.85%)</title><rect x="695.3" y="835.0" width="33.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.3" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.29%)</title><rect x="715.5" y="819.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="718.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.76%)</title><rect x="718.9" y="819.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="726.7" y="803.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="726.7" y="787.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="729.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="726.7" y="771.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="729.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="726.7" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="729.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="726.7" y="739.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="729.7" y="750.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="727.9" y="819.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="730.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (29 samples, 2.76%)</title><rect x="729.0" y="931.0" width="32.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.0" y="942.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (29 samples, 2.76%)</title><rect x="729.0" y="915.0" width="32.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="732.0" y="926.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/173717178.process (14 samples, 1.33%)</title><rect x="731.2" y="899.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="734.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (14 samples, 1.33%)</title><rect x="731.2" y="883.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 1.14%)</title><rect x="731.2" y="867.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.2" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.48%)</title><rect x="735.7" y="851.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="738.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.48%)</title><rect x="735.7" y="835.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="738.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.48%)</title><rect x="735.7" y="819.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.7" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 0.48%)</title><rect x="735.7" y="803.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (4 samples, 0.38%)</title><rect x="736.8" y="787.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="740.2" y="771.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.29%)</title><rect x="741.3" y="851.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.3" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.29%)</title><rect x="741.3" y="835.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="744.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="741.3" y="819.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="744.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="744.7" y="867.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="747.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="744.7" y="851.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="744.7" y="835.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="744.7" y="819.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="746.9" y="899.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.9" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="746.9" y="883.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="749.9" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.10%)</title><rect x="748.1" y="899.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="751.1" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.10%)</title><rect x="748.1" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/222815816.get$Lambda (1 samples, 0.10%)</title><rect x="748.1" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="749.2" y="899.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="752.2" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="749.2" y="883.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.2" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.29%)</title><rect x="750.3" y="899.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="753.3" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.29%)</title><rect x="750.3" y="883.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="753.3" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="750.3" y="867.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="753.3" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.19%)</title><rect x="751.4" y="867.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="753.7" y="899.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.7" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.57%)</title><rect x="754.8" y="899.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.8" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.10%)</title><rect x="758.2" y="883.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="761.2" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="758.2" y="867.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="761.2" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="758.2" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.2" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="758.2" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="761.2" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.10%)</title><rect x="758.2" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="761.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.19%)</title><rect x="759.3" y="883.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.90%)</title><rect x="761.5" y="931.0" width="22.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.5" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.90%)</title><rect x="761.5" y="915.0" width="22.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="764.5" y="926.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.57%)</title><rect x="770.5" y="899.0" width="6.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="773.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.48%)</title><rect x="771.6" y="883.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="774.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.57%)</title><rect x="777.2" y="899.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1908112806.accept (6 samples, 0.57%)</title><rect x="777.2" y="883.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (6 samples, 0.57%)</title><rect x="777.2" y="867.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.57%)</title><rect x="777.2" y="851.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.2" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.57%)</title><rect x="777.2" y="835.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="780.2" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.57%)</title><rect x="777.2" y="819.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.2" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="781.7" y="803.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="784.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="781.7" y="787.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="784.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.33%)</title><rect x="784.0" y="947.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.33%)</title><rect x="784.0" y="931.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.10%)</title><rect x="784.0" y="915.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="787.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.24%)</title><rect x="785.1" y="915.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1908112806.accept (13 samples, 1.24%)</title><rect x="785.1" y="899.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="788.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (13 samples, 1.24%)</title><rect x="785.1" y="883.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 1.24%)</title><rect x="785.1" y="867.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.1" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 1.24%)</title><rect x="785.1" y="851.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.1" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 1.24%)</title><rect x="785.1" y="835.0" width="14.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.1" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 1.05%)</title><rect x="799.7" y="947.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="802.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.95%)</title><rect x="800.8" y="931.0" width="11.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="803.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.38%)</title><rect x="812.0" y="963.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="815.0" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="812.0" y="947.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="815.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="812.0" y="931.0" width="4.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="815.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.19%)</title><rect x="816.5" y="1011.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="816.5" y="995.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="816.5" y="979.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.19%)</title><rect x="816.5" y="963.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="819.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1001794699.run (1 samples, 0.10%)</title><rect x="817.6" y="947.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="820.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (207 samples, 19.68%)</title><rect x="818.7" y="1011.0" width="232.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.7" y="1022.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (206 samples, 19.58%)</title><rect x="819.8" y="995.0" width="231.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.8" y="1006.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (170 samples, 16.16%)</title><rect x="838.9" y="979.0" width="190.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.9" y="990.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.86%)</title><rect x="844.5" y="963.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="847.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.86%)</title><rect x="844.5" y="947.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.86%)</title><rect x="844.5" y="931.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.86%)</title><rect x="844.5" y="915.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="847.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (156 samples, 14.83%)</title><rect x="854.6" y="963.0" width="175.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.6" y="974.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (156 samples, 14.83%)</title><rect x="854.6" y="947.0" width="175.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.6" y="958.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="862.5" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="865.5" y="942.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 13.50%)</title><rect x="863.6" y="931.0" width="159.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="866.6" y="942.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="864.7" y="915.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.7" y="926.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 2.19%)</title><rect x="867.0" y="915.0" width="25.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.0" y="926.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.57%)</title><rect x="877.1" y="899.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.1" y="910.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="878.2" y="883.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.2" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="879.3" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.3" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.29%)</title><rect x="880.4" y="883.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="883.4" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="883.8" y="899.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="886.8" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.67%)</title><rect x="884.9" y="899.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="887.9" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="892.8" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.8" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="893.9" y="915.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="896.9" y="926.0"></text>
</g>
<g>
<title>__lll_lock_wait (13 samples, 1.24%)</title><rect x="896.1" y="915.0" width="14.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="899.1" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.85%)</title><rect x="910.7" y="915.0" width="33.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="913.7" y="926.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.94%)</title><rect x="944.4" y="915.0" width="58.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="947.4" y="926.0">__pthr..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1002.7" y="915.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1005.7" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.19%)</title><rect x="1003.8" y="915.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1006.8" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.38%)</title><rect x="1006.0" y="915.0" width="4.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1009.0" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.48%)</title><rect x="1010.5" y="915.0" width="5.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1013.5" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1016.1" y="915.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1019.1" y="926.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1017.3" y="915.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1020.3" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.38%)</title><rect x="1018.4" y="915.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1021.4" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.29%)</title><rect x="1022.9" y="931.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1025.9" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.19%)</title><rect x="1026.2" y="931.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.2" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1028.5" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.81%)</title><rect x="1029.6" y="979.0" width="21.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.6" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.81%)</title><rect x="1029.6" y="963.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1032.6" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.81%)</title><rect x="1029.6" y="947.0" width="21.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.6" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.81%)</title><rect x="1029.6" y="931.0" width="21.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.6" y="942.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1050.9" y="1059.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1050.9" y="1043.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1053.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1050.9" y="1027.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1050.9" y="1011.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1053.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1050.9" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1053.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1050.9" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="1050.9" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1053.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1050.9" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1050.9" y="931.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1053.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="1050.9" y="915.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.10%)</title><rect x="1050.9" y="899.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1053.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.10%)</title><rect x="1050.9" y="883.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1053.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1050.9" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1053.9" y="878.0"></text>
</g>
<g>
<title>start_thread (123 samples, 11.69%)</title><rect x="1052.0" y="1059.0" width="138.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1055.0" y="1070.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (123 samples, 11.69%)</title><rect x="1052.0" y="1043.0" width="138.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1055.0" y="1054.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.00%)</title><rect x="1052.0" y="1027.0" width="23.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.0" y="1038.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.48%)</title><rect x="1052.0" y="1011.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.0" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.48%)</title><rect x="1052.0" y="995.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.0" y="1006.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1052.0" y="979.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.0" y="990.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.29%)</title><rect x="1054.3" y="979.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1057.3" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.43%)</title><rect x="1057.6" y="1011.0" width="16.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.6" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.38%)</title><rect x="1057.6" y="995.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.6" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="1057.6" y="979.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.6" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1057.6" y="963.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.6" y="974.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.29%)</title><rect x="1058.8" y="979.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1061.8" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.67%)</title><rect x="1062.1" y="995.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1065.1" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1062.1" y="979.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.1" y="990.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1062.1" y="963.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.1" y="974.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1062.1" y="947.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.1" y="958.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1062.1" y="931.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.1" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.57%)</title><rect x="1063.3" y="979.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.3" y="990.0"></text>
</g>
<g>
<title>ObjectSynchronizer::oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1063.3" y="963.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.3" y="974.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.29%)</title><rect x="1064.4" y="963.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.4" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (2 samples, 0.19%)</title><rect x="1067.7" y="963.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.7" y="974.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (2 samples, 0.19%)</title><rect x="1067.7" y="947.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.7" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.38%)</title><rect x="1070.0" y="995.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.0" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.38%)</title><rect x="1070.0" y="979.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.29%)</title><rect x="1070.0" y="963.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.0" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.29%)</title><rect x="1070.0" y="947.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.0" y="958.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.29%)</title><rect x="1070.0" y="931.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.0" y="942.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.29%)</title><rect x="1070.0" y="915.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.0" y="926.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.19%)</title><rect x="1071.1" y="899.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1071.1" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.1" y="894.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1071.1" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.1" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.10%)</title><rect x="1072.2" y="883.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.2" y="894.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1073.3" y="963.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.3" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1073.3" y="947.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.3" y="958.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.10%)</title><rect x="1073.3" y="931.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.3" y="942.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1074.5" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1074.5" y="995.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.5" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.10%)</title><rect x="1074.5" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.5" y="990.0"></text>
</g>
<g>
<title>JavaThread::run() (101 samples, 9.60%)</title><rect x="1075.6" y="1027.0" width="113.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.6" y="1038.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (101 samples, 9.60%)</title><rect x="1075.6" y="1011.0" width="113.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.6" y="1022.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (101 samples, 9.60%)</title><rect x="1075.6" y="995.0" width="113.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.6" y="1006.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (101 samples, 9.60%)</title><rect x="1075.6" y="979.0" width="113.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.6" y="990.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (100 samples, 9.51%)</title><rect x="1075.6" y="963.0" width="112.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.6" y="974.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (100 samples, 9.51%)</title><rect x="1075.6" y="947.0" width="112.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.6" y="958.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 3.71%)</title><rect x="1075.6" y="931.0" width="43.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1078.6" y="942.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.38%)</title><rect x="1075.6" y="915.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.6" y="926.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.29%)</title><rect x="1075.6" y="899.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.6" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1076.7" y="883.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.7" y="894.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.10%)</title><rect x="1077.8" y="883.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.8" y="894.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.10%)</title><rect x="1077.8" y="867.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.8" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="1079.0" y="899.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.0" y="910.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1079.0" y="883.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1082.0" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1080.1" y="915.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.1" y="926.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="1080.1" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.1" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1080.1" y="883.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.1" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1080.1" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.1" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.48%)</title><rect x="1081.2" y="915.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.2" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.38%)</title><rect x="1081.2" y="899.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.2" y="910.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1082.3" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.3" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.19%)</title><rect x="1083.4" y="883.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.4" y="894.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.10%)</title><rect x="1083.4" y="867.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.4" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.10%)</title><rect x="1083.4" y="851.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1086.4" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1084.6" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.6" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1084.6" y="851.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.6" y="862.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.10%)</title><rect x="1084.6" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.6" y="846.0"></text>
</g>
<g>
<title>State::_sub_Op_CmpP(Node const*) (1 samples, 0.10%)</title><rect x="1084.6" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.6" y="830.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.10%)</title><rect x="1085.7" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.7" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.10%)</title><rect x="1086.8" y="915.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.8" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.10%)</title><rect x="1086.8" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.8" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.19%)</title><rect x="1087.9" y="915.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.9" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.19%)</title><rect x="1087.9" y="899.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.9" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.19%)</title><rect x="1087.9" y="883.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 2.38%)</title><rect x="1090.2" y="915.0" width="28.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.2" y="926.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1091.3" y="899.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.3" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1091.3" y="883.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1091.3" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.48%)</title><rect x="1092.4" y="899.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.4" y="910.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1094.7" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.10%)</title><rect x="1095.8" y="883.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.8" y="894.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1095.8" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.8" y="878.0"></text>
</g>
<g>
<title>loadLNode::out_RegMask() const (1 samples, 0.10%)</title><rect x="1096.9" y="883.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.48%)</title><rect x="1098.0" y="899.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.0" y="910.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.10%)</title><rect x="1100.3" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.3" y="894.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.10%)</title><rect x="1101.4" y="883.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1102.5" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.19%)</title><rect x="1103.6" y="899.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.29%)</title><rect x="1105.9" y="899.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.19%)</title><rect x="1107.0" y="883.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.0" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.19%)</title><rect x="1109.2" y="899.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.2" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.19%)</title><rect x="1109.2" y="883.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.2" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.19%)</title><rect x="1109.2" y="867.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.2" y="878.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.19%)</title><rect x="1109.2" y="851.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1110.4" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.4" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.57%)</title><rect x="1111.5" y="899.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.5" y="910.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1116.0" y="883.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.0" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1117.1" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.1" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1117.1" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.1" y="878.0"></text>
</g>
<g>
<title>storeImmL0Node::ideal_Opcode() const (1 samples, 0.10%)</title><rect x="1118.2" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.2" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (53 samples, 5.04%)</title><rect x="1119.3" y="931.0" width="59.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.3" y="942.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1119.3" y="915.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.3" y="926.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1119.3" y="899.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.3" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1119.3" y="883.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.3" y="894.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1120.5" y="915.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.5" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1120.5" y="899.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1120.5" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.5" y="894.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1120.5" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1120.5" y="851.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1120.5" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1120.5" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1120.5" y="803.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1120.5" y="787.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.5" y="798.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1120.5" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.5" y="782.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1120.5" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.19%)</title><rect x="1121.6" y="915.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.19%)</title><rect x="1121.6" y="899.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1121.6" y="883.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.10%)</title><rect x="1121.6" y="867.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="867.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="723.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="563.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="499.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="467.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="451.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="387.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="339.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="307.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="259.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="243.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="227.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="211.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="195.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="179.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="163.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="147.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="131.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="115.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="99.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="83.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="67.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="51.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1122.7" y="35.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.7" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1123.8" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.8" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.19%)</title><rect x="1124.9" y="915.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.9" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.19%)</title><rect x="1124.9" y="899.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.9" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.10%)</title><rect x="1126.1" y="883.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.1" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1126.1" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (38 samples, 3.61%)</title><rect x="1127.2" y="915.0" width="42.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="926.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.19%)</title><rect x="1127.2" y="899.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.2" y="910.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1128.3" y="883.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.19%)</title><rect x="1129.4" y="899.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.4" y="910.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1130.6" y="883.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (30 samples, 2.85%)</title><rect x="1131.7" y="899.0" width="33.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.7" y="910.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 2.76%)</title><rect x="1132.8" y="883.0" width="32.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.8" y="894.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (28 samples, 2.66%)</title><rect x="1133.9" y="867.0" width="31.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.9" y="878.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.19%)</title><rect x="1163.1" y="851.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.29%)</title><rect x="1165.3" y="899.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1167.6" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.10%)</title><rect x="1168.7" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1168.7" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.10%)</title><rect x="1168.7" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.7" y="878.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1168.7" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="862.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.10%)</title><rect x="1168.7" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.7" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.76%)</title><rect x="1169.8" y="915.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.76%)</title><rect x="1169.8" y="899.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="910.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1169.8" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.8" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1169.8" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.8" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1169.8" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.8" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1169.8" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1169.8" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.8" y="830.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1169.8" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.10%)</title><rect x="1169.8" y="787.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1170.9" y="883.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="894.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1170.9" y="867.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.9" y="878.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1172.1" y="883.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.1" y="894.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.10%)</title><rect x="1173.2" y="883.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.2" y="894.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.3" y="883.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1175.4" y="883.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.10%)</title><rect x="1175.4" y="867.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.19%)</title><rect x="1176.5" y="883.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="894.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1176.5" y="867.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1177.7" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1177.7" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="862.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1177.7" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.67%)</title><rect x="1178.8" y="931.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.67%)</title><rect x="1178.8" y="915.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.67%)</title><rect x="1178.8" y="899.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.67%)</title><rect x="1178.8" y="883.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.67%)</title><rect x="1178.8" y="867.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="878.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1178.8" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="862.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.10%)</title><rect x="1178.8" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.10%)</title><rect x="1178.8" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1178.8" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1178.8" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1178.8" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1178.8" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.57%)</title><rect x="1179.9" y="851.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1179.9" y="835.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1179.9" y="819.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.38%)</title><rect x="1179.9" y="803.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.38%)</title><rect x="1179.9" y="787.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.38%)</title><rect x="1179.9" y="771.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1179.9" y="755.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.9" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.9" y="723.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.9" y="707.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.9" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.9" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.9" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.9" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.9" y="627.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.9" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.9" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.9" y="579.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1179.9" y="563.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1179.9" y="547.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.10%)</title><rect x="1179.9" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1179.9" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1179.9" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1179.9" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1181.0" y="739.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1181.0" y="723.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1181.0" y="707.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1181.0" y="691.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1181.0" y="675.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1181.0" y="659.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1181.0" y="643.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1181.0" y="627.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1181.0" y="611.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1181.0" y="595.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1181.0" y="579.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1181.0" y="563.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1181.0" y="547.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.0" y="531.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.0" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.0" y="499.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.0" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.0" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.0" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.0" y="435.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1181.0" y="419.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.10%)</title><rect x="1181.0" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1181.0" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1181.0" y="371.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.10%)</title><rect x="1181.0" y="355.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.10%)</title><rect x="1181.0" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1181.0" y="323.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="531.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="499.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="483.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="467.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="451.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="435.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="419.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="403.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="371.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="339.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="323.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="307.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="291.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="275.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="259.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1182.1" y="243.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="254.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.10%)</title><rect x="1182.1" y="227.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="238.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.10%)</title><rect x="1182.1" y="211.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="222.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1182.1" y="195.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1183.3" y="755.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1183.3" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1184.4" y="835.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1184.4" y="819.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1184.4" y="803.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1184.4" y="787.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1184.4" y="771.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1184.4" y="755.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1184.4" y="739.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1184.4" y="723.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1184.4" y="707.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1184.4" y="691.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1184.4" y="675.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1184.4" y="659.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1184.4" y="643.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.4" y="611.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.4" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.4" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.4" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.4" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="531.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.4" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.4" y="499.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.4" y="483.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.4" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.4" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="435.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.4" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.4" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.4" y="371.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.4" y="355.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.4" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="323.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.4" y="307.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.4" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.4" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.4" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.4" y="243.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1184.4" y="227.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1184.4" y="211.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1184.4" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="206.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1184.4" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.5" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.5" y="611.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.5" y="595.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.5" y="606.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.10%)</title><rect x="1185.5" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1186.6" y="931.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="942.0"></text>
</g>
<g>
<title>ReplacedNodes::reset() (1 samples, 0.10%)</title><rect x="1186.6" y="915.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="926.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1187.8" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1187.8" y="947.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1187.8" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1187.8" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="926.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.10%)</title><rect x="1187.8" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="910.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1187.8" y="883.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1187.8" y="867.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1187.8" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1187.8" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1187.8" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="830.0"></text>
</g>
<g>
<title>ValueStack::push(ValueType*, Instruction*) (1 samples, 0.10%)</title><rect x="1187.8" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.9" y="1027.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="1038.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.9" y="1011.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1188.9" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="1006.0"></text>
</g>
</g>
</svg>
