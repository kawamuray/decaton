<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1718" onload="init(evt)" viewBox="0 0 1200 1718" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1701"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1701"> </text>
<g id="frames">
<g>
<title>all (280 samples, 100.00%)</title><rect x="10.0" y="1667.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1678.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.36%)</title><rect x="10.0" y="1651.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.36%)</title><rect x="10.0" y="1635.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 7.86%)</title><rect x="14.2" y="1651.0" width="92.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1662.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.36%)</title><rect x="14.2" y="1635.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.36%)</title><rect x="14.2" y="1619.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.36%)</title><rect x="14.2" y="1603.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.36%)</title><rect x="14.2" y="1587.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.36%)</title><rect x="14.2" y="1571.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="14.2" y="1555.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 7.50%)</title><rect x="18.4" y="1635.0" width="88.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.4" y="1646.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.71%)</title><rect x="18.4" y="1619.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.4" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.36%)</title><rect x="22.6" y="1603.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.6" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="22.6" y="1587.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.6" y="1598.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="22.6" y="1571.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.6" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="22.6" y="1555.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.6" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="22.6" y="1539.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.6" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="22.6" y="1523.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.6" y="1534.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.36%)</title><rect x="22.6" y="1507.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.6" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.36%)</title><rect x="22.6" y="1491.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.6" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.36%)</title><rect x="22.6" y="1475.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.6" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/735724134.test (1 samples, 0.36%)</title><rect x="22.6" y="1459.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.6" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsResume$65 (1 samples, 0.36%)</title><rect x="22.6" y="1443.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.6" y="1454.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.86%)</title><rect x="26.9" y="1619.0" width="33.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.9" y="1630.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$262/629974788.accept (7 samples, 2.50%)</title><rect x="26.9" y="1603.0" width="29.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.9" y="1614.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$58 (7 samples, 2.50%)</title><rect x="26.9" y="1587.0" width="29.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.9" y="1598.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.07%)</title><rect x="26.9" y="1571.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.9" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.07%)</title><rect x="26.9" y="1555.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.9" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.07%)</title><rect x="26.9" y="1539.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.9" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.07%)</title><rect x="26.9" y="1523.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.9" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.07%)</title><rect x="26.9" y="1507.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.9" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.07%)</title><rect x="26.9" y="1491.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.9" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.36%)</title><rect x="26.9" y="1475.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.36%)</title><rect x="26.9" y="1459.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.36%)</title><rect x="26.9" y="1443.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.9" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.36%)</title><rect x="26.9" y="1427.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.9" y="1438.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="26.9" y="1411.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="29.9" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="26.9" y="1395.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.9" y="1406.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.36%)</title><rect x="26.9" y="1379.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.71%)</title><rect x="31.1" y="1475.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.1" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.71%)</title><rect x="31.1" y="1459.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.1" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.71%)</title><rect x="31.1" y="1443.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.71%)</title><rect x="31.1" y="1427.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.1" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.43%)</title><rect x="39.5" y="1571.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.5" y="1582.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.43%)</title><rect x="39.5" y="1555.0" width="16.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.5" y="1566.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.36%)</title><rect x="52.1" y="1539.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.1" y="1550.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.36%)</title><rect x="52.1" y="1523.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.1" y="1534.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.36%)</title><rect x="52.1" y="1507.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.1" y="1518.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.36%)</title><rect x="52.1" y="1491.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.1" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.36%)</title><rect x="56.4" y="1603.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.4" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.36%)</title><rect x="56.4" y="1587.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.4" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.36%)</title><rect x="56.4" y="1571.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.4" y="1582.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="56.4" y="1555.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="59.4" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.93%)</title><rect x="60.6" y="1619.0" width="46.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.6" y="1630.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.93%)</title><rect x="60.6" y="1603.0" width="46.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.6" y="1614.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.86%)</title><rect x="60.6" y="1587.0" width="33.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.6" y="1598.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.43%)</title><rect x="60.6" y="1571.0" width="16.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.6" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.43%)</title><rect x="60.6" y="1555.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.6" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="60.6" y="1539.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.6" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="60.6" y="1523.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.6" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="60.6" y="1507.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.6" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="60.6" y="1491.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.6" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.36%)</title><rect x="60.6" y="1475.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.6" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.36%)</title><rect x="60.6" y="1459.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.6" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.36%)</title><rect x="64.8" y="1539.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.8" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.36%)</title><rect x="64.8" y="1523.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.8" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.36%)</title><rect x="64.8" y="1507.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.36%)</title><rect x="64.8" y="1491.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.36%)</title><rect x="64.8" y="1475.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.71%)</title><rect x="69.0" y="1539.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.71%)</title><rect x="69.0" y="1523.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.71%)</title><rect x="69.0" y="1507.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.0" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.71%)</title><rect x="69.0" y="1491.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.0" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.71%)</title><rect x="69.0" y="1475.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.71%)</title><rect x="69.0" y="1459.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.36%)</title><rect x="69.0" y="1443.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="72.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.36%)</title><rect x="69.0" y="1427.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.36%)</title><rect x="73.2" y="1443.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.36%)</title><rect x="73.2" y="1427.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.36%)</title><rect x="73.2" y="1411.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.2" y="1422.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="73.2" y="1395.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="76.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.43%)</title><rect x="77.4" y="1571.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.4" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.36%)</title><rect x="77.4" y="1555.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.4" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.36%)</title><rect x="81.6" y="1555.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.6" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.71%)</title><rect x="85.9" y="1555.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.9" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.71%)</title><rect x="85.9" y="1539.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.9" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.71%)</title><rect x="85.9" y="1523.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.9" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.71%)</title><rect x="85.9" y="1507.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.9" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.36%)</title><rect x="85.9" y="1491.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.9" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.36%)</title><rect x="85.9" y="1475.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.9" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.36%)</title><rect x="85.9" y="1459.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.36%)</title><rect x="85.9" y="1443.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.36%)</title><rect x="85.9" y="1427.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.36%)</title><rect x="85.9" y="1411.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.36%)</title><rect x="85.9" y="1395.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.36%)</title><rect x="90.1" y="1491.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.1" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.36%)</title><rect x="90.1" y="1475.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.1" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.36%)</title><rect x="94.3" y="1587.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.3" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.36%)</title><rect x="94.3" y="1571.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.3" y="1582.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.36%)</title><rect x="94.3" y="1555.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="97.3" y="1566.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="94.3" y="1539.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="97.3" y="1550.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="94.3" y="1523.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="97.3" y="1534.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="94.3" y="1507.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="97.3" y="1518.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.36%)</title><rect x="94.3" y="1491.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="97.3" y="1502.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.36%)</title><rect x="94.3" y="1475.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="97.3" y="1486.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.36%)</title><rect x="94.3" y="1459.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.3" y="1470.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.36%)</title><rect x="94.3" y="1443.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="97.3" y="1454.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.36%)</title><rect x="94.3" y="1427.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="97.3" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.36%)</title><rect x="98.5" y="1587.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.36%)</title><rect x="102.7" y="1587.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.7" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="102.7" y="1571.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.7" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.36%)</title><rect x="102.7" y="1555.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.7" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.36%)</title><rect x="102.7" y="1539.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.7" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.36%)</title><rect x="102.7" y="1523.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.7" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="102.7" y="1507.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.7" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.36%)</title><rect x="102.7" y="1491.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.7" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="102.7" y="1475.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="105.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="102.7" y="1459.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.7" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.36%)</title><rect x="102.7" y="1443.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.7" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.36%)</title><rect x="102.7" y="1427.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.7" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.36%)</title><rect x="102.7" y="1411.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.36%)</title><rect x="102.7" y="1395.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.7" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.36%)</title><rect x="102.7" y="1379.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.7" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.36%)</title><rect x="102.7" y="1363.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/Thread.run (162 samples, 57.86%)</title><rect x="106.9" y="1651.0" width="682.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.9" y="1662.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (162 samples, 57.86%)</title><rect x="106.9" y="1635.0" width="682.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.9" y="1646.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (162 samples, 57.86%)</title><rect x="106.9" y="1619.0" width="682.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.9" y="1630.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1220565189.run (156 samples, 55.71%)</title><rect x="106.9" y="1603.0" width="657.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.9" y="1614.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$276/1220565189.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (156 samples, 55.71%)</title><rect x="106.9" y="1587.0" width="657.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.9" y="1598.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (156 samples, 55.71%)</title><rect x="106.9" y="1571.0" width="657.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.9" y="1582.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (152 samples, 54.29%)</title><rect x="106.9" y="1555.0" width="640.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.9" y="1566.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 12.86%)</title><rect x="106.9" y="1539.0" width="151.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.9" y="1550.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (36 samples, 12.86%)</title><rect x="106.9" y="1523.0" width="151.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.9" y="1534.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (36 samples, 12.86%)</title><rect x="106.9" y="1507.0" width="151.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="109.9" y="1518.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 12.86%)</title><rect x="106.9" y="1491.0" width="151.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.9" y="1502.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 12.86%)</title><rect x="106.9" y="1475.0" width="151.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.9" y="1486.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 12.86%)</title><rect x="106.9" y="1459.0" width="151.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.9" y="1470.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="106.9" y="1443.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="109.9" y="1454.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="106.9" y="1427.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="109.9" y="1438.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="106.9" y="1411.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="109.9" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="106.9" y="1395.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.9" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.36%)</title><rect x="106.9" y="1379.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="109.9" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (15 samples, 5.36%)</title><rect x="111.1" y="1443.0" width="63.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.1" y="1454.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="132.2" y="1427.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="135.2" y="1438.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="132.2" y="1411.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="135.2" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.36%)</title><rect x="136.4" y="1427.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="139.4" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.36%)</title><rect x="136.4" y="1411.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="139.4" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.86%)</title><rect x="140.6" y="1427.0" width="33.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.6" y="1438.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.14%)</title><rect x="149.1" y="1411.0" width="25.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.1" y="1422.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="149.1" y="1395.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="152.1" y="1406.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="149.1" y="1379.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="152.1" y="1390.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="149.1" y="1363.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="152.1" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.36%)</title><rect x="153.3" y="1395.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="156.3" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.36%)</title><rect x="153.3" y="1379.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.3" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.43%)</title><rect x="157.5" y="1395.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.5" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.43%)</title><rect x="157.5" y="1379.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.5" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (20 samples, 7.14%)</title><rect x="174.4" y="1443.0" width="84.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.4" y="1454.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.36%)</title><rect x="174.4" y="1427.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.4" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.36%)</title><rect x="178.6" y="1427.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.36%)</title><rect x="182.8" y="1427.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.8" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.07%)</title><rect x="187.0" y="1427.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="190.0" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.07%)</title><rect x="187.0" y="1411.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.0" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.36%)</title><rect x="191.2" y="1395.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.2" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="195.4" y="1395.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.4" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.36%)</title><rect x="195.4" y="1379.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.4" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.36%)</title><rect x="199.6" y="1427.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.6" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.36%)</title><rect x="199.6" y="1411.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.6" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 3.93%)</title><rect x="203.9" y="1427.0" width="46.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.9" y="1438.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.43%)</title><rect x="203.9" y="1411.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.9" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.07%)</title><rect x="203.9" y="1395.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.9" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 1.07%)</title><rect x="203.9" y="1379.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.9" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 1.07%)</title><rect x="203.9" y="1363.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.9" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 1.07%)</title><rect x="203.9" y="1347.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="206.9" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 1.07%)</title><rect x="203.9" y="1331.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.9" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.36%)</title><rect x="216.5" y="1395.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.5" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.36%)</title><rect x="216.5" y="1379.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.5" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.50%)</title><rect x="220.7" y="1411.0" width="29.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.7" y="1422.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.50%)</title><rect x="220.7" y="1395.0" width="29.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.7" y="1406.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.50%)</title><rect x="220.7" y="1379.0" width="29.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.7" y="1390.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.71%)</title><rect x="229.1" y="1363.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.1" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.36%)</title><rect x="229.1" y="1347.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.1" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.36%)</title><rect x="229.1" y="1331.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.1" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.36%)</title><rect x="229.1" y="1315.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.1" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.36%)</title><rect x="233.4" y="1347.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.4" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.71%)</title><rect x="237.6" y="1363.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.6" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.36%)</title><rect x="241.8" y="1347.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.8" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="241.8" y="1331.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="244.8" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="246.0" y="1363.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="246.0" y="1347.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="246.0" y="1331.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="1342.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.36%)</title><rect x="246.0" y="1315.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="249.0" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.71%)</title><rect x="250.2" y="1427.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.2" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (110 samples, 39.29%)</title><rect x="258.6" y="1539.0" width="463.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.6" y="1550.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (10 samples, 3.57%)</title><rect x="258.6" y="1523.0" width="42.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.6" y="1534.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (9 samples, 3.21%)</title><rect x="262.9" y="1507.0" width="37.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.9" y="1518.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 2.14%)</title><rect x="275.5" y="1491.0" width="25.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.5" y="1502.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.14%)</title><rect x="275.5" y="1475.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.5" y="1486.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.14%)</title><rect x="275.5" y="1459.0" width="25.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.5" y="1470.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.43%)</title><rect x="283.9" y="1443.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.9" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="300.8" y="1523.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.8" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="300.8" y="1507.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.8" y="1518.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="300.8" y="1491.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.8" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (19 samples, 6.79%)</title><rect x="305.0" y="1523.0" width="80.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="1534.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (19 samples, 6.79%)</title><rect x="305.0" y="1507.0" width="80.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.0" y="1518.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="313.4" y="1491.0" width="4.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="316.4" y="1502.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="313.4" y="1475.0" width="4.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="316.4" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 3.21%)</title><rect x="317.6" y="1491.0" width="38.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.6" y="1502.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.21%)</title><rect x="317.6" y="1475.0" width="38.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.6" y="1486.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.21%)</title><rect x="317.6" y="1459.0" width="38.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="320.6" y="1470.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.79%)</title><rect x="334.5" y="1443.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.5" y="1454.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.79%)</title><rect x="334.5" y="1427.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.5" y="1438.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.79%)</title><rect x="334.5" y="1411.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.5" y="1422.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.36%)</title><rect x="334.5" y="1395.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="337.5" y="1406.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.36%)</title><rect x="334.5" y="1379.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="337.5" y="1390.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.36%)</title><rect x="334.5" y="1363.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="337.5" y="1374.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.36%)</title><rect x="334.5" y="1347.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="337.5" y="1358.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.36%)</title><rect x="334.5" y="1331.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="337.5" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.36%)</title><rect x="338.7" y="1395.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="341.7" y="1406.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.36%)</title><rect x="338.7" y="1379.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="341.7" y="1390.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.07%)</title><rect x="342.9" y="1395.0" width="12.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="345.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.71%)</title><rect x="355.6" y="1491.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.6" y="1502.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.36%)</title><rect x="355.6" y="1475.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.6" y="1486.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.36%)</title><rect x="355.6" y="1459.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="358.6" y="1470.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.36%)</title><rect x="355.6" y="1443.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="358.6" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.36%)</title><rect x="355.6" y="1427.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="358.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.36%)</title><rect x="359.8" y="1475.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.8" y="1486.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="359.8" y="1459.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.8" y="1470.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.79%)</title><rect x="364.0" y="1491.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.0" y="1502.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.79%)</title><rect x="364.0" y="1475.0" width="21.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.0" y="1486.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="364.0" y="1459.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.0" y="1470.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="364.0" y="1443.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.0" y="1454.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="364.0" y="1427.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.0" y="1438.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="364.0" y="1411.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="367.0" y="1422.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.43%)</title><rect x="368.2" y="1459.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.2" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.43%)</title><rect x="368.2" y="1443.0" width="16.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.2" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.71%)</title><rect x="376.6" y="1427.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.6" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.36%)</title><rect x="380.9" y="1411.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.9" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (74 samples, 26.43%)</title><rect x="385.1" y="1523.0" width="311.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.1" y="1534.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2032810883.process (1 samples, 0.36%)</title><rect x="385.1" y="1507.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.1" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.36%)</title><rect x="385.1" y="1491.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.1" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.36%)</title><rect x="385.1" y="1475.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.1" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.36%)</title><rect x="385.1" y="1459.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.1" y="1470.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="385.1" y="1443.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.1" y="1454.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="385.1" y="1427.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.1" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (73 samples, 26.07%)</title><rect x="389.3" y="1507.0" width="307.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.3" y="1518.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2032810883.process (61 samples, 21.79%)</title><rect x="401.9" y="1491.0" width="257.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.9" y="1502.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (61 samples, 21.79%)</title><rect x="401.9" y="1475.0" width="257.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.9" y="1486.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 21.43%)</title><rect x="406.1" y="1459.0" width="252.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.1" y="1470.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.36%)</title><rect x="414.6" y="1443.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.6" y="1454.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.36%)</title><rect x="414.6" y="1427.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.6" y="1438.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.36%)</title><rect x="414.6" y="1411.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.6" y="1422.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.36%)</title><rect x="414.6" y="1395.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.6" y="1406.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.36%)</title><rect x="414.6" y="1379.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.6" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.36%)</title><rect x="414.6" y="1363.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.6" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.36%)</title><rect x="414.6" y="1347.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.6" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.36%)</title><rect x="414.6" y="1331.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.6" y="1342.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.36%)</title><rect x="414.6" y="1315.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="417.6" y="1326.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (1 samples, 0.36%)</title><rect x="414.6" y="1299.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="417.6" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getMDCPropertyMap (1 samples, 0.36%)</title><rect x="414.6" y="1283.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="417.6" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getPropertyMap (1 samples, 0.36%)</title><rect x="414.6" y="1267.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="417.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.36%)</title><rect x="414.6" y="1251.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.6" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.36%)</title><rect x="418.8" y="1443.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.8" y="1454.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.36%)</title><rect x="418.8" y="1427.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.8" y="1438.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.36%)</title><rect x="418.8" y="1411.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.8" y="1422.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.36%)</title><rect x="418.8" y="1395.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="421.8" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 20.00%)</title><rect x="423.0" y="1443.0" width="236.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="426.0" y="1454.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 20.00%)</title><rect x="423.0" y="1427.0" width="236.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.0" y="1438.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (48 samples, 17.14%)</title><rect x="444.1" y="1411.0" width="202.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="447.1" y="1422.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.79%)</title><rect x="452.5" y="1395.0" width="21.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="455.5" y="1406.0">H..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="473.6" y="1395.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="476.6" y="1406.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.07%)</title><rect x="477.8" y="1395.0" width="12.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="480.8" y="1406.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.07%)</title><rect x="477.8" y="1379.0" width="12.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="480.8" y="1390.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.71%)</title><rect x="490.4" y="1395.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="493.4" y="1406.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.36%)</title><rect x="498.9" y="1395.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="501.9" y="1406.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 12.14%)</title><rect x="503.1" y="1395.0" width="143.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="506.1" y="1406.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.71%)</title><rect x="524.1" y="1379.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="527.1" y="1390.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.36%)</title><rect x="528.4" y="1363.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="531.4" y="1374.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.43%)</title><rect x="532.6" y="1379.0" width="16.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="535.6" y="1390.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 4.64%)</title><rect x="549.4" y="1379.0" width="54.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="552.4" y="1390.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.36%)</title><rect x="604.2" y="1379.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="607.2" y="1390.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.36%)</title><rect x="608.4" y="1379.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="611.4" y="1390.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.36%)</title><rect x="612.6" y="1379.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="615.6" y="1390.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 2.50%)</title><rect x="616.9" y="1379.0" width="29.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="619.9" y="1390.0">os..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.36%)</title><rect x="646.4" y="1411.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="649.4" y="1422.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.36%)</title><rect x="650.6" y="1411.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="653.6" y="1422.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.36%)</title><rect x="654.8" y="1411.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="657.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 1.43%)</title><rect x="659.0" y="1491.0" width="16.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="662.0" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 1.43%)</title><rect x="659.0" y="1475.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.0" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1353414883.get$Lambda (4 samples, 1.43%)</title><rect x="659.0" y="1459.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$278/1353414883.&lt;init&gt; (2 samples, 0.71%)</title><rect x="667.4" y="1443.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.4" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="675.9" y="1491.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.9" y="1502.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.36%)</title><rect x="680.1" y="1491.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.1" y="1502.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.36%)</title><rect x="680.1" y="1475.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="683.1" y="1486.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="684.3" y="1491.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="687.3" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.71%)</title><rect x="688.5" y="1491.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="691.5" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.14%)</title><rect x="696.9" y="1523.0" width="25.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="699.9" y="1534.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.14%)</title><rect x="696.9" y="1507.0" width="25.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="699.9" y="1518.0">j..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.71%)</title><rect x="709.6" y="1491.0" width="8.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="712.6" y="1502.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.71%)</title><rect x="709.6" y="1475.0" width="8.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="712.6" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.36%)</title><rect x="718.0" y="1491.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="721.0" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/2045493187.accept (1 samples, 0.36%)</title><rect x="718.0" y="1475.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="721.0" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.36%)</title><rect x="718.0" y="1459.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="721.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="718.0" y="1443.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="721.0" y="1454.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="718.0" y="1427.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.0" y="1438.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="718.0" y="1411.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="721.0" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.14%)</title><rect x="722.2" y="1539.0" width="25.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.2" y="1550.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.14%)</title><rect x="722.2" y="1523.0" width="25.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="725.2" y="1534.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.14%)</title><rect x="722.2" y="1507.0" width="25.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="725.2" y="1518.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/2045493187.accept (6 samples, 2.14%)</title><rect x="722.2" y="1491.0" width="25.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.2" y="1502.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (6 samples, 2.14%)</title><rect x="722.2" y="1475.0" width="25.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="725.2" y="1486.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 2.14%)</title><rect x="722.2" y="1459.0" width="25.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="725.2" y="1470.0">c..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 2.14%)</title><rect x="722.2" y="1443.0" width="25.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.2" y="1454.0">j..</text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 2.14%)</title><rect x="722.2" y="1427.0" width="25.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="725.2" y="1438.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="747.5" y="1555.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.5" y="1566.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="747.5" y="1539.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.5" y="1550.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="747.5" y="1523.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.5" y="1534.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="747.5" y="1507.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="750.5" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="747.5" y="1491.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="750.5" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="747.5" y="1475.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="750.5" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.07%)</title><rect x="751.7" y="1555.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.7" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.14%)</title><rect x="764.4" y="1603.0" width="25.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="767.4" y="1614.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.14%)</title><rect x="764.4" y="1587.0" width="25.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.4" y="1598.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.07%)</title><rect x="777.0" y="1571.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.0" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.07%)</title><rect x="777.0" y="1555.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.0" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.07%)</title><rect x="777.0" y="1539.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.0" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.07%)</title><rect x="777.0" y="1523.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.0" y="1534.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.36%)</title><rect x="789.6" y="1651.0" width="4.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="792.6" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.71%)</title><rect x="793.9" y="1651.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="796.9" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.36%)</title><rect x="798.1" y="1635.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="801.1" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="798.1" y="1619.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="801.1" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.36%)</title><rect x="798.1" y="1603.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="801.1" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.36%)</title><rect x="798.1" y="1587.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.1" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.36%)</title><rect x="798.1" y="1571.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="801.1" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.36%)</title><rect x="798.1" y="1555.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.1" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.36%)</title><rect x="798.1" y="1539.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.1" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.36%)</title><rect x="798.1" y="1523.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.1" y="1534.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.36%)</title><rect x="798.1" y="1507.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.1" y="1518.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.36%)</title><rect x="798.1" y="1491.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="801.1" y="1502.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.36%)</title><rect x="798.1" y="1475.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="801.1" y="1486.0"></text>
</g>
<g>
<title>start_thread (92 samples, 32.86%)</title><rect x="802.3" y="1651.0" width="387.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="805.3" y="1662.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (92 samples, 32.86%)</title><rect x="802.3" y="1635.0" width="387.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="805.3" y="1646.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.50%)</title><rect x="802.3" y="1619.0" width="29.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="805.3" y="1630.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.50%)</title><rect x="802.3" y="1603.0" width="29.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="805.3" y="1614.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.14%)</title><rect x="802.3" y="1587.0" width="25.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="805.3" y="1598.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.43%)</title><rect x="802.3" y="1571.0" width="16.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="805.3" y="1582.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.43%)</title><rect x="802.3" y="1555.0" width="16.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.3" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.71%)</title><rect x="810.7" y="1539.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="813.7" y="1550.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.36%)</title><rect x="814.9" y="1523.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="817.9" y="1534.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.36%)</title><rect x="819.1" y="1571.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="822.1" y="1582.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.36%)</title><rect x="823.4" y="1571.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="826.4" y="1582.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="827.6" y="1587.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.6" y="1598.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="827.6" y="1571.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.6" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="827.6" y="1555.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="830.6" y="1566.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.36%)</title><rect x="827.6" y="1539.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="830.6" y="1550.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.36%)</title><rect x="827.6" y="1523.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.6" y="1534.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.36%)</title><rect x="827.6" y="1507.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="830.6" y="1518.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.36%)</title><rect x="827.6" y="1491.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="830.6" y="1502.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.36%)</title><rect x="827.6" y="1475.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="830.6" y="1486.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.36%)</title><rect x="827.6" y="1459.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.6" y="1470.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 30.36%)</title><rect x="831.8" y="1619.0" width="358.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.8" y="1630.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 30.36%)</title><rect x="831.8" y="1603.0" width="358.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="834.8" y="1614.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 30.36%)</title><rect x="831.8" y="1587.0" width="358.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="834.8" y="1598.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 30.36%)</title><rect x="831.8" y="1571.0" width="358.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="834.8" y="1582.0">CompileBroker::invoke_compiler_on_method(CompileT..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 29.29%)</title><rect x="831.8" y="1555.0" width="345.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="834.8" y="1566.0">C2Compiler::compile_method(ciEnv*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 29.29%)</title><rect x="831.8" y="1539.0" width="345.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.8" y="1550.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*..</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 16.07%)</title><rect x="831.8" y="1523.0" width="189.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.8" y="1534.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.36%)</title><rect x="831.8" y="1507.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.8" y="1518.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.36%)</title><rect x="831.8" y="1491.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="834.8" y="1502.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.36%)</title><rect x="831.8" y="1475.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="834.8" y="1486.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.36%)</title><rect x="831.8" y="1459.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="834.8" y="1470.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.36%)</title><rect x="831.8" y="1443.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="834.8" y="1454.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.71%)</title><rect x="836.0" y="1507.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="839.0" y="1518.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.36%)</title><rect x="836.0" y="1491.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="839.0" y="1502.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.36%)</title><rect x="836.0" y="1475.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.0" y="1486.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="836.0" y="1459.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.0" y="1470.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="840.2" y="1491.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="843.2" y="1502.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="840.2" y="1475.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="843.2" y="1486.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.43%)</title><rect x="844.4" y="1507.0" width="16.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="847.4" y="1518.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.43%)</title><rect x="844.4" y="1491.0" width="16.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.4" y="1502.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.07%)</title><rect x="844.4" y="1475.0" width="12.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="847.4" y="1486.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.36%)</title><rect x="857.1" y="1475.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="860.1" y="1486.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.36%)</title><rect x="857.1" y="1459.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.1" y="1470.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.36%)</title><rect x="857.1" y="1443.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="860.1" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.36%)</title><rect x="861.3" y="1507.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="864.3" y="1518.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.36%)</title><rect x="861.3" y="1491.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.3" y="1502.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.36%)</title><rect x="865.5" y="1507.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.5" y="1518.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.36%)</title><rect x="865.5" y="1491.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.5" y="1502.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.36%)</title><rect x="865.5" y="1475.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.5" y="1486.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.36%)</title><rect x="865.5" y="1459.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.5" y="1470.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 12.86%)</title><rect x="869.7" y="1507.0" width="151.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="872.7" y="1518.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.36%)</title><rect x="869.7" y="1491.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="872.7" y="1502.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="873.9" y="1491.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.9" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.71%)</title><rect x="878.1" y="1491.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.1" y="1502.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.36%)</title><rect x="878.1" y="1475.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="881.1" y="1486.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.36%)</title><rect x="882.4" y="1475.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="885.4" y="1486.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.71%)</title><rect x="886.6" y="1491.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.6" y="1502.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.71%)</title><rect x="886.6" y="1475.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.6" y="1486.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="890.8" y="1459.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="893.8" y="1470.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.43%)</title><rect x="895.0" y="1491.0" width="16.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="898.0" y="1502.0"></text>
</g>
<g>
<title>decodeHeapOopNode::rule() const (1 samples, 0.36%)</title><rect x="907.6" y="1475.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.6" y="1486.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.14%)</title><rect x="911.9" y="1491.0" width="25.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.9" y="1502.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="928.7" y="1475.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.7" y="1486.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.36%)</title><rect x="932.9" y="1475.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="935.9" y="1486.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.36%)</title><rect x="937.1" y="1491.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.1" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.36%)</title><rect x="941.4" y="1491.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.4" y="1502.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (12 samples, 4.29%)</title><rect x="945.6" y="1491.0" width="50.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.6" y="1502.0">Phase..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.36%)</title><rect x="945.6" y="1475.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.6" y="1486.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (11 samples, 3.93%)</title><rect x="949.8" y="1475.0" width="46.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.8" y="1486.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (11 samples, 3.93%)</title><rect x="949.8" y="1459.0" width="46.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.8" y="1470.0">Phas..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 1.43%)</title><rect x="954.0" y="1443.0" width="16.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.0" y="1454.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="966.6" y="1427.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.6" y="1438.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.79%)</title><rect x="970.9" y="1443.0" width="21.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.9" y="1454.0">P..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.36%)</title><rect x="991.9" y="1443.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.9" y="1454.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.36%)</title><rect x="996.1" y="1491.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.1" y="1502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="996.1" y="1475.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.1" y="1486.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.36%)</title><rect x="1000.4" y="1491.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1003.4" y="1502.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.07%)</title><rect x="1004.6" y="1491.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.6" y="1502.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="1013.0" y="1475.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.0" y="1486.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.36%)</title><rect x="1013.0" y="1459.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.0" y="1470.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.36%)</title><rect x="1013.0" y="1443.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.0" y="1454.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.36%)</title><rect x="1017.2" y="1491.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.2" y="1502.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 11.43%)</title><rect x="1021.4" y="1523.0" width="134.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1534.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.36%)</title><rect x="1021.4" y="1507.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.36%)</title><rect x="1021.4" y="1491.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1475.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1459.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1443.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1427.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1411.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1395.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1379.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1363.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1347.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1331.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1315.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1299.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1283.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1267.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1251.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1235.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1219.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1203.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1187.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1171.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1155.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1139.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1123.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1107.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1091.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1075.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1059.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1043.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1027.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="1011.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="995.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="979.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="963.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="947.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="931.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="915.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="899.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="883.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="867.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="851.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="835.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="819.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="803.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="787.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="771.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="755.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="739.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="723.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="707.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="691.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="675.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="659.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="643.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="627.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="611.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="595.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="579.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="563.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="547.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="531.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="515.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="499.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="483.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="467.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="451.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="435.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="419.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="403.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="387.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="371.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="355.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="339.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="323.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="307.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="291.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="275.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="259.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="243.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="227.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.4" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="211.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="195.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.4" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="179.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="163.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="147.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="131.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.4" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="115.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.4" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="99.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.4" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="83.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.4" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="67.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.4" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1021.4" y="51.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.4" y="62.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.36%)</title><rect x="1021.4" y="35.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.4" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.36%)</title><rect x="1025.6" y="1507.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.6" y="1518.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.36%)</title><rect x="1029.9" y="1507.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1032.9" y="1518.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.36%)</title><rect x="1029.9" y="1491.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1032.9" y="1502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (27 samples, 9.64%)</title><rect x="1034.1" y="1507.0" width="113.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.1" y="1518.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.71%)</title><rect x="1034.1" y="1491.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.1" y="1502.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.36%)</title><rect x="1038.3" y="1475.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.3" y="1486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.43%)</title><rect x="1042.5" y="1491.0" width="16.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.5" y="1502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.36%)</title><rect x="1055.1" y="1475.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.1" y="1486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 7.50%)</title><rect x="1059.4" y="1491.0" width="88.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.4" y="1502.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 7.14%)</title><rect x="1063.6" y="1475.0" width="84.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.6" y="1486.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1067.8" y="1459.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.8" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 6.43%)</title><rect x="1072.0" y="1459.0" width="75.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.0" y="1470.0">PhaseIde..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.36%)</title><rect x="1126.8" y="1443.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.8" y="1454.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="1126.8" y="1427.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1129.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.43%)</title><rect x="1131.0" y="1443.0" width="16.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.0" y="1454.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.71%)</title><rect x="1147.9" y="1507.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.9" y="1518.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.71%)</title><rect x="1147.9" y="1491.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="1502.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1147.9" y="1475.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.9" y="1486.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1152.1" y="1475.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="1486.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1152.1" y="1459.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="1470.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.36%)</title><rect x="1152.1" y="1443.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.1" y="1454.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.36%)</title><rect x="1152.1" y="1427.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.79%)</title><rect x="1156.3" y="1523.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="1534.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.79%)</title><rect x="1156.3" y="1507.0" width="21.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.3" y="1518.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.79%)</title><rect x="1156.3" y="1491.0" width="21.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="1502.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.79%)</title><rect x="1156.3" y="1475.0" width="21.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.3" y="1486.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.79%)</title><rect x="1156.3" y="1459.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="1470.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.79%)</title><rect x="1156.3" y="1443.0" width="21.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="1454.0">P..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.36%)</title><rect x="1156.3" y="1427.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="1438.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.36%)</title><rect x="1156.3" y="1411.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.3" y="1422.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.36%)</title><rect x="1156.3" y="1395.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.3" y="1406.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1156.3" y="1379.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.3" y="1390.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.36%)</title><rect x="1156.3" y="1363.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="1374.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.36%)</title><rect x="1156.3" y="1347.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="1358.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1156.3" y="1331.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="1342.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.36%)</title><rect x="1156.3" y="1315.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.3" y="1326.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1156.3" y="1299.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.3" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.07%)</title><rect x="1160.5" y="1427.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.07%)</title><rect x="1160.5" y="1411.0" width="12.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.07%)</title><rect x="1160.5" y="1395.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.07%)</title><rect x="1160.5" y="1379.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.07%)</title><rect x="1160.5" y="1363.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.07%)</title><rect x="1160.5" y="1347.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.5" y="1331.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.5" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.5" y="1315.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.5" y="1299.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.5" y="1283.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.5" y="1267.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.5" y="1251.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.5" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.5" y="1235.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.5" y="1219.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.5" y="1203.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.5" y="1187.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.5" y="1171.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.5" y="1155.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.5" y="1139.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.5" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.5" y="1123.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.5" y="1107.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.5" y="1091.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.5" y="1075.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.5" y="1059.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.5" y="1043.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.5" y="1027.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.5" y="1011.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.5" y="995.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.5" y="979.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.5" y="963.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.5" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.5" y="947.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.5" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.5" y="931.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.5" y="915.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.5" y="899.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.5" y="883.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1160.5" y="867.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.5" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1160.5" y="851.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1160.5" y="835.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1160.5" y="819.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1160.5" y="803.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1160.5" y="787.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="771.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="755.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.5" y="766.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.36%)</title><rect x="1160.5" y="739.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="723.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.5" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.36%)</title><rect x="1160.5" y="707.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.5" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="691.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.5" y="702.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="675.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.5" y="686.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1160.5" y="659.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.5" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1164.7" y="1331.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1164.7" y="1315.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1164.7" y="1299.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1164.7" y="1283.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1164.7" y="1267.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1164.7" y="1251.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1164.7" y="1235.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1164.7" y="1219.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1164.7" y="1203.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1164.7" y="1187.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1164.7" y="1171.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1164.7" y="1155.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1164.7" y="1139.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="1150.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1164.7" y="1123.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.7" y="1134.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1164.7" y="1107.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.7" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1164.7" y="1091.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1164.7" y="1075.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1164.7" y="1059.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1164.7" y="1043.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1164.7" y="1027.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.7" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1164.7" y="1011.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.36%)</title><rect x="1164.7" y="995.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1164.7" y="979.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.7" y="963.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.7" y="947.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.7" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1164.7" y="931.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1164.7" y="915.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.7" y="926.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1164.7" y="899.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.36%)</title><rect x="1164.7" y="883.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="894.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.36%)</title><rect x="1164.7" y="867.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="1123.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="1107.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="1091.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="1075.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="1059.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="1043.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="1027.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="1011.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="995.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="979.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="963.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="947.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="931.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="915.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="899.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="883.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="867.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="851.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="835.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="819.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="803.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="787.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="771.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="755.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="739.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1168.9" y="723.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1168.9" y="707.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1168.9" y="691.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1168.9" y="675.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1168.9" y="659.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1168.9" y="643.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1168.9" y="627.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1168.9" y="611.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1168.9" y="595.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1168.9" y="579.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1168.9" y="563.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1168.9" y="547.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1168.9" y="531.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1168.9" y="515.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1168.9" y="499.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.36%)</title><rect x="1168.9" y="483.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.9" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1168.9" y="467.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1168.9" y="451.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.36%)</title><rect x="1168.9" y="435.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.36%)</title><rect x="1168.9" y="419.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.36%)</title><rect x="1168.9" y="403.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1173.1" y="1427.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.1" y="1438.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1173.1" y="1411.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.1" y="1422.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1173.1" y="1395.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="1406.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1173.1" y="1379.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="1390.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.36%)</title><rect x="1173.1" y="1363.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.1" y="1374.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.36%)</title><rect x="1173.1" y="1347.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.1" y="1358.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.36%)</title><rect x="1173.1" y="1331.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="1342.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.36%)</title><rect x="1173.1" y="1315.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.1" y="1326.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.36%)</title><rect x="1173.1" y="1299.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.1" y="1310.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.71%)</title><rect x="1177.4" y="1555.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="1566.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.71%)</title><rect x="1177.4" y="1539.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="1550.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.71%)</title><rect x="1177.4" y="1523.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="1534.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.71%)</title><rect x="1177.4" y="1507.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="1518.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.71%)</title><rect x="1177.4" y="1491.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="1502.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.71%)</title><rect x="1177.4" y="1475.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="1486.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.36%)</title><rect x="1177.4" y="1459.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="1470.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.36%)</title><rect x="1177.4" y="1443.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="1454.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1177.4" y="1427.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="1438.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1177.4" y="1411.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="1422.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.36%)</title><rect x="1177.4" y="1395.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="1406.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.36%)</title><rect x="1181.6" y="1459.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="1470.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.36%)</title><rect x="1185.8" y="1555.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="1566.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.36%)</title><rect x="1185.8" y="1539.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="1550.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.36%)</title><rect x="1185.8" y="1523.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="1534.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.36%)</title><rect x="1185.8" y="1507.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="1518.0"></text>
</g>
</g>
</svg>
