<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (106 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (9 samples, 8.49%)</title><rect x="10.0" y="755.0" width="100.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.94%)</title><rect x="10.0" y="739.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.94%)</title><rect x="10.0" y="723.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.94%)</title><rect x="10.0" y="707.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (8 samples, 7.55%)</title><rect x="21.1" y="739.0" width="89.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.1" y="750.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.94%)</title><rect x="21.1" y="723.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.94%)</title><rect x="21.1" y="707.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.94%)</title><rect x="21.1" y="691.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.1" y="702.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.94%)</title><rect x="21.1" y="675.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 6.60%)</title><rect x="32.3" y="723.0" width="77.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.3" y="734.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 6.60%)</title><rect x="32.3" y="707.0" width="77.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.3" y="718.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 4.72%)</title><rect x="32.3" y="691.0" width="55.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.3" y="702.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 3.77%)</title><rect x="32.3" y="675.0" width="44.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.3" y="686.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 3.77%)</title><rect x="32.3" y="659.0" width="44.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.3" y="670.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 3.77%)</title><rect x="32.3" y="643.0" width="44.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.3" y="654.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.94%)</title><rect x="32.3" y="627.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.94%)</title><rect x="32.3" y="611.0" width="11.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.94%)</title><rect x="32.3" y="595.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getStruct (1 samples, 0.94%)</title><rect x="32.3" y="579.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.3" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.94%)</title><rect x="32.3" y="563.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="35.3" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.94%)</title><rect x="32.3" y="547.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="35.3" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.94%)</title><rect x="32.3" y="531.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="35.3" y="542.0"></text>
</g>
<g>
<title>CompiledIC::CompiledIC(nmethod*, NativeCall*) (1 samples, 0.94%)</title><rect x="32.3" y="515.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="35.3" y="526.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.94%)</title><rect x="32.3" y="499.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="35.3" y="510.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.94%)</title><rect x="32.3" y="483.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="35.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 2.83%)</title><rect x="43.4" y="627.0" width="33.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.4" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 2.83%)</title><rect x="43.4" y="611.0" width="33.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.4" y="622.0">or..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 2.83%)</title><rect x="43.4" y="595.0" width="33.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.4" y="606.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 2.83%)</title><rect x="43.4" y="579.0" width="33.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.4" y="590.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (3 samples, 2.83%)</title><rect x="43.4" y="563.0" width="33.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.4" y="574.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (2 samples, 1.89%)</title><rect x="43.4" y="547.0" width="22.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.4" y="558.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (2 samples, 1.89%)</title><rect x="43.4" y="531.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.4" y="542.0">s..</text>
</g>
<g>
<title>kevent (2 samples, 1.89%)</title><rect x="43.4" y="515.0" width="22.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="46.4" y="526.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.updateSelectedKeys (1 samples, 0.94%)</title><rect x="65.7" y="547.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.94%)</title><rect x="65.7" y="531.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.94%)</title><rect x="65.7" y="515.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.94%)</title><rect x="65.7" y="499.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.94%)</title><rect x="76.8" y="675.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.94%)</title><rect x="76.8" y="659.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.94%)</title><rect x="76.8" y="643.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.94%)</title><rect x="76.8" y="627.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.94%)</title><rect x="76.8" y="611.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.94%)</title><rect x="76.8" y="595.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.94%)</title><rect x="76.8" y="579.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.8" y="590.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.94%)</title><rect x="76.8" y="563.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.8" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.94%)</title><rect x="76.8" y="547.0" width="11.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="79.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.94%)</title><rect x="87.9" y="691.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.94%)</title><rect x="87.9" y="675.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.94%)</title><rect x="87.9" y="659.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.94%)</title><rect x="87.9" y="643.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.94%)</title><rect x="87.9" y="627.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.94%)</title><rect x="87.9" y="611.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.94%)</title><rect x="87.9" y="595.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.94%)</title><rect x="87.9" y="579.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.94%)</title><rect x="87.9" y="563.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.94%)</title><rect x="87.9" y="547.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.9" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.94%)</title><rect x="87.9" y="531.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$236/1474365761.get (1 samples, 0.94%)</title><rect x="87.9" y="515.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.94%)</title><rect x="99.1" y="691.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.94%)</title><rect x="99.1" y="675.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.94%)</title><rect x="99.1" y="659.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.94%)</title><rect x="99.1" y="643.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.94%)</title><rect x="99.1" y="627.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.94%)</title><rect x="99.1" y="611.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.94%)</title><rect x="99.1" y="595.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.94%)</title><rect x="99.1" y="579.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.94%)</title><rect x="99.1" y="563.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.94%)</title><rect x="99.1" y="547.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.94%)</title><rect x="99.1" y="531.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.94%)</title><rect x="99.1" y="515.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.94%)</title><rect x="99.1" y="499.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.94%)</title><rect x="99.1" y="483.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.94%)</title><rect x="99.1" y="467.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.94%)</title><rect x="99.1" y="451.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.94%)</title><rect x="99.1" y="435.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.94%)</title><rect x="99.1" y="419.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.1" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (65 samples, 61.32%)</title><rect x="110.2" y="755.0" width="723.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.2" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (65 samples, 61.32%)</title><rect x="110.2" y="739.0" width="723.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.2" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (65 samples, 61.32%)</title><rect x="110.2" y="723.0" width="723.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.2" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/1256368528.run (65 samples, 61.32%)</title><rect x="110.2" y="707.0" width="723.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.2" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/1256368528.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (65 samples, 61.32%)</title><rect x="110.2" y="691.0" width="723.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.2" y="702.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (65 samples, 61.32%)</title><rect x="110.2" y="675.0" width="723.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.2" y="686.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (65 samples, 61.32%)</title><rect x="110.2" y="659.0" width="723.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.2" y="670.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (64 samples, 60.38%)</title><rect x="121.3" y="643.0" width="712.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.3" y="654.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 1.89%)</title><rect x="121.3" y="627.0" width="22.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.3" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.94%)</title><rect x="121.3" y="611.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.94%)</title><rect x="121.3" y="595.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.94%)</title><rect x="121.3" y="579.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.3" y="590.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.94%)</title><rect x="132.5" y="611.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="135.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (62 samples, 58.49%)</title><rect x="143.6" y="627.0" width="690.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.6" y="638.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (62 samples, 58.49%)</title><rect x="143.6" y="611.0" width="690.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.6" y="622.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process (61 samples, 57.55%)</title><rect x="154.7" y="595.0" width="679.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.7" y="606.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (61 samples, 57.55%)</title><rect x="154.7" y="579.0" width="679.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.7" y="590.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (61 samples, 57.55%)</title><rect x="154.7" y="563.0" width="679.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.7" y="574.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (61 samples, 57.55%)</title><rect x="154.7" y="547.0" width="679.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.7" y="558.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (61 samples, 57.55%)</title><rect x="154.7" y="531.0" width="679.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.7" y="542.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (61 samples, 57.55%)</title><rect x="154.7" y="515.0" width="679.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="157.7" y="526.0">JVM_Sleep</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (61 samples, 57.55%)</title><rect x="154.7" y="499.0" width="679.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.7" y="510.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>JavaThread::check_and_wait_while_suspended() (1 samples, 0.94%)</title><rect x="154.7" y="483.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="157.7" y="494.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.94%)</title><rect x="154.7" y="467.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="157.7" y="478.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (60 samples, 56.60%)</title><rect x="165.8" y="483.0" width="668.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="168.8" y="494.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__psynch_cvwait (59 samples, 55.66%)</title><rect x="165.8" y="467.0" width="656.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="168.8" y="478.0">__psynch_cvwait</text>
</g>
<g>
<title>pthread_cond_destroy (1 samples, 0.94%)</title><rect x="822.6" y="467.0" width="11.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="825.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.94%)</title><rect x="833.8" y="755.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.94%)</title><rect x="833.8" y="739.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.8" y="750.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.94%)</title><rect x="833.8" y="723.0" width="11.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="836.8" y="734.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.94%)</title><rect x="833.8" y="707.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="836.8" y="718.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.94%)</title><rect x="833.8" y="691.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.8" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.94%)</title><rect x="833.8" y="675.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.8" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.94%)</title><rect x="833.8" y="659.0" width="11.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="836.8" y="670.0"></text>
</g>
<g>
<title>thread_start (31 samples, 29.25%)</title><rect x="844.9" y="755.0" width="345.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="847.9" y="766.0">thread_start</text>
</g>
<g>
<title>_pthread_start (31 samples, 29.25%)</title><rect x="844.9" y="739.0" width="345.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="847.9" y="750.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (31 samples, 29.25%)</title><rect x="844.9" y="723.0" width="345.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="847.9" y="734.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (31 samples, 29.25%)</title><rect x="844.9" y="707.0" width="345.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="847.9" y="718.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (30 samples, 28.30%)</title><rect x="844.9" y="691.0" width="334.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.9" y="702.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (30 samples, 28.30%)</title><rect x="844.9" y="675.0" width="334.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="847.9" y="686.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (27 samples, 25.47%)</title><rect x="844.9" y="659.0" width="300.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="847.9" y="670.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (20 samples, 18.87%)</title><rect x="844.9" y="643.0" width="222.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="847.9" y="654.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (17 samples, 16.04%)</title><rect x="844.9" y="627.0" width="189.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="847.9" y="638.0">C2Compiler::compile_metho..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (17 samples, 16.04%)</title><rect x="844.9" y="611.0" width="189.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="847.9" y="622.0">Compile::Compile(ciEnv*, ..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.94%)</title><rect x="844.9" y="595.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="847.9" y="606.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.94%)</title><rect x="844.9" y="579.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.9" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.94%)</title><rect x="844.9" y="563.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="847.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.94%)</title><rect x="844.9" y="547.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.94%)</title><rect x="844.9" y="531.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="847.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.94%)</title><rect x="844.9" y="515.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="847.9" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 7.55%)</title><rect x="856.0" y="595.0" width="89.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.0" y="606.0">Compile::C..</text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.94%)</title><rect x="856.0" y="579.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="859.0" y="590.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.94%)</title><rect x="856.0" y="563.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="859.0" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.94%)</title><rect x="867.2" y="579.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.2" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.94%)</title><rect x="867.2" y="563.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="870.2" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.94%)</title><rect x="867.2" y="547.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.2" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.94%)</title><rect x="878.3" y="579.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="881.3" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (1 samples, 0.94%)</title><rect x="878.3" y="563.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="881.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (5 samples, 4.72%)</title><rect x="889.4" y="579.0" width="55.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="892.4" y="590.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.94%)</title><rect x="889.4" y="563.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.4" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.94%)</title><rect x="889.4" y="547.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.4" y="558.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.94%)</title><rect x="889.4" y="531.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="892.4" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.94%)</title><rect x="900.6" y="563.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.94%)</title><rect x="911.7" y="563.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.94%)</title><rect x="911.7" y="547.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="914.7" y="558.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.94%)</title><rect x="911.7" y="531.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.7" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.94%)</title><rect x="922.8" y="563.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="925.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.94%)</title><rect x="922.8" y="547.0" width="11.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="925.8" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.94%)</title><rect x="934.0" y="563.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="937.0" y="574.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.94%)</title><rect x="934.0" y="547.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.0" y="558.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 2.83%)</title><rect x="945.1" y="595.0" width="33.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.1" y="606.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.94%)</title><rect x="945.1" y="579.0" width="11.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.94%)</title><rect x="945.1" y="563.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="547.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="531.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="948.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="515.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="499.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="948.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="483.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="467.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="451.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="435.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="419.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="403.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="387.0" width="11.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="371.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="355.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="339.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="323.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="948.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="307.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="291.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="275.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="259.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="948.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="243.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="227.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="211.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="195.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="179.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="163.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="147.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.94%)</title><rect x="945.1" y="131.0" width="11.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.1" y="142.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.94%)</title><rect x="945.1" y="115.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.1" y="126.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (1 samples, 0.94%)</title><rect x="945.1" y="99.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.1" y="110.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.94%)</title><rect x="945.1" y="83.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.1" y="94.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.94%)</title><rect x="945.1" y="67.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.1" y="78.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 1.89%)</title><rect x="956.2" y="579.0" width="22.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="959.2" y="590.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.89%)</title><rect x="956.2" y="563.0" width="22.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.2" y="574.0">P..</text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.94%)</title><rect x="967.4" y="547.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="970.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.83%)</title><rect x="978.5" y="595.0" width="33.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.5" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.83%)</title><rect x="978.5" y="579.0" width="33.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.5" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.83%)</title><rect x="978.5" y="563.0" width="33.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.5" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.83%)</title><rect x="978.5" y="547.0" width="33.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.5" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.83%)</title><rect x="978.5" y="531.0" width="33.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.5" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 2.83%)</title><rect x="978.5" y="515.0" width="33.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.5" y="526.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.94%)</title><rect x="978.5" y="499.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.5" y="510.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.94%)</title><rect x="978.5" y="483.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.5" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.94%)</title><rect x="978.5" y="467.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.5" y="478.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.94%)</title><rect x="978.5" y="451.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.89%)</title><rect x="989.6" y="499.0" width="22.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.6" y="510.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.89%)</title><rect x="989.6" y="483.0" width="22.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.6" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.89%)</title><rect x="989.6" y="467.0" width="22.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.6" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.89%)</title><rect x="989.6" y="451.0" width="22.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.6" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.89%)</title><rect x="989.6" y="435.0" width="22.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.6" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.89%)</title><rect x="989.6" y="419.0" width="22.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.6" y="430.0">P..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.94%)</title><rect x="989.6" y="403.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.94%)</title><rect x="989.6" y="387.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.94%)</title><rect x="989.6" y="371.0" width="11.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.94%)</title><rect x="989.6" y="355.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.94%)</title><rect x="989.6" y="339.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.94%)</title><rect x="989.6" y="323.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.94%)</title><rect x="989.6" y="307.0" width="11.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.6" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.94%)</title><rect x="989.6" y="291.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.6" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.94%)</title><rect x="989.6" y="275.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.6" y="286.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.94%)</title><rect x="989.6" y="259.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.6" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.94%)</title><rect x="989.6" y="243.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.6" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.94%)</title><rect x="989.6" y="227.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.6" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.94%)</title><rect x="989.6" y="211.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.6" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.94%)</title><rect x="989.6" y="195.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.6" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.94%)</title><rect x="989.6" y="179.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.6" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.94%)</title><rect x="989.6" y="163.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.6" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.94%)</title><rect x="989.6" y="147.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.6" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.94%)</title><rect x="989.6" y="131.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.6" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.94%)</title><rect x="989.6" y="115.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.6" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.94%)</title><rect x="989.6" y="99.0" width="11.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.6" y="110.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.94%)</title><rect x="989.6" y="83.0" width="11.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.6" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.94%)</title><rect x="989.6" y="67.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.6" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.94%)</title><rect x="989.6" y="51.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.6" y="62.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.94%)</title><rect x="989.6" y="35.0" width="11.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.6" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.94%)</title><rect x="1000.8" y="403.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.8" y="414.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.94%)</title><rect x="1011.9" y="595.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1014.9" y="606.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.94%)</title><rect x="1011.9" y="579.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.9" y="590.0"></text>
</g>
<g>
<title>Unique_Node_List::member(Node*) (1 samples, 0.94%)</title><rect x="1011.9" y="563.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.9" y="574.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.94%)</title><rect x="1023.0" y="595.0" width="11.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.0" y="606.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.94%)</title><rect x="1023.0" y="579.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.0" y="590.0"></text>
</g>
<g>
<title>ProfileData::translate_from(ProfileData const*) (1 samples, 0.94%)</title><rect x="1023.0" y="563.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1026.0" y="574.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 2.83%)</title><rect x="1034.2" y="627.0" width="33.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.2" y="638.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 2.83%)</title><rect x="1034.2" y="611.0" width="33.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.2" y="622.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 2.83%)</title><rect x="1034.2" y="595.0" width="33.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.2" y="606.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.89%)</title><rect x="1034.2" y="579.0" width="22.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.2" y="590.0">C..</text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.94%)</title><rect x="1034.2" y="563.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1037.2" y="574.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.94%)</title><rect x="1034.2" y="547.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.2" y="558.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.94%)</title><rect x="1034.2" y="531.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.2" y="542.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (1 samples, 0.94%)</title><rect x="1034.2" y="515.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.2" y="526.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.94%)</title><rect x="1034.2" y="499.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1037.2" y="510.0"></text>
</g>
<g>
<title>LIRGenerator::invoke_visit_arguments(Invoke*) (1 samples, 0.94%)</title><rect x="1034.2" y="483.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.2" y="494.0"></text>
</g>
<g>
<title>LIRItem::set_instruction(Instruction*) (1 samples, 0.94%)</title><rect x="1034.2" y="467.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.2" y="478.0"></text>
</g>
<g>
<title>LIRGenerator::walk(Instruction*) (1 samples, 0.94%)</title><rect x="1034.2" y="451.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.2" y="462.0"></text>
</g>
<g>
<title>LIRGenerator::do_Constant(Constant*) (1 samples, 0.94%)</title><rect x="1034.2" y="435.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.2" y="446.0"></text>
</g>
<g>
<title>LIRGenerator::load_constant(Constant*) (1 samples, 0.94%)</title><rect x="1034.2" y="419.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.2" y="430.0"></text>
</g>
<g>
<title>LIR_Const::as_constant() (1 samples, 0.94%)</title><rect x="1034.2" y="403.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.2" y="414.0"></text>
</g>
<g>
<title>FrameMap::FrameMap(ciMethod*, int, int) (1 samples, 0.94%)</title><rect x="1045.3" y="563.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.3" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int) (1 samples, 0.94%)</title><rect x="1045.3" y="547.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.3" y="558.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.94%)</title><rect x="1056.4" y="579.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.4" y="590.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.94%)</title><rect x="1056.4" y="563.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.4" y="574.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.94%)</title><rect x="1056.4" y="547.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.4" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.94%)</title><rect x="1056.4" y="531.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.4" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.94%)</title><rect x="1056.4" y="515.0" width="11.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1059.4" y="526.0"></text>
</g>
<g>
<title>CompileQueue::get() (7 samples, 6.60%)</title><rect x="1067.5" y="643.0" width="78.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.5" y="654.0">CompileQu..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 6.60%)</title><rect x="1067.5" y="627.0" width="78.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.5" y="638.0">Monitor::..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 6.60%)</title><rect x="1067.5" y="611.0" width="78.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.5" y="622.0">Monitor::..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 6.60%)</title><rect x="1067.5" y="595.0" width="78.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.5" y="606.0">os::Platf..</text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 6.60%)</title><rect x="1067.5" y="579.0" width="78.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1070.5" y="590.0">__psynch_..</text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 1.89%)</title><rect x="1145.5" y="659.0" width="22.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.5" y="670.0">S..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 1.89%)</title><rect x="1145.5" y="643.0" width="22.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.5" y="654.0">M..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 1.89%)</title><rect x="1145.5" y="627.0" width="22.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.5" y="638.0">M..</text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 1.89%)</title><rect x="1145.5" y="611.0" width="22.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1148.5" y="622.0">P..</text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 1.89%)</title><rect x="1145.5" y="595.0" width="22.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.5" y="606.0">o..</text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 1.89%)</title><rect x="1145.5" y="579.0" width="22.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1148.5" y="590.0">_..</text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.94%)</title><rect x="1167.7" y="659.0" width="11.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1170.7" y="670.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.94%)</title><rect x="1167.7" y="643.0" width="11.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.7" y="654.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.94%)</title><rect x="1167.7" y="627.0" width="11.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1170.7" y="638.0"></text>
</g>
<g>
<title>GCC_except_table15 (1 samples, 0.94%)</title><rect x="1167.7" y="611.0" width="11.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1170.7" y="622.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.94%)</title><rect x="1167.7" y="595.0" width="11.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1170.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="579.0" width="11.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1170.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="563.0" width="11.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1170.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="547.0" width="11.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1170.7" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="531.0" width="11.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1170.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="515.0" width="11.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1170.7" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="499.0" width="11.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1170.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="483.0" width="11.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1170.7" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.94%)</title><rect x="1167.7" y="467.0" width="11.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1170.7" y="478.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.94%)</title><rect x="1178.9" y="691.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.94%)</title><rect x="1178.9" y="675.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.94%)</title><rect x="1178.9" y="659.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.94%)</title><rect x="1178.9" y="643.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.94%)</title><rect x="1178.9" y="627.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.94%)</title><rect x="1178.9" y="611.0" width="11.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
</g>
</svg>
