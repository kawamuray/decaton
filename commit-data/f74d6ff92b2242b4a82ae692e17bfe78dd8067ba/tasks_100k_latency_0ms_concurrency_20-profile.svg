<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (420 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (180 samples, 42.86%)</title><rect x="10.0" y="1171.0" width="505.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (180 samples, 42.86%)</title><rect x="10.0" y="1155.0" width="505.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.24%)</title><rect x="10.0" y="1139.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.24%)</title><rect x="10.0" y="1123.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1046411994.accept (1 samples, 0.24%)</title><rect x="10.0" y="1107.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.24%)</title><rect x="10.0" y="1091.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.24%)</title><rect x="10.0" y="1075.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.24%)</title><rect x="10.0" y="1059.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (163 samples, 38.81%)</title><rect x="12.8" y="1139.0" width="458.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.8" y="1150.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1821689375.accept (162 samples, 38.57%)</title><rect x="12.8" y="1123.0" width="455.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (162 samples, 38.57%)</title><rect x="12.8" y="1107.0" width="455.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.8" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (157 samples, 37.38%)</title><rect x="18.4" y="1091.0" width="441.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.4" y="1102.0">com/linecorp/decaton/processor/runtime/PartitionContext.addRe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (157 samples, 37.38%)</title><rect x="18.4" y="1075.0" width="441.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.4" y="1086.0">com/linecorp/decaton/processor/runtime/PartitionProcessor.add..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (157 samples, 37.38%)</title><rect x="18.4" y="1059.0" width="441.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.4" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (157 samples, 37.38%)</title><rect x="18.4" y="1043.0" width="441.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="1054.0">java/util/concurrent/Executors$DelegatedExecutorService.execute</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (157 samples, 37.38%)</title><rect x="18.4" y="1027.0" width="441.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.4" y="1038.0">java/util/concurrent/ThreadPoolExecutor.execute</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (156 samples, 37.14%)</title><rect x="21.2" y="1011.0" width="438.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.2" y="1022.0">java/util/concurrent/LinkedBlockingQueue.offer</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (156 samples, 37.14%)</title><rect x="21.2" y="995.0" width="438.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.2" y="1006.0">java/util/concurrent/LinkedBlockingQueue.signalNotEmpty</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (156 samples, 37.14%)</title><rect x="21.2" y="979.0" width="438.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.2" y="990.0">java/util/concurrent/locks/ReentrantLock.unlock</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (156 samples, 37.14%)</title><rect x="21.2" y="963.0" width="438.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.2" y="974.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.release</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (156 samples, 37.14%)</title><rect x="21.2" y="947.0" width="438.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.2" y="958.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.unpark..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (156 samples, 37.14%)</title><rect x="21.2" y="931.0" width="438.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.2" y="942.0">java/util/concurrent/locks/LockSupport.unpark</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (156 samples, 37.14%)</title><rect x="21.2" y="915.0" width="438.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.2" y="926.0">sun/misc/Unsafe.unpark</text>
</g>
<g>
<title>Unsafe_Unpark (146 samples, 34.76%)</title><rect x="46.5" y="899.0" width="410.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="49.5" y="910.0">Unsafe_Unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.24%)</title><rect x="46.5" y="883.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="49.5" y="894.0"></text>
</g>
<g>
<title>Parker::unpark() (66 samples, 15.71%)</title><rect x="49.3" y="883.0" width="185.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="52.3" y="894.0">Parker::unpark()</text>
</g>
<g>
<title>__psynch_cvsignal (65 samples, 15.48%)</title><rect x="49.3" y="867.0" width="182.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="52.3" y="878.0">__psynch_cvsignal</text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.24%)</title><rect x="232.0" y="867.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="235.0" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.24%)</title><rect x="234.8" y="883.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="237.8" y="894.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (78 samples, 18.57%)</title><rect x="237.6" y="883.0" width="219.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="240.6" y="894.0">_pthread_mutex_firstfit_unloc..</text>
</g>
<g>
<title>__psynch_mutexdrop (78 samples, 18.57%)</title><rect x="237.6" y="867.0" width="219.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="240.6" y="878.0">__psynch_mutexdrop</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.24%)</title><rect x="456.7" y="899.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="459.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 0.71%)</title><rect x="459.5" y="1091.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.71%)</title><rect x="459.5" y="1075.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.71%)</title><rect x="459.5" y="1059.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.48%)</title><rect x="462.3" y="1043.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.48%)</title><rect x="462.3" y="1027.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.24%)</title><rect x="468.0" y="1123.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.24%)</title><rect x="468.0" y="1107.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.24%)</title><rect x="468.0" y="1091.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="471.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.24%)</title><rect x="468.0" y="1075.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.24%)</title><rect x="468.0" y="1059.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.24%)</title><rect x="468.0" y="1043.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.81%)</title><rect x="470.8" y="1139.0" width="44.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="473.8" y="1150.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.81%)</title><rect x="470.8" y="1123.0" width="44.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.8" y="1134.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 2.14%)</title><rect x="470.8" y="1107.0" width="25.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.8" y="1118.0">o..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.24%)</title><rect x="470.8" y="1091.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.24%)</title><rect x="473.6" y="1091.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.24%)</title><rect x="473.6" y="1075.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.6" y="1086.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.24%)</title><rect x="473.6" y="1059.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="476.6" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.24%)</title><rect x="473.6" y="1043.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="476.6" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.24%)</title><rect x="473.6" y="1027.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="476.6" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.24%)</title><rect x="473.6" y="1011.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="476.6" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.24%)</title><rect x="473.6" y="995.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="476.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.24%)</title><rect x="476.4" y="1091.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.24%)</title><rect x="476.4" y="1075.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.24%)</title><rect x="476.4" y="1059.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 1.43%)</title><rect x="479.2" y="1091.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.43%)</title><rect x="479.2" y="1075.0" width="16.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 0.95%)</title><rect x="479.2" y="1059.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 0.95%)</title><rect x="479.2" y="1043.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.48%)</title><rect x="479.2" y="1027.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.24%)</title><rect x="479.2" y="1011.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.24%)</title><rect x="479.2" y="995.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.24%)</title><rect x="482.0" y="1011.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.24%)</title><rect x="482.0" y="995.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.24%)</title><rect x="482.0" y="979.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.24%)</title><rect x="482.0" y="963.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="485.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.24%)</title><rect x="482.0" y="947.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.24%)</title><rect x="482.0" y="931.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="485.0" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.24%)</title><rect x="482.0" y="915.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.48%)</title><rect x="484.8" y="1027.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="487.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.48%)</title><rect x="484.8" y="1011.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.24%)</title><rect x="484.8" y="995.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.24%)</title><rect x="484.8" y="979.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="487.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.24%)</title><rect x="487.6" y="995.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="490.6" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.24%)</title><rect x="487.6" y="979.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="490.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.24%)</title><rect x="490.4" y="1059.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.24%)</title><rect x="490.4" y="1043.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.24%)</title><rect x="490.4" y="1027.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.24%)</title><rect x="490.4" y="1011.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.24%)</title><rect x="490.4" y="995.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="493.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.24%)</title><rect x="490.4" y="979.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.24%)</title><rect x="490.4" y="963.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.24%)</title><rect x="493.2" y="1059.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.24%)</title><rect x="493.2" y="1043.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.24%)</title><rect x="493.2" y="1027.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.24%)</title><rect x="493.2" y="1011.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.48%)</title><rect x="496.0" y="1107.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.24%)</title><rect x="496.0" y="1091.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.24%)</title><rect x="496.0" y="1075.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.24%)</title><rect x="496.0" y="1059.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.24%)</title><rect x="496.0" y="1043.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.24%)</title><rect x="496.0" y="1027.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.24%)</title><rect x="496.0" y="1011.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="499.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.24%)</title><rect x="496.0" y="995.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.24%)</title><rect x="498.9" y="1091.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.24%)</title><rect x="498.9" y="1075.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.9" y="1086.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.24%)</title><rect x="498.9" y="1059.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="501.9" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.24%)</title><rect x="498.9" y="1043.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="501.9" y="1054.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.24%)</title><rect x="498.9" y="1027.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.9" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.24%)</title><rect x="498.9" y="1011.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="501.9" y="1022.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.24%)</title><rect x="498.9" y="995.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.9" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.24%)</title><rect x="498.9" y="979.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="501.9" y="990.0"></text>
</g>
<g>
<title>ConstantPool::resolve_string_constants(Thread*) (1 samples, 0.24%)</title><rect x="498.9" y="963.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="501.9" y="974.0"></text>
</g>
<g>
<title>ConstantPool::resolve_string_constants_impl(constantPoolHandle, Thread*) (1 samples, 0.24%)</title><rect x="498.9" y="947.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="501.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.71%)</title><rect x="501.7" y="1107.0" width="8.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="504.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.71%)</title><rect x="501.7" y="1091.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.71%)</title><rect x="501.7" y="1075.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.48%)</title><rect x="501.7" y="1059.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="504.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.24%)</title><rect x="501.7" y="1043.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.24%)</title><rect x="501.7" y="1027.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.24%)</title><rect x="501.7" y="1011.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.24%)</title><rect x="501.7" y="995.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="504.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.24%)</title><rect x="501.7" y="979.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.7" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.24%)</title><rect x="501.7" y="963.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.24%)</title><rect x="501.7" y="947.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.24%)</title><rect x="501.7" y="931.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.7" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.24%)</title><rect x="501.7" y="915.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.7" y="926.0"></text>
</g>
<g>
<title>writev (1 samples, 0.24%)</title><rect x="501.7" y="899.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="504.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.24%)</title><rect x="504.5" y="1043.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="507.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.24%)</title><rect x="504.5" y="1027.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.24%)</title><rect x="504.5" y="1011.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.24%)</title><rect x="504.5" y="995.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.24%)</title><rect x="504.5" y="979.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.24%)</title><rect x="507.3" y="1059.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.24%)</title><rect x="507.3" y="1043.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.3" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.24%)</title><rect x="507.3" y="1027.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.24%)</title><rect x="507.3" y="1011.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.24%)</title><rect x="507.3" y="995.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.24%)</title><rect x="507.3" y="979.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.3" y="990.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.24%)</title><rect x="507.3" y="963.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="510.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.48%)</title><rect x="510.1" y="1107.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="513.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.48%)</title><rect x="510.1" y="1091.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.24%)</title><rect x="512.9" y="1075.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (138 samples, 32.86%)</title><rect x="515.7" y="1171.0" width="387.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.7" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (138 samples, 32.86%)</title><rect x="515.7" y="1155.0" width="387.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="518.7" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (138 samples, 32.86%)</title><rect x="515.7" y="1139.0" width="387.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.7" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1787353634.run (30 samples, 7.14%)</title><rect x="521.3" y="1123.0" width="84.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="524.3" y="1134.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (30 samples, 7.14%)</title><rect x="521.3" y="1107.0" width="84.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="524.3" y="1118.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (30 samples, 7.14%)</title><rect x="521.3" y="1091.0" width="84.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.3" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (30 samples, 7.14%)</title><rect x="521.3" y="1075.0" width="84.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.3" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (14 samples, 3.33%)</title><rect x="521.3" y="1059.0" width="39.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="524.3" y="1070.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (14 samples, 3.33%)</title><rect x="521.3" y="1043.0" width="39.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="524.3" y="1054.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (14 samples, 3.33%)</title><rect x="521.3" y="1027.0" width="39.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="524.3" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 3.33%)</title><rect x="521.3" y="1011.0" width="39.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="524.3" y="1022.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 3.33%)</title><rect x="521.3" y="995.0" width="39.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.3" y="1006.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 3.33%)</title><rect x="521.3" y="979.0" width="39.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.3" y="990.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 0.95%)</title><rect x="521.3" y="963.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.48%)</title><rect x="521.3" y="947.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.48%)</title><rect x="521.3" y="931.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.3" y="942.0"></text>
</g>
<g>
<title>_res (1 samples, 0.24%)</title><rect x="521.3" y="915.0" width="2.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="524.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.24%)</title><rect x="524.1" y="915.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.24%)</title><rect x="524.1" y="899.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.24%)</title><rect x="524.1" y="883.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.24%)</title><rect x="524.1" y="867.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="527.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.48%)</title><rect x="527.0" y="947.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="530.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.24%)</title><rect x="529.8" y="931.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="532.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.24%)</title><rect x="529.8" y="915.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="532.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.24%)</title><rect x="529.8" y="899.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 2.38%)</title><rect x="532.6" y="963.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.6" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.24%)</title><rect x="532.6" y="947.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="535.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.24%)</title><rect x="532.6" y="931.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.24%)</title><rect x="532.6" y="915.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="535.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.24%)</title><rect x="535.4" y="947.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.24%)</title><rect x="535.4" y="931.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 1.90%)</title><rect x="538.2" y="947.0" width="22.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.2" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.71%)</title><rect x="538.2" y="931.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="541.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.24%)</title><rect x="538.2" y="915.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="541.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.24%)</title><rect x="538.2" y="899.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="541.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.24%)</title><rect x="538.2" y="883.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="541.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.24%)</title><rect x="538.2" y="867.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.24%)</title><rect x="538.2" y="851.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.48%)</title><rect x="541.0" y="915.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.48%)</title><rect x="541.0" y="899.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.19%)</title><rect x="546.6" y="931.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="549.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.19%)</title><rect x="546.6" y="915.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="549.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.19%)</title><rect x="546.6" y="899.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.24%)</title><rect x="549.4" y="883.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.24%)</title><rect x="549.4" y="867.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="552.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.24%)</title><rect x="549.4" y="851.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.24%)</title><rect x="549.4" y="835.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.24%)</title><rect x="549.4" y="819.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.24%)</title><rect x="552.2" y="883.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.24%)</title><rect x="555.0" y="883.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.24%)</title><rect x="555.0" y="867.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.24%)</title><rect x="555.0" y="851.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.24%)</title><rect x="555.0" y="835.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.0" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.24%)</title><rect x="555.0" y="819.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="558.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.24%)</title><rect x="557.9" y="883.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.24%)</title><rect x="557.9" y="867.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.24%)</title><rect x="557.9" y="851.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (14 samples, 3.33%)</title><rect x="560.7" y="1059.0" width="39.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.7" y="1070.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.24%)</title><rect x="560.7" y="1043.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="563.7" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.24%)</title><rect x="560.7" y="1027.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.24%)</title><rect x="560.7" y="1011.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="563.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.24%)</title><rect x="560.7" y="995.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.24%)</title><rect x="560.7" y="979.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.24%)</title><rect x="560.7" y="963.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="563.5" y="1043.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="563.5" y="1027.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.24%)</title><rect x="563.5" y="1011.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="566.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 2.38%)</title><rect x="566.3" y="1043.0" width="28.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.3" y="1054.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 2.38%)</title><rect x="566.3" y="1027.0" width="28.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.3" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 0.95%)</title><rect x="566.3" y="1011.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.95%)</title><rect x="566.3" y="995.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="569.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.95%)</title><rect x="566.3" y="979.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.3" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.48%)</title><rect x="569.1" y="963.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="572.1" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.48%)</title><rect x="569.1" y="947.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="572.1" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.24%)</title><rect x="569.1" y="931.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="572.1" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.24%)</title><rect x="569.1" y="915.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="572.1" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="571.9" y="931.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="574.9" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="574.7" y="963.0" width="2.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="577.7" y="974.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.24%)</title><rect x="577.5" y="1011.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="580.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.24%)</title><rect x="577.5" y="995.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.24%)</title><rect x="577.5" y="979.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="580.5" y="990.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.24%)</title><rect x="577.5" y="963.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="580.5" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (1 samples, 0.24%)</title><rect x="577.5" y="947.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="580.5" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.19%)</title><rect x="580.3" y="1011.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.19%)</title><rect x="580.3" y="995.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.48%)</title><rect x="580.3" y="979.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.48%)</title><rect x="580.3" y="963.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="583.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.48%)</title><rect x="580.3" y="947.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="583.3" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 0.71%)</title><rect x="586.0" y="979.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="589.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.48%)</title><rect x="588.8" y="963.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.8" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.48%)</title><rect x="588.8" y="947.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.8" y="958.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.24%)</title><rect x="591.6" y="931.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="594.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 0.48%)</title><rect x="594.4" y="1043.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="597.4" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.24%)</title><rect x="594.4" y="1027.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.24%)</title><rect x="597.2" y="1027.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/148912029.linkToTargetMethod (1 samples, 0.24%)</title><rect x="597.2" y="1011.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="600.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/733957003.invokeStatic_L_L (1 samples, 0.24%)</title><rect x="597.2" y="995.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1218811135.get$Lambda (1 samples, 0.24%)</title><rect x="597.2" y="979.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1218811135.&lt;init&gt; (1 samples, 0.24%)</title><rect x="597.2" y="963.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="600.2" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.48%)</title><rect x="600.0" y="1059.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="603.0" y="1070.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.24%)</title><rect x="600.0" y="1043.0" width="2.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="603.0" y="1054.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.24%)</title><rect x="600.0" y="1027.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="603.0" y="1038.0"></text>
</g>
<g>
<title>_res (1 samples, 0.24%)</title><rect x="600.0" y="1011.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="603.0" y="1022.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.24%)</title><rect x="602.8" y="1043.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="605.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.24%)</title><rect x="605.6" y="1123.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="608.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.24%)</title><rect x="605.6" y="1107.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="608.6" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.24%)</title><rect x="605.6" y="1091.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="608.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.48%)</title><rect x="608.4" y="1123.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="611.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.24%)</title><rect x="611.2" y="1107.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="614.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.24%)</title><rect x="611.2" y="1091.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.24%)</title><rect x="611.2" y="1075.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (103 samples, 24.52%)</title><rect x="614.0" y="1123.0" width="289.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.0" y="1134.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (102 samples, 24.29%)</title><rect x="616.9" y="1107.0" width="286.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.9" y="1118.0">java/util/concurrent/LinkedBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (100 samples, 23.81%)</title><rect x="616.9" y="1091.0" width="280.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.9" y="1102.0">java/util/concurrent/locks/AbstractQue..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.24%)</title><rect x="616.9" y="1075.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="619.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (98 samples, 23.33%)</title><rect x="619.7" y="1075.0" width="275.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="622.7" y="1086.0">java/util/concurrent/locks/LockSuppor..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (98 samples, 23.33%)</title><rect x="619.7" y="1059.0" width="275.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.7" y="1070.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (95 samples, 22.62%)</title><rect x="628.1" y="1043.0" width="266.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="631.1" y="1054.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.24%)</title><rect x="628.1" y="1027.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="631.1" y="1038.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (93 samples, 22.14%)</title><rect x="630.9" y="1027.0" width="261.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="633.9" y="1038.0">Parker::park(bool, long)</text>
</g>
<g>
<title>__psynch_cvwait (73 samples, 17.38%)</title><rect x="630.9" y="1011.0" width="205.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="633.9" y="1022.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (20 samples, 4.76%)</title><rect x="836.0" y="1011.0" width="56.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="839.0" y="1022.0">_pthre..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (19 samples, 4.52%)</title><rect x="838.8" y="995.0" width="53.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="841.8" y="1006.0">_pthr..</text>
</g>
<g>
<title>__psynch_mutexwait (19 samples, 4.52%)</title><rect x="838.8" y="979.0" width="53.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="841.8" y="990.0">__psy..</text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.24%)</title><rect x="892.2" y="1027.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.2" y="1038.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.24%)</title><rect x="895.0" y="1075.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="898.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.48%)</title><rect x="897.8" y="1091.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="900.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.48%)</title><rect x="897.8" y="1075.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="900.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.48%)</title><rect x="897.8" y="1059.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="900.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.48%)</title><rect x="897.8" y="1043.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.24%)</title><rect x="903.4" y="1171.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="906.4" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.24%)</title><rect x="906.2" y="1171.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="909.2" y="1182.0"></text>
</g>
<g>
<title>thread_start (100 samples, 23.81%)</title><rect x="909.0" y="1171.0" width="281.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="912.0" y="1182.0">thread_start</text>
</g>
<g>
<title>_pthread_start (100 samples, 23.81%)</title><rect x="909.0" y="1155.0" width="281.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="912.0" y="1166.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (100 samples, 23.81%)</title><rect x="909.0" y="1139.0" width="281.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="912.0" y="1150.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (100 samples, 23.81%)</title><rect x="909.0" y="1123.0" width="281.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="912.0" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.95%)</title><rect x="909.0" y="1107.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="912.0" y="1118.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.95%)</title><rect x="909.0" y="1091.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.0" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.48%)</title><rect x="909.0" y="1075.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.0" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.48%)</title><rect x="909.0" y="1059.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.0" y="1070.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*, HeapRegion*) (2 samples, 0.48%)</title><rect x="909.0" y="1043.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.0" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.48%)</title><rect x="909.0" y="1027.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.0" y="1038.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.24%)</title><rect x="911.9" y="1011.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.9" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.48%)</title><rect x="914.7" y="1075.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.7" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.48%)</title><rect x="914.7" y="1059.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.7" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.48%)</title><rect x="914.7" y="1043.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.48%)</title><rect x="914.7" y="1027.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.7" y="1038.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.48%)</title><rect x="914.7" y="1011.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="917.7" y="1022.0"></text>
</g>
<g>
<title>ScanRSClosure::scan_strong_code_roots(HeapRegion*) (2 samples, 0.48%)</title><rect x="914.7" y="995.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.7" y="1006.0"></text>
</g>
<g>
<title>CodeRootSetTable::nmethods_do(CodeBlobClosure*) (2 samples, 0.48%)</title><rect x="914.7" y="979.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.7" y="990.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.48%)</title><rect x="914.7" y="963.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.7" y="974.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.48%)</title><rect x="914.7" y="947.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="917.7" y="958.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.24%)</title><rect x="914.7" y="931.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="917.7" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.24%)</title><rect x="914.7" y="915.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.7" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.24%)</title><rect x="914.7" y="899.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.7" y="910.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.24%)</title><rect x="914.7" y="883.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="917.7" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.24%)</title><rect x="914.7" y="867.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="917.7" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.24%)</title><rect x="914.7" y="851.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="917.7" y="862.0"></text>
</g>
<g>
<title>void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.24%)</title><rect x="917.5" y="931.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.5" y="942.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.24%)</title><rect x="917.5" y="915.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.5" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.24%)</title><rect x="917.5" y="899.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.5" y="910.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.24%)</title><rect x="917.5" y="883.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.5" y="894.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.24%)</title><rect x="917.5" y="867.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="920.5" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (93 samples, 22.14%)</title><rect x="920.3" y="1107.0" width="261.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.3" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (93 samples, 22.14%)</title><rect x="920.3" y="1091.0" width="261.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="923.3" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (90 samples, 21.43%)</title><rect x="920.3" y="1075.0" width="252.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="923.3" y="1086.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (89 samples, 21.19%)</title><rect x="920.3" y="1059.0" width="250.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="923.3" y="1070.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (87 samples, 20.71%)</title><rect x="920.3" y="1043.0" width="244.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="923.3" y="1054.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.24%)</title><rect x="920.3" y="1027.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="923.3" y="1038.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.24%)</title><rect x="920.3" y="1011.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="923.3" y="1022.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (86 samples, 20.48%)</title><rect x="923.1" y="1027.0" width="241.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.1" y="1038.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 13.57%)</title><rect x="923.1" y="1011.0" width="160.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.1" y="1022.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.24%)</title><rect x="923.1" y="995.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.1" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.24%)</title><rect x="923.1" y="979.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.1" y="990.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.24%)</title><rect x="923.1" y="963.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.1" y="974.0"></text>
</g>
<g>
<title>addL_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.24%)</title><rect x="923.1" y="947.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.1" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.48%)</title><rect x="925.9" y="995.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="928.9" y="1006.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.24%)</title><rect x="925.9" y="979.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.9" y="990.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.24%)</title><rect x="928.7" y="979.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.7" y="990.0"></text>
</g>
<g>
<title>MachNode::is_TrapBasedCheckNode() const (1 samples, 0.24%)</title><rect x="931.5" y="995.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="934.5" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 2.38%)</title><rect x="934.3" y="995.0" width="28.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.3" y="1006.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.48%)</title><rect x="934.3" y="979.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.3" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 1.90%)</title><rect x="940.0" y="979.0" width="22.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.0" y="990.0">M..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.24%)</title><rect x="940.0" y="963.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.0" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.24%)</title><rect x="940.0" y="947.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.0" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.24%)</title><rect x="940.0" y="931.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="943.0" y="942.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.24%)</title><rect x="940.0" y="915.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.0" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="940.0" y="899.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.0" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 1.19%)</title><rect x="942.8" y="963.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="945.8" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (5 samples, 1.19%)</title><rect x="942.8" y="947.0" width="14.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.8" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.71%)</title><rect x="942.8" y="931.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.8" y="942.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.24%)</title><rect x="945.6" y="915.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.6" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.24%)</title><rect x="945.6" y="899.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.6" y="910.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.24%)</title><rect x="945.6" y="883.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.6" y="894.0"></text>
</g>
<g>
<title>State::_sub_Op_LShiftI(Node const*) (1 samples, 0.24%)</title><rect x="945.6" y="867.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.6" y="878.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.24%)</title><rect x="948.4" y="915.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.4" y="926.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.24%)</title><rect x="948.4" y="899.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.4" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.48%)</title><rect x="951.2" y="931.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.2" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (2 samples, 0.48%)</title><rect x="951.2" y="915.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.2" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (2 samples, 0.48%)</title><rect x="951.2" y="899.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.2" y="910.0"></text>
</g>
<g>
<title>ciInstanceKlass::box_klass_type() const (1 samples, 0.24%)</title><rect x="951.2" y="883.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="954.2" y="894.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.24%)</title><rect x="954.0" y="883.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="957.0" y="894.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.24%)</title><rect x="956.8" y="963.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::size_of() const (1 samples, 0.24%)</title><rect x="959.6" y="963.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.6" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.19%)</title><rect x="962.4" y="995.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.19%)</title><rect x="962.4" y="979.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.4" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.24%)</title><rect x="962.4" y="963.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.4" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.24%)</title><rect x="965.2" y="963.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="968.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.48%)</title><rect x="968.0" y="963.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.0" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.24%)</title><rect x="968.0" y="947.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.0" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.24%)</title><rect x="970.9" y="947.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.9" y="958.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.24%)</title><rect x="970.9" y="931.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.9" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.24%)</title><rect x="973.7" y="963.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 9.05%)</title><rect x="976.5" y="995.0" width="106.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.5" y="1006.0">PhaseChaitin:..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.24%)</title><rect x="976.5" y="979.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.5" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.24%)</title><rect x="979.3" y="979.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.95%)</title><rect x="982.1" y="979.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.24%)</title><rect x="984.9" y="963.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.9" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.24%)</title><rect x="984.9" y="947.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.9" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.48%)</title><rect x="987.7" y="963.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.7" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="990.5" y="947.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 1.90%)</title><rect x="993.3" y="979.0" width="22.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.3" y="990.0">P..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.24%)</title><rect x="1004.6" y="963.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.6" y="974.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.24%)</title><rect x="1007.4" y="963.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.4" y="974.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.24%)</title><rect x="1007.4" y="947.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::prompt_use(Block*, unsigned int) (1 samples, 0.24%)</title><rect x="1010.2" y="963.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.2" y="974.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.24%)</title><rect x="1010.2" y="947.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1013.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.24%)</title><rect x="1013.0" y="963.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.43%)</title><rect x="1015.8" y="979.0" width="16.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.8" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="1024.2" y="963.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1027.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.24%)</title><rect x="1027.0" y="963.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="1027.0" y="947.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.0" y="958.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.24%)</title><rect x="1029.9" y="963.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.24%)</title><rect x="1032.7" y="979.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.24%)</title><rect x="1032.7" y="963.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.7" y="974.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.24%)</title><rect x="1032.7" y="947.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.48%)</title><rect x="1035.5" y="979.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.5" y="990.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.24%)</title><rect x="1038.3" y="963.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.71%)</title><rect x="1041.1" y="979.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.24%)</title><rect x="1046.7" y="963.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1049.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.24%)</title><rect x="1046.7" y="947.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1049.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.24%)</title><rect x="1046.7" y="931.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.7" y="942.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.24%)</title><rect x="1046.7" y="915.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.7" y="926.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.48%)</title><rect x="1049.5" y="979.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.5" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.48%)</title><rect x="1049.5" y="963.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.5" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.48%)</title><rect x="1049.5" y="947.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.5" y="958.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.24%)</title><rect x="1052.3" y="931.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.3" y="942.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.24%)</title><rect x="1052.3" y="915.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.3" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.71%)</title><rect x="1055.1" y="979.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.1" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.48%)</title><rect x="1058.0" y="963.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="1060.8" y="947.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.8" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.24%)</title><rect x="1063.6" y="979.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.6" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="1063.6" y="963.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.6" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.24%)</title><rect x="1066.4" y="979.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.4" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.24%)</title><rect x="1066.4" y="963.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.4" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.71%)</title><rect x="1069.2" y="979.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.2" y="990.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.24%)</title><rect x="1074.8" y="963.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.8" y="974.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.24%)</title><rect x="1077.6" y="979.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.6" y="990.0"></text>
</g>
<g>
<title>SafePointScalarObjectNode::Opcode() const (1 samples, 0.24%)</title><rect x="1080.4" y="979.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.4" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 3.81%)</title><rect x="1083.2" y="1011.0" width="45.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.2" y="1022.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.24%)</title><rect x="1083.2" y="995.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.24%)</title><rect x="1083.2" y="979.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (1 samples, 0.24%)</title><rect x="1083.2" y="963.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var(Node*, PointsToNode::EscapeState) (1 samples, 0.24%)</title><rect x="1083.2" y="947.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.2" y="958.0"></text>
</g>
<g>
<title>LocalVarNode::LocalVarNode(ConnectionGraph*, Node*, PointsToNode::EscapeState) (1 samples, 0.24%)</title><rect x="1083.2" y="931.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.2" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray(Arena*, int, int, PointsToNode* const&amp;) (1 samples, 0.24%)</title><rect x="1083.2" y="915.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.2" y="926.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.24%)</title><rect x="1083.2" y="899.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.2" y="910.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="1083.2" y="883.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1086.2" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.24%)</title><rect x="1086.0" y="995.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.24%)</title><rect x="1086.0" y="979.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.0" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.24%)</title><rect x="1086.0" y="963.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.24%)</title><rect x="1086.0" y="947.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.24%)</title><rect x="1086.0" y="931.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.0" y="942.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.24%)</title><rect x="1086.0" y="915.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 2.62%)</title><rect x="1088.9" y="995.0" width="30.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.9" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.71%)</title><rect x="1088.9" y="979.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.9" y="990.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (2 samples, 0.48%)</title><rect x="1091.7" y="963.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.48%)</title><rect x="1097.3" y="979.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.24%)</title><rect x="1100.1" y="963.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.71%)</title><rect x="1102.9" y="979.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.71%)</title><rect x="1102.9" y="963.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.48%)</title><rect x="1102.9" y="947.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.24%)</title><rect x="1105.7" y="931.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.24%)</title><rect x="1105.7" y="915.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.24%)</title><rect x="1105.7" y="899.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.24%)</title><rect x="1108.5" y="947.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.48%)</title><rect x="1111.3" y="979.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.24%)</title><rect x="1111.3" y="963.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.24%)</title><rect x="1111.3" y="947.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.24%)</title><rect x="1111.3" y="931.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.3" y="942.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.24%)</title><rect x="1114.1" y="963.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.1" y="974.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.24%)</title><rect x="1114.1" y="947.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.1" y="958.0"></text>
</g>
<g>
<title>VectorSet::grow(unsigned int) (1 samples, 0.24%)</title><rect x="1114.1" y="931.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.1" y="942.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.24%)</title><rect x="1114.1" y="915.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1117.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.24%)</title><rect x="1117.0" y="979.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.24%)</title><rect x="1117.0" y="963.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.0" y="974.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.24%)</title><rect x="1117.0" y="947.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.71%)</title><rect x="1119.8" y="995.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.71%)</title><rect x="1119.8" y="979.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.8" y="990.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.24%)</title><rect x="1119.8" y="963.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.8" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1122.6" y="963.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.6" y="974.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.24%)</title><rect x="1122.6" y="947.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.6" y="958.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.24%)</title><rect x="1122.6" y="931.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.6" y="942.0"></text>
</g>
<g>
<title>SubNode::Identity(PhaseTransform*) (1 samples, 0.24%)</title><rect x="1125.4" y="963.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.4" y="974.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.24%)</title><rect x="1125.4" y="947.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="958.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.24%)</title><rect x="1125.4" y="931.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.4" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="1125.4" y="915.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.4" y="926.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.24%)</title><rect x="1125.4" y="899.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 2.86%)</title><rect x="1128.2" y="1011.0" width="33.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.2" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 2.86%)</title><rect x="1128.2" y="995.0" width="33.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.2" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 2.86%)</title><rect x="1128.2" y="979.0" width="33.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.2" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 2.86%)</title><rect x="1128.2" y="963.0" width="33.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.2" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 2.86%)</title><rect x="1128.2" y="947.0" width="33.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.2" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 2.62%)</title><rect x="1128.2" y="931.0" width="30.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.2" y="942.0">Pa..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.24%)</title><rect x="1128.2" y="915.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.2" y="926.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.24%)</title><rect x="1128.2" y="899.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.2" y="910.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.24%)</title><rect x="1128.2" y="883.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.2" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.24%)</title><rect x="1128.2" y="867.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.2" y="878.0"></text>
</g>
<g>
<title>ciInstanceKlass::unique_concrete_subklass() (1 samples, 0.24%)</title><rect x="1128.2" y="851.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.2" y="862.0"></text>
</g>
<g>
<title>Klass::up_cast_abstract() (1 samples, 0.24%)</title><rect x="1128.2" y="835.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 2.14%)</title><rect x="1131.0" y="915.0" width="25.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.0" y="926.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 2.14%)</title><rect x="1131.0" y="899.0" width="25.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.0" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 1.90%)</title><rect x="1131.0" y="883.0" width="22.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.0" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 1.90%)</title><rect x="1131.0" y="867.0" width="22.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.0" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 1.90%)</title><rect x="1131.0" y="851.0" width="22.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.0" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 1.90%)</title><rect x="1131.0" y="835.0" width="22.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.0" y="846.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.67%)</title><rect x="1131.0" y="819.0" width="19.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.67%)</title><rect x="1131.0" y="803.0" width="19.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.67%)</title><rect x="1131.0" y="787.0" width="19.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.67%)</title><rect x="1131.0" y="771.0" width="19.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.67%)</title><rect x="1131.0" y="755.0" width="19.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.67%)</title><rect x="1131.0" y="739.0" width="19.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.43%)</title><rect x="1131.0" y="723.0" width="16.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.43%)</title><rect x="1131.0" y="707.0" width="16.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.43%)</title><rect x="1131.0" y="691.0" width="16.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.43%)</title><rect x="1131.0" y="675.0" width="16.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.43%)</title><rect x="1131.0" y="659.0" width="16.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.43%)</title><rect x="1131.0" y="643.0" width="16.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.95%)</title><rect x="1131.0" y="627.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.95%)</title><rect x="1131.0" y="611.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.95%)</title><rect x="1131.0" y="595.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.95%)</title><rect x="1131.0" y="579.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.95%)</title><rect x="1131.0" y="563.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.95%)</title><rect x="1131.0" y="547.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1131.0" y="531.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.71%)</title><rect x="1131.0" y="515.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.24%)</title><rect x="1131.0" y="499.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.24%)</title><rect x="1131.0" y="483.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.24%)</title><rect x="1131.0" y="467.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.0" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.24%)</title><rect x="1131.0" y="451.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.0" y="462.0"></text>
</g>
<g>
<title>MergeMemStream::MergeMemStream(MergeMemNode*, MergeMemNode const*) (1 samples, 0.24%)</title><rect x="1131.0" y="435.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.0" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.24%)</title><rect x="1131.0" y="419.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.0" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.24%)</title><rect x="1131.0" y="403.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.0" y="414.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.24%)</title><rect x="1131.0" y="387.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.0" y="398.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.24%)</title><rect x="1131.0" y="371.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.0" y="382.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.24%)</title><rect x="1131.0" y="355.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1134.0" y="366.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.24%)</title><rect x="1133.8" y="499.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.8" y="510.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.24%)</title><rect x="1133.8" y="483.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.8" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.24%)</title><rect x="1133.8" y="467.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.8" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.24%)</title><rect x="1133.8" y="451.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1133.8" y="435.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1133.8" y="419.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.8" y="430.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.24%)</title><rect x="1133.8" y="403.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1136.6" y="499.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1136.6" y="483.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1136.6" y="467.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1136.6" y="451.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1136.6" y="435.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1136.6" y="419.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1136.6" y="403.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1136.6" y="387.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1136.6" y="371.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1136.6" y="355.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1136.6" y="339.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1136.6" y="323.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1136.6" y="307.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1136.6" y="291.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1136.6" y="275.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.24%)</title><rect x="1136.6" y="259.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.24%)</title><rect x="1136.6" y="243.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.6" y="254.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.24%)</title><rect x="1136.6" y="227.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.6" y="238.0"></text>
</g>
<g>
<title>GraphKit::pre_barrier(bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.24%)</title><rect x="1136.6" y="211.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.6" y="222.0"></text>
</g>
<g>
<title>IdealKit::IdealKit(GraphKit*, bool, bool) (1 samples, 0.24%)</title><rect x="1136.6" y="195.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.6" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.4" y="531.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.4" y="515.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1139.4" y="499.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1139.4" y="483.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1139.4" y="467.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1139.4" y="451.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1139.4" y="435.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.4" y="419.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1139.4" y="403.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1139.4" y="387.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1139.4" y="371.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1139.4" y="355.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1139.4" y="339.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.4" y="323.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1139.4" y="307.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1139.4" y="291.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1139.4" y="275.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1139.4" y="259.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1139.4" y="243.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1139.4" y="227.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1139.4" y="211.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1139.4" y="195.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1139.4" y="179.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1139.4" y="163.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1139.4" y="147.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.4" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.24%)</title><rect x="1139.4" y="131.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.4" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.24%)</title><rect x="1139.4" y="115.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.4" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.24%)</title><rect x="1139.4" y="99.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.4" y="110.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.24%)</title><rect x="1139.4" y="83.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.4" y="94.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.24%)</title><rect x="1139.4" y="67.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.24%)</title><rect x="1139.4" y="51.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.4" y="62.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.24%)</title><rect x="1139.4" y="35.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.48%)</title><rect x="1142.2" y="627.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.48%)</title><rect x="1142.2" y="611.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.48%)</title><rect x="1142.2" y="595.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.48%)</title><rect x="1142.2" y="579.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.48%)</title><rect x="1142.2" y="563.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.48%)</title><rect x="1142.2" y="547.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.48%)</title><rect x="1142.2" y="531.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.2" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.24%)</title><rect x="1142.2" y="515.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.2" y="526.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.24%)</title><rect x="1142.2" y="499.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.2" y="510.0"></text>
</g>
<g>
<title>Compile::intrinsic_insertion_index(ciMethod*, bool) (1 samples, 0.24%)</title><rect x="1142.2" y="483.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1145.0" y="515.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1145.0" y="499.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1145.0" y="483.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1145.0" y="467.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1145.0" y="451.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.0" y="462.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.24%)</title><rect x="1145.0" y="435.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="446.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.24%)</title><rect x="1145.0" y="419.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="430.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.24%)</title><rect x="1145.0" y="403.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.24%)</title><rect x="1145.0" y="387.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="398.0"></text>
</g>
<g>
<title>SafePointNode::set_local(JVMState*, unsigned int, Node*) (1 samples, 0.24%)</title><rect x="1145.0" y="371.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1147.9" y="723.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1147.9" y="707.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1147.9" y="691.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1147.9" y="675.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1147.9" y="659.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1147.9" y="643.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1147.9" y="627.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.9" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1147.9" y="611.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1147.9" y="595.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1147.9" y="579.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1147.9" y="563.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1147.9" y="547.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1147.9" y="531.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1147.9" y="515.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.24%)</title><rect x="1147.9" y="499.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.9" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1147.9" y="483.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.9" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1147.9" y="467.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.9" y="478.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.24%)</title><rect x="1147.9" y="451.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.9" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.24%)</title><rect x="1147.9" y="435.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="446.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.24%)</title><rect x="1147.9" y="419.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.9" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.24%)</title><rect x="1147.9" y="403.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.9" y="414.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.24%)</title><rect x="1147.9" y="387.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.9" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.24%)</title><rect x="1147.9" y="371.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1150.7" y="819.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1150.7" y="803.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1150.7" y="787.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1150.7" y="771.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1150.7" y="755.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1150.7" y="739.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1150.7" y="723.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1150.7" y="707.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1150.7" y="691.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1150.7" y="675.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1150.7" y="659.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1150.7" y="643.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1150.7" y="627.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.7" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.24%)</title><rect x="1150.7" y="611.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="622.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.24%)</title><rect x="1150.7" y="595.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.24%)</title><rect x="1150.7" y="579.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.7" y="590.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.24%)</title><rect x="1150.7" y="563.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.24%)</title><rect x="1153.5" y="883.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.5" y="894.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.24%)</title><rect x="1153.5" y="867.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="878.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory_call(Node*, bool) (1 samples, 0.24%)</title><rect x="1153.5" y="851.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.5" y="862.0"></text>
</g>
<g>
<title>ProjNode::ProjNode(Node*, unsigned int, bool) (1 samples, 0.24%)</title><rect x="1153.5" y="835.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.5" y="846.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.24%)</title><rect x="1153.5" y="819.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.5" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1156.3" y="915.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.3" y="926.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.24%)</title><rect x="1156.3" y="899.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.3" y="910.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.24%)</title><rect x="1156.3" y="883.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.3" y="894.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.24%)</title><rect x="1156.3" y="867.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.3" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.24%)</title><rect x="1156.3" y="851.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.3" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.24%)</title><rect x="1156.3" y="835.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.24%)</title><rect x="1159.1" y="931.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.24%)</title><rect x="1159.1" y="915.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="926.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1159.1" y="899.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="910.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.24%)</title><rect x="1161.9" y="1011.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.9" y="1022.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.24%)</title><rect x="1161.9" y="995.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="1006.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.24%)</title><rect x="1164.7" y="1043.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="1054.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.24%)</title><rect x="1164.7" y="1027.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="1038.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.24%)</title><rect x="1164.7" y="1011.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.7" y="1022.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.24%)</title><rect x="1164.7" y="995.0" width="2.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1167.7" y="1006.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.24%)</title><rect x="1164.7" y="979.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1167.7" y="990.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.24%)</title><rect x="1164.7" y="963.0" width="2.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1167.7" y="974.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.24%)</title><rect x="1167.5" y="1043.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.24%)</title><rect x="1167.5" y="1027.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.5" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciReturnAddress*&gt;::GrowableArray(Arena*, int, int, ciReturnAddress* const&amp;) (1 samples, 0.24%)</title><rect x="1167.5" y="1011.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.5" y="1022.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.24%)</title><rect x="1170.3" y="1059.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.24%)</title><rect x="1170.3" y="1043.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.24%)</title><rect x="1170.3" y="1027.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.3" y="1038.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.24%)</title><rect x="1170.3" y="1011.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::release_nmethod(nmethod*) (1 samples, 0.24%)</title><rect x="1170.3" y="995.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::add_to_freelist(HeapBlock*) (1 samples, 0.24%)</title><rect x="1170.3" y="979.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="990.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.48%)</title><rect x="1173.1" y="1075.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="1086.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.24%)</title><rect x="1173.1" y="1059.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.1" y="1070.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.24%)</title><rect x="1173.1" y="1043.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="1054.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.24%)</title><rect x="1173.1" y="1027.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1176.1" y="1038.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.24%)</title><rect x="1173.1" y="1011.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.1" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.24%)</title><rect x="1173.1" y="995.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1006.0"></text>
</g>
<g>
<title>ScopeDesc::stream_at(int) const (1 samples, 0.24%)</title><rect x="1173.1" y="979.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.1" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="1173.1" y="963.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.1" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.24%)</title><rect x="1176.0" y="1059.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="1070.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.24%)</title><rect x="1176.0" y="1043.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="1054.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.24%)</title><rect x="1176.0" y="1027.0" width="2.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1179.0" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.24%)</title><rect x="1176.0" y="1011.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.24%)</title><rect x="1176.0" y="995.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1179.0" y="1006.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.24%)</title><rect x="1178.8" y="1075.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1181.8" y="1086.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.24%)</title><rect x="1178.8" y="1059.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="1070.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.24%)</title><rect x="1178.8" y="1043.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1181.8" y="1054.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.24%)</title><rect x="1178.8" y="1027.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="1038.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.24%)</title><rect x="1178.8" y="1011.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="1022.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.24%)</title><rect x="1178.8" y="995.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="1006.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.24%)</title><rect x="1178.8" y="979.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="990.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.24%)</title><rect x="1178.8" y="963.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1181.8" y="974.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.24%)</title><rect x="1178.8" y="947.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1181.8" y="958.0"></text>
</g>
<g>
<title>write$NOCANCEL (1 samples, 0.24%)</title><rect x="1178.8" y="931.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1181.8" y="942.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.71%)</title><rect x="1181.6" y="1107.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="1118.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.71%)</title><rect x="1181.6" y="1091.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="1102.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.71%)</title><rect x="1181.6" y="1075.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="1086.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.71%)</title><rect x="1181.6" y="1059.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="1070.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.71%)</title><rect x="1181.6" y="1043.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.71%)</title><rect x="1181.6" y="1027.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (3 samples, 0.71%)</title><rect x="1181.6" y="1011.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="1022.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (3 samples, 0.71%)</title><rect x="1181.6" y="995.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="1006.0"></text>
</g>
</g>
</svg>
