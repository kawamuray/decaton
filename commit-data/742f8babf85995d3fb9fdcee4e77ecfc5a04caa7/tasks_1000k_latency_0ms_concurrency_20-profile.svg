<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1830" onload="init(evt)" viewBox="0 0 1200 1830" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1813"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1813"> </text>
<g id="frames">
<g>
<title>all (1,208 samples, 100.00%)</title><rect x="10.0" y="1779.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1790.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (267 samples, 22.10%)</title><rect x="10.0" y="1763.0" width="260.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1774.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.17%)</title><rect x="11.0" y="1747.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.17%)</title><rect x="11.0" y="1731.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.17%)</title><rect x="11.0" y="1715.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.17%)</title><rect x="11.0" y="1699.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.17%)</title><rect x="11.0" y="1683.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.17%)</title><rect x="11.0" y="1667.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.17%)</title><rect x="11.0" y="1651.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="11.0" y="1635.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="11.0" y="1619.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="11.0" y="1603.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.08%)</title><rect x="11.0" y="1587.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="11.0" y="1571.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="11.0" y="1555.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.0" y="1566.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeAccess (1 samples, 0.08%)</title><rect x="11.0" y="1539.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="12.0" y="1635.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.0" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="12.0" y="1619.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="12.0" y="1603.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="12.0" y="1587.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.08%)</title><rect x="12.0" y="1571.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.08%)</title><rect x="12.0" y="1555.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.08%)</title><rect x="12.0" y="1539.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.08%)</title><rect x="12.0" y="1523.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.08%)</title><rect x="12.0" y="1507.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="1518.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="12.0" y="1491.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.0" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="12.0" y="1475.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="12.0" y="1459.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.0" y="1470.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.08%)</title><rect x="12.0" y="1443.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.0" y="1454.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="12.0" y="1427.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (264 samples, 21.85%)</title><rect x="12.9" y="1747.0" width="257.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="1758.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.17%)</title><rect x="12.9" y="1731.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.9" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.17%)</title><rect x="12.9" y="1715.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1787602502.accept (2 samples, 0.17%)</title><rect x="12.9" y="1699.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.17%)</title><rect x="12.9" y="1683.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.17%)</title><rect x="12.9" y="1667.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="1678.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.17%)</title><rect x="12.9" y="1651.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="14.9" y="1731.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.9" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="14.9" y="1715.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="14.9" y="1699.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="14.9" y="1683.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="14.9" y="1667.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="14.9" y="1651.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.9" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="14.9" y="1635.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="17.9" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="14.9" y="1619.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="14.9" y="1603.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.9" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="14.9" y="1587.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.9" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/399169752.test (1 samples, 0.08%)</title><rect x="14.9" y="1571.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$44 (1 samples, 0.08%)</title><rect x="14.9" y="1555.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.9" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.08%)</title><rect x="14.9" y="1539.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.9" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="14.9" y="1523.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.25%)</title><rect x="15.9" y="1731.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.9" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.25%)</title><rect x="15.9" y="1715.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.9" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="17.8" y="1699.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.8" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="17.8" y="1683.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.8" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="17.8" y="1667.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.8" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="17.8" y="1651.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.8" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="17.8" y="1635.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.8" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="17.8" y="1619.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.8" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="17.8" y="1603.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.8" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="17.8" y="1587.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.8" y="1598.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="17.8" y="1571.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="20.8" y="1582.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (199 samples, 16.47%)</title><rect x="18.8" y="1731.0" width="194.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.8" y="1742.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/312979220.accept (187 samples, 15.48%)</title><rect x="18.8" y="1715.0" width="182.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.8" y="1726.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (187 samples, 15.48%)</title><rect x="18.8" y="1699.0" width="182.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.8" y="1710.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (3 samples, 0.25%)</title><rect x="18.8" y="1683.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.8" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (138 samples, 11.42%)</title><rect x="21.7" y="1683.0" width="134.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.7" y="1694.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (138 samples, 11.42%)</title><rect x="21.7" y="1667.0" width="134.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.7" y="1678.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (138 samples, 11.42%)</title><rect x="21.7" y="1651.0" width="134.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1662.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (138 samples, 11.42%)</title><rect x="21.7" y="1635.0" width="134.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.7" y="1646.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (138 samples, 11.42%)</title><rect x="21.7" y="1619.0" width="134.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1630.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (138 samples, 11.42%)</title><rect x="21.7" y="1603.0" width="134.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.7" y="1614.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 8.36%)</title><rect x="21.7" y="1587.0" width="98.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.7" y="1598.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.15%)</title><rect x="21.7" y="1571.0" width="25.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.7" y="1582.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.15%)</title><rect x="21.7" y="1555.0" width="25.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.7" y="1566.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.57%)</title><rect x="28.6" y="1539.0" width="18.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.6" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (19 samples, 1.57%)</title><rect x="28.6" y="1523.0" width="18.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.6" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.58%)</title><rect x="47.1" y="1571.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.1" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.58%)</title><rect x="47.1" y="1555.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.1" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.25%)</title><rect x="48.1" y="1539.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.1" y="1550.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.25%)</title><rect x="48.1" y="1523.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="51.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.25%)</title><rect x="51.0" y="1539.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.0" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (68 samples, 5.63%)</title><rect x="54.0" y="1571.0" width="66.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.0" y="1582.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (68 samples, 5.63%)</title><rect x="54.0" y="1555.0" width="66.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.0" y="1566.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.08%)</title><rect x="54.0" y="1539.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.0" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (66 samples, 5.46%)</title><rect x="54.9" y="1539.0" width="64.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="57.9" y="1550.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (66 samples, 5.46%)</title><rect x="54.9" y="1523.0" width="64.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.9" y="1534.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (65 samples, 5.38%)</title><rect x="55.9" y="1507.0" width="63.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.9" y="1518.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (59 samples, 4.88%)</title><rect x="55.9" y="1491.0" width="57.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="58.9" y="1502.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="55.9" y="1475.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="58.9" y="1486.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="56.9" y="1475.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="59.9" y="1486.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 3.06%)</title><rect x="58.8" y="1475.0" width="36.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="61.8" y="1486.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.50%)</title><rect x="95.0" y="1475.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="98.0" y="1486.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.08%)</title><rect x="100.8" y="1475.0" width="12.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="103.8" y="1486.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="113.5" y="1491.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="116.5" y="1502.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="114.5" y="1491.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="117.5" y="1502.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="118.4" y="1491.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="121.4" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="119.4" y="1539.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.4" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (31 samples, 2.57%)</title><rect x="120.4" y="1587.0" width="30.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.4" y="1598.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (31 samples, 2.57%)</title><rect x="120.4" y="1571.0" width="30.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.4" y="1582.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (31 samples, 2.57%)</title><rect x="120.4" y="1555.0" width="30.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.4" y="1566.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.25%)</title><rect x="150.7" y="1587.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.7" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.25%)</title><rect x="150.7" y="1571.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.7" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.25%)</title><rect x="150.7" y="1555.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.7" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.25%)</title><rect x="153.6" y="1587.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.6" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="153.6" y="1571.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.6" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.25%)</title><rect x="153.6" y="1555.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.6" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="155.5" y="1539.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.5" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.25%)</title><rect x="156.5" y="1683.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="159.5" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.25%)</title><rect x="156.5" y="1667.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.5" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.33%)</title><rect x="159.5" y="1683.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="162.5" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="159.5" y="1667.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.5" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="159.5" y="1651.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.5" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (39 samples, 3.23%)</title><rect x="163.4" y="1683.0" width="38.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.4" y="1694.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.23%)</title><rect x="163.4" y="1667.0" width="38.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="166.4" y="1678.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (18 samples, 1.49%)</title><rect x="180.9" y="1651.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.9" y="1662.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.83%)</title><rect x="180.9" y="1635.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.9" y="1646.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.83%)</title><rect x="180.9" y="1619.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="183.9" y="1630.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.83%)</title><rect x="180.9" y="1603.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.9" y="1614.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="187.8" y="1587.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="190.8" y="1598.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="190.7" y="1635.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.7" y="1646.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.58%)</title><rect x="191.7" y="1635.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.7" y="1646.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="198.5" y="1651.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="201.5" y="1662.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="201.5" y="1715.0" width="1.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="204.5" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="203.4" y="1715.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.4" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="203.4" y="1699.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.75%)</title><rect x="204.4" y="1715.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.4" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.75%)</title><rect x="204.4" y="1699.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.75%)</title><rect x="204.4" y="1683.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.4" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.75%)</title><rect x="204.4" y="1667.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.4" y="1678.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.50%)</title><rect x="207.3" y="1651.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.3" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 4.88%)</title><rect x="213.2" y="1731.0" width="57.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.2" y="1742.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.80%)</title><rect x="213.2" y="1715.0" width="56.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.2" y="1726.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.98%)</title><rect x="214.2" y="1699.0" width="35.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.2" y="1710.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="214.2" y="1683.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="214.2" y="1667.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.2" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="214.2" y="1651.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.2" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="214.2" y="1635.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="214.2" y="1619.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.2" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="214.2" y="1603.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.2" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 2.90%)</title><rect x="215.1" y="1683.0" width="34.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.1" y="1694.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="216.1" y="1667.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.73%)</title><rect x="217.1" y="1667.0" width="32.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.1" y="1678.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.15%)</title><rect x="217.1" y="1651.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.1" y="1662.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.15%)</title><rect x="217.1" y="1635.0" width="25.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.1" y="1646.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.83%)</title><rect x="217.1" y="1619.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.1" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.41%)</title><rect x="217.1" y="1603.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.1" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.41%)</title><rect x="217.1" y="1587.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.41%)</title><rect x="217.1" y="1571.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.1" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.41%)</title><rect x="217.1" y="1555.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.1" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.41%)</title><rect x="217.1" y="1539.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.1" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.41%)</title><rect x="217.1" y="1523.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.1" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.41%)</title><rect x="217.1" y="1507.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.1" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.33%)</title><rect x="222.0" y="1603.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.0" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.33%)</title><rect x="222.0" y="1587.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (4 samples, 0.33%)</title><rect x="222.0" y="1571.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.08%)</title><rect x="225.9" y="1603.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.9" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="225.9" y="1587.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.9" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="225.9" y="1571.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.9" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.24%)</title><rect x="226.9" y="1619.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.9" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.16%)</title><rect x="227.8" y="1603.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.8" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.83%)</title><rect x="227.8" y="1587.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.8" y="1598.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.83%)</title><rect x="227.8" y="1571.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.8" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.33%)</title><rect x="237.6" y="1587.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.6" y="1598.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.33%)</title><rect x="237.6" y="1571.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.6" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="241.5" y="1619.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.5" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.25%)</title><rect x="242.5" y="1651.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.5" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.25%)</title><rect x="242.5" y="1635.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.5" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="242.5" y="1619.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.5" y="1630.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="242.5" y="1603.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.5" y="1614.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="242.5" y="1587.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="243.5" y="1619.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.5" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="243.5" y="1603.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.5" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="244.4" y="1619.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.4" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="244.4" y="1603.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.4" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="245.4" y="1651.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.4" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="245.4" y="1635.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.4" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="245.4" y="1619.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.4" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="245.4" y="1603.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.4" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="245.4" y="1587.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.4" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="246.4" y="1651.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.4" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.08%)</title><rect x="246.4" y="1635.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.4" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="246.4" y="1619.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.4" y="1630.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="246.4" y="1603.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.4" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="247.4" y="1651.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.4" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="248.3" y="1651.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.3" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.66%)</title><rect x="249.3" y="1699.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.3" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.58%)</title><rect x="249.3" y="1683.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.3" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.41%)</title><rect x="249.3" y="1667.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.3" y="1678.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="249.3" y="1651.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.3" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/2117579856.accept (1 samples, 0.08%)</title><rect x="249.3" y="1635.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.3" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="249.3" y="1619.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.3" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="249.3" y="1603.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.3" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="249.3" y="1587.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.3" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="249.3" y="1571.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.3" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="249.3" y="1555.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.3" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="249.3" y="1539.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.3" y="1550.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="250.3" y="1651.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.3" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="250.3" y="1635.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.3" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="250.3" y="1619.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.3" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="251.3" y="1651.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.3" y="1662.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="251.3" y="1635.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.3" y="1646.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="251.3" y="1619.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.3" y="1630.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.17%)</title><rect x="251.3" y="1603.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.3" y="1614.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.17%)</title><rect x="251.3" y="1587.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.3" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="251.3" y="1571.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.3" y="1582.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="251.3" y="1555.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="254.3" y="1566.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="252.3" y="1571.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.3" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="253.2" y="1651.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.2" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="253.2" y="1635.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.2" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="253.2" y="1619.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.2" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="253.2" y="1603.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.2" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="253.2" y="1587.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.2" y="1598.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="253.2" y="1571.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.2" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="253.2" y="1555.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.2" y="1566.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="253.2" y="1539.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.2" y="1550.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="253.2" y="1523.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.2" y="1534.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="253.2" y="1507.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.2" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="254.2" y="1667.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.2" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.17%)</title><rect x="254.2" y="1651.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.2" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.makeRef (2 samples, 0.17%)</title><rect x="254.2" y="1635.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="256.2" y="1683.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="256.2" y="1667.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.2" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="256.2" y="1651.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.2" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="257.1" y="1699.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.1" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.08%)</title><rect x="257.1" y="1683.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.1" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.08%)</title><rect x="257.1" y="1667.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.58%)</title><rect x="258.1" y="1699.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.1" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.58%)</title><rect x="258.1" y="1683.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.1" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="258.1" y="1667.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="258.1" y="1651.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="258.1" y="1635.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.1" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="258.1" y="1619.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.1" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="258.1" y="1603.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.1" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.50%)</title><rect x="259.1" y="1667.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="259.1" y="1651.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.1" y="1662.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="259.1" y="1635.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="262.1" y="1646.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="259.1" y="1619.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="262.1" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.41%)</title><rect x="260.1" y="1651.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (5 samples, 0.41%)</title><rect x="260.1" y="1635.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.1" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (5 samples, 0.41%)</title><rect x="260.1" y="1619.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (5 samples, 0.41%)</title><rect x="260.1" y="1603.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.1" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (5 samples, 0.41%)</title><rect x="260.1" y="1587.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (5 samples, 0.41%)</title><rect x="260.1" y="1571.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.1" y="1582.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.41%)</title><rect x="260.1" y="1555.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.1" y="1566.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="260.1" y="1539.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="263.1" y="1550.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="262.0" y="1539.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="265.0" y="1550.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="263.0" y="1539.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="266.0" y="1550.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="264.0" y="1539.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.0" y="1550.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="264.0" y="1523.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.0" y="1534.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="264.0" y="1507.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.0" y="1518.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="264.0" y="1491.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.0" y="1502.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.08%)</title><rect x="264.0" y="1475.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="267.0" y="1486.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.08%)</title><rect x="264.0" y="1459.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="267.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.41%)</title><rect x="265.0" y="1699.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.0" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.41%)</title><rect x="265.0" y="1683.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.0" y="1694.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="265.0" y="1667.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.0" y="1678.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="265.0" y="1651.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="268.0" y="1662.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.08%)</title><rect x="265.9" y="1667.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.9" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="266.9" y="1667.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.9" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="267.9" y="1667.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.9" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="268.9" y="1651.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.9" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="269.8" y="1715.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="269.8" y="1699.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="269.8" y="1683.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.8" y="1694.0"></text>
</g>
<g>
<title>java/lang/Thread.run (702 samples, 58.11%)</title><rect x="270.8" y="1763.0" width="685.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.8" y="1774.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (702 samples, 58.11%)</title><rect x="270.8" y="1747.0" width="685.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.8" y="1758.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (702 samples, 58.11%)</title><rect x="270.8" y="1731.0" width="685.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.8" y="1742.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="274.7" y="1715.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="277.7" y="1726.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="275.7" y="1699.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="278.7" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (4 samples, 0.33%)</title><rect x="276.7" y="1715.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.7" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run (476 samples, 39.40%)</title><rect x="280.6" y="1715.0" width="464.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.6" y="1726.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (476 samples, 39.40%)</title><rect x="280.6" y="1699.0" width="464.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.6" y="1710.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (476 samples, 39.40%)</title><rect x="280.6" y="1683.0" width="464.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.6" y="1694.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="281.6" y="1667.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="284.6" y="1678.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.83%)</title><rect x="282.5" y="1667.0" width="9.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="285.5" y="1678.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="285.5" y="1651.0" width="6.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="288.5" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (463 samples, 38.33%)</title><rect x="292.3" y="1667.0" width="452.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.3" y="1678.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedul..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="294.3" y="1651.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="297.3" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (3 samples, 0.25%)</title><rect x="295.2" y="1651.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.2" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (3 samples, 0.25%)</title><rect x="295.2" y="1635.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/116496112.get (3 samples, 0.25%)</title><rect x="295.2" y="1619.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.2" y="1630.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.25%)</title><rect x="295.2" y="1603.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.2" y="1614.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="295.2" y="1587.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="298.2" y="1598.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="296.2" y="1587.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="299.2" y="1598.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="296.2" y="1571.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="299.2" y="1582.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="296.2" y="1555.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="299.2" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="297.2" y="1539.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="300.2" y="1550.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="297.2" y="1523.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="300.2" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="297.2" y="1507.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="300.2" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (142 samples, 11.75%)</title><rect x="298.2" y="1651.0" width="138.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.2" y="1662.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (141 samples, 11.67%)</title><rect x="299.1" y="1635.0" width="137.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.1" y="1646.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (141 samples, 11.67%)</title><rect x="299.1" y="1619.0" width="137.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.1" y="1630.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 11.67%)</title><rect x="299.1" y="1603.0" width="137.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.1" y="1614.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 11.67%)</title><rect x="299.1" y="1587.0" width="137.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.1" y="1598.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (141 samples, 11.67%)</title><rect x="299.1" y="1571.0" width="137.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.1" y="1582.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 3.64%)</title><rect x="299.1" y="1555.0" width="43.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.1" y="1566.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (16 samples, 1.32%)</title><rect x="299.1" y="1539.0" width="15.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.1" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (16 samples, 1.32%)</title><rect x="299.1" y="1523.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.1" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (16 samples, 1.32%)</title><rect x="299.1" y="1507.0" width="15.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 1.32%)</title><rect x="299.1" y="1491.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.1" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.25%)</title><rect x="311.8" y="1475.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.8" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 2.32%)</title><rect x="314.8" y="1539.0" width="27.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.8" y="1550.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (28 samples, 2.32%)</title><rect x="314.8" y="1523.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.8" y="1534.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.58%)</title><rect x="314.8" y="1507.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.8" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (7 samples, 0.58%)</title><rect x="314.8" y="1491.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.8" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.17%)</title><rect x="318.7" y="1475.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.7" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="320.6" y="1475.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.6" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (14 samples, 1.16%)</title><rect x="321.6" y="1507.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="324.6" y="1518.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="321.6" y="1491.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="324.6" y="1502.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="321.6" y="1475.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="324.6" y="1486.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="321.6" y="1459.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="324.6" y="1470.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="321.6" y="1443.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="324.6" y="1454.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="321.6" y="1427.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="324.6" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (13 samples, 1.08%)</title><rect x="322.6" y="1491.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.6" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.17%)</title><rect x="329.4" y="1475.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.4" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.25%)</title><rect x="331.4" y="1475.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.4" y="1486.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="333.3" y="1459.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="336.3" y="1470.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="333.3" y="1443.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.3" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="333.3" y="1427.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="336.3" y="1438.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="333.3" y="1411.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="336.3" y="1422.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="333.3" y="1395.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="336.3" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="333.3" y="1379.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="336.3" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="334.3" y="1475.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.3" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.58%)</title><rect x="335.3" y="1507.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.3" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (7 samples, 0.58%)</title><rect x="335.3" y="1491.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.3" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (4 samples, 0.33%)</title><rect x="338.2" y="1475.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.2" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (88 samples, 7.28%)</title><rect x="342.1" y="1555.0" width="86.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.1" y="1566.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.33%)</title><rect x="342.1" y="1539.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.1" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.33%)</title><rect x="342.1" y="1523.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.1" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.33%)</title><rect x="342.1" y="1507.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.1" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.33%)</title><rect x="342.1" y="1491.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.1" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.08%)</title><rect x="342.1" y="1475.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.1" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.08%)</title><rect x="342.1" y="1459.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.1" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.08%)</title><rect x="342.1" y="1443.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.1" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (1 samples, 0.08%)</title><rect x="343.1" y="1475.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.1" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.17%)</title><rect x="344.1" y="1475.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="347.1" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.41%)</title><rect x="346.0" y="1539.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.0" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="346.0" y="1523.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.0" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.33%)</title><rect x="347.0" y="1507.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.0" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.66%)</title><rect x="350.9" y="1539.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.9" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.50%)</title><rect x="352.9" y="1523.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.9" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.41%)</title><rect x="352.9" y="1507.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.9" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.08%)</title><rect x="356.8" y="1491.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.8" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="356.8" y="1475.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.8" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="357.7" y="1507.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.7" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.58%)</title><rect x="358.7" y="1539.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.7" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.58%)</title><rect x="358.7" y="1523.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.7" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (7 samples, 0.58%)</title><rect x="358.7" y="1507.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="361.7" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (7 samples, 0.58%)</title><rect x="358.7" y="1491.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.7" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="359.7" y="1475.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.7" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.33%)</title><rect x="361.7" y="1475.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.7" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 5.30%)</title><rect x="365.6" y="1539.0" width="62.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.6" y="1550.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.66%)</title><rect x="365.6" y="1523.0" width="19.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.6" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.33%)</title><rect x="367.5" y="1507.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.5" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.33%)</title><rect x="367.5" y="1491.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.5" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.33%)</title><rect x="367.5" y="1475.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.5" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.91%)</title><rect x="371.4" y="1507.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.4" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="382.2" y="1507.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.2" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="382.2" y="1491.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.2" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="384.1" y="1507.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.1" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (44 samples, 3.64%)</title><rect x="385.1" y="1523.0" width="43.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.1" y="1534.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (44 samples, 3.64%)</title><rect x="385.1" y="1507.0" width="43.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.1" y="1518.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 3.56%)</title><rect x="386.1" y="1491.0" width="42.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="389.1" y="1502.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.41%)</title><rect x="391.9" y="1475.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="394.9" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.75%)</title><rect x="396.8" y="1459.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.8" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.75%)</title><rect x="396.8" y="1443.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.8" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.75%)</title><rect x="396.8" y="1427.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.8" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.58%)</title><rect x="398.8" y="1411.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.8" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.33%)</title><rect x="398.8" y="1395.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.8" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.33%)</title><rect x="398.8" y="1379.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="401.8" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.17%)</title><rect x="400.7" y="1363.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.7" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.25%)</title><rect x="402.7" y="1395.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="405.7" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.08%)</title><rect x="405.6" y="1459.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="408.6" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="406.6" y="1459.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.6" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="406.6" y="1443.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.6" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="407.6" y="1427.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.6" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.66%)</title><rect x="408.5" y="1475.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.5" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.58%)</title><rect x="409.5" y="1459.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.5" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.58%)</title><rect x="409.5" y="1443.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.5" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.58%)</title><rect x="409.5" y="1427.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.5" y="1438.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.58%)</title><rect x="409.5" y="1411.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.5" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.66%)</title><rect x="416.4" y="1475.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.4" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.66%)</title><rect x="416.4" y="1459.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.4" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.66%)</title><rect x="416.4" y="1443.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.4" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.66%)</title><rect x="416.4" y="1427.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.4" y="1438.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.66%)</title><rect x="416.4" y="1411.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="419.4" y="1422.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.66%)</title><rect x="416.4" y="1395.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.4" y="1406.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (8 samples, 0.66%)</title><rect x="416.4" y="1379.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.4" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.17%)</title><rect x="424.2" y="1475.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.2" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="424.2" y="1459.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.2" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="424.2" y="1443.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.2" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.17%)</title><rect x="426.1" y="1475.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.1" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.75%)</title><rect x="428.1" y="1555.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.1" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.75%)</title><rect x="428.1" y="1539.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="431.1" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.75%)</title><rect x="428.1" y="1523.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="431.1" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.75%)</title><rect x="428.1" y="1507.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="431.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.75%)</title><rect x="428.1" y="1491.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.1" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.25%)</title><rect x="432.0" y="1475.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.0" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.08%)</title><rect x="434.9" y="1475.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="437.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.08%)</title><rect x="435.9" y="1475.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.9" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (296 samples, 24.50%)</title><rect x="436.9" y="1651.0" width="289.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.9" y="1662.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="438.8" y="1635.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="441.8" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="438.8" y="1619.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="441.8" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="438.8" y="1603.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="441.8" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="438.8" y="1587.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="441.8" y="1598.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="438.8" y="1571.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="441.8" y="1582.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="439.8" y="1635.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="442.8" y="1646.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="440.8" y="1635.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="443.8" y="1646.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="442.7" y="1619.0" width="2.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="445.7" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (59 samples, 4.88%)</title><rect x="444.7" y="1635.0" width="57.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.7" y="1646.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (57 samples, 4.72%)</title><rect x="446.6" y="1619.0" width="55.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.6" y="1630.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 4.22%)</title><rect x="452.5" y="1603.0" width="49.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.5" y="1614.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.75%)</title><rect x="454.5" y="1587.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.5" y="1598.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.75%)</title><rect x="454.5" y="1571.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="457.5" y="1582.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.75%)</title><rect x="454.5" y="1555.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="457.5" y="1566.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.75%)</title><rect x="454.5" y="1539.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.5" y="1550.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.17%)</title><rect x="461.3" y="1523.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.3" y="1534.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (40 samples, 3.31%)</title><rect x="463.2" y="1587.0" width="39.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.2" y="1598.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.91%)</title><rect x="491.6" y="1571.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.6" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.91%)</title><rect x="491.6" y="1555.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.6" y="1566.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.33%)</title><rect x="498.4" y="1539.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.4" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.58%)</title><rect x="502.3" y="1635.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.3" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.58%)</title><rect x="502.3" y="1619.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.3" y="1630.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.58%)</title><rect x="502.3" y="1603.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.3" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (151 samples, 12.50%)</title><rect x="509.2" y="1635.0" width="147.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.2" y="1646.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (151 samples, 12.50%)</title><rect x="509.2" y="1619.0" width="147.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.2" y="1630.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (50 samples, 4.14%)</title><rect x="516.0" y="1603.0" width="48.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.0" y="1614.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 3.06%)</title><rect x="521.9" y="1587.0" width="36.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.9" y="1598.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 2.90%)</title><rect x="523.8" y="1571.0" width="34.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.8" y="1582.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 1.99%)</title><rect x="529.7" y="1555.0" width="23.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.7" y="1566.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (24 samples, 1.99%)</title><rect x="529.7" y="1539.0" width="23.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="532.7" y="1550.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 1.99%)</title><rect x="529.7" y="1523.0" width="23.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="532.7" y="1534.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.75%)</title><rect x="539.4" y="1507.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="542.4" y="1518.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.08%)</title><rect x="539.4" y="1491.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="542.4" y="1502.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.41%)</title><rect x="540.4" y="1491.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="543.4" y="1502.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.41%)</title><rect x="540.4" y="1475.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="543.4" y="1486.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.41%)</title><rect x="540.4" y="1459.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="543.4" y="1470.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.08%)</title><rect x="540.4" y="1443.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="543.4" y="1454.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="541.4" y="1443.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="544.4" y="1454.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="541.4" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="544.4" y="1438.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="542.4" y="1443.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="545.4" y="1454.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="543.3" y="1443.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="546.3" y="1454.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="544.3" y="1443.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="547.3" y="1454.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="545.3" y="1491.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="548.3" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="545.3" y="1475.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="548.3" y="1486.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="545.3" y="1459.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="548.3" y="1470.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="546.3" y="1475.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="549.3" y="1486.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="547.3" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="550.3" y="1502.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="548.2" y="1507.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.2" y="1518.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="549.2" y="1507.0" width="3.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="552.2" y="1518.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="553.1" y="1555.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="556.1" y="1566.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="556.0" y="1555.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="559.0" y="1566.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="557.0" y="1555.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="560.0" y="1566.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.25%)</title><rect x="558.0" y="1587.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="561.0" y="1598.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="560.9" y="1587.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="563.9" y="1598.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.91%)</title><rect x="564.8" y="1603.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.8" y="1614.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.91%)</title><rect x="564.8" y="1587.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.8" y="1598.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="564.8" y="1571.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="567.8" y="1582.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="564.8" y="1555.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="567.8" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="564.8" y="1539.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.8" y="1550.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="564.8" y="1523.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="567.8" y="1534.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.83%)</title><rect x="565.8" y="1571.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="568.8" y="1582.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (83 samples, 6.87%)</title><rect x="575.6" y="1603.0" width="81.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.6" y="1614.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (82 samples, 6.79%)</title><rect x="576.6" y="1587.0" width="80.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="579.6" y="1598.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.66%)</title><rect x="576.6" y="1571.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="579.6" y="1582.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.66%)</title><rect x="576.6" y="1555.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="579.6" y="1566.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.66%)</title><rect x="576.6" y="1539.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.6" y="1550.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.66%)</title><rect x="576.6" y="1523.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.6" y="1534.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.17%)</title><rect x="582.4" y="1507.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.4" y="1518.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="582.4" y="1491.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.4" y="1502.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (74 samples, 6.13%)</title><rect x="584.4" y="1571.0" width="72.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.4" y="1582.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 5.63%)</title><rect x="590.2" y="1555.0" width="66.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.2" y="1566.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.06%)</title><rect x="620.5" y="1539.0" width="36.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.5" y="1550.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.08%)</title><rect x="641.0" y="1523.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.0" y="1534.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.75%)</title><rect x="642.0" y="1523.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.0" y="1534.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.50%)</title><rect x="650.8" y="1523.0" width="5.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="653.8" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 4.30%)</title><rect x="656.7" y="1635.0" width="50.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.7" y="1646.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (3 samples, 0.25%)</title><rect x="656.7" y="1619.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.7" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 4.06%)</title><rect x="659.6" y="1619.0" width="47.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.6" y="1630.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/234677850.process (31 samples, 2.57%)</title><rect x="663.5" y="1603.0" width="30.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.5" y="1614.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (28 samples, 2.32%)</title><rect x="666.4" y="1587.0" width="27.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.4" y="1598.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 1.90%)</title><rect x="667.4" y="1571.0" width="22.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.4" y="1582.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="678.1" y="1555.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.1" y="1566.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="678.1" y="1539.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="681.1" y="1550.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.25%)</title><rect x="678.1" y="1523.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="681.1" y="1534.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.25%)</title><rect x="678.1" y="1507.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.25%)</title><rect x="678.1" y="1491.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.1" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.17%)</title><rect x="679.1" y="1475.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="682.1" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.75%)</title><rect x="681.1" y="1555.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.1" y="1566.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.75%)</title><rect x="681.1" y="1539.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.1" y="1550.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.75%)</title><rect x="681.1" y="1523.0" width="8.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="684.1" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.33%)</title><rect x="689.9" y="1571.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.9" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$262/686314279.complete (1 samples, 0.08%)</title><rect x="693.8" y="1603.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="696.8" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (1 samples, 0.08%)</title><rect x="693.8" y="1587.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="696.8" y="1598.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="693.8" y="1571.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="696.8" y="1582.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="693.8" y="1555.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="696.8" y="1566.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="693.8" y="1539.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="696.8" y="1550.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="693.8" y="1523.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="696.8" y="1534.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="693.8" y="1507.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="696.8" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="694.8" y="1603.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.8" y="1614.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="694.8" y="1587.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="697.8" y="1598.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.08%)</title><rect x="695.7" y="1603.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.7" y="1614.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="695.7" y="1587.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.7" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$262/686314279.get$Lambda (1 samples, 0.08%)</title><rect x="695.7" y="1571.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="698.7" y="1582.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="695.7" y="1555.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="698.7" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="695.7" y="1539.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="698.7" y="1550.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="695.7" y="1523.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="698.7" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="695.7" y="1507.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="698.7" y="1518.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="695.7" y="1491.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="698.7" y="1502.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="696.7" y="1603.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="699.7" y="1614.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="696.7" y="1587.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="699.7" y="1598.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.58%)</title><rect x="697.7" y="1603.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.7" y="1614.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="699.6" y="1587.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="702.6" y="1598.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.33%)</title><rect x="699.6" y="1571.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="702.6" y="1582.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.08%)</title><rect x="703.5" y="1571.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="706.5" y="1582.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.25%)</title><rect x="704.5" y="1603.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="707.5" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="707.5" y="1635.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="710.5" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.32%)</title><rect x="709.4" y="1635.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.4" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.32%)</title><rect x="709.4" y="1619.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.4" y="1630.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="711.4" y="1603.0" width="3.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="714.4" y="1614.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="711.4" y="1587.0" width="3.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="714.4" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.83%)</title><rect x="715.3" y="1603.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.3" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1699269955.accept (10 samples, 0.83%)</title><rect x="715.3" y="1587.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="718.3" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (10 samples, 0.83%)</title><rect x="715.3" y="1571.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="718.3" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (10 samples, 0.83%)</title><rect x="715.3" y="1555.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.3" y="1566.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.83%)</title><rect x="715.3" y="1539.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="718.3" y="1550.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.83%)</title><rect x="715.3" y="1523.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.3" y="1534.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="717.2" y="1507.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="720.2" y="1518.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.58%)</title><rect x="718.2" y="1507.0" width="6.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="721.2" y="1518.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="718.2" y="1491.0" width="6.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="721.2" y="1502.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="725.0" y="1635.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.0" y="1646.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.08%)</title><rect x="726.0" y="1651.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.0" y="1662.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="726.0" y="1635.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.0" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/874959095.get$Lambda (1 samples, 0.08%)</title><rect x="726.0" y="1619.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.0" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.91%)</title><rect x="727.0" y="1651.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.0" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.91%)</title><rect x="727.0" y="1635.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.0" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.17%)</title><rect x="728.0" y="1619.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="731.0" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.66%)</title><rect x="729.9" y="1619.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="732.9" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1699269955.accept (8 samples, 0.66%)</title><rect x="729.9" y="1603.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="732.9" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.66%)</title><rect x="729.9" y="1587.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="732.9" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (8 samples, 0.66%)</title><rect x="729.9" y="1571.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.9" y="1582.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.66%)</title><rect x="729.9" y="1555.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="732.9" y="1566.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.66%)</title><rect x="729.9" y="1539.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="732.9" y="1550.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.58%)</title><rect x="737.7" y="1651.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="740.7" y="1662.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="737.7" y="1635.0" width="6.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="740.7" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="744.6" y="1667.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.6" y="1678.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="744.6" y="1651.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.6" y="1662.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="744.6" y="1635.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.6" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="744.6" y="1619.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="747.6" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="744.6" y="1603.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="747.6" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="744.6" y="1587.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="747.6" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="744.6" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="747.6" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.33%)</title><rect x="745.5" y="1715.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="748.5" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.33%)</title><rect x="745.5" y="1699.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.5" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.33%)</title><rect x="745.5" y="1683.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.5" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.33%)</title><rect x="745.5" y="1667.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.5" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (212 samples, 17.55%)</title><rect x="749.5" y="1715.0" width="207.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.5" y="1726.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (210 samples, 17.38%)</title><rect x="751.4" y="1699.0" width="205.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="754.4" y="1710.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (192 samples, 15.89%)</title><rect x="755.3" y="1683.0" width="187.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.3" y="1694.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (29 samples, 2.40%)</title><rect x="762.2" y="1667.0" width="28.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.2" y="1678.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.66%)</title><rect x="790.5" y="1667.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="793.5" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.66%)</title><rect x="790.5" y="1651.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.5" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.66%)</title><rect x="790.5" y="1635.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.5" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.66%)</title><rect x="790.5" y="1619.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.5" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (148 samples, 12.25%)</title><rect x="798.3" y="1667.0" width="144.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.3" y="1678.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (146 samples, 12.09%)</title><rect x="800.2" y="1651.0" width="142.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.2" y="1662.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="804.2" y="1635.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.2" y="1646.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="805.1" y="1635.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.1" y="1646.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="806.1" y="1635.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="809.1" y="1646.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="807.1" y="1635.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="810.1" y="1646.0"></text>
</g>
<g>
<title>Unsafe_Park (135 samples, 11.18%)</title><rect x="808.1" y="1635.0" width="131.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="811.1" y="1646.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="812.0" y="1619.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="815.0" y="1630.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 2.15%)</title><rect x="813.9" y="1619.0" width="25.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="816.9" y="1630.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.75%)</title><rect x="825.6" y="1603.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="828.6" y="1614.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="827.6" y="1587.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="830.6" y="1598.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="828.6" y="1571.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="831.6" y="1582.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="829.6" y="1587.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="832.6" y="1598.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.33%)</title><rect x="830.5" y="1587.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="833.5" y="1598.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="834.4" y="1603.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="837.4" y="1614.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.33%)</title><rect x="835.4" y="1603.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.4" y="1614.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="839.3" y="1619.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="842.3" y="1630.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="840.3" y="1619.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="843.3" y="1630.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.41%)</title><rect x="841.3" y="1619.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="844.3" y="1630.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 2.90%)</title><rect x="846.2" y="1619.0" width="34.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="849.2" y="1630.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (41 samples, 3.39%)</title><rect x="880.3" y="1619.0" width="40.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="883.3" y="1630.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.25%)</title><rect x="920.4" y="1619.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="923.4" y="1630.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 0.50%)</title><rect x="923.3" y="1619.0" width="5.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="926.3" y="1630.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="929.2" y="1619.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="932.2" y="1630.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="930.2" y="1619.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="933.2" y="1630.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.41%)</title><rect x="932.1" y="1619.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="935.1" y="1630.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.25%)</title><rect x="937.0" y="1619.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="940.0" y="1630.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.17%)</title><rect x="939.9" y="1635.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.9" y="1646.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="941.9" y="1635.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="944.9" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.16%)</title><rect x="942.9" y="1683.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="945.9" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.16%)</title><rect x="942.9" y="1667.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="945.9" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.16%)</title><rect x="942.9" y="1651.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="945.9" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.16%)</title><rect x="942.9" y="1635.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="945.9" y="1646.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (3 samples, 0.25%)</title><rect x="956.5" y="1763.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="959.5" y="1774.0"></text>
</g>
<g>
<title>start_thread (236 samples, 19.54%)</title><rect x="959.5" y="1763.0" width="230.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="962.5" y="1774.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (236 samples, 19.54%)</title><rect x="959.5" y="1747.0" width="230.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="962.5" y="1758.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.66%)</title><rect x="959.5" y="1731.0" width="19.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.5" y="1742.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.41%)</title><rect x="959.5" y="1715.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.5" y="1726.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.41%)</title><rect x="959.5" y="1699.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.5" y="1710.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="959.5" y="1683.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.5" y="1694.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="961.4" y="1683.0" width="3.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="964.4" y="1694.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.24%)</title><rect x="964.4" y="1715.0" width="14.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.4" y="1726.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.41%)</title><rect x="964.4" y="1699.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.4" y="1710.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="964.4" y="1683.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.4" y="1694.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="964.4" y="1667.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.4" y="1678.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="965.3" y="1683.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="968.3" y="1694.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="966.3" y="1683.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="969.3" y="1694.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.50%)</title><rect x="969.2" y="1699.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.2" y="1710.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="969.2" y="1683.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.2" y="1694.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="969.2" y="1667.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.2" y="1678.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="969.2" y="1651.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="972.2" y="1662.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="969.2" y="1635.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.2" y="1646.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.41%)</title><rect x="970.2" y="1683.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.2" y="1694.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.41%)</title><rect x="970.2" y="1667.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.2" y="1678.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="975.1" y="1699.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.1" y="1710.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="975.1" y="1683.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.1" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="975.1" y="1667.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.1" y="1678.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.33%)</title><rect x="975.1" y="1651.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="978.1" y="1662.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.33%)</title><rect x="975.1" y="1635.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.1" y="1646.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.33%)</title><rect x="975.1" y="1619.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.1" y="1630.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="976.1" y="1603.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.1" y="1614.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="977.1" y="1587.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.1" y="1598.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="978.0" y="1587.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.0" y="1598.0"></text>
</g>
<g>
<title>JavaThread::run() (213 samples, 17.63%)</title><rect x="979.0" y="1731.0" width="208.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.0" y="1742.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (213 samples, 17.63%)</title><rect x="979.0" y="1715.0" width="208.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.0" y="1726.0">JavaThread::thread_main_inn..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (212 samples, 17.55%)</title><rect x="979.0" y="1699.0" width="207.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.0" y="1710.0">CompileBroker::compiler_thr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (212 samples, 17.55%)</title><rect x="979.0" y="1683.0" width="207.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.0" y="1694.0">CompileBroker::invoke_compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (212 samples, 17.55%)</title><rect x="979.0" y="1667.0" width="207.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.0" y="1678.0">C2Compiler::compile_method(..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (212 samples, 17.55%)</title><rect x="979.0" y="1651.0" width="207.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.0" y="1662.0">Compile::Compile(ciEnv*, C2..</text>
</g>
<g>
<title>Compile::Code_Gen() (123 samples, 10.18%)</title><rect x="979.0" y="1635.0" width="120.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="982.0" y="1646.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.33%)</title><rect x="979.0" y="1619.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.0" y="1630.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="979.0" y="1603.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.0" y="1614.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="981.0" y="1603.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.0" y="1614.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.08%)</title><rect x="981.0" y="1587.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.0" y="1598.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.08%)</title><rect x="981.0" y="1571.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="984.0" y="1582.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="981.0" y="1555.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.0" y="1566.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="981.0" y="1539.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.0" y="1550.0"></text>
</g>
<g>
<title>MachNode::size(PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="981.9" y="1587.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.9" y="1598.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.58%)</title><rect x="982.9" y="1619.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.9" y="1630.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.08%)</title><rect x="985.8" y="1603.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.8" y="1614.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="986.8" y="1603.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.8" y="1614.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="986.8" y="1587.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.8" y="1598.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.08%)</title><rect x="986.8" y="1571.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.8" y="1582.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.08%)</title><rect x="986.8" y="1555.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.8" y="1566.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="987.8" y="1603.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="990.8" y="1614.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="988.8" y="1587.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="991.8" y="1598.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.83%)</title><rect x="989.8" y="1619.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.8" y="1630.0"></text>
</g>
<g>
<title>CatchNode::Opcode() const (1 samples, 0.08%)</title><rect x="989.8" y="1603.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.8" y="1614.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.75%)</title><rect x="990.7" y="1603.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="993.7" y="1614.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.66%)</title><rect x="990.7" y="1587.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="993.7" y="1598.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.08%)</title><rect x="998.5" y="1587.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.5" y="1598.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.33%)</title><rect x="999.5" y="1619.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.5" y="1630.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.33%)</title><rect x="999.5" y="1603.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.5" y="1614.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="999.5" y="1587.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.5" y="1598.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1000.5" y="1587.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.5" y="1598.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1002.5" y="1587.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.5" y="1598.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (97 samples, 8.03%)</title><rect x="1003.4" y="1619.0" width="94.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.4" y="1630.0">PhaseChaiti..</text>
</g>
<g>
<title>Node::jvms() const (2 samples, 0.17%)</title><rect x="1003.4" y="1603.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.4" y="1614.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1005.4" y="1603.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.4" y="1614.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1006.4" y="1603.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.4" y="1614.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1006.4" y="1587.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.4" y="1598.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (9 samples, 0.75%)</title><rect x="1007.3" y="1603.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1010.3" y="1614.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1009.3" y="1587.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.3" y="1598.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1010.3" y="1587.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.3" y="1598.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.41%)</title><rect x="1011.2" y="1587.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1014.2" y="1598.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1013.2" y="1571.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.2" y="1582.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.41%)</title><rect x="1016.1" y="1603.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.1" y="1614.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1016.1" y="1587.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.1" y="1598.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.33%)</title><rect x="1017.1" y="1587.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.1" y="1598.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1018.1" y="1571.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.1" y="1582.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.99%)</title><rect x="1021.0" y="1603.0" width="11.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.0" y="1614.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.08%)</title><rect x="1029.8" y="1587.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.8" y="1598.0"></text>
</g>
<g>
<title>MallocTracker::record_free(void*) (1 samples, 0.08%)</title><rect x="1029.8" y="1571.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.8" y="1582.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="1030.8" y="1587.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1033.8" y="1598.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1030.8" y="1571.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.8" y="1582.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.08%)</title><rect x="1031.8" y="1587.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.8" y="1598.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 1.57%)</title><rect x="1032.7" y="1603.0" width="18.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.7" y="1614.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1037.6" y="1587.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.6" y="1598.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1038.6" y="1587.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.6" y="1598.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1039.6" y="1587.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.6" y="1598.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1040.5" y="1587.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1043.5" y="1598.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.75%)</title><rect x="1041.5" y="1587.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.5" y="1598.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1048.4" y="1571.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.4" y="1582.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1050.3" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.3" y="1598.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1051.3" y="1603.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.3" y="1614.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.66%)</title><rect x="1052.3" y="1603.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.3" y="1614.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1056.2" y="1587.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.2" y="1598.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="1057.2" y="1587.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.2" y="1598.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.08%)</title><rect x="1059.1" y="1587.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.1" y="1598.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1060.1" y="1603.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1063.1" y="1614.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.33%)</title><rect x="1061.1" y="1603.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.1" y="1614.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (13 samples, 1.08%)</title><rect x="1065.0" y="1603.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.0" y="1614.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.25%)</title><rect x="1065.0" y="1587.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.0" y="1598.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 0.83%)</title><rect x="1067.9" y="1587.0" width="9.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.9" y="1598.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 0.83%)</title><rect x="1067.9" y="1571.0" width="9.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.9" y="1582.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.25%)</title><rect x="1067.9" y="1555.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.9" y="1566.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 0.58%)</title><rect x="1070.8" y="1555.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.8" y="1566.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.25%)</title><rect x="1077.7" y="1603.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.7" y="1614.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1078.6" y="1587.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.6" y="1598.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1079.6" y="1587.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1082.6" y="1598.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.41%)</title><rect x="1080.6" y="1603.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.6" y="1614.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1082.5" y="1587.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.5" y="1598.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1083.5" y="1587.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.5" y="1598.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1084.5" y="1587.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1087.5" y="1598.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.17%)</title><rect x="1085.5" y="1603.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.5" y="1614.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1086.5" y="1587.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.5" y="1598.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.75%)</title><rect x="1087.4" y="1603.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.4" y="1614.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.25%)</title><rect x="1092.3" y="1587.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.3" y="1598.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1095.2" y="1587.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.2" y="1598.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.08%)</title><rect x="1096.2" y="1603.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.2" y="1614.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::oper_input_base() const (1 samples, 0.08%)</title><rect x="1097.2" y="1603.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.2" y="1614.0"></text>
</g>
<g>
<title>RegionNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1098.2" y="1619.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.2" y="1630.0"></text>
</g>
<g>
<title>Compile::Optimize() (75 samples, 6.21%)</title><rect x="1099.2" y="1635.0" width="73.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.2" y="1646.0">Compile:..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.17%)</title><rect x="1099.2" y="1619.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="1630.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.17%)</title><rect x="1099.2" y="1603.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.41%)</title><rect x="1101.1" y="1619.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.41%)</title><rect x="1101.1" y="1603.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1587.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1102.1" y="1571.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.08%)</title><rect x="1102.1" y="1555.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.08%)</title><rect x="1102.1" y="1539.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.25%)</title><rect x="1103.1" y="1587.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1103.1" y="1571.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1103.1" y="1555.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1103.1" y="1539.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1103.1" y="1523.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.1" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1491.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.1" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1475.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1459.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.1" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1443.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.1" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1427.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.1" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.1" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1395.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.1" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1379.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1363.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.1" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1347.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.1" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1331.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1315.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1299.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1283.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1267.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1251.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1235.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1219.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1203.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1187.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1171.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1091.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1059.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1043.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="995.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="947.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="915.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="899.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="867.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="851.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="691.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="675.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="659.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="643.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="579.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="547.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="531.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="515.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="499.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="483.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="467.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="451.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="435.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="419.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="403.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="387.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="371.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="355.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="339.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="323.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="307.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="291.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="275.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="259.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="227.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="211.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="195.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="179.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="163.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="147.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="131.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.1" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="115.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.1" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="99.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.1" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="83.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.1" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="67.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1103.1" y="51.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.1" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1103.1" y="35.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.1" y="46.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1104.0" y="1507.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1107.0" y="1518.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1105.0" y="1571.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1108.0" y="1582.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.25%)</title><rect x="1106.0" y="1619.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.0" y="1630.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1107.9" y="1603.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.9" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (54 samples, 4.47%)</title><rect x="1108.9" y="1619.0" width="52.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.9" y="1630.0">Phase..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1108.9" y="1603.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.9" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.50%)</title><rect x="1109.9" y="1603.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.9" y="1614.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1114.8" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.8" y="1598.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.33%)</title><rect x="1115.8" y="1603.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.8" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1117.7" y="1587.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.7" y="1598.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1117.7" y="1571.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.7" y="1582.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1118.7" y="1587.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.7" y="1598.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (36 samples, 2.98%)</title><rect x="1119.7" y="1603.0" width="35.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.7" y="1614.0">Pha..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1121.6" y="1587.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.6" y="1598.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (33 samples, 2.73%)</title><rect x="1122.6" y="1587.0" width="32.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.6" y="1598.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1123.6" y="1571.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.6" y="1582.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (29 samples, 2.40%)</title><rect x="1126.5" y="1571.0" width="28.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.5" y="1582.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1149.0" y="1555.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.0" y="1566.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1149.0" y="1539.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.0" y="1550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.41%)</title><rect x="1150.0" y="1555.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="1566.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1154.8" y="1603.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.8" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1155.8" y="1603.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1157.8" y="1603.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="1614.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1158.7" y="1603.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="1614.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1158.7" y="1587.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.7" y="1598.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1158.7" y="1571.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.7" y="1582.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.7" y="1571.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.7" y="1582.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1159.7" y="1555.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.7" y="1566.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1160.7" y="1603.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.7" y="1614.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1161.7" y="1619.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1161.7" y="1603.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="1614.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.83%)</title><rect x="1162.6" y="1619.0" width="9.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="1630.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.6" y="1603.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="1614.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.75%)</title><rect x="1163.6" y="1603.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.6" y="1614.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.6" y="1587.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="1598.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.6" y="1571.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="1582.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1166.6" y="1587.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="1598.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.6" y="1571.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.6" y="1582.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1166.6" y="1555.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.6" y="1566.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1166.6" y="1539.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.6" y="1550.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1166.6" y="1523.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="1534.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1166.6" y="1507.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.6" y="1518.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1166.6" y="1491.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="1502.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1166.6" y="1475.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.6" y="1486.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1167.5" y="1571.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="1582.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.5" y="1555.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="1566.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1167.5" y="1539.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="1550.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1168.5" y="1587.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.5" y="1598.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.08%)</title><rect x="1170.5" y="1587.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.5" y="1598.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.4" y="1587.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="1598.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1171.4" y="1571.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.91%)</title><rect x="1172.4" y="1635.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.4" y="1646.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.91%)</title><rect x="1172.4" y="1619.0" width="10.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="1630.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.91%)</title><rect x="1172.4" y="1603.0" width="10.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.91%)</title><rect x="1172.4" y="1587.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.91%)</title><rect x="1172.4" y="1571.0" width="10.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.91%)</title><rect x="1172.4" y="1555.0" width="10.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.4" y="1566.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.75%)</title><rect x="1172.4" y="1539.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="1550.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.75%)</title><rect x="1172.4" y="1523.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.4" y="1534.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.75%)</title><rect x="1172.4" y="1507.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.4" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.75%)</title><rect x="1172.4" y="1491.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.75%)</title><rect x="1172.4" y="1475.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.66%)</title><rect x="1172.4" y="1459.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.4" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.50%)</title><rect x="1172.4" y="1443.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.50%)</title><rect x="1172.4" y="1427.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.50%)</title><rect x="1172.4" y="1411.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.50%)</title><rect x="1172.4" y="1395.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.50%)</title><rect x="1172.4" y="1379.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1172.4" y="1363.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.4" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1172.4" y="1347.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.4" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1172.4" y="1331.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1172.4" y="1315.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1172.4" y="1299.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1172.4" y="1283.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1172.4" y="1267.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1172.4" y="1251.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.4" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1172.4" y="1235.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1172.4" y="1219.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1172.4" y="1203.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1172.4" y="1187.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1172.4" y="1171.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.4" y="1182.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1172.4" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="1166.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1172.4" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="1150.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1172.4" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="1134.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1172.4" y="1107.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.4" y="1118.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1172.4" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.4" y="1102.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1172.4" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.4" y="1086.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.08%)</title><rect x="1172.4" y="1059.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.4" y="1070.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.08%)</title><rect x="1172.4" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1173.4" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1173.4" y="1139.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1173.4" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1173.4" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1173.4" y="1091.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1173.4" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1173.4" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1173.4" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1173.4" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1173.4" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1173.4" y="995.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1173.4" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1173.4" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1173.4" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1173.4" y="931.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1173.4" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1173.4" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1173.4" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1173.4" y="867.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.4" y="878.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1173.4" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="862.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1173.4" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="846.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.08%)</title><rect x="1173.4" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="830.0"></text>
</g>
<g>
<title>IdealKit::make_label(int) (1 samples, 0.08%)</title><rect x="1173.4" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.17%)</title><rect x="1174.4" y="1171.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1166.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1150.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1174.4" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1134.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1174.4" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1174.4" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1102.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1174.4" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1175.3" y="1155.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="1166.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1175.3" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="1150.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1175.3" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1175.3" y="1107.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1175.3" y="1091.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="1102.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.08%)</title><rect x="1175.3" y="1075.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1176.3" y="1347.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="1331.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="1315.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.3" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.3" y="1283.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.3" y="1267.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.3" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="1235.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="1219.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.3" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.3" y="1187.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.3" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.3" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="1139.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.3" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.3" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.3" y="1075.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.3" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1176.3" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="1176.3" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="1331.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="1315.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="1283.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="1267.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="1251.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="1235.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="1219.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="1203.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="1171.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="1139.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="1123.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="1075.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="1043.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="995.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.3" y="1006.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.3" y="979.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.3" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.08%)</title><rect x="1177.3" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1177.3" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.3" y="1443.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.3" y="1427.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.3" y="1411.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1178.3" y="1395.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1178.3" y="1379.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1178.3" y="1363.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.3" y="1347.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.3" y="1331.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.3" y="1315.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1178.3" y="1299.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1178.3" y="1283.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1178.3" y="1267.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.3" y="1251.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.3" y="1235.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.3" y="1219.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1178.3" y="1203.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1178.3" y="1187.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1178.3" y="1171.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.3" y="1155.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="1166.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.3" y="1139.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="1150.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1178.3" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="1134.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="1107.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="1118.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1178.3" y="1091.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="1139.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="1075.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="963.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="915.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="867.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="835.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="803.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="755.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="707.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1179.3" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1179.3" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="1459.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="1443.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="1454.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.2" y="1427.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="1438.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1180.2" y="1411.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="1422.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1180.2" y="1395.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="1406.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1180.2" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="1390.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="1363.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="1374.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="1347.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="1358.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="1331.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1181.2" y="1539.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="1550.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1181.2" y="1523.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1534.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.08%)</title><rect x="1181.2" y="1507.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="1518.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1181.2" y="1491.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1502.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1181.2" y="1475.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="1523.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="1507.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="1491.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="1475.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="1459.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="1443.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="1427.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="1411.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="1395.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="1379.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="1363.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="1347.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1358.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1331.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1342.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1182.2" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="1326.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1182.2" y="1299.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1182.2" y="1283.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1182.2" y="1267.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.2" y="1251.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.2" y="1235.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.2" y="1219.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1182.2" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="1198.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1182.2" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.2" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.2" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="1150.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1182.2" y="1123.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1107.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1182.2" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1182.2" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1182.2" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1182.2" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1027.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.25%)</title><rect x="1183.2" y="1635.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="1646.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.2" y="1619.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="1630.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1184.1" y="1619.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.1" y="1630.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1185.1" y="1619.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.1" y="1630.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1186.1" y="1699.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1710.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1186.1" y="1683.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="1694.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1186.1" y="1667.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="1678.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1186.1" y="1651.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1189.1" y="1662.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1186.1" y="1635.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="1646.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1186.1" y="1619.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="1630.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.08%)</title><rect x="1186.1" y="1603.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="1614.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1187.1" y="1731.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="1742.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1187.1" y="1715.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="1726.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1187.1" y="1699.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="1710.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1188.0" y="1683.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.0" y="1694.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1188.0" y="1667.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="1678.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.0" y="1651.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.0" y="1662.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.0" y="1635.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1646.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.0" y="1619.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.0" y="1630.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.0" y="1603.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="1614.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="1188.0" y="1587.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="1598.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="1188.0" y="1571.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="1582.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1699.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1710.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1683.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1694.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1667.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1678.0"></text>
</g>
<g>
<title>FlexibleWorkGang::active_workers() const (1 samples, 0.08%)</title><rect x="1189.0" y="1651.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="1662.0"></text>
</g>
</g>
</svg>
