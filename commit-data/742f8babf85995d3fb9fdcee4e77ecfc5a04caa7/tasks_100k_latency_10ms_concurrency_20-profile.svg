<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (279 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.36%)</title><rect x="10.0" y="1219.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.36%)</title><rect x="10.0" y="1203.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 7.17%)</title><rect x="14.2" y="1219.0" width="84.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1230.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.36%)</title><rect x="14.2" y="1203.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.36%)</title><rect x="14.2" y="1187.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.36%)</title><rect x="14.2" y="1171.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 6.81%)</title><rect x="18.5" y="1203.0" width="80.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.5" y="1214.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.36%)</title><rect x="18.5" y="1187.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.36%)</title><rect x="18.5" y="1171.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1594197076.accept (1 samples, 0.36%)</title><rect x="18.5" y="1155.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.36%)</title><rect x="18.5" y="1139.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.36%)</title><rect x="18.5" y="1123.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 1.08%)</title><rect x="22.7" y="1187.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.36%)</title><rect x="22.7" y="1171.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.36%)</title><rect x="22.7" y="1155.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.36%)</title><rect x="22.7" y="1139.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.36%)</title><rect x="22.7" y="1123.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.7" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.72%)</title><rect x="26.9" y="1171.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$305/1104191874.accept (1 samples, 0.36%)</title><rect x="31.1" y="1155.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$40 (1 samples, 0.36%)</title><rect x="31.1" y="1139.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (1 samples, 0.36%)</title><rect x="31.1" y="1123.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.79%)</title><rect x="35.4" y="1187.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.4" y="1198.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1115484232.accept (5 samples, 1.79%)</title><rect x="35.4" y="1171.0" width="21.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.4" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (5 samples, 1.79%)</title><rect x="35.4" y="1155.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.4" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.08%)</title><rect x="35.4" y="1139.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.08%)</title><rect x="35.4" y="1123.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.08%)</title><rect x="35.4" y="1107.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.08%)</title><rect x="35.4" y="1091.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.08%)</title><rect x="35.4" y="1075.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.72%)</title><rect x="48.1" y="1139.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.72%)</title><rect x="48.1" y="1123.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.58%)</title><rect x="56.5" y="1187.0" width="42.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.5" y="1198.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.58%)</title><rect x="56.5" y="1171.0" width="42.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.5" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.51%)</title><rect x="56.5" y="1155.0" width="29.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.5" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.72%)</title><rect x="56.5" y="1139.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.72%)</title><rect x="56.5" y="1123.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="56.5" y="1107.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="56.5" y="1091.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.36%)</title><rect x="56.5" y="1075.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.36%)</title><rect x="56.5" y="1059.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.36%)</title><rect x="56.5" y="1043.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.36%)</title><rect x="56.5" y="1027.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.36%)</title><rect x="56.5" y="1011.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.5" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.36%)</title><rect x="56.5" y="995.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.5" y="1006.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.36%)</title><rect x="56.5" y="979.0" width="4.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="59.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/800848180.shouldBlock (1 samples, 0.36%)</title><rect x="60.8" y="1107.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.36%)</title><rect x="60.8" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.36%)</title><rect x="60.8" y="1075.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.36%)</title><rect x="60.8" y="1059.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.36%)</title><rect x="60.8" y="1043.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.79%)</title><rect x="65.0" y="1139.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.0" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.79%)</title><rect x="65.0" y="1123.0" width="21.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.0" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.43%)</title><rect x="65.0" y="1107.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.43%)</title><rect x="65.0" y="1091.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.72%)</title><rect x="65.0" y="1075.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.36%)</title><rect x="65.0" y="1059.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.36%)</title><rect x="65.0" y="1043.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.36%)</title><rect x="69.2" y="1059.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.36%)</title><rect x="69.2" y="1043.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.36%)</title><rect x="69.2" y="1027.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.72%)</title><rect x="73.4" y="1075.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.72%)</title><rect x="73.4" y="1059.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.36%)</title><rect x="73.4" y="1043.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.36%)</title><rect x="73.4" y="1027.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.36%)</title><rect x="77.7" y="1043.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.7" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.36%)</title><rect x="77.7" y="1027.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.36%)</title><rect x="77.7" y="1011.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.7" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="77.7" y="995.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="80.7" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="77.7" y="979.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="80.7" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="77.7" y="963.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="80.7" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.36%)</title><rect x="77.7" y="947.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="80.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.36%)</title><rect x="81.9" y="1107.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.36%)</title><rect x="86.1" y="1155.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.36%)</title><rect x="86.1" y="1139.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.36%)</title><rect x="86.1" y="1123.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.36%)</title><rect x="86.1" y="1107.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="86.1" y="1091.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.36%)</title><rect x="86.1" y="1075.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.36%)</title><rect x="86.1" y="1059.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="86.1" y="1043.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="86.1" y="1027.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.36%)</title><rect x="86.1" y="1011.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.1" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.36%)</title><rect x="86.1" y="995.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="89.1" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.36%)</title><rect x="86.1" y="979.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="89.1" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.36%)</title><rect x="86.1" y="963.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="89.1" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.36%)</title><rect x="86.1" y="947.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="89.1" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.36%)</title><rect x="86.1" y="931.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="89.1" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.36%)</title><rect x="86.1" y="915.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="89.1" y="926.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.36%)</title><rect x="86.1" y="899.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="89.1" y="910.0"></text>
</g>
<g>
<title>CallInfo::set_virtual(KlassHandle, KlassHandle, methodHandle, methodHandle, int, Thread*) (1 samples, 0.36%)</title><rect x="86.1" y="883.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="89.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.72%)</title><rect x="90.4" y="1155.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.72%)</title><rect x="90.4" y="1139.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.72%)</title><rect x="90.4" y="1123.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.72%)</title><rect x="90.4" y="1107.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="90.4" y="1091.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.36%)</title><rect x="90.4" y="1075.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.36%)</title><rect x="90.4" y="1059.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.36%)</title><rect x="90.4" y="1043.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.36%)</title><rect x="90.4" y="1027.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.36%)</title><rect x="90.4" y="1011.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.36%)</title><rect x="90.4" y="995.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.4" y="1006.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.36%)</title><rect x="90.4" y="979.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="93.4" y="990.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="90.4" y="963.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="93.4" y="974.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.36%)</title><rect x="90.4" y="947.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="93.4" y="958.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::call_event(Method*, CompLevel) (1 samples, 0.36%)</title><rect x="90.4" y="931.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="93.4" y="942.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::common(bool (AdvancedThresholdPolicy::*)(int, int, CompLevel), Method*, CompLevel, bool) (1 samples, 0.36%)</title><rect x="90.4" y="915.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="93.4" y="926.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::loop_predicate(int, int, CompLevel) (1 samples, 0.36%)</title><rect x="90.4" y="899.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="93.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.36%)</title><rect x="94.6" y="1091.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (137 samples, 49.10%)</title><rect x="98.8" y="1219.0" width="579.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.8" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (137 samples, 49.10%)</title><rect x="98.8" y="1203.0" width="579.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.8" y="1214.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (137 samples, 49.10%)</title><rect x="98.8" y="1187.0" width="579.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.8" y="1198.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/790206222.run (132 samples, 47.31%)</title><rect x="98.8" y="1171.0" width="558.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.8" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/790206222.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (132 samples, 47.31%)</title><rect x="98.8" y="1155.0" width="558.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.8" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (132 samples, 47.31%)</title><rect x="98.8" y="1139.0" width="558.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="101.8" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="103.0" y="1123.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="106.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="103.0" y="1107.0" width="4.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="106.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (130 samples, 46.59%)</title><rect x="107.3" y="1123.0" width="549.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.3" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.36%)</title><rect x="115.7" y="1107.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (19 samples, 6.81%)</title><rect x="120.0" y="1107.0" width="80.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.0" y="1118.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (19 samples, 6.81%)</title><rect x="120.0" y="1091.0" width="80.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.0" y="1102.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (19 samples, 6.81%)</title><rect x="120.0" y="1075.0" width="80.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.0" y="1086.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (19 samples, 6.81%)</title><rect x="120.0" y="1059.0" width="80.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.0" y="1070.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (19 samples, 6.81%)</title><rect x="120.0" y="1043.0" width="80.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.0" y="1054.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (19 samples, 6.81%)</title><rect x="120.0" y="1027.0" width="80.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.0" y="1038.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 3.58%)</title><rect x="120.0" y="1011.0" width="42.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.0" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.79%)</title><rect x="120.0" y="995.0" width="21.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.0" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.79%)</title><rect x="120.0" y="979.0" width="21.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.0" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.72%)</title><rect x="120.0" y="963.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.08%)</title><rect x="128.4" y="963.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.72%)</title><rect x="132.7" y="947.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.72%)</title><rect x="132.7" y="931.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.72%)</title><rect x="132.7" y="915.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="135.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.79%)</title><rect x="141.1" y="995.0" width="21.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.1" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.79%)</title><rect x="141.1" y="979.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.1" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.08%)</title><rect x="141.1" y="963.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.36%)</title><rect x="149.6" y="947.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.72%)</title><rect x="153.8" y="963.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.8" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="153.8" y="947.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="156.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="153.8" y="931.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="156.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="153.8" y="915.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="156.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="153.8" y="899.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="156.8" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.36%)</title><rect x="153.8" y="883.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="156.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.36%)</title><rect x="158.0" y="947.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.36%)</title><rect x="158.0" y="931.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="158.0" y="915.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="161.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="158.0" y="899.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="161.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="158.0" y="883.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="161.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.36%)</title><rect x="158.0" y="867.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="161.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 2.87%)</title><rect x="162.3" y="1011.0" width="33.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="165.3" y="1022.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.72%)</title><rect x="162.3" y="995.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.36%)</title><rect x="162.3" y="979.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.36%)</title><rect x="166.5" y="979.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.15%)</title><rect x="170.7" y="995.0" width="25.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.7" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.15%)</title><rect x="170.7" y="979.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.7" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.15%)</title><rect x="170.7" y="963.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.7" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.15%)</title><rect x="170.7" y="947.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.7" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 1.08%)</title><rect x="170.7" y="931.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 1.08%)</title><rect x="170.7" y="915.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 1.08%)</title><rect x="170.7" y="899.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 1.08%)</title><rect x="170.7" y="883.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.7" y="894.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 1.08%)</title><rect x="170.7" y="867.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.7" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.08%)</title><rect x="170.7" y="851.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.7" y="862.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.72%)</title><rect x="174.9" y="835.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.9" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="179.2" y="819.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="182.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="183.4" y="931.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="183.4" y="915.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="183.4" y="899.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.72%)</title><rect x="187.6" y="931.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.36%)</title><rect x="196.1" y="1011.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.36%)</title><rect x="196.1" y="995.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.36%)</title><rect x="196.1" y="979.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="199.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.36%)</title><rect x="196.1" y="963.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (100 samples, 35.84%)</title><rect x="200.3" y="1107.0" width="423.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.3" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (19 samples, 6.81%)</title><rect x="200.3" y="1091.0" width="80.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.3" y="1102.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 6.81%)</title><rect x="200.3" y="1075.0" width="80.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.3" y="1086.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 6.45%)</title><rect x="204.6" y="1059.0" width="76.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.6" y="1070.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.72%)</title><rect x="204.6" y="1043.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.72%)</title><rect x="204.6" y="1027.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.72%)</title><rect x="204.6" y="1011.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.72%)</title><rect x="204.6" y="995.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.36%)</title><rect x="208.8" y="979.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.36%)</title><rect x="208.8" y="963.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (16 samples, 5.73%)</title><rect x="213.0" y="1043.0" width="67.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.0" y="1054.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 3.23%)</title><rect x="242.6" y="1027.0" width="38.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.6" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 3.23%)</title><rect x="242.6" y="1011.0" width="38.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.6" y="1022.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.36%)</title><rect x="272.2" y="995.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.2" y="1006.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="276.5" y="995.0" width="4.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="279.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.08%)</title><rect x="280.7" y="1091.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.08%)</title><rect x="280.7" y="1075.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.08%)</title><rect x="280.7" y="1059.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (20 samples, 7.17%)</title><rect x="293.4" y="1091.0" width="84.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.4" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 7.17%)</title><rect x="293.4" y="1075.0" width="84.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.4" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.87%)</title><rect x="293.4" y="1059.0" width="33.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.4" y="1070.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.51%)</title><rect x="293.4" y="1043.0" width="29.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.4" y="1054.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.08%)</title><rect x="310.3" y="1027.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.36%)</title><rect x="314.5" y="1011.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.36%)</title><rect x="314.5" y="995.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.36%)</title><rect x="314.5" y="979.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.5" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="318.7" y="1011.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.7" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="323.0" y="1043.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="326.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.72%)</title><rect x="327.2" y="1059.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.72%)</title><rect x="327.2" y="1043.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.72%)</title><rect x="327.2" y="1027.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.36%)</title><rect x="331.4" y="1011.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.4" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 3.58%)</title><rect x="335.7" y="1059.0" width="42.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.7" y="1070.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.58%)</title><rect x="335.7" y="1043.0" width="42.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="338.7" y="1054.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 3.58%)</title><rect x="335.7" y="1027.0" width="42.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.7" y="1038.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 3.23%)</title><rect x="339.9" y="1011.0" width="38.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.9" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.79%)</title><rect x="356.8" y="995.0" width="21.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.8" y="1006.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.36%)</title><rect x="356.8" y="979.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.43%)</title><rect x="361.0" y="979.0" width="17.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (56 samples, 20.07%)</title><rect x="378.0" y="1091.0" width="236.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.0" y="1102.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (55 samples, 19.71%)</title><rect x="382.2" y="1075.0" width="232.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.2" y="1086.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1002249153.process (49 samples, 17.56%)</title><rect x="382.2" y="1059.0" width="207.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.2" y="1070.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (49 samples, 17.56%)</title><rect x="382.2" y="1043.0" width="207.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.2" y="1054.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 17.56%)</title><rect x="382.2" y="1027.0" width="207.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.2" y="1038.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 17.56%)</title><rect x="382.2" y="1011.0" width="207.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.2" y="1022.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (47 samples, 16.85%)</title><rect x="386.4" y="995.0" width="198.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.4" y="1006.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 16.13%)</title><rect x="394.9" y="979.0" width="190.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="397.9" y="990.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.08%)</title><rect x="424.5" y="963.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="427.5" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.72%)</title><rect x="437.2" y="963.0" width="8.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="440.2" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="441.4" y="947.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="444.4" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 11.83%)</title><rect x="445.6" y="963.0" width="139.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="448.6" y="974.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.72%)</title><rect x="466.8" y="947.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="469.8" y="958.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.72%)</title><rect x="466.8" y="931.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="469.8" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.72%)</title><rect x="475.2" y="947.0" width="8.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="478.2" y="958.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.72%)</title><rect x="475.2" y="931.0" width="8.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="478.2" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 2.51%)</title><rect x="483.7" y="947.0" width="29.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="486.7" y="958.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 5.02%)</title><rect x="513.3" y="947.0" width="59.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="516.3" y="958.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.36%)</title><rect x="572.5" y="947.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="575.5" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.72%)</title><rect x="576.7" y="947.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.7" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="585.2" y="995.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="588.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="585.2" y="979.0" width="4.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="588.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="589.4" y="1059.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="589.4" y="1043.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.08%)</title><rect x="593.7" y="1059.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="596.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="602.1" y="1043.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="605.1" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="602.1" y="1027.0" width="4.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="605.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.72%)</title><rect x="606.3" y="1059.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="609.3" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="606.3" y="1043.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="610.6" y="1043.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.72%)</title><rect x="614.8" y="1091.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.72%)</title><rect x="614.8" y="1075.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.36%)</title><rect x="614.8" y="1059.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="617.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/255705690.accept (1 samples, 0.36%)</title><rect x="614.8" y="1043.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.36%)</title><rect x="614.8" y="1027.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="614.8" y="1011.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.8" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="614.8" y="995.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="617.8" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="614.8" y="979.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.8" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="614.8" y="963.0" width="4.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="617.8" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="614.8" y="947.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="617.8" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.36%)</title><rect x="619.0" y="1059.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.36%)</title><rect x="623.3" y="1107.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.36%)</title><rect x="623.3" y="1091.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$291/48475139.get$Lambda (1 samples, 0.36%)</title><rect x="623.3" y="1075.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="623.3" y="1059.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="626.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.15%)</title><rect x="627.5" y="1107.0" width="25.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.5" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.15%)</title><rect x="627.5" y="1091.0" width="25.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.5" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.08%)</title><rect x="640.2" y="1075.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="643.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/255705690.accept (3 samples, 1.08%)</title><rect x="640.2" y="1059.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="643.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 1.08%)</title><rect x="640.2" y="1043.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="643.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.08%)</title><rect x="640.2" y="1027.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.2" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.08%)</title><rect x="640.2" y="1011.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="643.2" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.08%)</title><rect x="640.2" y="995.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="643.2" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="652.9" y="1107.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="655.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.72%)</title><rect x="657.1" y="1171.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="660.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.72%)</title><rect x="657.1" y="1155.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.72%)</title><rect x="657.1" y="1139.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.72%)</title><rect x="657.1" y="1123.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.08%)</title><rect x="665.6" y="1171.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.08%)</title><rect x="665.6" y="1155.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="668.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.08%)</title><rect x="665.6" y="1139.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.08%)</title><rect x="665.6" y="1123.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.08%)</title><rect x="665.6" y="1107.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.08%)</title><rect x="665.6" y="1091.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.36%)</title><rect x="678.2" y="1219.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="681.2" y="1230.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.36%)</title><rect x="678.2" y="1203.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="681.2" y="1214.0"></text>
</g>
<g>
<title>start_thread (120 samples, 43.01%)</title><rect x="682.5" y="1219.0" width="507.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="685.5" y="1230.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (120 samples, 43.01%)</title><rect x="682.5" y="1203.0" width="507.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="685.5" y="1214.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.87%)</title><rect x="682.5" y="1187.0" width="33.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="685.5" y="1198.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.87%)</title><rect x="682.5" y="1171.0" width="33.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="685.5" y="1182.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.87%)</title><rect x="682.5" y="1155.0" width="33.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="685.5" y="1166.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.87%)</title><rect x="682.5" y="1139.0" width="33.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="685.5" y="1150.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.08%)</title><rect x="699.4" y="1123.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.4" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.36%)</title><rect x="707.8" y="1107.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="710.8" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="712.1" y="1123.0" width="4.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="715.1" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (112 samples, 40.14%)</title><rect x="716.3" y="1187.0" width="473.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.3" y="1198.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (112 samples, 40.14%)</title><rect x="716.3" y="1171.0" width="473.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="719.3" y="1182.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (112 samples, 40.14%)</title><rect x="716.3" y="1155.0" width="473.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.3" y="1166.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (112 samples, 40.14%)</title><rect x="716.3" y="1139.0" width="473.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="719.3" y="1150.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (109 samples, 39.07%)</title><rect x="716.3" y="1123.0" width="461.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.3" y="1134.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (109 samples, 39.07%)</title><rect x="716.3" y="1107.0" width="461.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="719.3" y="1118.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 21.51%)</title><rect x="716.3" y="1091.0" width="253.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="719.3" y="1102.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.72%)</title><rect x="716.3" y="1075.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="719.3" y="1086.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.36%)</title><rect x="716.3" y="1059.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.3" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.36%)</title><rect x="720.5" y="1059.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="723.5" y="1070.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.36%)</title><rect x="720.5" y="1043.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="723.5" y="1054.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.08%)</title><rect x="724.8" y="1075.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="727.8" y="1086.0"></text>
</g>
<g>
<title>Assembler::call(Label&amp;, relocInfo::relocType) (1 samples, 0.36%)</title><rect x="724.8" y="1059.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="727.8" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.36%)</title><rect x="729.0" y="1059.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="732.0" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.36%)</title><rect x="729.0" y="1043.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.0" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="729.0" y="1027.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.0" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="733.2" y="1059.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="736.2" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="733.2" y="1043.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="736.2" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.79%)</title><rect x="737.5" y="1075.0" width="21.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="740.5" y="1086.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.79%)</title><rect x="737.5" y="1059.0" width="21.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.5" y="1070.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.08%)</title><rect x="737.5" y="1043.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="740.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.72%)</title><rect x="750.1" y="1043.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.36%)</title><rect x="750.1" y="1027.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="753.1" y="1038.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="750.1" y="1011.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="753.1" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="750.1" y="995.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.1" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="750.1" y="979.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="753.1" y="990.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="750.1" y="963.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="753.1" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.36%)</title><rect x="754.4" y="1027.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="757.4" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.36%)</title><rect x="754.4" y="1011.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.4" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.36%)</title><rect x="754.4" y="995.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="757.4" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.36%)</title><rect x="754.4" y="979.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="757.4" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.36%)</title><rect x="754.4" y="963.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="757.4" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.36%)</title><rect x="754.4" y="947.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="757.4" y="958.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.36%)</title><rect x="754.4" y="931.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="757.4" y="942.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.36%)</title><rect x="758.6" y="1075.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.6" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.36%)</title><rect x="758.6" y="1059.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="761.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.72%)</title><rect x="762.8" y="1075.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="765.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.72%)</title><rect x="762.8" y="1059.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="765.8" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.36%)</title><rect x="762.8" y="1043.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="765.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.36%)</title><rect x="767.1" y="1043.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.1" y="1054.0"></text>
</g>
<g>
<title>MachProjNode::out_RegMask() const (1 samples, 0.36%)</title><rect x="767.1" y="1027.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="770.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 16.85%)</title><rect x="771.3" y="1075.0" width="198.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.3" y="1086.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.36%)</title><rect x="775.5" y="1059.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="778.5" y="1070.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.36%)</title><rect x="779.7" y="1059.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="782.7" y="1070.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="784.0" y="1059.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="787.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.72%)</title><rect x="788.2" y="1059.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.36%)</title><rect x="792.4" y="1043.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="795.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.72%)</title><rect x="796.7" y="1059.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="796.7" y="1043.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="799.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.36%)</title><rect x="800.9" y="1043.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="803.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="800.9" y="1027.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="803.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.15%)</title><rect x="805.1" y="1059.0" width="25.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.1" y="1070.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.36%)</title><rect x="822.0" y="1043.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.0" y="1054.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.36%)</title><rect x="822.0" y="1027.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="825.0" y="1038.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.36%)</title><rect x="826.3" y="1043.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="829.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.23%)</title><rect x="830.5" y="1059.0" width="38.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.5" y="1070.0">Pha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.36%)</title><rect x="843.2" y="1043.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.2" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="847.4" y="1043.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="850.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.72%)</title><rect x="851.6" y="1043.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.6" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.36%)</title><rect x="860.1" y="1043.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.1" y="1054.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.36%)</title><rect x="864.3" y="1043.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="867.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.72%)</title><rect x="868.6" y="1059.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="871.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.72%)</title><rect x="868.6" y="1043.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="871.6" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="872.8" y="1027.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.72%)</title><rect x="877.0" y="1059.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="880.0" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.36%)</title><rect x="881.3" y="1043.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.43%)</title><rect x="885.5" y="1059.0" width="16.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="888.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.08%)</title><rect x="889.7" y="1043.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.36%)</title><rect x="902.4" y="1059.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.4" y="1070.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.36%)</title><rect x="902.4" y="1043.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 3.23%)</title><rect x="906.6" y="1059.0" width="38.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.6" y="1070.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 3.23%)</title><rect x="906.6" y="1043.0" width="38.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="909.6" y="1054.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 2.87%)</title><rect x="910.9" y="1027.0" width="33.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.9" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 2.51%)</title><rect x="910.9" y="1011.0" width="29.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="913.9" y="1022.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.36%)</title><rect x="940.5" y="1011.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="943.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.08%)</title><rect x="944.7" y="1059.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="947.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.72%)</title><rect x="948.9" y="1043.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.9" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.72%)</title><rect x="957.4" y="1059.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.4" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.36%)</title><rect x="961.6" y="1043.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.6" y="1054.0"></text>
</g>
<g>
<title>testL_regNode::out_RegMask() const (1 samples, 0.36%)</title><rect x="965.8" y="1059.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="968.8" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (39 samples, 13.98%)</title><rect x="970.1" y="1091.0" width="164.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.1" y="1102.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.72%)</title><rect x="970.1" y="1075.0" width="8.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="973.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.72%)</title><rect x="970.1" y="1059.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.36%)</title><rect x="970.1" y="1043.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="973.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.36%)</title><rect x="970.1" y="1027.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.36%)</title><rect x="970.1" y="1011.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="973.1" y="1022.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="970.1" y="995.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.1" y="1006.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="970.1" y="979.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.1" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="970.1" y="963.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="974.3" y="1043.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="977.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="974.3" y="1027.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 1.08%)</title><rect x="978.5" y="1075.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.5" y="1086.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="982.8" y="1059.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.8" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="982.8" y="1043.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="985.8" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="982.8" y="1027.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.8" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="982.8" y="1011.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="985.8" y="1022.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.36%)</title><rect x="982.8" y="995.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.8" y="1006.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.36%)</title><rect x="987.0" y="1059.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.36%)</title><rect x="991.2" y="1075.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.2" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.36%)</title><rect x="991.2" y="1059.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (27 samples, 9.68%)</title><rect x="995.4" y="1075.0" width="114.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.4" y="1086.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 1.43%)</title><rect x="995.4" y="1059.0" width="17.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.4" y="1070.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.72%)</title><rect x="1003.9" y="1043.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1012.4" y="1059.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 6.81%)</title><rect x="1016.6" y="1059.0" width="80.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.6" y="1070.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 6.45%)</title><rect x="1020.8" y="1043.0" width="76.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.8" y="1054.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 6.09%)</title><rect x="1020.8" y="1027.0" width="71.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.8" y="1038.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.36%)</title><rect x="1071.6" y="1011.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1071.6" y="995.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.43%)</title><rect x="1075.8" y="1011.0" width="16.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.8" y="1022.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.36%)</title><rect x="1092.7" y="1027.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.36%)</title><rect x="1097.0" y="1059.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1100.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.72%)</title><rect x="1101.2" y="1059.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.2" y="1070.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 0.36%)</title><rect x="1101.2" y="1043.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1105.4" y="1043.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.4" y="1054.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1105.4" y="1027.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.4" y="1038.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1105.4" y="1011.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.36%)</title><rect x="1109.6" y="1075.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1109.6" y="1059.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.6" y="1070.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1109.6" y="1043.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.36%)</title><rect x="1109.6" y="1027.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.6" y="1038.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.36%)</title><rect x="1109.6" y="1011.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.6" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.72%)</title><rect x="1113.9" y="1075.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.9" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.72%)</title><rect x="1113.9" y="1059.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.36%)</title><rect x="1113.9" y="1043.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1113.9" y="1027.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.36%)</title><rect x="1118.1" y="1043.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.1" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.72%)</title><rect x="1122.3" y="1075.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.72%)</title><rect x="1122.3" y="1059.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.72%)</title><rect x="1122.3" y="1043.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.3" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.36%)</title><rect x="1122.3" y="1027.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.3" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.36%)</title><rect x="1122.3" y="1011.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1126.6" y="1027.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.6" y="1038.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1130.8" y="1075.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.8" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.87%)</title><rect x="1135.0" y="1091.0" width="33.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.0" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.87%)</title><rect x="1135.0" y="1075.0" width="33.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.0" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.87%)</title><rect x="1135.0" y="1059.0" width="33.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.0" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.87%)</title><rect x="1135.0" y="1043.0" width="33.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.87%)</title><rect x="1135.0" y="1027.0" width="33.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.87%)</title><rect x="1135.0" y="1011.0" width="33.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.0" y="1022.0">Pa..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1135.0" y="995.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.0" y="1006.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.36%)</title><rect x="1135.0" y="979.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.0" y="990.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.36%)</title><rect x="1135.0" y="963.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.0" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1135.0" y="947.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.0" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.36%)</title><rect x="1135.0" y="931.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.0" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.36%)</title><rect x="1135.0" y="915.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1135.0" y="899.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.0" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1135.0" y="883.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.15%)</title><rect x="1139.2" y="995.0" width="25.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.2" y="1006.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.15%)</title><rect x="1139.2" y="979.0" width="25.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.2" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.15%)</title><rect x="1139.2" y="963.0" width="25.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.2" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.15%)</title><rect x="1139.2" y="947.0" width="25.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.2" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.15%)</title><rect x="1139.2" y="931.0" width="25.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.2" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.15%)</title><rect x="1139.2" y="915.0" width="25.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.2" y="926.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1139.2" y="899.0" width="12.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.08%)</title><rect x="1139.2" y="883.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.08%)</title><rect x="1139.2" y="867.0" width="12.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.08%)</title><rect x="1139.2" y="851.0" width="12.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.08%)</title><rect x="1139.2" y="835.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.08%)</title><rect x="1139.2" y="819.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1139.2" y="803.0" width="12.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.08%)</title><rect x="1139.2" y="787.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.08%)</title><rect x="1139.2" y="771.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.08%)</title><rect x="1139.2" y="755.0" width="12.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1143.5" y="739.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1143.5" y="723.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1143.5" y="707.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1143.5" y="691.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1143.5" y="675.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1143.5" y="659.0" width="8.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1143.5" y="643.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1143.5" y="627.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1143.5" y="611.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1143.5" y="595.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1143.5" y="579.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1143.5" y="563.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1143.5" y="547.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1143.5" y="531.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1143.5" y="515.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1143.5" y="499.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1143.5" y="483.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1143.5" y="467.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1143.5" y="451.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1143.5" y="435.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1143.5" y="419.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1143.5" y="403.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1143.5" y="387.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1143.5" y="371.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1143.5" y="355.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.36%)</title><rect x="1143.5" y="339.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="350.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.36%)</title><rect x="1143.5" y="323.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.5" y="334.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.36%)</title><rect x="1143.5" y="307.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.5" y="318.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.36%)</title><rect x="1143.5" y="291.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="302.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.36%)</title><rect x="1143.5" y="275.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1147.7" y="627.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1147.7" y="611.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1151.9" y="899.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1151.9" y="883.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.08%)</title><rect x="1151.9" y="867.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.08%)</title><rect x="1151.9" y="851.0" width="12.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.08%)</title><rect x="1151.9" y="835.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.08%)</title><rect x="1151.9" y="819.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.08%)</title><rect x="1151.9" y="803.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.08%)</title><rect x="1151.9" y="787.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.08%)</title><rect x="1151.9" y="771.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.08%)</title><rect x="1151.9" y="755.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.08%)</title><rect x="1151.9" y="739.0" width="12.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.08%)</title><rect x="1151.9" y="723.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1151.9" y="707.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1151.9" y="691.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1151.9" y="675.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="686.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.36%)</title><rect x="1151.9" y="659.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.36%)</title><rect x="1151.9" y="643.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="654.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1151.9" y="627.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.36%)</title><rect x="1151.9" y="611.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.36%)</title><rect x="1151.9" y="595.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1151.9" y="579.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.2" y="659.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.2" y="643.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.2" y="627.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1156.2" y="611.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1156.2" y="595.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1156.2" y="579.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.2" y="563.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.2" y="547.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.2" y="531.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1156.2" y="515.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1156.2" y="499.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1156.2" y="483.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.2" y="467.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.2" y="451.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.2" y="435.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1156.2" y="419.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1156.2" y="403.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1156.2" y="387.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.2" y="371.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.2" y="355.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.2" y="339.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1156.2" y="323.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1156.2" y="307.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1156.2" y="291.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.2" y="275.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.2" y="259.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.2" y="243.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1156.2" y="227.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.2" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1156.2" y="211.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1156.2" y="195.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1156.2" y="179.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1156.2" y="163.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1156.2" y="147.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1156.2" y="131.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1156.2" y="115.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.36%)</title><rect x="1156.2" y="99.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.36%)</title><rect x="1156.2" y="83.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="94.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.36%)</title><rect x="1156.2" y="67.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="78.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.36%)</title><rect x="1156.2" y="51.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="62.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.36%)</title><rect x="1156.2" y="35.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1160.4" y="707.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1160.4" y="691.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.4" y="702.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.36%)</title><rect x="1160.4" y="675.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.4" y="686.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.36%)</title><rect x="1160.4" y="659.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="670.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.36%)</title><rect x="1160.4" y="643.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="654.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.36%)</title><rect x="1160.4" y="627.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="638.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.36%)</title><rect x="1160.4" y="611.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.4" y="622.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1160.4" y="595.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="606.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.36%)</title><rect x="1160.4" y="579.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1163.4" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="995.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="979.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="963.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="947.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="931.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="915.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.6" y="899.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="883.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="867.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="851.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="835.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="819.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.6" y="803.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="787.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="771.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="755.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="739.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="723.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="707.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.6" y="691.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="675.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="659.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="643.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="627.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="611.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.6" y="595.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="579.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="563.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="547.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="531.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="515.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.36%)</title><rect x="1164.6" y="499.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.36%)</title><rect x="1164.6" y="483.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.36%)</title><rect x="1164.6" y="467.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.6" y="478.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.36%)</title><rect x="1164.6" y="451.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.6" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.36%)</title><rect x="1164.6" y="435.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="446.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.36%)</title><rect x="1164.6" y="419.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.6" y="430.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1164.6" y="403.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.6" y="414.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.36%)</title><rect x="1164.6" y="387.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="398.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1164.6" y="371.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="382.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.36%)</title><rect x="1168.9" y="1091.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.9" y="1102.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1168.9" y="1075.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="1086.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.36%)</title><rect x="1173.1" y="1091.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.36%)</title><rect x="1173.1" y="1075.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.1" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.36%)</title><rect x="1173.1" y="1059.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.08%)</title><rect x="1177.3" y="1123.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.08%)</title><rect x="1177.3" y="1107.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.08%)</title><rect x="1177.3" y="1091.0" width="12.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.08%)</title><rect x="1177.3" y="1075.0" width="12.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="1086.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.36%)</title><rect x="1177.3" y="1059.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.36%)</title><rect x="1177.3" y="1043.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="1054.0"></text>
</g>
<g>
<title>StateSplit::as_StateSplit() (1 samples, 0.36%)</title><rect x="1177.3" y="1027.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.72%)</title><rect x="1181.5" y="1059.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="1070.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.72%)</title><rect x="1181.5" y="1043.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="1054.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.72%)</title><rect x="1181.5" y="1027.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="1038.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (1 samples, 0.36%)</title><rect x="1181.5" y="1011.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="1022.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.36%)</title><rect x="1185.8" y="1011.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="1022.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.36%)</title><rect x="1185.8" y="995.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1006.0"></text>
</g>
</g>
</svg>
