<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (161 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.62%)</title><rect x="10.0" y="755.0" width="7.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (36 samples, 22.36%)</title><rect x="17.3" y="755.0" width="263.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="766.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (36 samples, 22.36%)</title><rect x="17.3" y="739.0" width="263.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="750.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 1.24%)</title><rect x="17.3" y="723.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.24%)</title><rect x="17.3" y="707.0" width="14.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1873552079.accept (2 samples, 1.24%)</title><rect x="17.3" y="691.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 1.24%)</title><rect x="17.3" y="675.0" width="14.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.24%)</title><rect x="17.3" y="659.0" width="14.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.3" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 1.24%)</title><rect x="17.3" y="643.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.62%)</title><rect x="32.0" y="723.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.62%)</title><rect x="32.0" y="707.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.62%)</title><rect x="32.0" y="691.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.0" y="702.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.62%)</title><rect x="32.0" y="675.0" width="7.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="35.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (25 samples, 15.53%)</title><rect x="39.3" y="723.0" width="183.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.3" y="734.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/579708423.accept (25 samples, 15.53%)</title><rect x="39.3" y="707.0" width="183.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.3" y="718.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (25 samples, 15.53%)</title><rect x="39.3" y="691.0" width="183.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.3" y="702.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (24 samples, 14.91%)</title><rect x="39.3" y="675.0" width="175.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.3" y="686.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (24 samples, 14.91%)</title><rect x="39.3" y="659.0" width="175.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.3" y="670.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (24 samples, 14.91%)</title><rect x="39.3" y="643.0" width="175.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.3" y="654.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (24 samples, 14.91%)</title><rect x="39.3" y="627.0" width="175.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.3" y="638.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (24 samples, 14.91%)</title><rect x="39.3" y="611.0" width="175.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.3" y="622.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 9.94%)</title><rect x="98.0" y="595.0" width="117.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.0" y="606.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 7.45%)</title><rect x="98.0" y="579.0" width="87.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.0" y="590.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 7.45%)</title><rect x="98.0" y="563.0" width="87.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.0" y="574.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 7.45%)</title><rect x="98.0" y="547.0" width="87.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.0" y="558.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 7.45%)</title><rect x="98.0" y="531.0" width="87.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.0" y="542.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 7.45%)</title><rect x="98.0" y="515.0" width="87.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.0" y="526.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (12 samples, 7.45%)</title><rect x="98.0" y="499.0" width="87.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.0" y="510.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 6.21%)</title><rect x="98.0" y="483.0" width="73.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="101.0" y="494.0">Unsafe_U..</text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 5.59%)</title><rect x="98.0" y="467.0" width="65.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="101.0" y="478.0">__pthre..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.62%)</title><rect x="163.9" y="467.0" width="7.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="166.9" y="478.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.24%)</title><rect x="171.2" y="483.0" width="14.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="174.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.24%)</title><rect x="185.9" y="579.0" width="14.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 1.24%)</title><rect x="185.9" y="563.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.24%)</title><rect x="185.9" y="547.0" width="14.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.24%)</title><rect x="200.6" y="579.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.24%)</title><rect x="200.6" y="563.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.24%)</title><rect x="200.6" y="547.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.24%)</title><rect x="200.6" y="531.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.62%)</title><rect x="215.2" y="675.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.62%)</title><rect x="215.2" y="659.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.62%)</title><rect x="215.2" y="643.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.97%)</title><rect x="222.5" y="723.0" width="58.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.5" y="734.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.97%)</title><rect x="222.5" y="707.0" width="58.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.5" y="718.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.62%)</title><rect x="222.5" y="691.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.62%)</title><rect x="222.5" y="675.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 0.62%)</title><rect x="229.9" y="691.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.62%)</title><rect x="229.9" y="675.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.62%)</title><rect x="229.9" y="659.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.62%)</title><rect x="229.9" y="643.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.62%)</title><rect x="229.9" y="627.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.62%)</title><rect x="229.9" y="611.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.86%)</title><rect x="237.2" y="691.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.2" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.86%)</title><rect x="237.2" y="675.0" width="22.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.2" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.86%)</title><rect x="237.2" y="659.0" width="22.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.2" y="670.0">o..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.62%)</title><rect x="237.2" y="643.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.62%)</title><rect x="237.2" y="627.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.62%)</title><rect x="244.5" y="643.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.62%)</title><rect x="244.5" y="627.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.5" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.62%)</title><rect x="244.5" y="611.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.62%)</title><rect x="244.5" y="595.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.62%)</title><rect x="251.9" y="643.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.62%)</title><rect x="251.9" y="627.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.62%)</title><rect x="251.9" y="611.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.62%)</title><rect x="251.9" y="595.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.62%)</title><rect x="251.9" y="579.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.62%)</title><rect x="251.9" y="563.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.62%)</title><rect x="251.9" y="547.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.9" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.62%)</title><rect x="251.9" y="531.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.62%)</title><rect x="251.9" y="515.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.9" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.62%)</title><rect x="251.9" y="499.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.62%)</title><rect x="251.9" y="483.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.9" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/2134480860.get (1 samples, 0.62%)</title><rect x="251.9" y="467.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.24%)</title><rect x="259.2" y="691.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.62%)</title><rect x="259.2" y="675.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.62%)</title><rect x="259.2" y="659.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.62%)</title><rect x="259.2" y="643.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.62%)</title><rect x="259.2" y="627.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.62%)</title><rect x="259.2" y="611.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.62%)</title><rect x="259.2" y="595.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.62%)</title><rect x="259.2" y="579.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.62%)</title><rect x="266.5" y="675.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.62%)</title><rect x="266.5" y="659.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.62%)</title><rect x="266.5" y="643.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.62%)</title><rect x="266.5" y="627.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.62%)</title><rect x="266.5" y="611.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.62%)</title><rect x="266.5" y="595.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.62%)</title><rect x="266.5" y="579.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.62%)</title><rect x="266.5" y="563.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.62%)</title><rect x="266.5" y="547.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.62%)</title><rect x="266.5" y="531.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.62%)</title><rect x="266.5" y="515.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.62%)</title><rect x="266.5" y="499.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.62%)</title><rect x="266.5" y="483.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.62%)</title><rect x="273.9" y="691.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.62%)</title><rect x="273.9" y="675.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.62%)</title><rect x="273.9" y="659.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/492717624.accept (1 samples, 0.62%)</title><rect x="273.9" y="643.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.62%)</title><rect x="273.9" y="627.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.62%)</title><rect x="273.9" y="611.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.62%)</title><rect x="273.9" y="595.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.62%)</title><rect x="273.9" y="579.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.62%)</title><rect x="273.9" y="563.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (59 samples, 36.65%)</title><rect x="281.2" y="755.0" width="432.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.2" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (59 samples, 36.65%)</title><rect x="281.2" y="739.0" width="432.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.2" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (59 samples, 36.65%)</title><rect x="281.2" y="723.0" width="432.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.2" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.62%)</title><rect x="310.5" y="707.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="313.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/36971569.run (30 samples, 18.63%)</title><rect x="317.8" y="707.0" width="219.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.8" y="718.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (30 samples, 18.63%)</title><rect x="317.8" y="691.0" width="219.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.8" y="702.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (30 samples, 18.63%)</title><rect x="317.8" y="675.0" width="219.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="320.8" y="686.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (29 samples, 18.01%)</title><rect x="317.8" y="659.0" width="212.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.8" y="670.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 6.21%)</title><rect x="325.2" y="643.0" width="73.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="328.2" y="654.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 6.21%)</title><rect x="325.2" y="627.0" width="73.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.2" y="638.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 6.21%)</title><rect x="325.2" y="611.0" width="73.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.2" y="622.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.21%)</title><rect x="325.2" y="595.0" width="73.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.2" y="606.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.21%)</title><rect x="325.2" y="579.0" width="73.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.2" y="590.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 6.21%)</title><rect x="325.2" y="563.0" width="73.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="328.2" y="574.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.48%)</title><rect x="325.2" y="547.0" width="29.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.2" y="558.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.24%)</title><rect x="325.2" y="531.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.24%)</title><rect x="325.2" y="515.0" width="14.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.2" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.62%)</title><rect x="332.5" y="499.0" width="7.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="335.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.24%)</title><rect x="339.8" y="531.0" width="14.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="342.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.24%)</title><rect x="339.8" y="515.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.8" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.62%)</title><rect x="347.1" y="499.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="350.1" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.62%)</title><rect x="347.1" y="483.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="350.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 3.73%)</title><rect x="354.5" y="547.0" width="43.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.5" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.62%)</title><rect x="354.5" y="531.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.62%)</title><rect x="354.5" y="515.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.62%)</title><rect x="354.5" y="499.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 3.11%)</title><rect x="361.8" y="531.0" width="36.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.8" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.24%)</title><rect x="361.8" y="515.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.62%)</title><rect x="361.8" y="499.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.62%)</title><rect x="361.8" y="483.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.62%)</title><rect x="361.8" y="467.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.62%)</title><rect x="369.1" y="499.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.86%)</title><rect x="376.5" y="515.0" width="21.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.5" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.86%)</title><rect x="376.5" y="499.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.5" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.86%)</title><rect x="376.5" y="483.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.5" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="376.5" y="467.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.62%)</title><rect x="376.5" y="451.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.62%)</title><rect x="376.5" y="435.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.62%)</title><rect x="376.5" y="419.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.62%)</title><rect x="376.5" y="403.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="379.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.62%)</title><rect x="376.5" y="387.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.62%)</title><rect x="376.5" y="371.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="379.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.62%)</title><rect x="383.8" y="467.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="386.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.62%)</title><rect x="383.8" y="451.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.62%)</title><rect x="383.8" y="435.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.62%)</title><rect x="383.8" y="419.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.8" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.62%)</title><rect x="383.8" y="403.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.8" y="414.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.62%)</title><rect x="383.8" y="387.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.62%)</title><rect x="391.1" y="467.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.62%)</title><rect x="391.1" y="451.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.62%)</title><rect x="391.1" y="435.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.62%)</title><rect x="391.1" y="419.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.1" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (17 samples, 10.56%)</title><rect x="398.4" y="643.0" width="124.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.4" y="654.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 1.86%)</title><rect x="398.4" y="627.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.4" y="638.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.86%)</title><rect x="398.4" y="611.0" width="22.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.4" y="622.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.86%)</title><rect x="398.4" y="595.0" width="22.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.4" y="606.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.62%)</title><rect x="398.4" y="579.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.62%)</title><rect x="398.4" y="563.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.62%)</title><rect x="398.4" y="547.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="401.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.62%)</title><rect x="398.4" y="531.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.62%)</title><rect x="398.4" y="515.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.4" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.24%)</title><rect x="405.8" y="579.0" width="14.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.24%)</title><rect x="405.8" y="563.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.24%)</title><rect x="405.8" y="547.0" width="14.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.62%)</title><rect x="413.1" y="531.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="416.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.62%)</title><rect x="420.4" y="627.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="423.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.62%)</title><rect x="420.4" y="611.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.4" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.62%)</title><rect x="420.4" y="595.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (8 samples, 4.97%)</title><rect x="427.8" y="627.0" width="58.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="430.8" y="638.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (8 samples, 4.97%)</title><rect x="427.8" y="611.0" width="58.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="430.8" y="622.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.86%)</title><rect x="427.8" y="595.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.8" y="606.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.62%)</title><rect x="435.1" y="579.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.1" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.62%)</title><rect x="435.1" y="563.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.62%)</title><rect x="442.4" y="579.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="445.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.62%)</title><rect x="442.4" y="563.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.4" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.62%)</title><rect x="442.4" y="547.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.62%)</title><rect x="442.4" y="531.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::oop_extra_words() (1 samples, 0.62%)</title><rect x="442.4" y="515.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="445.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.topicPartition (1 samples, 0.62%)</title><rect x="449.8" y="595.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.8" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.48%)</title><rect x="457.1" y="595.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="460.1" y="606.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.48%)</title><rect x="457.1" y="579.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.1" y="590.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.24%)</title><rect x="457.1" y="563.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.1" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.24%)</title><rect x="457.1" y="547.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="460.1" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.24%)</title><rect x="471.7" y="563.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="474.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.24%)</title><rect x="471.7" y="547.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.62%)</title><rect x="471.7" y="531.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="474.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.62%)</title><rect x="471.7" y="515.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="474.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.62%)</title><rect x="479.1" y="531.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.11%)</title><rect x="486.4" y="627.0" width="36.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.4" y="638.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.11%)</title><rect x="486.4" y="611.0" width="36.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.4" y="622.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1062177384.process (2 samples, 1.24%)</title><rect x="486.4" y="595.0" width="14.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="489.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.24%)</title><rect x="486.4" y="579.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.24%)</title><rect x="486.4" y="563.0" width="14.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (2 samples, 1.24%)</title><rect x="486.4" y="547.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="489.4" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="486.4" y="531.0" width="7.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="489.4" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.62%)</title><rect x="493.7" y="531.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="496.7" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="493.7" y="515.0" width="7.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="496.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.62%)</title><rect x="501.1" y="595.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.62%)</title><rect x="501.1" y="579.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.1" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.62%)</title><rect x="501.1" y="563.0" width="7.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="504.1" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.62%)</title><rect x="501.1" y="547.0" width="7.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="504.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskDataBytes (1 samples, 0.62%)</title><rect x="508.4" y="595.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="511.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.62%)</title><rect x="508.4" y="579.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="511.4" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.62%)</title><rect x="515.7" y="595.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.7" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.62%)</title><rect x="515.7" y="579.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/519009125.get$Lambda (1 samples, 0.62%)</title><rect x="515.7" y="563.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.7" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/519009125.&lt;init&gt; (1 samples, 0.62%)</title><rect x="515.7" y="547.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.7" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.62%)</title><rect x="515.7" y="531.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="518.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.62%)</title><rect x="523.0" y="643.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.62%)</title><rect x="523.0" y="627.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.62%)</title><rect x="523.0" y="611.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="526.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/155633872.accept (1 samples, 0.62%)</title><rect x="523.0" y="595.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.62%)</title><rect x="523.0" y="579.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1679476944.complete (1 samples, 0.62%)</title><rect x="523.0" y="563.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.62%)</title><rect x="523.0" y="547.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.62%)</title><rect x="523.0" y="531.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.0" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="523.0" y="515.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.0" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.62%)</title><rect x="523.0" y="499.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.0" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.62%)</title><rect x="523.0" y="483.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="526.0" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.62%)</title><rect x="523.0" y="467.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="526.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.62%)</title><rect x="530.4" y="659.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.62%)</title><rect x="537.7" y="707.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="540.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.62%)</title><rect x="537.7" y="691.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.7" y="702.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.62%)</title><rect x="537.7" y="675.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="540.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.62%)</title><rect x="545.0" y="707.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.62%)</title><rect x="545.0" y="691.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="548.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.62%)</title><rect x="552.4" y="707.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="555.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (21 samples, 13.04%)</title><rect x="559.7" y="707.0" width="153.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.7" y="718.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (20 samples, 12.42%)</title><rect x="559.7" y="691.0" width="146.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.7" y="702.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.62%)</title><rect x="567.0" y="675.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="570.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (17 samples, 10.56%)</title><rect x="574.3" y="675.0" width="124.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.3" y="686.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 2.48%)</title><rect x="574.3" y="659.0" width="29.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.3" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.62%)</title><rect x="603.7" y="659.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.62%)</title><rect x="603.7" y="643.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="606.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 7.45%)</title><rect x="611.0" y="659.0" width="87.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="614.0" y="670.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (12 samples, 7.45%)</title><rect x="611.0" y="643.0" width="87.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="614.0" y="654.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 6.21%)</title><rect x="618.3" y="627.0" width="73.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="621.3" y="638.0">Unsafe_P..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 1.86%)</title><rect x="618.3" y="611.0" width="22.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="621.3" y="622.0">P..</text>
</g>
<g>
<title>pthread_getspecific (2 samples, 1.24%)</title><rect x="625.7" y="595.0" width="14.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="628.7" y="606.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.62%)</title><rect x="640.3" y="611.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="643.3" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.62%)</title><rect x="647.6" y="611.0" width="7.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="650.6" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.86%)</title><rect x="655.0" y="611.0" width="22.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="658.0" y="622.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 1.24%)</title><rect x="677.0" y="611.0" width="14.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="680.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.62%)</title><rect x="691.6" y="627.0" width="7.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="694.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.62%)</title><rect x="698.9" y="675.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="701.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.62%)</title><rect x="698.9" y="659.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.62%)</title><rect x="698.9" y="643.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.62%)</title><rect x="698.9" y="627.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.62%)</title><rect x="698.9" y="611.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.62%)</title><rect x="706.3" y="691.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.3" y="702.0"></text>
</g>
<g>
<title>start_thread (65 samples, 40.37%)</title><rect x="713.6" y="755.0" width="476.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="716.6" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (65 samples, 40.37%)</title><rect x="713.6" y="739.0" width="476.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="716.6" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 9.32%)</title><rect x="713.6" y="723.0" width="109.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.6" y="734.0">GangWorker::l..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.86%)</title><rect x="713.6" y="707.0" width="22.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.6" y="718.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.24%)</title><rect x="713.6" y="691.0" width="14.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="716.6" y="702.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.62%)</title><rect x="713.6" y="675.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="716.6" y="686.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.62%)</title><rect x="720.9" y="675.0" width="7.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="723.9" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.62%)</title><rect x="728.3" y="691.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="731.3" y="702.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::retire_alloc_buffers() (1 samples, 0.62%)</title><rect x="728.3" y="675.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.3" y="686.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::flush_stats(PLABStats*) (1 samples, 0.62%)</title><rect x="728.3" y="659.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="731.3" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 7.45%)</title><rect x="735.6" y="707.0" width="87.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="738.6" y="718.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 6.21%)</title><rect x="735.6" y="691.0" width="73.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="738.6" y="702.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.48%)</title><rect x="735.6" y="675.0" width="29.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.6" y="686.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.86%)</title><rect x="742.9" y="659.0" width="22.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.9" y="670.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.24%)</title><rect x="742.9" y="643.0" width="14.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="745.9" y="654.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (2 samples, 1.24%)</title><rect x="742.9" y="627.0" width="14.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="745.9" y="638.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.62%)</title><rect x="757.6" y="643.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="760.6" y="654.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.62%)</title><rect x="757.6" y="627.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="760.6" y="638.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.86%)</title><rect x="764.9" y="675.0" width="22.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.9" y="686.0">G..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.24%)</title><rect x="786.9" y="675.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="789.9" y="686.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.62%)</title><rect x="801.6" y="675.0" width="7.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="804.6" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.24%)</title><rect x="808.9" y="691.0" width="14.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.9" y="702.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.62%)</title><rect x="808.9" y="675.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="811.9" y="686.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.62%)</title><rect x="808.9" y="659.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.9" y="670.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.62%)</title><rect x="808.9" y="643.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.9" y="654.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.62%)</title><rect x="816.2" y="675.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.2" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.62%)</title><rect x="816.2" y="659.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="819.2" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.62%)</title><rect x="816.2" y="643.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="819.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (50 samples, 31.06%)</title><rect x="823.5" y="723.0" width="366.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="826.5" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (50 samples, 31.06%)</title><rect x="823.5" y="707.0" width="366.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.5" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (50 samples, 31.06%)</title><rect x="823.5" y="691.0" width="366.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="826.5" y="702.0">CompileBroker::invoke_compiler_on_method(CompileTa..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (46 samples, 28.57%)</title><rect x="823.5" y="675.0" width="337.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.5" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (46 samples, 28.57%)</title><rect x="823.5" y="659.0" width="337.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="826.5" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.62%)</title><rect x="823.5" y="643.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.5" y="654.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.62%)</title><rect x="823.5" y="627.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="826.5" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="823.5" y="611.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.62%)</title><rect x="823.5" y="595.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="826.5" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.62%)</title><rect x="823.5" y="579.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.5" y="590.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.62%)</title><rect x="823.5" y="563.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="826.5" y="574.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.62%)</title><rect x="823.5" y="547.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="826.5" y="558.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 11.18%)</title><rect x="830.9" y="643.0" width="131.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="833.9" y="654.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.24%)</title><rect x="830.9" y="627.0" width="14.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.9" y="638.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 1.24%)</title><rect x="830.9" y="611.0" width="14.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.9" y="622.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.62%)</title><rect x="830.9" y="595.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.9" y="606.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.62%)</title><rect x="830.9" y="579.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.9" y="590.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.62%)</title><rect x="830.9" y="563.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.9" y="574.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.62%)</title><rect x="830.9" y="547.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="833.9" y="558.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.62%)</title><rect x="830.9" y="531.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.9" y="542.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.62%)</title><rect x="838.2" y="595.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="841.2" y="606.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.86%)</title><rect x="845.5" y="627.0" width="22.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="848.5" y="638.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.62%)</title><rect x="845.5" y="611.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.5" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.24%)</title><rect x="852.9" y="611.0" width="14.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.9" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.62%)</title><rect x="860.2" y="595.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="863.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.62%)</title><rect x="867.5" y="627.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="870.5" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.62%)</title><rect x="867.5" y="611.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="870.5" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.62%)</title><rect x="867.5" y="595.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="870.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 6.83%)</title><rect x="874.8" y="627.0" width="80.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.8" y="638.0">PhaseChai..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.62%)</title><rect x="874.8" y="611.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.8" y="622.0"></text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.62%)</title><rect x="882.2" y="611.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.62%)</title><rect x="889.5" y="611.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="892.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.24%)</title><rect x="896.8" y="611.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="899.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.62%)</title><rect x="904.2" y="595.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.62%)</title><rect x="911.5" y="611.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="914.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.62%)</title><rect x="911.5" y="595.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="914.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.62%)</title><rect x="918.8" y="611.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.62%)</title><rect x="926.1" y="611.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="929.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.62%)</title><rect x="926.1" y="595.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.1" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.62%)</title><rect x="933.5" y="611.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="936.5" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.62%)</title><rect x="933.5" y="595.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="936.5" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.62%)</title><rect x="940.8" y="611.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.8" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.62%)</title><rect x="940.8" y="595.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.8" y="606.0"></text>
</g>
<g>
<title>addL_rReg_immNode::ideal_Opcode() const (1 samples, 0.62%)</title><rect x="948.1" y="611.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.1" y="622.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.62%)</title><rect x="955.5" y="627.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.5" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 12.42%)</title><rect x="962.8" y="643.0" width="146.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="965.8" y="654.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.24%)</title><rect x="962.8" y="627.0" width="14.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.24%)</title><rect x="962.8" y="611.0" width="14.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) [clone .isra.294] (1 samples, 0.62%)</title><rect x="962.8" y="595.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.62%)</title><rect x="970.1" y="595.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.62%)</title><rect x="970.1" y="579.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.62%)</title><rect x="970.1" y="563.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.62%)</title><rect x="970.1" y="547.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.1" y="558.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.62%)</title><rect x="970.1" y="531.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.1" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.62%)</title><rect x="977.5" y="627.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.62%)</title><rect x="984.8" y="627.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.8" y="638.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.62%)</title><rect x="984.8" y="611.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 5.59%)</title><rect x="992.1" y="627.0" width="66.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.1" y="638.0">PhaseId..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.62%)</title><rect x="992.1" y="611.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.1" y="622.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.62%)</title><rect x="992.1" y="595.0" width="7.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="995.1" y="606.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.62%)</title><rect x="999.4" y="611.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.4" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.62%)</title><rect x="1006.8" y="611.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.8" y="622.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.62%)</title><rect x="1006.8" y="595.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.24%)</title><rect x="1014.1" y="611.0" width="14.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1017.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.86%)</title><rect x="1028.8" y="611.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.8" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.24%)</title><rect x="1028.8" y="595.0" width="14.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.62%)</title><rect x="1028.8" y="579.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1031.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.62%)</title><rect x="1036.1" y="579.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.62%)</title><rect x="1036.1" y="563.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.1" y="574.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.62%)</title><rect x="1043.4" y="595.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.4" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.62%)</title><rect x="1050.7" y="611.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.7" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.62%)</title><rect x="1050.7" y="595.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.7" y="606.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.62%)</title><rect x="1050.7" y="579.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.62%)</title><rect x="1058.1" y="627.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.1" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.73%)</title><rect x="1065.4" y="627.0" width="44.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.4" y="638.0">Phas..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.73%)</title><rect x="1065.4" y="611.0" width="44.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.4" y="622.0">Phas..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.62%)</title><rect x="1065.4" y="595.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.4" y="606.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.62%)</title><rect x="1065.4" y="579.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.4" y="590.0"></text>
</g>
<g>
<title>LoadRangeNode::Identity(PhaseTransform*) (1 samples, 0.62%)</title><rect x="1072.7" y="595.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.7" y="606.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.62%)</title><rect x="1072.7" y="579.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.7" y="590.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.62%)</title><rect x="1080.1" y="595.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.1" y="606.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.62%)</title><rect x="1080.1" y="579.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.1" y="590.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.62%)</title><rect x="1080.1" y="563.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.1" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 1.24%)</title><rect x="1087.4" y="595.0" width="14.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.4" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.62%)</title><rect x="1094.7" y="579.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.7" y="590.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.62%)</title><rect x="1102.0" y="595.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.35%)</title><rect x="1109.4" y="643.0" width="51.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.4" y="654.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.35%)</title><rect x="1109.4" y="627.0" width="51.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.4" y="638.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.73%)</title><rect x="1109.4" y="611.0" width="44.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="622.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.73%)</title><rect x="1109.4" y="595.0" width="44.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.4" y="606.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.73%)</title><rect x="1109.4" y="579.0" width="44.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.4" y="590.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.73%)</title><rect x="1109.4" y="563.0" width="44.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.4" y="574.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1109.4" y="547.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.4" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.62%)</title><rect x="1109.4" y="531.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.4" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.62%)</title><rect x="1109.4" y="515.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.4" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.62%)</title><rect x="1109.4" y="499.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.4" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.62%)</title><rect x="1109.4" y="483.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.4" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1109.4" y="467.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.4" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.62%)</title><rect x="1109.4" y="451.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.4" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1109.4" y="435.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.4" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.62%)</title><rect x="1109.4" y="419.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.4" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.62%)</title><rect x="1109.4" y="403.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.4" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1109.4" y="387.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.4" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1109.4" y="371.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.4" y="382.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1109.4" y="355.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.4" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1109.4" y="339.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.4" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1109.4" y="323.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.4" y="334.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.62%)</title><rect x="1109.4" y="307.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.4" y="318.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.62%)</title><rect x="1116.7" y="547.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.7" y="558.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.62%)</title><rect x="1116.7" y="531.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.7" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.62%)</title><rect x="1116.7" y="515.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.7" y="526.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.62%)</title><rect x="1116.7" y="499.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.48%)</title><rect x="1124.0" y="547.0" width="29.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.0" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.48%)</title><rect x="1124.0" y="531.0" width="29.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.0" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.86%)</title><rect x="1124.0" y="515.0" width="22.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.0" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.86%)</title><rect x="1124.0" y="499.0" width="22.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.0" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.86%)</title><rect x="1124.0" y="483.0" width="22.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.0" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.86%)</title><rect x="1124.0" y="467.0" width="22.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.0" y="478.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.24%)</title><rect x="1124.0" y="451.0" width="14.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.24%)</title><rect x="1124.0" y="435.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.24%)</title><rect x="1124.0" y="419.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.24%)</title><rect x="1124.0" y="403.0" width="14.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.24%)</title><rect x="1124.0" y="387.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.24%)</title><rect x="1124.0" y="371.0" width="14.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.24%)</title><rect x="1124.0" y="355.0" width="14.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.24%)</title><rect x="1124.0" y="339.0" width="14.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.24%)</title><rect x="1124.0" y="323.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.24%)</title><rect x="1124.0" y="307.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.24%)</title><rect x="1124.0" y="291.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.24%)</title><rect x="1124.0" y="275.0" width="14.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1124.0" y="259.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1124.0" y="243.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1124.0" y="227.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1124.0" y="211.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1124.0" y="195.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1124.0" y="179.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.0" y="190.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="163.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.0" y="174.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="147.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.0" y="158.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.62%)</title><rect x="1124.0" y="131.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.0" y="142.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="115.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.0" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.62%)</title><rect x="1124.0" y="99.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.0" y="110.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.62%)</title><rect x="1124.0" y="83.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.0" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="259.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.4" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="243.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="227.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1131.4" y="211.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1131.4" y="195.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1131.4" y="179.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1131.4" y="163.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1131.4" y="147.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.4" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="131.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.4" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="115.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.4" y="126.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1131.4" y="99.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.62%)</title><rect x="1131.4" y="83.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.62%)</title><rect x="1131.4" y="67.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.62%)</title><rect x="1131.4" y="51.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.4" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.62%)</title><rect x="1131.4" y="35.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="451.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="435.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1138.7" y="419.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1138.7" y="403.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1138.7" y="387.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1138.7" y="371.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1138.7" y="355.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="339.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1138.7" y="323.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1138.7" y="307.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.62%)</title><rect x="1138.7" y="291.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.62%)</title><rect x="1138.7" y="275.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.62%)</title><rect x="1138.7" y="259.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.62%)</title><rect x="1138.7" y="243.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.62%)</title><rect x="1138.7" y="227.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.62%)</title><rect x="1138.7" y="211.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.7" y="222.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.62%)</title><rect x="1138.7" y="195.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.7" y="206.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.62%)</title><rect x="1138.7" y="179.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.7" y="190.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.62%)</title><rect x="1138.7" y="163.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="174.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.62%)</title><rect x="1138.7" y="147.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.7" y="158.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.62%)</title><rect x="1138.7" y="131.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.7" y="142.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.62%)</title><rect x="1138.7" y="115.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.7" y="126.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.62%)</title><rect x="1146.0" y="515.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.0" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.62%)</title><rect x="1146.0" y="499.0" width="7.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.0" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.62%)</title><rect x="1146.0" y="483.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.0" y="494.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.62%)</title><rect x="1153.4" y="611.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.4" y="622.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.62%)</title><rect x="1153.4" y="595.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="606.0"></text>
</g>
<g>
<title>ciMethodData::trap_recompiled_at(ProfileData*) (1 samples, 0.62%)</title><rect x="1153.4" y="579.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.4" y="590.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 2.48%)</title><rect x="1160.7" y="675.0" width="29.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.7" y="686.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 2.48%)</title><rect x="1160.7" y="659.0" width="29.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.7" y="670.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 2.48%)</title><rect x="1160.7" y="643.0" width="29.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="654.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 2.48%)</title><rect x="1160.7" y="627.0" width="29.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.7" y="638.0">Co..</text>
</g>
<g>
<title>Compilation::build_hir() (4 samples, 2.48%)</title><rect x="1160.7" y="611.0" width="29.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.7" y="622.0">Co..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 2.48%)</title><rect x="1160.7" y="595.0" width="29.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.7" y="606.0">IR..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 2.48%)</title><rect x="1160.7" y="579.0" width="29.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.7" y="590.0">IR..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 2.48%)</title><rect x="1160.7" y="563.0" width="29.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.7" y="574.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 2.48%)</title><rect x="1160.7" y="547.0" width="29.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.7" y="558.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 2.48%)</title><rect x="1160.7" y="531.0" width="29.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.7" y="542.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 2.48%)</title><rect x="1160.7" y="515.0" width="29.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="526.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.24%)</title><rect x="1160.7" y="499.0" width="14.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.7" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.24%)</title><rect x="1160.7" y="483.0" width="14.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.7" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.62%)</title><rect x="1160.7" y="467.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.62%)</title><rect x="1160.7" y="451.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.7" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.62%)</title><rect x="1160.7" y="435.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.7" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.62%)</title><rect x="1160.7" y="419.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.7" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1160.7" y="403.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1160.7" y="387.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="398.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.62%)</title><rect x="1160.7" y="371.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.7" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1160.7" y="355.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1160.7" y="339.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.62%)</title><rect x="1160.7" y="323.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.7" y="334.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.62%)</title><rect x="1160.7" y="307.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.7" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.62%)</title><rect x="1168.0" y="467.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="478.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.62%)</title><rect x="1168.0" y="451.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="462.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.62%)</title><rect x="1168.0" y="435.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="446.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.62%)</title><rect x="1168.0" y="419.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="430.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.62%)</title><rect x="1168.0" y="403.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="414.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.62%)</title><rect x="1168.0" y="387.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.62%)</title><rect x="1168.0" y="371.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="382.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.62%)</title><rect x="1168.0" y="355.0" width="7.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1171.0" y="366.0"></text>
</g>
<g>
<title>ValueNumberingEffects::kill_memory() (1 samples, 0.62%)</title><rect x="1175.3" y="499.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="510.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.62%)</title><rect x="1182.7" y="499.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="510.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.62%)</title><rect x="1182.7" y="483.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.62%)</title><rect x="1182.7" y="467.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.62%)</title><rect x="1182.7" y="451.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="462.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.62%)</title><rect x="1182.7" y="435.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="446.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.62%)</title><rect x="1182.7" y="419.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="430.0"></text>
</g>
</g>
</svg>
