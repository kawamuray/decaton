<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (247 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.40%)</title><rect x="10.0" y="1331.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 8.10%)</title><rect x="14.8" y="1331.0" width="95.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1342.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.81%)</title><rect x="14.8" y="1315.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.81%)</title><rect x="14.8" y="1299.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.81%)</title><rect x="14.8" y="1283.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.81%)</title><rect x="14.8" y="1267.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.81%)</title><rect x="14.8" y="1251.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.81%)</title><rect x="14.8" y="1235.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.81%)</title><rect x="14.8" y="1219.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 0.81%)</title><rect x="14.8" y="1203.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (2 samples, 0.81%)</title><rect x="14.8" y="1187.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (2 samples, 0.81%)</title><rect x="14.8" y="1171.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (2 samples, 0.81%)</title><rect x="14.8" y="1155.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (2 samples, 0.81%)</title><rect x="14.8" y="1139.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (18 samples, 7.29%)</title><rect x="24.3" y="1315.0" width="86.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.3" y="1326.0">com/lineco..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (10 samples, 4.05%)</title><rect x="24.3" y="1299.0" width="47.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.3" y="1310.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (10 samples, 4.05%)</title><rect x="24.3" y="1283.0" width="47.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.3" y="1294.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (9 samples, 3.64%)</title><rect x="29.1" y="1267.0" width="43.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.1" y="1278.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (7 samples, 2.83%)</title><rect x="29.1" y="1251.0" width="33.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.1" y="1262.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (7 samples, 2.83%)</title><rect x="29.1" y="1235.0" width="33.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.1" y="1246.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (7 samples, 2.83%)</title><rect x="29.1" y="1219.0" width="33.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.1" y="1230.0">co..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (7 samples, 2.83%)</title><rect x="29.1" y="1203.0" width="33.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.1" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 2.83%)</title><rect x="29.1" y="1187.0" width="33.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.1" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (7 samples, 2.83%)</title><rect x="29.1" y="1171.0" width="33.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.1" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.40%)</title><rect x="53.0" y="1155.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.40%)</title><rect x="53.0" y="1139.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.40%)</title><rect x="53.0" y="1123.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.40%)</title><rect x="57.8" y="1155.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="57.8" y="1139.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.40%)</title><rect x="57.8" y="1123.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.40%)</title><rect x="57.8" y="1107.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.81%)</title><rect x="62.6" y="1251.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.81%)</title><rect x="62.6" y="1235.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.6" y="1246.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.81%)</title><rect x="62.6" y="1219.0" width="9.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="65.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.24%)</title><rect x="72.1" y="1299.0" width="38.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="1310.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.24%)</title><rect x="72.1" y="1283.0" width="38.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.1" y="1294.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.43%)</title><rect x="72.1" y="1267.0" width="28.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.1" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.40%)</title><rect x="72.1" y="1251.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.1" y="1262.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.40%)</title><rect x="72.1" y="1235.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.1" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.40%)</title><rect x="72.1" y="1219.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="75.1" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.40%)</title><rect x="72.1" y="1203.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="75.1" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.40%)</title><rect x="72.1" y="1187.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="75.1" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.40%)</title><rect x="72.1" y="1171.0" width="4.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="75.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="76.9" y="1251.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="76.9" y="1235.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="76.9" y="1219.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="76.9" y="1203.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="76.9" y="1187.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.9" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="76.9" y="1171.0" width="4.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="79.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.62%)</title><rect x="81.7" y="1251.0" width="19.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.62%)</title><rect x="81.7" y="1235.0" width="19.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.21%)</title><rect x="81.7" y="1219.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.21%)</title><rect x="81.7" y="1203.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.81%)</title><rect x="81.7" y="1187.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.40%)</title><rect x="86.4" y="1171.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.40%)</title><rect x="86.4" y="1155.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.40%)</title><rect x="86.4" y="1139.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.40%)</title><rect x="86.4" y="1123.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.40%)</title><rect x="86.4" y="1107.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.40%)</title><rect x="86.4" y="1091.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.40%)</title><rect x="86.4" y="1075.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.40%)</title><rect x="91.2" y="1187.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.40%)</title><rect x="91.2" y="1171.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.40%)</title><rect x="91.2" y="1155.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.2" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.40%)</title><rect x="91.2" y="1139.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.40%)</title><rect x="96.0" y="1219.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.40%)</title><rect x="100.8" y="1267.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.40%)</title><rect x="100.8" y="1251.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.40%)</title><rect x="100.8" y="1235.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="100.8" y="1219.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="100.8" y="1203.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="100.8" y="1187.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="100.8" y="1171.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="100.8" y="1155.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.40%)</title><rect x="100.8" y="1139.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.40%)</title><rect x="100.8" y="1123.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.40%)</title><rect x="105.5" y="1267.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="105.5" y="1251.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.40%)</title><rect x="105.5" y="1235.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.40%)</title><rect x="105.5" y="1219.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.40%)</title><rect x="105.5" y="1203.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.40%)</title><rect x="105.5" y="1187.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.40%)</title><rect x="105.5" y="1171.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.40%)</title><rect x="105.5" y="1155.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.40%)</title><rect x="105.5" y="1139.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="108.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.40%)</title><rect x="105.5" y="1123.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.40%)</title><rect x="105.5" y="1107.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.40%)</title><rect x="105.5" y="1091.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.40%)</title><rect x="105.5" y="1075.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.40%)</title><rect x="105.5" y="1059.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.40%)</title><rect x="105.5" y="1043.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (144 samples, 58.30%)</title><rect x="110.3" y="1331.0" width="688.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="113.3" y="1342.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (144 samples, 58.30%)</title><rect x="110.3" y="1315.0" width="688.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="113.3" y="1326.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (144 samples, 58.30%)</title><rect x="110.3" y="1299.0" width="688.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.3" y="1310.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (134 samples, 54.25%)</title><rect x="110.3" y="1283.0" width="640.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.3" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (134 samples, 54.25%)</title><rect x="110.3" y="1267.0" width="640.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.3" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (134 samples, 54.25%)</title><rect x="110.3" y="1251.0" width="640.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.3" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (134 samples, 54.25%)</title><rect x="110.3" y="1235.0" width="640.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.3" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="134.2" y="1219.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="137.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (26 samples, 10.53%)</title><rect x="139.0" y="1219.0" width="124.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.0" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (26 samples, 10.53%)</title><rect x="139.0" y="1203.0" width="124.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.0" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 10.53%)</title><rect x="139.0" y="1187.0" width="124.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.0" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 10.53%)</title><rect x="139.0" y="1171.0" width="124.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.0" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 10.53%)</title><rect x="139.0" y="1155.0" width="124.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.0" y="1166.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 10.53%)</title><rect x="139.0" y="1139.0" width="124.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.0" y="1150.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 4.05%)</title><rect x="139.0" y="1123.0" width="47.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.0" y="1134.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.02%)</title><rect x="139.0" y="1107.0" width="23.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.0" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.02%)</title><rect x="139.0" y="1091.0" width="23.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.0" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 1.21%)</title><rect x="139.0" y="1075.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.81%)</title><rect x="153.3" y="1075.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.40%)</title><rect x="158.1" y="1059.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 2.02%)</title><rect x="162.9" y="1107.0" width="23.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.9" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 2.02%)</title><rect x="162.9" y="1091.0" width="23.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="165.9" y="1102.0">c..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="162.9" y="1075.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="165.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.81%)</title><rect x="167.7" y="1075.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.40%)</title><rect x="167.7" y="1059.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="170.7" y="1070.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.40%)</title><rect x="167.7" y="1043.0" width="4.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="170.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.40%)</title><rect x="172.4" y="1059.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.40%)</title><rect x="177.2" y="1075.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.40%)</title><rect x="182.0" y="1075.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.40%)</title><rect x="182.0" y="1059.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 6.07%)</title><rect x="186.8" y="1123.0" width="71.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.8" y="1134.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.81%)</title><rect x="186.8" y="1107.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.81%)</title><rect x="186.8" y="1091.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.40%)</title><rect x="186.8" y="1075.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.40%)</title><rect x="186.8" y="1059.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.40%)</title><rect x="191.5" y="1075.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="194.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.40%)</title><rect x="191.5" y="1059.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.81%)</title><rect x="196.3" y="1107.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="196.3" y="1091.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="196.3" y="1075.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="201.1" y="1091.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 4.45%)</title><rect x="205.9" y="1107.0" width="52.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.9" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.81%)</title><rect x="205.9" y="1091.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.40%)</title><rect x="210.6" y="1075.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.64%)</title><rect x="215.4" y="1091.0" width="43.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.4" y="1102.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.64%)</title><rect x="215.4" y="1075.0" width="43.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.4" y="1086.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.64%)</title><rect x="215.4" y="1059.0" width="43.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.4" y="1070.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.62%)</title><rect x="215.4" y="1043.0" width="19.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="229.8" y="1027.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="229.8" y="1011.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="229.8" y="995.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.40%)</title><rect x="234.5" y="1043.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.40%)</title><rect x="234.5" y="1027.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.40%)</title><rect x="234.5" y="1011.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.40%)</title><rect x="234.5" y="995.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.40%)</title><rect x="234.5" y="979.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.81%)</title><rect x="239.3" y="1043.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.81%)</title><rect x="239.3" y="1027.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.81%)</title><rect x="239.3" y="1011.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.81%)</title><rect x="239.3" y="995.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.81%)</title><rect x="239.3" y="979.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.3" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.40%)</title><rect x="244.1" y="963.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.1" y="974.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.40%)</title><rect x="244.1" y="947.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.40%)</title><rect x="248.9" y="1043.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="248.9" y="1027.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="248.9" y="1011.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.40%)</title><rect x="253.6" y="1043.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.40%)</title><rect x="258.4" y="1123.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.40%)</title><rect x="258.4" y="1107.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.40%)</title><rect x="258.4" y="1091.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.40%)</title><rect x="258.4" y="1075.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="258.4" y="1059.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (94 samples, 38.06%)</title><rect x="263.2" y="1219.0" width="449.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.2" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 5.67%)</title><rect x="268.0" y="1203.0" width="66.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.0" y="1214.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.40%)</title><rect x="268.0" y="1187.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.0" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 5.26%)</title><rect x="272.8" y="1187.0" width="62.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.8" y="1198.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 4.05%)</title><rect x="287.1" y="1171.0" width="47.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.1" y="1182.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 3.24%)</title><rect x="296.6" y="1155.0" width="38.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.6" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.21%)</title><rect x="320.5" y="1139.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.21%)</title><rect x="320.5" y="1123.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.40%)</title><rect x="330.1" y="1107.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="334.9" y="1203.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="334.9" y="1187.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.9" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.40%)</title><rect x="334.9" y="1171.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (20 samples, 8.10%)</title><rect x="339.6" y="1203.0" width="95.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.6" y="1214.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 8.10%)</title><rect x="339.6" y="1187.0" width="95.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.6" y="1198.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.62%)</title><rect x="339.6" y="1171.0" width="19.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.62%)</title><rect x="339.6" y="1155.0" width="19.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.62%)</title><rect x="339.6" y="1139.0" width="19.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.81%)</title><rect x="344.4" y="1123.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.81%)</title><rect x="344.4" y="1107.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.81%)</title><rect x="344.4" y="1091.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.4" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="349.2" y="1075.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="352.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.40%)</title><rect x="354.0" y="1123.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="358.7" y="1171.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.7" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (15 samples, 6.07%)</title><rect x="363.5" y="1171.0" width="71.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.5" y="1182.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (14 samples, 5.67%)</title><rect x="368.3" y="1155.0" width="66.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.3" y="1166.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.81%)</title><rect x="368.3" y="1139.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.81%)</title><rect x="368.3" y="1123.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.81%)</title><rect x="368.3" y="1107.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="371.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.81%)</title><rect x="368.3" y="1091.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="371.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.86%)</title><rect x="377.9" y="1139.0" width="57.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.9" y="1150.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 3.24%)</title><rect x="397.0" y="1123.0" width="38.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="400.0" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.83%)</title><rect x="401.7" y="1107.0" width="33.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.7" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.40%)</title><rect x="411.3" y="1091.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.21%)</title><rect x="416.1" y="1091.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.1" y="1102.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.40%)</title><rect x="430.4" y="1091.0" width="4.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="433.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 21.05%)</title><rect x="435.2" y="1203.0" width="248.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.2" y="1214.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 21.05%)</title><rect x="435.2" y="1187.0" width="248.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.2" y="1198.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (46 samples, 18.62%)</title><rect x="459.1" y="1171.0" width="219.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.1" y="1182.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (45 samples, 18.22%)</title><rect x="463.8" y="1155.0" width="215.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.8" y="1166.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (45 samples, 18.22%)</title><rect x="463.8" y="1139.0" width="215.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.8" y="1150.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (45 samples, 18.22%)</title><rect x="463.8" y="1123.0" width="215.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.8" y="1134.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (45 samples, 18.22%)</title><rect x="463.8" y="1107.0" width="215.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.8" y="1118.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (38 samples, 15.38%)</title><rect x="497.3" y="1091.0" width="181.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="500.3" y="1102.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.40%)</title><rect x="511.6" y="1075.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="514.6" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.40%)</title><rect x="516.4" y="1075.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="519.4" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.81%)</title><rect x="521.2" y="1075.0" width="9.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="524.2" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="526.0" y="1059.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="529.0" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.40%)</title><rect x="530.7" y="1075.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="533.7" y="1086.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.40%)</title><rect x="535.5" y="1075.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.5" y="1086.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 11.74%)</title><rect x="540.3" y="1075.0" width="138.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="543.3" y="1086.0">os::sleep(Thread*..</text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.02%)</title><rect x="554.6" y="1059.0" width="23.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="557.6" y="1070.0">_..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.40%)</title><rect x="578.5" y="1059.0" width="4.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="581.5" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 5.26%)</title><rect x="583.3" y="1059.0" width="62.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="586.3" y="1070.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.81%)</title><rect x="645.4" y="1059.0" width="9.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="648.4" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.40%)</title><rect x="654.9" y="1059.0" width="4.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="657.9" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.40%)</title><rect x="659.7" y="1059.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="662.7" y="1070.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.81%)</title><rect x="664.5" y="1059.0" width="9.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="667.5" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="674.0" y="1059.0" width="4.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="677.0" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.40%)</title><rect x="678.8" y="1171.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.40%)</title><rect x="678.8" y="1155.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="681.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="683.6" y="1203.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="686.6" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.40%)</title><rect x="683.6" y="1187.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.6" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.40%)</title><rect x="683.6" y="1171.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="686.6" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="683.6" y="1155.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="686.6" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="683.6" y="1139.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="686.6" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="683.6" y="1123.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.6" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="683.6" y="1107.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="686.6" y="1118.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.40%)</title><rect x="683.6" y="1091.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="686.6" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.40%)</title><rect x="683.6" y="1075.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="686.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.02%)</title><rect x="688.4" y="1203.0" width="23.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.4" y="1214.0">j..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.81%)</title><rect x="702.7" y="1187.0" width="9.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="705.7" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.81%)</title><rect x="702.7" y="1171.0" width="9.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="705.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.24%)</title><rect x="712.3" y="1219.0" width="38.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.3" y="1230.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.83%)</title><rect x="717.0" y="1203.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.0" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.62%)</title><rect x="731.4" y="1187.0" width="19.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="734.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1432000870.accept (1 samples, 0.40%)</title><rect x="731.4" y="1171.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.40%)</title><rect x="731.4" y="1155.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="734.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="731.4" y="1139.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.4" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.40%)</title><rect x="731.4" y="1123.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.4" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.40%)</title><rect x="731.4" y="1107.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="731.4" y="1091.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="734.4" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="731.4" y="1075.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="734.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="731.4" y="1059.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="731.4" y="1043.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="734.4" y="1054.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.40%)</title><rect x="731.4" y="1027.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="734.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/1353290652.accept (3 samples, 1.21%)</title><rect x="736.2" y="1171.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (3 samples, 1.21%)</title><rect x="736.2" y="1155.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (3 samples, 1.21%)</title><rect x="736.2" y="1139.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (3 samples, 1.21%)</title><rect x="736.2" y="1123.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 1.21%)</title><rect x="736.2" y="1107.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.2" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.21%)</title><rect x="736.2" y="1091.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="739.2" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.21%)</title><rect x="736.2" y="1075.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="739.2" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.21%)</title><rect x="736.2" y="1059.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="739.2" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 1.21%)</title><rect x="736.2" y="1043.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 2.43%)</title><rect x="750.5" y="1283.0" width="28.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="753.5" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.43%)</title><rect x="750.5" y="1267.0" width="28.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="753.5" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.43%)</title><rect x="750.5" y="1251.0" width="28.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="753.5" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.43%)</title><rect x="750.5" y="1235.0" width="28.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="753.5" y="1246.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="774.4" y="1219.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="777.4" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="774.4" y="1203.0" width="4.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="777.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.62%)</title><rect x="779.1" y="1283.0" width="19.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="782.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.62%)</title><rect x="779.1" y="1267.0" width="19.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="782.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.40%)</title><rect x="779.1" y="1251.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="782.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.40%)</title><rect x="779.1" y="1235.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="782.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.40%)</title><rect x="779.1" y="1219.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="782.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.21%)</title><rect x="783.9" y="1251.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="786.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.21%)</title><rect x="783.9" y="1235.0" width="14.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="786.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.21%)</title><rect x="783.9" y="1219.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="786.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.21%)</title><rect x="783.9" y="1203.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="786.9" y="1214.0"></text>
</g>
<g>
<title>start_thread (82 samples, 33.20%)</title><rect x="798.3" y="1331.0" width="391.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="801.3" y="1342.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (82 samples, 33.20%)</title><rect x="798.3" y="1315.0" width="391.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="801.3" y="1326.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 2.43%)</title><rect x="798.3" y="1299.0" width="28.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.3" y="1310.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.43%)</title><rect x="798.3" y="1283.0" width="28.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="801.3" y="1294.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.43%)</title><rect x="798.3" y="1267.0" width="28.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.3" y="1278.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.43%)</title><rect x="798.3" y="1251.0" width="28.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="801.3" y="1262.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.21%)</title><rect x="807.8" y="1235.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.8" y="1246.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.40%)</title><rect x="822.1" y="1235.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="825.1" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (76 samples, 30.77%)</title><rect x="826.9" y="1299.0" width="363.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="829.9" y="1310.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 30.77%)</title><rect x="826.9" y="1283.0" width="363.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="829.9" y="1294.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 30.77%)</title><rect x="826.9" y="1267.0" width="363.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.9" y="1278.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (76 samples, 30.77%)</title><rect x="826.9" y="1251.0" width="363.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="829.9" y="1262.0">CompileBroker::invoke_compiler_on_method(CompileT..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (75 samples, 30.36%)</title><rect x="826.9" y="1235.0" width="358.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.9" y="1246.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (75 samples, 30.36%)</title><rect x="826.9" y="1219.0" width="358.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="829.9" y="1230.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 16.60%)</title><rect x="826.9" y="1203.0" width="195.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.9" y="1214.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.40%)</title><rect x="826.9" y="1187.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.9" y="1198.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.40%)</title><rect x="826.9" y="1171.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="829.9" y="1182.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.40%)</title><rect x="826.9" y="1155.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="829.9" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.81%)</title><rect x="831.7" y="1187.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.7" y="1198.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.40%)</title><rect x="831.7" y="1171.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="834.7" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.40%)</title><rect x="831.7" y="1155.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="834.7" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.40%)</title><rect x="831.7" y="1139.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.7" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="836.5" y="1171.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.5" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.40%)</title><rect x="836.5" y="1155.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="839.5" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.21%)</title><rect x="841.3" y="1187.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="844.3" y="1198.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.21%)</title><rect x="841.3" y="1171.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="844.3" y="1182.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.81%)</title><rect x="846.0" y="1155.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="849.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.81%)</title><rect x="855.6" y="1187.0" width="9.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="858.6" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.81%)</title><rect x="855.6" y="1171.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="858.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.40%)</title><rect x="855.6" y="1155.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="858.6" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.40%)</title><rect x="855.6" y="1139.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="858.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="860.4" y="1155.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 13.36%)</title><rect x="865.1" y="1187.0" width="157.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.1" y="1198.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>MachSpillCopyNode::oper_input_base() const (1 samples, 0.40%)</title><rect x="865.1" y="1171.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.1" y="1182.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.40%)</title><rect x="869.9" y="1171.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="872.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 2.02%)</title><rect x="874.7" y="1171.0" width="23.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.7" y="1182.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.40%)</title><rect x="874.7" y="1155.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.81%)</title><rect x="879.5" y="1155.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.5" y="1166.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.40%)</title><rect x="884.3" y="1139.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.81%)</title><rect x="889.0" y="1155.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="893.8" y="1139.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.81%)</title><rect x="898.6" y="1171.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="901.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.40%)</title><rect x="903.4" y="1155.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="906.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="903.4" y="1139.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.21%)</title><rect x="908.1" y="1171.0" width="14.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.40%)</title><rect x="917.7" y="1155.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.62%)</title><rect x="922.5" y="1171.0" width="19.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.62%)</title><rect x="922.5" y="1155.0" width="19.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="925.5" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.81%)</title><rect x="932.0" y="1139.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="935.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.40%)</title><rect x="941.6" y="1171.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.40%)</title><rect x="941.6" y="1155.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.6" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="941.6" y="1139.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.40%)</title><rect x="946.4" y="1171.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="949.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.62%)</title><rect x="951.1" y="1171.0" width="19.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.81%)</title><rect x="955.9" y="1155.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.40%)</title><rect x="960.7" y="1139.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.40%)</title><rect x="960.7" y="1123.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="963.7" y="1134.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.40%)</title><rect x="965.5" y="1155.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="968.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 2.83%)</title><rect x="970.2" y="1171.0" width="33.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.2" y="1182.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 2.83%)</title><rect x="970.2" y="1155.0" width="33.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.2" y="1166.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.83%)</title><rect x="970.2" y="1139.0" width="33.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.2" y="1150.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.40%)</title><rect x="970.2" y="1123.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.2" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.62%)</title><rect x="975.0" y="1123.0" width="19.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.81%)</title><rect x="994.1" y="1123.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.1" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="998.9" y="1107.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.40%)</title><rect x="1003.7" y="1171.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.7" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="1003.7" y="1155.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1006.7" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.81%)</title><rect x="1008.5" y="1171.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.5" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="1013.2" y="1155.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.2" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.40%)</title><rect x="1018.0" y="1171.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.0" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (28 samples, 11.34%)</title><rect x="1022.8" y="1203.0" width="133.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.8" y="1214.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.40%)</title><rect x="1022.8" y="1187.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1022.8" y="1171.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1025.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1022.8" y="1155.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.8" y="1166.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1022.8" y="1139.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1025.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1027.6" y="1187.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.40%)</title><rect x="1027.6" y="1171.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1030.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.40%)</title><rect x="1027.6" y="1155.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.40%)</title><rect x="1027.6" y="1139.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.6" y="1150.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.40%)</title><rect x="1027.6" y="1123.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.6" y="1134.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.40%)</title><rect x="1027.6" y="1107.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.6" y="1118.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.40%)</title><rect x="1027.6" y="1091.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.6" y="1102.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.40%)</title><rect x="1027.6" y="1075.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.6" y="1086.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1027.6" y="1059.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.6" y="1070.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.40%)</title><rect x="1027.6" y="1043.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.6" y="1054.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.40%)</title><rect x="1027.6" y="1027.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.6" y="1038.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.40%)</title><rect x="1027.6" y="1011.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.6" y="1022.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.40%)</title><rect x="1027.6" y="995.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.6" y="1006.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.40%)</title><rect x="1027.6" y="979.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.6" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1027.6" y="963.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.6" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.40%)</title><rect x="1032.3" y="1187.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.40%)</title><rect x="1032.3" y="1171.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (21 samples, 8.50%)</title><rect x="1037.1" y="1187.0" width="100.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.1" y="1198.0">PhaseIdealLo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1037.1" y="1171.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.1" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1037.1" y="1155.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.40%)</title><rect x="1037.1" y="1139.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.40%)</title><rect x="1037.1" y="1123.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1041.9" y="1171.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 6.88%)</title><rect x="1046.7" y="1171.0" width="81.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.7" y="1182.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 5.67%)</title><rect x="1061.0" y="1155.0" width="66.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.0" y="1166.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.40%)</title><rect x="1061.0" y="1139.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 5.26%)</title><rect x="1065.8" y="1139.0" width="62.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.8" y="1150.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.62%)</title><rect x="1108.8" y="1123.0" width="19.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1127.9" y="1171.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.40%)</title><rect x="1127.9" y="1155.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.40%)</title><rect x="1127.9" y="1139.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1132.7" y="1171.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1132.7" y="1155.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1132.7" y="1139.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.81%)</title><rect x="1137.4" y="1187.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.81%)</title><rect x="1137.4" y="1171.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="1182.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1137.4" y="1155.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1137.4" y="1139.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1137.4" y="1123.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.4" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.40%)</title><rect x="1137.4" y="1107.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.4" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1142.2" y="1155.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.2" y="1166.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.40%)</title><rect x="1142.2" y="1139.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.2" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.40%)</title><rect x="1147.0" y="1187.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1147.0" y="1171.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1147.0" y="1155.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.0" y="1166.0"></text>
</g>
<g>
<title>LoadNKlassNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1147.0" y="1139.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.0" y="1150.0"></text>
</g>
<g>
<title>LoadNode::klass_identity_common(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1147.0" y="1123.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1147.0" y="1107.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="1151.8" y="1187.0" width="4.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1154.8" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.02%)</title><rect x="1156.6" y="1203.0" width="23.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.6" y="1214.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.02%)</title><rect x="1156.6" y="1187.0" width="23.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.02%)</title><rect x="1156.6" y="1171.0" width="23.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.02%)</title><rect x="1156.6" y="1155.0" width="23.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.6" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.02%)</title><rect x="1156.6" y="1139.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.02%)</title><rect x="1156.6" y="1123.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="1134.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1156.6" y="1107.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1156.6" y="1091.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1156.6" y="1075.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1156.6" y="1059.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1156.6" y="1043.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1156.6" y="1027.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1156.6" y="1011.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1156.6" y="995.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.40%)</title><rect x="1156.6" y="979.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1156.6" y="963.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1156.6" y="947.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1156.6" y="931.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="942.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1156.6" y="915.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="926.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.40%)</title><rect x="1156.6" y="899.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="910.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.40%)</title><rect x="1156.6" y="883.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.40%)</title><rect x="1156.6" y="867.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="878.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.40%)</title><rect x="1156.6" y="851.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.40%)</title><rect x="1156.6" y="835.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.40%)</title><rect x="1156.6" y="819.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.62%)</title><rect x="1161.3" y="1107.0" width="19.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.62%)</title><rect x="1161.3" y="1091.0" width="19.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.62%)</title><rect x="1161.3" y="1075.0" width="19.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.62%)</title><rect x="1161.3" y="1059.0" width="19.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.62%)</title><rect x="1161.3" y="1043.0" width="19.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.62%)</title><rect x="1161.3" y="1027.0" width="19.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="1038.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.40%)</title><rect x="1161.3" y="1011.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.3" y="1022.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.40%)</title><rect x="1161.3" y="995.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.3" y="1006.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.40%)</title><rect x="1161.3" y="979.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.3" y="990.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.40%)</title><rect x="1161.3" y="963.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1166.1" y="1011.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1166.1" y="995.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1166.1" y="979.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1166.1" y="963.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1166.1" y="947.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1166.1" y="931.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1166.1" y="915.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1166.1" y="899.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1166.1" y="883.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1166.1" y="867.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1166.1" y="851.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1166.1" y="835.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="846.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_receiver_for_speculation(Node*) (1 samples, 0.40%)</title><rect x="1166.1" y="819.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="830.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.40%)</title><rect x="1166.1" y="803.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.1" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1170.9" y="1011.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.9" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1170.9" y="995.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1170.9" y="979.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1170.9" y="963.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1170.9" y="947.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1170.9" y="931.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1170.9" y="915.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1170.9" y="899.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1170.9" y="883.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1170.9" y="867.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1170.9" y="851.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1170.9" y="835.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1170.9" y="819.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1170.9" y="803.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1170.9" y="787.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1170.9" y="771.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1170.9" y="755.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1170.9" y="739.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1170.9" y="723.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1170.9" y="707.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1170.9" y="691.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1170.9" y="675.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1170.9" y="659.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1170.9" y="643.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1170.9" y="627.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1170.9" y="611.0" width="9.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1170.9" y="595.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1170.9" y="579.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1170.9" y="563.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1170.9" y="547.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1170.9" y="531.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1170.9" y="515.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1170.9" y="499.0" width="9.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1170.9" y="483.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1170.9" y="467.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1170.9" y="451.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1170.9" y="435.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1170.9" y="419.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1170.9" y="403.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1170.9" y="387.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1170.9" y="371.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1170.9" y="355.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1170.9" y="339.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1170.9" y="323.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1170.9" y="307.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1170.9" y="291.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1170.9" y="275.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1170.9" y="259.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1170.9" y="243.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1170.9" y="227.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1170.9" y="211.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1170.9" y="195.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1170.9" y="179.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1170.9" y="163.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1170.9" y="147.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.9" y="158.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1170.9" y="131.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.40%)</title><rect x="1170.9" y="115.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.40%)</title><rect x="1170.9" y="99.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.40%)</title><rect x="1170.9" y="83.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.40%)</title><rect x="1170.9" y="67.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.9" y="78.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.40%)</title><rect x="1170.9" y="51.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="62.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="1170.9" y="35.0" width="4.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1173.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1175.7" y="419.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1175.7" y="403.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1175.7" y="387.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1175.7" y="371.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1175.7" y="355.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1175.7" y="339.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1175.7" y="323.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1175.7" y="307.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1175.7" y="291.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1175.7" y="275.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1175.7" y="259.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1175.7" y="243.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1175.7" y="227.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1175.7" y="211.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.7" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1175.7" y="195.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1175.7" y="179.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1175.7" y="163.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1175.7" y="147.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1175.7" y="131.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1175.7" y="115.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_receiver_for_speculation(Node*) (1 samples, 0.40%)</title><rect x="1175.7" y="99.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="110.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.40%)</title><rect x="1175.7" y="83.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="94.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.40%)</title><rect x="1180.4" y="1203.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="1214.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1180.4" y="1187.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="1198.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1185.2" y="1235.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="1246.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.40%)</title><rect x="1185.2" y="1219.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.40%)</title><rect x="1185.2" y="1203.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.40%)</title><rect x="1185.2" y="1187.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.40%)</title><rect x="1185.2" y="1171.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="1182.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.40%)</title><rect x="1185.2" y="1155.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1166.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.40%)</title><rect x="1185.2" y="1139.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="1150.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.40%)</title><rect x="1185.2" y="1123.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="1134.0"></text>
</g>
<g>
<title>NullCheckEliminator::visit(Instruction**) (1 samples, 0.40%)</title><rect x="1185.2" y="1107.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
</g>
</svg>
