<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (1,060 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.09%)</title><rect x="10.0" y="1235.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::write_ref_array_pre(unsigned int*, int, bool) (1 samples, 0.09%)</title><rect x="10.0" y="1219.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (273 samples, 25.75%)</title><rect x="11.1" y="1235.0" width="303.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1246.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (273 samples, 25.75%)</title><rect x="11.1" y="1219.0" width="303.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="1230.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.28%)</title><rect x="11.1" y="1203.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.28%)</title><rect x="11.1" y="1187.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="11.1" y="1171.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="11.1" y="1155.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="11.1" y="1139.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="12.2" y="1171.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="12.2" y="1155.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="12.2" y="1139.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="12.2" y="1123.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="12.2" y="1107.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="12.2" y="1091.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="12.2" y="1075.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="12.2" y="1059.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.2" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="12.2" y="1043.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="15.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="13.3" y="1091.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="14.5" y="1203.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="14.5" y="1187.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (212 samples, 20.00%)</title><rect x="15.6" y="1203.0" width="236.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="1214.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/312979220.accept (206 samples, 19.43%)</title><rect x="15.6" y="1187.0" width="229.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.6" y="1198.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="16.7" y="1171.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.7" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="16.7" y="1155.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.7" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="16.7" y="1139.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.7" y="1150.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="16.7" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.7" y="1134.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="16.7" y="1107.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.7" y="1118.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="16.7" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (204 samples, 19.25%)</title><rect x="17.8" y="1171.0" width="227.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="1182.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (166 samples, 15.66%)</title><rect x="17.8" y="1155.0" width="184.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.8" y="1166.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (166 samples, 15.66%)</title><rect x="17.8" y="1139.0" width="184.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="1150.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (166 samples, 15.66%)</title><rect x="17.8" y="1123.0" width="184.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.8" y="1134.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (166 samples, 15.66%)</title><rect x="17.8" y="1107.0" width="184.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.8" y="1118.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (166 samples, 15.66%)</title><rect x="17.8" y="1091.0" width="184.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="1102.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (166 samples, 15.66%)</title><rect x="17.8" y="1075.0" width="184.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.8" y="1086.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 10.47%)</title><rect x="17.8" y="1059.0" width="123.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.8" y="1070.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (33 samples, 3.11%)</title><rect x="17.8" y="1043.0" width="36.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.8" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (33 samples, 3.11%)</title><rect x="17.8" y="1027.0" width="36.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.8" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.45%)</title><rect x="25.6" y="1011.0" width="28.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.6" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (26 samples, 2.45%)</title><rect x="25.6" y="995.0" width="28.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.6" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.75%)</title><rect x="54.5" y="1043.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.75%)</title><rect x="54.5" y="1027.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.38%)</title><rect x="56.8" y="1011.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.8" y="1022.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.38%)</title><rect x="56.8" y="995.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="59.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.19%)</title><rect x="61.2" y="1011.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (70 samples, 6.60%)</title><rect x="63.4" y="1043.0" width="78.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="1054.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (70 samples, 6.60%)</title><rect x="63.4" y="1027.0" width="78.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.4" y="1038.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (68 samples, 6.42%)</title><rect x="63.4" y="1011.0" width="75.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.4" y="1022.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (68 samples, 6.42%)</title><rect x="63.4" y="995.0" width="75.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="1006.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 6.42%)</title><rect x="63.4" y="979.0" width="75.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.4" y="990.0">sun/misc..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="65.7" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="68.7" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 5.47%)</title><rect x="66.8" y="963.0" width="64.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="69.8" y="974.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 3.21%)</title><rect x="69.0" y="947.0" width="37.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="72.0" y="958.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="106.8" y="947.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="109.8" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (21 samples, 1.98%)</title><rect x="108.0" y="947.0" width="23.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="111.0" y="958.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.47%)</title><rect x="131.3" y="963.0" width="5.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="134.3" y="974.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="136.9" y="963.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="139.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.19%)</title><rect x="139.1" y="1011.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (46 samples, 4.34%)</title><rect x="141.4" y="1059.0" width="51.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.4" y="1070.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (46 samples, 4.34%)</title><rect x="141.4" y="1043.0" width="51.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.4" y="1054.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (46 samples, 4.34%)</title><rect x="141.4" y="1027.0" width="51.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.4" y="1038.0">java/..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.57%)</title><rect x="185.9" y="1011.0" width="6.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="188.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.57%)</title><rect x="192.6" y="1059.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (6 samples, 0.57%)</title><rect x="192.6" y="1043.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.57%)</title><rect x="192.6" y="1027.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="197.0" y="1011.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.0" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="198.1" y="1011.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="201.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.28%)</title><rect x="199.2" y="1059.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.28%)</title><rect x="199.2" y="1043.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="199.2" y="1027.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="201.5" y="1027.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="201.5" y="1011.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.47%)</title><rect x="202.6" y="1155.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.47%)</title><rect x="202.6" y="1139.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.38%)</title><rect x="208.2" y="1155.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.38%)</title><rect x="208.2" y="1139.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.38%)</title><rect x="208.2" y="1123.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (29 samples, 2.74%)</title><rect x="212.6" y="1155.0" width="32.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.6" y="1166.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.74%)</title><rect x="212.6" y="1139.0" width="32.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.6" y="1150.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.85%)</title><rect x="232.6" y="1123.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.38%)</title><rect x="233.8" y="1107.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.38%)</title><rect x="233.8" y="1091.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.38%)</title><rect x="233.8" y="1075.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="237.1" y="1059.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="240.1" y="1070.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="237.1" y="1043.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="240.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.19%)</title><rect x="238.2" y="1107.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="240.4" y="1107.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.4" y="1118.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="242.7" y="1123.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="245.7" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="243.8" y="1123.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="246.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.47%)</title><rect x="244.9" y="1187.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.47%)</title><rect x="244.9" y="1171.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.47%)</title><rect x="244.9" y="1155.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.47%)</title><rect x="244.9" y="1139.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.9" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="249.3" y="1123.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="250.5" y="1187.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="250.5" y="1171.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="250.5" y="1155.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="250.5" y="1139.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="250.5" y="1123.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 5.38%)</title><rect x="251.6" y="1203.0" width="63.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.6" y="1214.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 5.28%)</title><rect x="251.6" y="1187.0" width="62.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.6" y="1198.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (41 samples, 3.87%)</title><rect x="252.7" y="1171.0" width="45.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.7" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.19%)</title><rect x="256.0" y="1155.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.19%)</title><rect x="256.0" y="1139.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.0" y="1150.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="256.0" y="1123.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="259.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="257.1" y="1123.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.40%)</title><rect x="258.2" y="1155.0" width="40.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.2" y="1166.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 3.40%)</title><rect x="258.2" y="1139.0" width="40.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.2" y="1150.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 3.11%)</title><rect x="258.2" y="1123.0" width="36.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.2" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 3.02%)</title><rect x="259.4" y="1107.0" width="35.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.4" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.51%)</title><rect x="260.5" y="1091.0" width="17.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.75%)</title><rect x="269.4" y="1075.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.75%)</title><rect x="269.4" y="1059.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.75%)</title><rect x="269.4" y="1043.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.75%)</title><rect x="269.4" y="1027.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.75%)</title><rect x="269.4" y="1011.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.75%)</title><rect x="269.4" y="995.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.75%)</title><rect x="269.4" y="979.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.42%)</title><rect x="278.3" y="1091.0" width="16.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.32%)</title><rect x="279.4" y="1075.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.94%)</title><rect x="279.4" y="1059.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.94%)</title><rect x="279.4" y="1043.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.4" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="288.3" y="1027.0" width="2.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="291.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.38%)</title><rect x="290.5" y="1059.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.5" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.38%)</title><rect x="290.5" y="1043.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.19%)</title><rect x="295.0" y="1123.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.19%)</title><rect x="295.0" y="1107.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="295.0" y="1091.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="295.0" y="1075.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="295.0" y="1059.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="295.0" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.1" y="1091.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.1" y="1075.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.1" y="1059.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="296.1" y="1043.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="297.2" y="1123.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="297.2" y="1107.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="297.2" y="1091.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="297.2" y="1075.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.19%)</title><rect x="298.3" y="1171.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="301.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.19%)</title><rect x="298.3" y="1155.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.19%)</title><rect x="298.3" y="1139.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="299.4" y="1123.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="299.4" y="1107.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="300.5" y="1171.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="300.5" y="1155.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.09%)</title><rect x="300.5" y="1139.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="300.5" y="1123.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.28%)</title><rect x="301.7" y="1171.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.28%)</title><rect x="301.7" y="1155.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.28%)</title><rect x="301.7" y="1139.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="301.7" y="1123.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.19%)</title><rect x="301.7" y="1107.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="301.7" y="1091.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="301.7" y="1075.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="301.7" y="1059.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="302.8" y="1091.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="302.8" y="1075.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="302.8" y="1059.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="302.8" y="1043.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="302.8" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.8" y="1038.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="302.8" y="1011.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="305.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="303.9" y="1123.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.9" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="303.9" y="1107.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.9" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="303.9" y="1091.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.9" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="303.9" y="1075.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.9" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.09%)</title><rect x="303.9" y="1059.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="303.9" y="1043.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="303.9" y="1027.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.57%)</title><rect x="305.0" y="1171.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.57%)</title><rect x="305.0" y="1155.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="305.0" y="1139.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="305.0" y="1123.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/275374105.accept (1 samples, 0.09%)</title><rect x="306.1" y="1123.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="306.1" y="1107.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="306.1" y="1091.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="306.1" y="1075.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="306.1" y="1059.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.09%)</title><rect x="306.1" y="1043.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.09%)</title><rect x="306.1" y="1027.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.09%)</title><rect x="306.1" y="1011.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.38%)</title><rect x="307.2" y="1139.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.28%)</title><rect x="308.3" y="1123.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.09%)</title><rect x="308.3" y="1107.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="308.3" y="1091.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/786916829.get$Lambda (1 samples, 0.09%)</title><rect x="308.3" y="1075.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="309.5" y="1107.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="309.5" y="1091.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="309.5" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="309.5" y="1059.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="309.5" y="1043.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="309.5" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="309.5" y="1011.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="309.5" y="995.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="309.5" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="309.5" y="963.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="309.5" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$170/971726447.accept (1 samples, 0.09%)</title><rect x="309.5" y="931.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.5" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="309.5" y="915.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.5" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="309.5" y="899.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.5" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="309.5" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.5" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="309.5" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.5" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="309.5" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.09%)</title><rect x="310.6" y="1107.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.09%)</title><rect x="310.6" y="1091.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.09%)</title><rect x="310.6" y="1075.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.09%)</title><rect x="310.6" y="1059.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.09%)</title><rect x="310.6" y="1043.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.19%)</title><rect x="311.7" y="1171.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="311.7" y="1155.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="311.7" y="1139.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="312.8" y="1123.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.8" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="313.9" y="1187.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.9" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="313.9" y="1171.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="316.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.run (714 samples, 67.36%)</title><rect x="315.0" y="1235.0" width="794.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="318.0" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (714 samples, 67.36%)</title><rect x="315.0" y="1219.0" width="794.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.0" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (714 samples, 67.36%)</title><rect x="315.0" y="1203.0" width="794.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.0" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run (482 samples, 45.47%)</title><rect x="320.6" y="1187.0" width="536.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.6" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/190443731..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (482 samples, 45.47%)</title><rect x="320.6" y="1171.0" width="536.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.6" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (482 samples, 45.47%)</title><rect x="320.6" y="1155.0" width="536.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.6" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (476 samples, 44.91%)</title><rect x="320.6" y="1139.0" width="529.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.6" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="333.9" y="1123.0" width="2.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="336.9" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="336.2" y="1123.0" width="5.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="339.2" y="1134.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="338.4" y="1107.0" width="3.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="341.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.09%)</title><rect x="341.7" y="1123.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.09%)</title><rect x="341.7" y="1107.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="344.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/116496112.get (1 samples, 0.09%)</title><rect x="341.7" y="1091.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="344.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="341.7" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.7" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="341.7" y="1059.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="344.7" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="341.7" y="1043.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="344.7" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="341.7" y="1027.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="344.7" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="341.7" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="344.7" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="341.7" y="995.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="344.7" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="341.7" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="344.7" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="341.7" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="344.7" y="974.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="341.7" y="947.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="344.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (144 samples, 13.58%)</title><rect x="342.8" y="1123.0" width="160.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.8" y="1134.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (143 samples, 13.49%)</title><rect x="344.0" y="1107.0" width="159.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.0" y="1118.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (143 samples, 13.49%)</title><rect x="344.0" y="1091.0" width="159.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.0" y="1102.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (143 samples, 13.49%)</title><rect x="344.0" y="1075.0" width="159.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.0" y="1086.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (143 samples, 13.49%)</title><rect x="344.0" y="1059.0" width="159.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.0" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (143 samples, 13.49%)</title><rect x="344.0" y="1043.0" width="159.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.0" y="1054.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (49 samples, 4.62%)</title><rect x="344.0" y="1027.0" width="54.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.0" y="1038.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 0.94%)</title><rect x="344.0" y="1011.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 0.94%)</title><rect x="344.0" y="995.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="354.0" y="979.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="357.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="354.0" y="963.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="354.0" y="947.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="354.0" y="931.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (39 samples, 3.68%)</title><rect x="355.1" y="1011.0" width="43.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.1" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (39 samples, 3.68%)</title><rect x="355.1" y="995.0" width="43.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="358.1" y="1006.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="355.1" y="979.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="358.1" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="355.1" y="963.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="358.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="355.1" y="947.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="358.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="355.1" y="931.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="358.1" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.09%)</title><rect x="355.1" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="358.1" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="356.2" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="359.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (11 samples, 1.04%)</title><rect x="357.3" y="979.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (11 samples, 1.04%)</title><rect x="357.3" y="963.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.28%)</title><rect x="362.9" y="947.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.28%)</title><rect x="366.2" y="947.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (16 samples, 1.51%)</title><rect x="369.6" y="979.0" width="17.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="369.6" y="963.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="372.6" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="370.7" y="963.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="370.7" y="947.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="373.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="370.7" y="931.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="373.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="370.7" y="915.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="373.7" y="926.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="371.8" y="899.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="374.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (13 samples, 1.23%)</title><rect x="372.9" y="963.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="375.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="379.6" y="947.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (2 samples, 0.19%)</title><rect x="380.7" y="947.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.28%)</title><rect x="382.9" y="947.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.9" y="958.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="386.3" y="947.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="389.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (10 samples, 0.94%)</title><rect x="387.4" y="979.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (8 samples, 0.75%)</title><rect x="387.4" y="963.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.09%)</title><rect x="395.2" y="947.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="398.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.19%)</title><rect x="396.3" y="963.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="397.4" y="947.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.4" y="958.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="397.4" y="931.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="400.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (83 samples, 7.83%)</title><rect x="398.5" y="1027.0" width="92.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.5" y="1038.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.19%)</title><rect x="398.5" y="1011.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.19%)</title><rect x="398.5" y="995.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="401.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.19%)</title><rect x="398.5" y="979.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="401.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.19%)</title><rect x="398.5" y="963.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.19%)</title><rect x="398.5" y="947.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="401.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.19%)</title><rect x="398.5" y="931.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.19%)</title><rect x="398.5" y="915.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.38%)</title><rect x="400.7" y="1011.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.38%)</title><rect x="400.7" y="995.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.19%)</title><rect x="403.0" y="979.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 1.04%)</title><rect x="405.2" y="1011.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="408.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.85%)</title><rect x="407.4" y="995.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.57%)</title><rect x="409.6" y="979.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="412.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.57%)</title><rect x="409.6" y="963.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="414.1" y="947.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="416.3" y="979.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.28%)</title><rect x="417.4" y="1011.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="420.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.19%)</title><rect x="418.5" y="995.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="421.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (63 samples, 5.94%)</title><rect x="420.8" y="1011.0" width="70.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.8" y="1022.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.32%)</title><rect x="420.8" y="995.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="423.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.28%)</title><rect x="421.9" y="979.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.28%)</title><rect x="421.9" y="963.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="424.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.28%)</title><rect x="421.9" y="947.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.85%)</title><rect x="425.2" y="979.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="435.2" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="435.2" y="963.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 4.62%)</title><rect x="436.4" y="995.0" width="54.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.4" y="1006.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (49 samples, 4.62%)</title><rect x="436.4" y="979.0" width="54.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.4" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="439.7" y="963.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="442.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 4.25%)</title><rect x="440.8" y="963.0" width="50.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="443.8" y="974.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.32%)</title><rect x="444.2" y="947.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.47%)</title><rect x="449.7" y="931.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.47%)</title><rect x="449.7" y="915.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.47%)</title><rect x="449.7" y="899.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="454.2" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.28%)</title><rect x="455.3" y="931.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="458.6" y="931.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.66%)</title><rect x="459.7" y="947.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.38%)</title><rect x="463.1" y="931.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="466.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="463.1" y="915.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="463.1" y="899.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="466.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.38%)</title><rect x="463.1" y="883.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="466.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 1.04%)</title><rect x="467.5" y="947.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 1.04%)</title><rect x="467.5" y="931.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 1.04%)</title><rect x="467.5" y="915.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="470.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 1.04%)</title><rect x="467.5" y="899.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.5" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 1.04%)</title><rect x="467.5" y="883.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.5" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.85%)</title><rect x="469.8" y="867.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.8" y="878.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (3 samples, 0.28%)</title><rect x="476.4" y="851.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.47%)</title><rect x="479.8" y="947.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.47%)</title><rect x="479.8" y="931.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.47%)</title><rect x="479.8" y="915.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.47%)</title><rect x="485.3" y="947.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.04%)</title><rect x="490.9" y="1027.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 1.04%)</title><rect x="490.9" y="1011.0" width="12.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="493.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 1.04%)</title><rect x="490.9" y="995.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 1.04%)</title><rect x="490.9" y="979.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 1.04%)</title><rect x="490.9" y="963.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.19%)</title><rect x="496.5" y="947.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="499.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.19%)</title><rect x="498.7" y="947.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.19%)</title><rect x="500.9" y="947.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (280 samples, 26.42%)</title><rect x="503.2" y="1123.0" width="311.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="506.2" y="1134.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 5.00%)</title><rect x="505.4" y="1107.0" width="59.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.4" y="1118.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="506.5" y="1091.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="509.5" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (51 samples, 4.81%)</title><rect x="507.6" y="1091.0" width="56.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.6" y="1102.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (50 samples, 4.72%)</title><rect x="508.7" y="1075.0" width="55.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.7" y="1086.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.75%)</title><rect x="510.9" y="1059.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="513.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.75%)</title><rect x="510.9" y="1043.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="513.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.75%)</title><rect x="510.9" y="1027.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.75%)</title><rect x="510.9" y="1011.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (40 samples, 3.77%)</title><rect x="519.8" y="1059.0" width="44.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="522.8" y="1070.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (28 samples, 2.64%)</title><rect x="533.2" y="1043.0" width="31.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="536.2" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.66%)</title><rect x="556.6" y="1027.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="559.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.75%)</title><rect x="564.4" y="1107.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="567.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.75%)</title><rect x="564.4" y="1091.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.75%)</title><rect x="564.4" y="1075.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="567.4" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="572.2" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="575.2" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="572.2" y="1043.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="575.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="572.2" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="575.2" y="1038.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="572.2" y="1011.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="575.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (151 samples, 14.25%)</title><rect x="573.3" y="1107.0" width="168.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.3" y="1118.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (151 samples, 14.25%)</title><rect x="573.3" y="1091.0" width="168.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="576.3" y="1102.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="581.1" y="1075.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.1" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="581.1" y="1059.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="584.1" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="581.1" y="1043.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="584.1" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="582.2" y="1075.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="585.2" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="582.2" y="1059.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="585.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (54 samples, 5.09%)</title><rect x="583.3" y="1075.0" width="60.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.3" y="1086.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (51 samples, 4.81%)</title><rect x="585.5" y="1059.0" width="56.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.5" y="1070.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.77%)</title><rect x="587.8" y="1043.0" width="44.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="590.8" y="1054.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="601.1" y="1027.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="604.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 1.98%)</title><rect x="602.2" y="1027.0" width="23.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.2" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (21 samples, 1.98%)</title><rect x="602.2" y="1011.0" width="23.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.2" y="1022.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 1.98%)</title><rect x="602.2" y="995.0" width="23.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.2" y="1006.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.85%)</title><rect x="611.1" y="979.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="614.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="611.1" y="963.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="614.1" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.28%)</title><rect x="612.2" y="963.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="615.2" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="612.2" y="947.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="615.2" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="613.4" y="947.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="616.4" y="958.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="613.4" y="931.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="616.4" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="613.4" y="915.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="616.4" y="926.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="613.4" y="899.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="616.4" y="910.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="614.5" y="915.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="617.5" y="926.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.19%)</title><rect x="615.6" y="963.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="618.6" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.28%)</title><rect x="617.8" y="963.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="620.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.28%)</title><rect x="617.8" y="947.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="620.8" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.19%)</title><rect x="618.9" y="931.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="621.9" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="620.0" y="915.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="623.0" y="926.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="620.0" y="899.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="623.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="620.0" y="883.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="623.0" y="894.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="620.0" y="867.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.0" y="878.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="620.0" y="851.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="623.0" y="862.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="620.0" y="835.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="623.0" y="846.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.09%)</title><rect x="621.2" y="979.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="624.2" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="622.3" y="979.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="625.3" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.38%)</title><rect x="625.6" y="1027.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.6" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="630.1" y="1027.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="633.1" y="1038.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.28%)</title><rect x="632.3" y="1043.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="635.3" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.57%)</title><rect x="635.6" y="1043.0" width="6.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="638.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="642.3" y="1059.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="642.3" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="642.3" y="1027.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="642.3" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="645.3" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="642.3" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="645.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="643.4" y="1075.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.57%)</title><rect x="644.5" y="1075.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="644.5" y="1059.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.5" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="644.5" y="1043.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="647.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="644.5" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="647.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="644.5" y="1011.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="647.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="644.5" y="995.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="647.5" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="644.5" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="647.5" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.47%)</title><rect x="645.6" y="1059.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.47%)</title><rect x="645.6" y="1043.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.19%)</title><rect x="649.0" y="1027.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.0" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (80 samples, 7.55%)</title><rect x="651.2" y="1075.0" width="89.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="654.2" y="1086.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 7.36%)</title><rect x="653.4" y="1059.0" width="86.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.4" y="1070.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.47%)</title><rect x="653.4" y="1043.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.47%)</title><rect x="653.4" y="1027.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.47%)</title><rect x="653.4" y="1011.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.47%)</title><rect x="653.4" y="995.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.28%)</title><rect x="655.7" y="979.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.19%)</title><rect x="656.8" y="963.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="659.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (73 samples, 6.89%)</title><rect x="659.0" y="1043.0" width="81.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.0" y="1054.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 6.42%)</title><rect x="664.6" y="1027.0" width="75.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="667.6" y="1038.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (39 samples, 3.68%)</title><rect x="696.8" y="1011.0" width="43.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.8" y="1022.0">java..</text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.94%)</title><rect x="725.8" y="995.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="728.8" y="1006.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.28%)</title><rect x="736.9" y="995.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="739.9" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="740.3" y="1075.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 4.72%)</title><rect x="741.4" y="1107.0" width="55.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="744.4" y="1118.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 4.62%)</title><rect x="741.4" y="1091.0" width="54.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="744.4" y="1102.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/234677850.process (24 samples, 2.26%)</title><rect x="743.6" y="1075.0" width="26.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.6" y="1086.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (23 samples, 2.17%)</title><rect x="743.6" y="1059.0" width="25.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="746.6" y="1070.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.79%)</title><rect x="744.7" y="1043.0" width="21.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.7" y="1054.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.66%)</title><rect x="757.0" y="1027.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="760.0" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.47%)</title><rect x="759.2" y="1011.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="762.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="760.3" y="995.0" width="4.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="763.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.09%)</title><rect x="764.8" y="1027.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="764.8" y="1011.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="764.8" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="764.8" y="979.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="767.8" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="764.8" y="963.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="767.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.28%)</title><rect x="765.9" y="1043.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.28%)</title><rect x="765.9" y="1027.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.28%)</title><rect x="765.9" y="1011.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="768.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.28%)</title><rect x="765.9" y="995.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="769.2" y="1059.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1809205318.complete (1 samples, 0.09%)</title><rect x="770.3" y="1075.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (1 samples, 0.09%)</title><rect x="770.3" y="1059.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.09%)</title><rect x="770.3" y="1043.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.09%)</title><rect x="770.3" y="1027.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="773.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.28%)</title><rect x="771.4" y="1075.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="774.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.28%)</title><rect x="771.4" y="1059.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.4" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="773.7" y="1043.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.7" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="773.7" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="776.7" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="773.7" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.7" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="773.7" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="776.7" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="773.7" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.7" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="773.7" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.57%)</title><rect x="774.8" y="1075.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="777.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.57%)</title><rect x="774.8" y="1059.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="777.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1809205318.get$Lambda (6 samples, 0.57%)</title><rect x="774.8" y="1043.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="777.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="775.9" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.9" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="775.9" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="778.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="775.9" y="995.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="778.9" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="775.9" y="979.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1809205318.&lt;init&gt; (4 samples, 0.38%)</title><rect x="777.0" y="1027.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="781.5" y="1075.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="781.5" y="1059.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.5" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="781.5" y="1043.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.75%)</title><rect x="782.6" y="1075.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="785.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.47%)</title><rect x="785.9" y="1059.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.9" y="1070.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.38%)</title><rect x="787.0" y="1043.0" width="4.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="790.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="791.5" y="1075.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.28%)</title><rect x="792.6" y="1075.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.6" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="794.8" y="1059.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="797.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="794.8" y="1043.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="797.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="794.8" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="797.8" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="794.8" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="797.8" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="794.8" y="995.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="797.8" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="795.9" y="1091.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="798.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.51%)</title><rect x="797.0" y="1107.0" width="17.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.0" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="802.6" y="1091.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="805.6" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="802.6" y="1075.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="805.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.85%)</title><rect x="804.8" y="1091.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.85%)</title><rect x="804.8" y="1075.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/808730176.accept (9 samples, 0.85%)</title><rect x="804.8" y="1059.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.85%)</title><rect x="804.8" y="1043.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="807.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="804.8" y="1027.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.8" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="804.8" y="1011.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.8" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="804.8" y="995.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="807.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="804.8" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="807.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="804.8" y="963.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="807.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="804.8" y="947.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.8" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.75%)</title><rect x="805.9" y="1027.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="808.9" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.75%)</title><rect x="805.9" y="1011.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="808.9" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.57%)</title><rect x="808.2" y="995.0" width="6.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="811.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="809.3" y="979.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="812.3" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.09%)</title><rect x="814.8" y="1123.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="814.8" y="1107.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="817.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1868351509.get$Lambda (1 samples, 0.09%)</title><rect x="814.8" y="1091.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.8" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="814.8" y="1075.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="817.8" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="814.8" y="1059.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="817.8" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="814.8" y="1043.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="814.8" y="1027.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="817.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.98%)</title><rect x="816.0" y="1123.0" width="23.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="819.0" y="1134.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="816.0" y="1107.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="819.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.89%)</title><rect x="817.1" y="1107.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="820.1" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.70%)</title><rect x="818.2" y="1091.0" width="20.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/808730176.accept (1 samples, 0.09%)</title><rect x="818.2" y="1075.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.09%)</title><rect x="818.2" y="1059.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="821.2" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="818.2" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.2" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.09%)</title><rect x="818.2" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1868351509.accept (17 samples, 1.60%)</title><rect x="819.3" y="1075.0" width="18.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (17 samples, 1.60%)</title><rect x="819.3" y="1059.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/605145070.complete (17 samples, 1.60%)</title><rect x="819.3" y="1043.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (17 samples, 1.60%)</title><rect x="819.3" y="1027.0" width="18.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (17 samples, 1.60%)</title><rect x="819.3" y="1011.0" width="18.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.60%)</title><rect x="819.3" y="995.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.60%)</title><rect x="819.3" y="979.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="822.3" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (17 samples, 1.60%)</title><rect x="819.3" y="963.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.3" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (17 samples, 1.60%)</title><rect x="819.3" y="947.0" width="18.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="838.2" y="1091.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.2" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.85%)</title><rect x="839.3" y="1123.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.75%)</title><rect x="840.5" y="1107.0" width="8.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="843.5" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="849.4" y="1123.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="850.5" y="1139.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.5" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="850.5" y="1123.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.5" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="850.5" y="1107.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.5" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="850.5" y="1091.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="853.5" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="850.5" y="1075.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.5" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="850.5" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="853.5" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="850.5" y="1043.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="853.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.47%)</title><rect x="851.6" y="1139.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.6" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.28%)</title><rect x="853.8" y="1123.0" width="3.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="856.8" y="1134.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="853.8" y="1107.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="856.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.19%)</title><rect x="857.2" y="1187.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="860.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (11 samples, 1.04%)</title><rect x="859.4" y="1187.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.04%)</title><rect x="859.4" y="1171.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="862.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.04%)</title><rect x="859.4" y="1155.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="862.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.04%)</title><rect x="859.4" y="1139.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="862.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1904437313.run (3 samples, 0.28%)</title><rect x="868.3" y="1123.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 20.19%)</title><rect x="871.6" y="1187.0" width="238.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="874.6" y="1198.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (214 samples, 20.19%)</title><rect x="871.6" y="1171.0" width="238.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="874.6" y="1182.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (176 samples, 16.60%)</title><rect x="890.5" y="1155.0" width="196.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="893.5" y="1166.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 1.32%)</title><rect x="897.2" y="1139.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="900.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.32%)</title><rect x="897.2" y="1123.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="900.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.32%)</title><rect x="897.2" y="1107.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="900.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.32%)</title><rect x="897.2" y="1091.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="900.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (156 samples, 14.72%)</title><rect x="912.8" y="1139.0" width="173.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.8" y="1150.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (156 samples, 14.72%)</title><rect x="912.8" y="1123.0" width="173.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="915.8" y="1134.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="916.2" y="1107.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="919.2" y="1118.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.28%)</title><rect x="917.3" y="1107.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.3" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.28%)</title><rect x="920.6" y="1107.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.6" y="1118.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 13.40%)</title><rect x="923.9" y="1107.0" width="158.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="926.9" y="1118.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="925.1" y="1091.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.1" y="1102.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="926.2" y="1091.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="929.2" y="1102.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 2.45%)</title><rect x="927.3" y="1091.0" width="28.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="930.3" y="1102.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.75%)</title><rect x="934.0" y="1075.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.0" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.57%)</title><rect x="935.1" y="1059.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.1" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (6 samples, 0.57%)</title><rect x="935.1" y="1043.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.1" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="941.8" y="1059.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="944.8" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.19%)</title><rect x="942.9" y="1075.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="945.9" y="1086.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="945.1" y="1075.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.1" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.85%)</title><rect x="946.2" y="1075.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.2" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="956.2" y="1091.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="959.2" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="957.3" y="1091.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.3" y="1102.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="958.5" y="1091.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="961.5" y="1102.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.85%)</title><rect x="959.6" y="1091.0" width="10.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="962.6" y="1102.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 2.64%)</title><rect x="969.6" y="1091.0" width="31.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="972.6" y="1102.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 4.81%)</title><rect x="1000.8" y="1091.0" width="56.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1003.8" y="1102.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.19%)</title><rect x="1057.5" y="1091.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1060.5" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.38%)</title><rect x="1059.8" y="1091.0" width="4.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1062.8" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.47%)</title><rect x="1064.2" y="1091.0" width="5.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1067.2" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.47%)</title><rect x="1069.8" y="1091.0" width="5.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1072.8" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.47%)</title><rect x="1075.3" y="1091.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.3" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1080.9" y="1091.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.9" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1082.0" y="1107.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1085.0" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1084.2" y="1107.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.98%)</title><rect x="1086.5" y="1155.0" width="23.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.5" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.98%)</title><rect x="1086.5" y="1139.0" width="23.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1089.5" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.98%)</title><rect x="1086.5" y="1123.0" width="23.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1089.5" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.98%)</title><rect x="1086.5" y="1107.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1089.5" y="1118.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1109.8" y="1235.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1112.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1109.8" y="1219.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1112.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1109.8" y="1203.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1109.8" y="1187.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1109.8" y="1171.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1112.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1109.8" y="1155.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1112.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.09%)</title><rect x="1109.8" y="1139.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.09%)</title><rect x="1109.8" y="1123.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1112.8" y="1134.0"></text>
</g>
<g>
<title>start_thread (71 samples, 6.70%)</title><rect x="1111.0" y="1235.0" width="79.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1114.0" y="1246.0">start_thr..</text>
</g>
<g>
<title>java_start(Thread*) (71 samples, 6.70%)</title><rect x="1111.0" y="1219.0" width="79.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1114.0" y="1230.0">java_star..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.89%)</title><rect x="1111.0" y="1203.0" width="22.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.0" y="1214.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.38%)</title><rect x="1111.0" y="1187.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.0" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.38%)</title><rect x="1111.0" y="1171.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.0" y="1182.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.38%)</title><rect x="1111.0" y="1155.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1114.0" y="1166.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.51%)</title><rect x="1115.4" y="1187.0" width="17.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.4" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.28%)</title><rect x="1115.4" y="1171.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.4" y="1182.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1115.4" y="1155.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.4" y="1166.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1117.6" y="1155.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1120.6" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.66%)</title><rect x="1118.8" y="1171.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.8" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.38%)</title><rect x="1118.8" y="1155.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.8" y="1166.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.19%)</title><rect x="1118.8" y="1139.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.8" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.19%)</title><rect x="1118.8" y="1123.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.8" y="1134.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.19%)</title><rect x="1118.8" y="1107.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.8" y="1118.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1119.9" y="1091.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.9" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1119.9" y="1075.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.9" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1119.9" y="1059.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.9" y="1070.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1121.0" y="1139.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.0" y="1150.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1121.0" y="1123.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.0" y="1134.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.19%)</title><rect x="1121.0" y="1107.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.0" y="1118.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (2 samples, 0.19%)</title><rect x="1121.0" y="1091.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.0" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.28%)</title><rect x="1123.2" y="1155.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.2" y="1166.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.28%)</title><rect x="1123.2" y="1139.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.2" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.57%)</title><rect x="1126.5" y="1171.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.5" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.57%)</title><rect x="1126.5" y="1155.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.5" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.57%)</title><rect x="1126.5" y="1139.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.5" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.47%)</title><rect x="1126.5" y="1123.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.5" y="1134.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.47%)</title><rect x="1126.5" y="1107.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.5" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.47%)</title><rect x="1126.5" y="1091.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.5" y="1102.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.19%)</title><rect x="1129.9" y="1075.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.9" y="1086.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1131.0" y="1059.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.0" y="1070.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.09%)</title><rect x="1132.1" y="1123.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.1" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (50 samples, 4.72%)</title><rect x="1133.2" y="1203.0" width="55.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.2" y="1214.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (50 samples, 4.72%)</title><rect x="1133.2" y="1187.0" width="55.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.2" y="1198.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (50 samples, 4.72%)</title><rect x="1133.2" y="1171.0" width="55.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.2" y="1182.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (50 samples, 4.72%)</title><rect x="1133.2" y="1155.0" width="55.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.2" y="1166.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (49 samples, 4.62%)</title><rect x="1133.2" y="1139.0" width="54.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.2" y="1150.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (49 samples, 4.62%)</title><rect x="1133.2" y="1123.0" width="54.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.2" y="1134.0">Compi..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1133.2" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.2" y="1118.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1133.2" y="1091.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.2" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1133.2" y="1075.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.2" y="1086.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 2.45%)</title><rect x="1134.3" y="1107.0" width="29.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.3" y="1118.0">Co..</text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.38%)</title><rect x="1134.3" y="1091.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.3" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1134.3" y="1075.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1135.5" y="1075.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.5" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1135.5" y="1059.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1135.5" y="1043.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.5" y="1054.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.09%)</title><rect x="1135.5" y="1027.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.5" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1136.6" y="1059.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1139.6" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.09%)</title><rect x="1137.7" y="1075.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.7" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1138.8" y="1091.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.8" y="1102.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.09%)</title><rect x="1138.8" y="1075.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.19%)</title><rect x="1139.9" y="1091.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.9" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.19%)</title><rect x="1139.9" y="1075.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.19%)</title><rect x="1139.9" y="1059.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1139.9" y="1043.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="1054.0"></text>
</g>
<g>
<title>Node::add_prec(Node*) (1 samples, 0.09%)</title><rect x="1139.9" y="1027.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.9" y="1038.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1139.9" y="1011.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.9" y="1022.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1139.9" y="995.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1142.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="1141.0" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 1.79%)</title><rect x="1142.1" y="1091.0" width="21.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.1" y="1102.0">P..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.09%)</title><rect x="1142.1" y="1075.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.1" y="1086.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1143.2" y="1075.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.2" y="1086.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1144.4" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1145.5" y="1075.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1145.5" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.5" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1145.5" y="1043.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.38%)</title><rect x="1146.6" y="1075.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1148.8" y="1059.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1148.8" y="1043.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.8" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.09%)</title><rect x="1148.8" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.8" y="1038.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.09%)</title><rect x="1149.9" y="1059.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.28%)</title><rect x="1151.0" y="1075.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.0" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1151.0" y="1059.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1152.2" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.2" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1153.3" y="1059.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1154.4" y="1075.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1155.5" y="1075.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1156.6" y="1059.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.28%)</title><rect x="1157.7" y="1075.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.7" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.19%)</title><rect x="1158.8" y="1059.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.8" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.19%)</title><rect x="1161.1" y="1075.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.1" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 1.60%)</title><rect x="1163.3" y="1107.0" width="18.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1163.3" y="1091.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 1.23%)</title><rect x="1164.4" y="1091.0" width="14.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1164.4" y="1075.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1164.4" y="1059.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.57%)</title><rect x="1165.5" y="1075.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.57%)</title><rect x="1165.5" y="1059.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.5" y="1070.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1165.5" y="1043.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.47%)</title><rect x="1166.6" y="1043.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1172.2" y="1075.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1172.2" y="1059.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1173.3" y="1075.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1173.3" y="1059.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1173.3" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.28%)</title><rect x="1174.4" y="1075.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.28%)</title><rect x="1174.4" y="1059.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1070.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1174.4" y="1043.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1174.4" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1174.4" y="1011.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="1022.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1174.4" y="995.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.5" y="1043.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="1043.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="1054.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1176.6" y="1027.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="1038.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.09%)</title><rect x="1177.8" y="1075.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="1086.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.09%)</title><rect x="1177.8" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1070.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.09%)</title><rect x="1177.8" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.19%)</title><rect x="1178.9" y="1091.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.19%)</title><rect x="1178.9" y="1075.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="1086.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="1059.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1178.9" y="1043.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1178.9" y="1027.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="1059.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.0" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1181.1" y="1091.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1181.1" y="1075.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1181.1" y="1059.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1181.1" y="1043.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="1054.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.09%)</title><rect x="1181.1" y="1027.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1182.2" y="1107.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1182.2" y="1091.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1182.2" y="1075.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1182.2" y="1059.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.47%)</title><rect x="1182.2" y="1043.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.47%)</title><rect x="1182.2" y="1027.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1182.2" y="1011.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="1022.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1182.2" y="995.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.09%)</title><rect x="1182.2" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.2" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1182.2" y="947.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1182.2" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1183.3" y="1011.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1183.3" y="995.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="1006.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1183.3" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1183.3" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.3" y="974.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1183.3" y="947.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1183.3" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.3" y="942.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1183.3" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1184.4" y="979.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1184.4" y="963.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1184.4" y="947.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1184.4" y="931.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1184.4" y="915.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1184.4" y="899.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1184.4" y="883.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1184.4" y="867.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1184.4" y="851.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1184.4" y="835.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1184.4" y="819.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1184.4" y="803.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1184.4" y="787.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1184.4" y="771.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1184.4" y="755.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1184.4" y="739.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1184.4" y="723.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1184.4" y="707.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1184.4" y="691.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1184.4" y="675.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1184.4" y="659.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.4" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.4" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.4" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.4" y="579.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.4" y="563.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.4" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="531.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.4" y="515.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.4" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.4" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.4" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.4" y="451.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="435.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.4" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.4" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.4" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.4" y="371.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.4" y="355.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.4" y="323.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.4" y="307.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.4" y="291.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.4" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.4" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="243.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.4" y="227.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.4" y="211.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.4" y="195.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.4" y="179.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.4" y="163.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.4" y="131.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.4" y="115.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.4" y="99.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.4" y="83.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.4" y="67.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="78.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.4" y="51.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="62.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.4" y="35.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1185.5" y="643.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1185.5" y="627.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="638.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1185.5" y="611.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.5" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1185.5" y="595.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="606.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1185.5" y="579.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1185.5" y="563.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="547.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="515.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="483.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="467.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="451.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="435.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.5" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="419.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="403.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="387.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="398.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1185.5" y="371.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="382.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.09%)</title><rect x="1185.5" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="366.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.09%)</title><rect x="1185.5" y="339.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="350.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1185.5" y="323.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.7" y="819.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.7" y="803.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.7" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1186.7" y="771.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1186.7" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1186.7" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1186.7" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1186.7" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.7" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1186.7" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1186.7" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1186.7" y="643.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1186.7" y="627.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1186.7" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.7" y="595.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1186.7" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1186.7" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1186.7" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1186.7" y="531.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1186.7" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.7" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1186.7" y="483.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1186.7" y="467.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1186.7" y="451.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1186.7" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="403.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1186.7" y="387.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="371.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1186.7" y="355.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="366.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="339.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="350.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="334.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1186.7" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="318.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1186.7" y="291.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="302.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1186.7" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1186.7" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="270.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1186.7" y="243.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.7" y="254.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="227.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1186.7" y="211.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="222.0"></text>
</g>
<g>
<title>MutexLockerEx::MutexLockerEx(Monitor*, bool) (1 samples, 0.09%)</title><rect x="1187.8" y="1139.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="1150.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1188.9" y="1203.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="1214.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1188.9" y="1187.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.9" y="1198.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="1171.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="1182.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="1155.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="1166.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="1139.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="1107.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="1118.0"></text>
</g>
<g>
<title>ReferenceProcessor::enqueue_discovered_references(AbstractRefProcTaskExecutor*) (1 samples, 0.09%)</title><rect x="1188.9" y="1091.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.9" y="1102.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_ref_field_work(void*, oopDesc*, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="1075.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="1086.0"></text>
</g>
</g>
</svg>
