<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (177 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (35 samples, 19.77%)</title><rect x="10.0" y="755.0" width="233.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (35 samples, 19.77%)</title><rect x="10.0" y="739.0" width="233.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.56%)</title><rect x="10.0" y="723.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.56%)</title><rect x="10.0" y="707.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="10.0" y="691.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="10.0" y="675.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.56%)</title><rect x="10.0" y="659.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.56%)</title><rect x="10.0" y="643.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.56%)</title><rect x="10.0" y="627.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.56%)</title><rect x="10.0" y="611.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.56%)</title><rect x="10.0" y="595.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.56%)</title><rect x="10.0" y="579.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 10.73%)</title><rect x="16.7" y="723.0" width="126.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="734.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/579708423.accept (19 samples, 10.73%)</title><rect x="16.7" y="707.0" width="126.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.7" y="718.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 10.73%)</title><rect x="16.7" y="691.0" width="126.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="702.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 9.04%)</title><rect x="16.7" y="675.0" width="106.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.7" y="686.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 9.04%)</title><rect x="16.7" y="659.0" width="106.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.7" y="670.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 9.04%)</title><rect x="16.7" y="643.0" width="106.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="654.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 9.04%)</title><rect x="16.7" y="627.0" width="106.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="638.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 9.04%)</title><rect x="16.7" y="611.0" width="106.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.7" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.34%)</title><rect x="36.7" y="595.0" width="86.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.7" y="606.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (13 samples, 7.34%)</title><rect x="36.7" y="579.0" width="86.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.7" y="590.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 7.34%)</title><rect x="36.7" y="563.0" width="86.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.7" y="574.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 7.34%)</title><rect x="36.7" y="547.0" width="86.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.7" y="558.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 7.34%)</title><rect x="36.7" y="531.0" width="86.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.7" y="542.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 7.34%)</title><rect x="36.7" y="515.0" width="86.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.7" y="526.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (10 samples, 5.65%)</title><rect x="56.7" y="499.0" width="66.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="59.7" y="510.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 5.65%)</title><rect x="56.7" y="483.0" width="66.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="59.7" y="494.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 3.39%)</title><rect x="56.7" y="467.0" width="40.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="59.7" y="478.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 2.26%)</title><rect x="96.7" y="467.0" width="26.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="99.7" y="478.0">p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.69%)</title><rect x="123.3" y="675.0" width="20.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.3" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.69%)</title><rect x="123.3" y="659.0" width="20.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.3" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.69%)</title><rect x="123.3" y="643.0" width="20.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.3" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.13%)</title><rect x="123.3" y="627.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.3" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.13%)</title><rect x="123.3" y="611.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.3" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="130.0" y="595.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="133.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.56%)</title><rect x="136.7" y="627.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 8.47%)</title><rect x="143.3" y="723.0" width="100.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.3" y="734.0">org/apache/k..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 7.91%)</title><rect x="150.0" y="707.0" width="93.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.0" y="718.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.52%)</title><rect x="150.0" y="691.0" width="53.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.0" y="702.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.56%)</title><rect x="150.0" y="675.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.56%)</title><rect x="150.0" y="659.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.56%)</title><rect x="150.0" y="643.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.56%)</title><rect x="150.0" y="627.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.56%)</title><rect x="150.0" y="611.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.56%)</title><rect x="150.0" y="595.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.56%)</title><rect x="150.0" y="579.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.56%)</title><rect x="150.0" y="563.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.56%)</title><rect x="150.0" y="547.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.56%)</title><rect x="150.0" y="531.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.56%)</title><rect x="150.0" y="515.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.56%)</title><rect x="150.0" y="499.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.0" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.56%)</title><rect x="150.0" y="483.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.56%)</title><rect x="150.0" y="467.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 3.95%)</title><rect x="156.7" y="675.0" width="46.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.7" y="686.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 3.95%)</title><rect x="156.7" y="659.0" width="46.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.7" y="670.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.82%)</title><rect x="156.7" y="643.0" width="33.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.7" y="654.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.82%)</title><rect x="156.7" y="627.0" width="33.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.7" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 2.82%)</title><rect x="156.7" y="611.0" width="33.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.7" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 1.69%)</title><rect x="170.0" y="595.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 1.69%)</title><rect x="170.0" y="579.0" width="20.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 1.13%)</title><rect x="170.0" y="563.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 1.13%)</title><rect x="170.0" y="547.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 1.13%)</title><rect x="170.0" y="531.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 1.13%)</title><rect x="170.0" y="515.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.13%)</title><rect x="170.0" y="499.0" width="13.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.sizeInBytes (1 samples, 0.56%)</title><rect x="183.3" y="563.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 1.13%)</title><rect x="190.0" y="643.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 1.13%)</title><rect x="190.0" y="627.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.56%)</title><rect x="190.0" y="611.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="190.0" y="595.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.56%)</title><rect x="190.0" y="579.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.56%)</title><rect x="190.0" y="563.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="190.0" y="547.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.0" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.56%)</title><rect x="190.0" y="531.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="193.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="196.7" y="611.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="196.7" y="595.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="196.7" y="579.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 2.82%)</title><rect x="203.3" y="691.0" width="33.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.3" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.69%)</title><rect x="203.3" y="675.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.69%)</title><rect x="203.3" y="659.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 1.13%)</title><rect x="203.3" y="643.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/582535925.accept (1 samples, 0.56%)</title><rect x="210.0" y="627.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.56%)</title><rect x="210.0" y="611.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.56%)</title><rect x="210.0" y="595.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.56%)</title><rect x="210.0" y="579.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.56%)</title><rect x="210.0" y="563.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.56%)</title><rect x="210.0" y="547.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.56%)</title><rect x="210.0" y="531.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.56%)</title><rect x="216.7" y="643.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.56%)</title><rect x="216.7" y="627.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="216.7" y="611.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.7" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.56%)</title><rect x="216.7" y="595.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.56%)</title><rect x="216.7" y="579.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.56%)</title><rect x="216.7" y="563.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.56%)</title><rect x="216.7" y="547.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 1.13%)</title><rect x="223.3" y="675.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.56%)</title><rect x="223.3" y="659.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.56%)</title><rect x="230.0" y="659.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="230.0" y="643.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.0" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.56%)</title><rect x="230.0" y="627.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="233.0" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="611.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="233.0" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="595.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="233.0" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="579.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="233.0" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="563.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="233.0" y="574.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="547.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="233.0" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="531.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="233.0" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="515.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="233.0" y="526.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="499.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="233.0" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="483.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="233.0" y="494.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="467.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="233.0" y="478.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.56%)</title><rect x="230.0" y="451.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.56%)</title><rect x="236.7" y="691.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="236.7" y="675.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.56%)</title><rect x="236.7" y="659.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.7" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.56%)</title><rect x="236.7" y="643.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="239.7" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="236.7" y="627.0" width="6.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="239.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (75 samples, 42.37%)</title><rect x="243.3" y="755.0" width="500.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.3" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (75 samples, 42.37%)</title><rect x="243.3" y="739.0" width="500.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.3" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (75 samples, 42.37%)</title><rect x="243.3" y="723.0" width="500.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.3" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/36971569.run (52 samples, 29.38%)</title><rect x="270.0" y="707.0" width="346.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.0" y="718.0">com/linecorp/decaton/processor/runtime/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (52 samples, 29.38%)</title><rect x="270.0" y="691.0" width="346.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.0" y="702.0">com/linecorp/decaton/processor/runtime/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (52 samples, 29.38%)</title><rect x="270.0" y="675.0" width="346.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.0" y="686.0">com/linecorp/decaton/processor/runtime/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (52 samples, 29.38%)</title><rect x="270.0" y="659.0" width="346.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.0" y="670.0">com/linecorp/decaton/processor/runtime/ProcessP..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (17 samples, 9.60%)</title><rect x="283.3" y="643.0" width="113.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.3" y="654.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (17 samples, 9.60%)</title><rect x="283.3" y="627.0" width="113.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.3" y="638.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (17 samples, 9.60%)</title><rect x="283.3" y="611.0" width="113.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="622.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 9.60%)</title><rect x="283.3" y="595.0" width="113.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.3" y="606.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 9.60%)</title><rect x="283.3" y="579.0" width="113.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="590.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (17 samples, 9.60%)</title><rect x="283.3" y="563.0" width="113.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.3" y="574.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 4.52%)</title><rect x="283.3" y="547.0" width="53.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.3" y="558.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.13%)</title><rect x="283.3" y="531.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.13%)</title><rect x="283.3" y="515.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.13%)</title><rect x="283.3" y="499.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.13%)</title><rect x="283.3" y="483.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 3.39%)</title><rect x="296.7" y="531.0" width="40.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.7" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 3.39%)</title><rect x="296.7" y="515.0" width="40.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.7" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.56%)</title><rect x="296.7" y="499.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.56%)</title><rect x="296.7" y="483.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.56%)</title><rect x="303.3" y="499.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.56%)</title><rect x="303.3" y="483.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 2.26%)</title><rect x="310.0" y="499.0" width="26.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.0" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 1.69%)</title><rect x="310.0" y="483.0" width="20.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.56%)</title><rect x="330.0" y="483.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.56%)</title><rect x="330.0" y="467.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.0" y="478.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.56%)</title><rect x="330.0" y="451.0" width="6.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="333.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 3.95%)</title><rect x="336.7" y="547.0" width="46.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.7" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.56%)</title><rect x="336.7" y="531.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.56%)</title><rect x="336.7" y="515.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.56%)</title><rect x="336.7" y="499.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.56%)</title><rect x="343.3" y="531.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="343.3" y="515.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.56%)</title><rect x="343.3" y="499.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.82%)</title><rect x="350.0" y="531.0" width="33.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.0" y="542.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="350.0" y="515.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.56%)</title><rect x="350.0" y="499.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.56%)</title><rect x="350.0" y="483.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.56%)</title><rect x="350.0" y="467.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.56%)</title><rect x="350.0" y="451.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="353.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.26%)</title><rect x="356.7" y="515.0" width="26.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.7" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.26%)</title><rect x="356.7" y="499.0" width="26.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.7" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.26%)</title><rect x="356.7" y="483.0" width="26.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="359.7" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.69%)</title><rect x="363.3" y="467.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 1.13%)</title><rect x="363.3" y="451.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.56%)</title><rect x="376.7" y="451.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.56%)</title><rect x="376.7" y="435.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.56%)</title><rect x="376.7" y="419.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.56%)</title><rect x="376.7" y="403.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.13%)</title><rect x="383.3" y="547.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.13%)</title><rect x="383.3" y="531.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.13%)</title><rect x="383.3" y="515.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="386.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.13%)</title><rect x="383.3" y="499.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.13%)</title><rect x="383.3" y="483.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.56%)</title><rect x="390.0" y="467.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (33 samples, 18.64%)</title><rect x="396.7" y="643.0" width="220.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.7" y="654.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.56%)</title><rect x="403.3" y="627.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.56%)</title><rect x="410.0" y="627.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 3.39%)</title><rect x="416.7" y="627.0" width="40.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.7" y="638.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 3.39%)</title><rect x="416.7" y="611.0" width="40.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.7" y="622.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.82%)</title><rect x="423.3" y="595.0" width="33.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.3" y="606.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.13%)</title><rect x="430.0" y="579.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="433.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.13%)</title><rect x="430.0" y="563.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.0" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.13%)</title><rect x="430.0" y="547.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="433.0" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.13%)</title><rect x="430.0" y="531.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.13%)</title><rect x="443.3" y="579.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="446.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.56%)</title><rect x="450.0" y="563.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.56%)</title><rect x="450.0" y="547.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="453.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.56%)</title><rect x="450.0" y="531.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 6.78%)</title><rect x="456.7" y="627.0" width="80.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.7" y="638.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (11 samples, 6.21%)</title><rect x="463.3" y="611.0" width="73.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="466.3" y="622.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 3.39%)</title><rect x="470.0" y="595.0" width="40.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.0" y="606.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.82%)</title><rect x="476.7" y="579.0" width="33.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="479.7" y="590.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.82%)</title><rect x="476.7" y="563.0" width="33.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.7" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 2.26%)</title><rect x="483.3" y="547.0" width="26.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="486.3" y="558.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.69%)</title><rect x="490.0" y="531.0" width="20.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="503.3" y="515.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="506.3" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.56%)</title><rect x="503.3" y="499.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="506.3" y="510.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.56%)</title><rect x="503.3" y="483.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.3" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.56%)</title><rect x="510.0" y="595.0" width="6.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="513.0" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.69%)</title><rect x="516.7" y="595.0" width="20.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.7" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.69%)</title><rect x="516.7" y="579.0" width="20.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.56%)</title><rect x="516.7" y="563.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.56%)</title><rect x="516.7" y="547.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.56%)</title><rect x="516.7" y="531.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.56%)</title><rect x="516.7" y="515.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.7" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.13%)</title><rect x="523.3" y="563.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="526.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.13%)</title><rect x="523.3" y="547.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.56%)</title><rect x="523.3" y="531.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="526.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.56%)</title><rect x="523.3" y="515.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.56%)</title><rect x="530.0" y="531.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.56%)</title><rect x="530.0" y="515.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (7 samples, 3.95%)</title><rect x="536.7" y="627.0" width="46.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.7" y="638.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (7 samples, 3.95%)</title><rect x="536.7" y="611.0" width="46.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.7" y="622.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1062177384.process (3 samples, 1.69%)</title><rect x="536.7" y="595.0" width="20.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="539.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.69%)</title><rect x="536.7" y="579.0" width="20.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="539.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.69%)</title><rect x="536.7" y="563.0" width="20.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="539.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.13%)</title><rect x="536.7" y="547.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 1.13%)</title><rect x="536.7" y="531.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="539.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.13%)</title><rect x="536.7" y="515.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.13%)</title><rect x="536.7" y="499.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 1.13%)</title><rect x="536.7" y="483.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.7" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.56%)</title><rect x="543.3" y="467.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="546.3" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="543.3" y="451.0" width="6.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="546.3" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.56%)</title><rect x="550.0" y="547.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.0" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.56%)</title><rect x="550.0" y="531.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="553.0" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.56%)</title><rect x="550.0" y="515.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.0" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (2 samples, 1.13%)</title><rect x="556.7" y="595.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="559.7" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (2 samples, 1.13%)</title><rect x="556.7" y="579.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="559.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1449503601.get$Lambda (1 samples, 0.56%)</title><rect x="563.3" y="563.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1449503601.&lt;init&gt; (1 samples, 0.56%)</title><rect x="563.3" y="547.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="566.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.56%)</title><rect x="570.0" y="595.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.0" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.56%)</title><rect x="570.0" y="579.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="573.0" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.56%)</title><rect x="576.7" y="595.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.7" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="576.7" y="579.0" width="6.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="579.7" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="576.7" y="563.0" width="6.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="579.7" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 1.13%)</title><rect x="583.3" y="627.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.56%)</title><rect x="583.3" y="611.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="586.3" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.56%)</title><rect x="590.0" y="611.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="593.0" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.56%)</title><rect x="590.0" y="595.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="593.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.56%)</title><rect x="596.7" y="627.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.13%)</title><rect x="603.3" y="627.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.56%)</title><rect x="610.0" y="611.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.56%)</title><rect x="610.0" y="595.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1725767370.accept (1 samples, 0.56%)</title><rect x="610.0" y="579.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="613.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.56%)</title><rect x="610.0" y="563.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.0" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.56%)</title><rect x="610.0" y="547.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="613.0" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.56%)</title><rect x="610.0" y="531.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="613.0" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="610.0" y="515.0" width="6.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="613.0" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="610.0" y="499.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="613.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.56%)</title><rect x="616.7" y="707.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="619.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.13%)</title><rect x="623.3" y="707.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.13%)</title><rect x="623.3" y="691.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.56%)</title><rect x="623.3" y="675.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.56%)</title><rect x="630.0" y="675.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.56%)</title><rect x="630.0" y="659.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.56%)</title><rect x="630.0" y="643.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 9.04%)</title><rect x="636.7" y="707.0" width="106.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.7" y="718.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 9.04%)</title><rect x="636.7" y="691.0" width="106.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="639.7" y="702.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 7.91%)</title><rect x="643.3" y="675.0" width="93.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.3" y="686.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 7.91%)</title><rect x="643.3" y="659.0" width="93.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.3" y="670.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (14 samples, 7.91%)</title><rect x="643.3" y="643.0" width="93.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.3" y="654.0">sun/misc/Un..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.56%)</title><rect x="650.0" y="627.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="653.0" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.56%)</title><rect x="656.7" y="627.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.7" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park (11 samples, 6.21%)</title><rect x="663.3" y="627.0" width="73.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="666.3" y="638.0">Unsafe_P..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.13%)</title><rect x="663.3" y="611.0" width="13.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="666.3" y="622.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.56%)</title><rect x="676.7" y="611.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="679.7" y="622.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.56%)</title><rect x="683.3" y="611.0" width="6.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="686.3" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.56%)</title><rect x="690.0" y="611.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="693.0" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.82%)</title><rect x="696.7" y="611.0" width="33.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="699.7" y="622.0">__..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.56%)</title><rect x="730.0" y="611.0" width="6.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="733.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.56%)</title><rect x="736.7" y="675.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.56%)</title><rect x="736.7" y="659.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.56%)</title><rect x="736.7" y="643.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.56%)</title><rect x="736.7" y="627.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.7" y="638.0"></text>
</g>
<g>
<title>start_thread (67 samples, 37.85%)</title><rect x="743.3" y="755.0" width="446.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="746.3" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (67 samples, 37.85%)</title><rect x="743.3" y="739.0" width="446.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="746.3" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 8.47%)</title><rect x="743.3" y="723.0" width="100.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.3" y="734.0">GangWorker::..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.13%)</title><rect x="743.3" y="707.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.3" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.13%)</title><rect x="743.3" y="691.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="746.3" y="702.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.13%)</title><rect x="743.3" y="675.0" width="13.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="746.3" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 7.34%)</title><rect x="756.7" y="707.0" width="86.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="759.7" y="718.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 6.21%)</title><rect x="756.7" y="691.0" width="73.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="759.7" y="702.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.82%)</title><rect x="756.7" y="675.0" width="33.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.7" y="686.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.13%)</title><rect x="770.0" y="659.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="773.0" y="670.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.56%)</title><rect x="776.7" y="643.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="779.7" y="654.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_range_nv(oopDesc*, G1ParScanClosure*, int, int) (1 samples, 0.56%)</title><rect x="783.3" y="659.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="786.3" y="670.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.69%)</title><rect x="790.0" y="675.0" width="20.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="793.0" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.56%)</title><rect x="810.0" y="675.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="813.0" y="686.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 1.13%)</title><rect x="816.7" y="675.0" width="13.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="819.7" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.56%)</title><rect x="830.0" y="691.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.0" y="702.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.56%)</title><rect x="830.0" y="675.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="833.0" y="686.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.56%)</title><rect x="830.0" y="659.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.0" y="670.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.56%)</title><rect x="830.0" y="643.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.0" y="654.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.56%)</title><rect x="830.0" y="627.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="833.0" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.56%)</title><rect x="830.0" y="611.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.0" y="622.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.56%)</title><rect x="830.0" y="595.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.0" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.56%)</title><rect x="830.0" y="579.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.0" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.56%)</title><rect x="836.7" y="691.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.7" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.56%)</title><rect x="836.7" y="675.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="839.7" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.56%)</title><rect x="836.7" y="659.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="839.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.56%)</title><rect x="836.7" y="643.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.7" y="654.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.56%)</title><rect x="836.7" y="627.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.7" y="638.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.56%)</title><rect x="836.7" y="611.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.7" y="622.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.56%)</title><rect x="836.7" y="595.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.7" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (52 samples, 29.38%)</title><rect x="843.3" y="723.0" width="346.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="846.3" y="734.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (52 samples, 29.38%)</title><rect x="843.3" y="707.0" width="346.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="846.3" y="718.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (52 samples, 29.38%)</title><rect x="843.3" y="691.0" width="346.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="846.3" y="702.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (49 samples, 27.68%)</title><rect x="843.3" y="675.0" width="326.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.3" y="686.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (49 samples, 27.68%)</title><rect x="843.3" y="659.0" width="326.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.3" y="670.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 18.64%)</title><rect x="843.3" y="643.0" width="220.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="846.3" y="654.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.69%)</title><rect x="843.3" y="627.0" width="20.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.3" y="638.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.13%)</title><rect x="843.3" y="611.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.3" y="622.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.56%)</title><rect x="850.0" y="595.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="853.0" y="606.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.56%)</title><rect x="856.7" y="611.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="859.7" y="622.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.56%)</title><rect x="856.7" y="595.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.7" y="606.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.56%)</title><rect x="856.7" y="579.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="859.7" y="590.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.56%)</title><rect x="856.7" y="563.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="859.7" y="574.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.56%)</title><rect x="856.7" y="547.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="859.7" y="558.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.56%)</title><rect x="856.7" y="531.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.7" y="542.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.56%)</title><rect x="863.3" y="627.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.3" y="638.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.56%)</title><rect x="863.3" y="611.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="866.3" y="622.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.56%)</title><rect x="863.3" y="595.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="866.3" y="606.0"></text>
</g>
<g>
<title>Assembler::prefixq(Address, RegisterImpl*) (1 samples, 0.56%)</title><rect x="863.3" y="579.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.3" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.69%)</title><rect x="870.0" y="627.0" width="20.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.0" y="638.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.56%)</title><rect x="870.0" y="611.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.0" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.13%)</title><rect x="876.7" y="611.0" width="13.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="879.7" y="622.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.56%)</title><rect x="883.3" y="595.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.3" y="606.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 1.13%)</title><rect x="890.0" y="627.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.0" y="638.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (2 samples, 1.13%)</title><rect x="890.0" y="611.0" width="13.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="893.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.56%)</title><rect x="903.3" y="627.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="906.3" y="638.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.56%)</title><rect x="903.3" y="611.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.3" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.69%)</title><rect x="910.0" y="627.0" width="20.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.0" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.13%)</title><rect x="910.0" y="611.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="913.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.56%)</title><rect x="910.0" y="595.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.0" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.56%)</title><rect x="916.7" y="595.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="919.7" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.56%)</title><rect x="916.7" y="579.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="919.7" y="590.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.56%)</title><rect x="923.3" y="611.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 11.30%)</title><rect x="930.0" y="627.0" width="133.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.0" y="638.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.56%)</title><rect x="936.7" y="611.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.7" y="622.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.56%)</title><rect x="943.3" y="611.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.3" y="622.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.56%)</title><rect x="950.0" y="611.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.56%)</title><rect x="956.7" y="611.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.7" y="622.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.56%)</title><rect x="956.7" y="595.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.56%)</title><rect x="963.3" y="611.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="966.3" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.56%)</title><rect x="963.3" y="595.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="966.3" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="963.3" y="579.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.13%)</title><rect x="970.0" y="611.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="973.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.69%)</title><rect x="983.3" y="611.0" width="20.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.3" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="990.0" y="595.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="993.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.56%)</title><rect x="996.7" y="595.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.7" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="996.7" y="579.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.56%)</title><rect x="1003.3" y="611.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1006.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.69%)</title><rect x="1010.0" y="611.0" width="20.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1013.0" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.56%)</title><rect x="1023.3" y="595.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.56%)</title><rect x="1030.0" y="611.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1033.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.56%)</title><rect x="1036.7" y="611.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.7" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.56%)</title><rect x="1036.7" y="595.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.7" y="606.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.56%)</title><rect x="1043.3" y="611.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.3" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.56%)</title><rect x="1043.3" y="595.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.3" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.56%)</title><rect x="1043.3" y="579.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.3" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.56%)</title><rect x="1043.3" y="563.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1046.3" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="1043.3" y="547.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.3" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.56%)</title><rect x="1050.0" y="611.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.0" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="1050.0" y="595.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1053.0" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.56%)</title><rect x="1056.7" y="611.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.7" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="1056.7" y="595.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1059.7" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 8.47%)</title><rect x="1063.3" y="643.0" width="100.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.3" y="654.0">Compile::Opt..</text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 1.69%)</title><rect x="1063.3" y="627.0" width="20.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1066.3" y="638.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="1063.3" y="611.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.3" y="622.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.56%)</title><rect x="1063.3" y="595.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.3" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.56%)</title><rect x="1063.3" y="579.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.3" y="590.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="1070.0" y="611.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.0" y="622.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.56%)</title><rect x="1070.0" y="595.0" width="6.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1073.0" y="606.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.56%)</title><rect x="1076.7" y="611.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 5.65%)</title><rect x="1083.3" y="627.0" width="66.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.3" y="638.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1083.3" y="611.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1086.3" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1083.3" y="595.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.3" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1083.3" y="579.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1083.3" y="563.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1086.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.56%)</title><rect x="1090.0" y="611.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.13%)</title><rect x="1096.7" y="611.0" width="13.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.7" y="622.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.56%)</title><rect x="1096.7" y="595.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.56%)</title><rect x="1103.3" y="595.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.26%)</title><rect x="1110.0" y="611.0" width="26.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.0" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.69%)</title><rect x="1116.7" y="595.0" width="20.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.13%)</title><rect x="1123.3" y="579.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.13%)</title><rect x="1123.3" y="563.0" width="13.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.56%)</title><rect x="1136.7" y="611.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.56%)</title><rect x="1143.3" y="611.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="595.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="579.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.56%)</title><rect x="1143.3" y="563.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.3" y="574.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.56%)</title><rect x="1143.3" y="547.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.3" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.56%)</title><rect x="1150.0" y="627.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 0.56%)</title><rect x="1150.0" y="611.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.56%)</title><rect x="1156.7" y="627.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="638.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="1156.7" y="611.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="643.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="627.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="611.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="595.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="579.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="563.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="547.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="531.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="515.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="499.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="483.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="467.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="451.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="435.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="419.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="403.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="387.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="371.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="355.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="339.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="323.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="307.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="291.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="275.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="259.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="243.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="227.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="211.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="195.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="179.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="163.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="147.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="131.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="115.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="99.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.56%)</title><rect x="1163.3" y="83.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.56%)</title><rect x="1163.3" y="67.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.56%)</title><rect x="1163.3" y="51.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="62.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="1163.3" y="35.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.69%)</title><rect x="1170.0" y="675.0" width="20.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.0" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.69%)</title><rect x="1170.0" y="659.0" width="20.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.0" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.69%)</title><rect x="1170.0" y="643.0" width="20.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.69%)</title><rect x="1170.0" y="627.0" width="20.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.0" y="638.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.13%)</title><rect x="1170.0" y="611.0" width="13.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="622.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.13%)</title><rect x="1170.0" y="595.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="606.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.13%)</title><rect x="1170.0" y="579.0" width="13.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.13%)</title><rect x="1170.0" y="563.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.13%)</title><rect x="1170.0" y="547.0" width="13.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.13%)</title><rect x="1170.0" y="531.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.13%)</title><rect x="1170.0" y="515.0" width="13.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1170.0" y="499.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1170.0" y="483.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.0" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.56%)</title><rect x="1170.0" y="467.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.56%)</title><rect x="1170.0" y="451.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.0" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*) (1 samples, 0.56%)</title><rect x="1170.0" y="435.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="1170.0" y="419.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="1170.0" y="403.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="414.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, ciSymbol*, ciMethodType*) (1 samples, 0.56%)</title><rect x="1170.0" y="387.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.0" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.56%)</title><rect x="1170.0" y="371.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.0" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="1176.7" y="499.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1176.7" y="483.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1176.7" y="467.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1176.7" y="451.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.56%)</title><rect x="1176.7" y="435.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.56%)</title><rect x="1176.7" y="419.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.56%)</title><rect x="1176.7" y="403.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="414.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.56%)</title><rect x="1176.7" y="387.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.56%)</title><rect x="1176.7" y="371.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="382.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.56%)</title><rect x="1176.7" y="355.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="366.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.56%)</title><rect x="1183.3" y="611.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.56%)</title><rect x="1183.3" y="595.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.56%)</title><rect x="1183.3" y="579.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.56%)</title><rect x="1183.3" y="563.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="574.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.56%)</title><rect x="1183.3" y="547.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="558.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.56%)</title><rect x="1183.3" y="531.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="542.0"></text>
</g>
<g>
<title>Location::write_on(DebugInfoWriteStream*) (1 samples, 0.56%)</title><rect x="1183.3" y="515.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
</g>
</svg>
