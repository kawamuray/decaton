<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (148 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>LinearScan::interval_cmp(Interval**, Interval**) (1 samples, 0.68%)</title><rect x="10.0" y="1043.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.68%)</title><rect x="18.0" y="1043.0" width="7.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="21.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 22.30%)</title><rect x="25.9" y="1043.0" width="263.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.9" y="1054.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.68%)</title><rect x="25.9" y="1027.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (32 samples, 21.62%)</title><rect x="33.9" y="1027.0" width="255.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="36.9" y="1038.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 1.35%)</title><rect x="33.9" y="1011.0" width="16.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.35%)</title><rect x="33.9" y="995.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1385534085.accept (2 samples, 1.35%)</title><rect x="33.9" y="979.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 1.35%)</title><rect x="33.9" y="963.0" width="16.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.35%)</title><rect x="33.9" y="947.0" width="16.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.9" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 1.35%)</title><rect x="33.9" y="931.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 14.19%)</title><rect x="49.9" y="1011.0" width="167.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.9" y="1022.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1383856192.accept (18 samples, 12.16%)</title><rect x="49.9" y="995.0" width="143.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.9" y="1006.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (18 samples, 12.16%)</title><rect x="49.9" y="979.0" width="143.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.9" y="990.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (14 samples, 9.46%)</title><rect x="49.9" y="963.0" width="111.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.9" y="974.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (14 samples, 9.46%)</title><rect x="49.9" y="947.0" width="111.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.9" y="958.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (14 samples, 9.46%)</title><rect x="49.9" y="931.0" width="111.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="52.9" y="942.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (14 samples, 9.46%)</title><rect x="49.9" y="915.0" width="111.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.9" y="926.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 9.46%)</title><rect x="49.9" y="899.0" width="111.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.9" y="910.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 9.46%)</title><rect x="49.9" y="883.0" width="111.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.9" y="894.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 6.76%)</title><rect x="49.9" y="867.0" width="79.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.9" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.35%)</title><rect x="49.9" y="851.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.35%)</title><rect x="49.9" y="835.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.68%)</title><rect x="57.8" y="819.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.68%)</title><rect x="57.8" y="803.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 5.41%)</title><rect x="65.8" y="851.0" width="63.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.8" y="862.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 5.41%)</title><rect x="65.8" y="835.0" width="63.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.8" y="846.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 5.41%)</title><rect x="65.8" y="819.0" width="63.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.8" y="830.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 5.41%)</title><rect x="65.8" y="803.0" width="63.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.8" y="814.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 5.41%)</title><rect x="65.8" y="787.0" width="63.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.8" y="798.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 4.73%)</title><rect x="65.8" y="771.0" width="55.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="68.8" y="782.0">Unsaf..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 4.05%)</title><rect x="65.8" y="755.0" width="47.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="68.8" y="766.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.68%)</title><rect x="113.6" y="755.0" width="8.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="116.6" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.68%)</title><rect x="121.6" y="771.0" width="8.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="124.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 2.03%)</title><rect x="129.6" y="867.0" width="23.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.6" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 2.03%)</title><rect x="129.6" y="851.0" width="23.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="132.6" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 2.03%)</title><rect x="129.6" y="835.0" width="23.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.6" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.68%)</title><rect x="153.5" y="867.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.68%)</title><rect x="153.5" y="851.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.68%)</title><rect x="153.5" y="835.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.68%)</title><rect x="161.5" y="963.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.68%)</title><rect x="161.5" y="947.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="164.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 2.03%)</title><rect x="169.5" y="963.0" width="23.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.5" y="974.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 2.03%)</title><rect x="169.5" y="947.0" width="23.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.5" y="958.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 2.03%)</title><rect x="169.5" y="931.0" width="23.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.5" y="942.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 2.03%)</title><rect x="169.5" y="915.0" width="23.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.5" y="926.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 2.03%)</title><rect x="169.5" y="899.0" width="23.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.5" y="910.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.68%)</title><rect x="185.4" y="883.0" width="8.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="188.4" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.68%)</title><rect x="193.4" y="995.0" width="8.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="196.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.68%)</title><rect x="201.4" y="995.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.68%)</title><rect x="201.4" y="979.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.68%)</title><rect x="201.4" y="963.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.68%)</title><rect x="201.4" y="947.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.68%)</title><rect x="209.3" y="995.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.08%)</title><rect x="217.3" y="1011.0" width="71.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.3" y="1022.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 6.08%)</title><rect x="217.3" y="995.0" width="71.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.3" y="1006.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 4.05%)</title><rect x="217.3" y="979.0" width="47.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="220.3" y="990.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.68%)</title><rect x="217.3" y="963.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.68%)</title><rect x="217.3" y="947.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.68%)</title><rect x="217.3" y="931.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.68%)</title><rect x="217.3" y="915.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.68%)</title><rect x="217.3" y="899.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.68%)</title><rect x="217.3" y="883.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.3" y="894.0"></text>
</g>
<g>
<title>java/util/Optional.filter (1 samples, 0.68%)</title><rect x="217.3" y="867.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.3" y="878.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$274/390873491.test (1 samples, 0.68%)</title><rect x="217.3" y="851.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.3" y="862.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (1 samples, 0.68%)</title><rect x="217.3" y="835.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.3" y="846.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$273/806203266.test (1 samples, 0.68%)</title><rect x="217.3" y="819.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.3" y="830.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$isEqual$3 (1 samples, 0.68%)</title><rect x="217.3" y="803.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (1 samples, 0.68%)</title><rect x="217.3" y="787.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 3.38%)</title><rect x="225.3" y="963.0" width="39.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.3" y="974.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 3.38%)</title><rect x="225.3" y="947.0" width="39.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.3" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 2.03%)</title><rect x="225.3" y="931.0" width="23.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.3" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 2.03%)</title><rect x="225.3" y="915.0" width="23.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.3" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.35%)</title><rect x="225.3" y="899.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.68%)</title><rect x="241.2" y="899.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.68%)</title><rect x="241.2" y="883.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.68%)</title><rect x="241.2" y="867.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.2" y="878.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.68%)</title><rect x="241.2" y="851.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 1.35%)</title><rect x="249.2" y="931.0" width="15.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 1.35%)</title><rect x="249.2" y="915.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.68%)</title><rect x="249.2" y="899.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.2" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.68%)</title><rect x="249.2" y="883.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.68%)</title><rect x="249.2" y="867.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.68%)</title><rect x="249.2" y="851.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.2" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.68%)</title><rect x="249.2" y="835.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.2" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.68%)</title><rect x="249.2" y="819.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.2" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.68%)</title><rect x="249.2" y="803.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.2" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.68%)</title><rect x="249.2" y="787.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.68%)</title><rect x="257.2" y="899.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.68%)</title><rect x="257.2" y="883.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.68%)</title><rect x="265.1" y="979.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.68%)</title><rect x="265.1" y="963.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.68%)</title><rect x="265.1" y="947.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.68%)</title><rect x="265.1" y="931.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.68%)</title><rect x="265.1" y="915.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.68%)</title><rect x="265.1" y="899.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.35%)</title><rect x="273.1" y="979.0" width="16.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.35%)</title><rect x="273.1" y="963.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.35%)</title><rect x="273.1" y="947.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.68%)</title><rect x="273.1" y="931.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.1" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.68%)</title><rect x="273.1" y="915.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.68%)</title><rect x="281.1" y="931.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$3.iterator (1 samples, 0.68%)</title><rect x="281.1" y="915.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.1" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (63 samples, 42.57%)</title><rect x="289.1" y="1043.0" width="502.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.1" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 41.89%)</title><rect x="289.1" y="1027.0" width="494.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.1" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 41.89%)</title><rect x="289.1" y="1011.0" width="494.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.1" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/427750945.run (41 samples, 27.70%)</title><rect x="320.9" y="995.0" width="326.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.9" y="1006.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (41 samples, 27.70%)</title><rect x="320.9" y="979.0" width="326.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.9" y="990.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (41 samples, 27.70%)</title><rect x="320.9" y="963.0" width="326.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.9" y="974.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (40 samples, 27.03%)</title><rect x="320.9" y="947.0" width="319.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.9" y="958.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (16 samples, 10.81%)</title><rect x="328.9" y="931.0" width="127.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.9" y="942.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (16 samples, 10.81%)</title><rect x="328.9" y="915.0" width="127.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.9" y="926.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (16 samples, 10.81%)</title><rect x="328.9" y="899.0" width="127.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.9" y="910.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 10.81%)</title><rect x="328.9" y="883.0" width="127.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.9" y="894.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 10.81%)</title><rect x="328.9" y="867.0" width="127.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.9" y="878.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 10.81%)</title><rect x="328.9" y="851.0" width="127.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="331.9" y="862.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 2.03%)</title><rect x="328.9" y="835.0" width="23.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.9" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.68%)</title><rect x="328.9" y="819.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.35%)</title><rect x="336.9" y="819.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.35%)</title><rect x="336.9" y="803.0" width="15.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.68%)</title><rect x="344.9" y="787.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.68%)</title><rect x="344.9" y="771.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.68%)</title><rect x="344.9" y="755.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (12 samples, 8.11%)</title><rect x="352.8" y="835.0" width="95.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.8" y="846.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.35%)</title><rect x="352.8" y="819.0" width="16.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.35%)</title><rect x="352.8" y="803.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.68%)</title><rect x="352.8" y="787.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.68%)</title><rect x="360.8" y="787.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.68%)</title><rect x="360.8" y="771.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="363.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 6.08%)</title><rect x="368.8" y="819.0" width="71.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.8" y="830.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 2.03%)</title><rect x="368.8" y="803.0" width="23.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.8" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 2.03%)</title><rect x="368.8" y="787.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.8" y="798.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 1.35%)</title><rect x="368.8" y="771.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="371.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.68%)</title><rect x="376.8" y="755.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.68%)</title><rect x="384.7" y="771.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.68%)</title><rect x="384.7" y="755.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.68%)</title><rect x="384.7" y="739.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.68%)</title><rect x="384.7" y="723.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 4.05%)</title><rect x="392.7" y="803.0" width="47.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.7" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 4.05%)</title><rect x="392.7" y="787.0" width="47.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.7" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 3.38%)</title><rect x="400.7" y="771.0" width="39.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.7" y="782.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.68%)</title><rect x="408.6" y="755.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.68%)</title><rect x="408.6" y="739.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.68%)</title><rect x="408.6" y="723.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.68%)</title><rect x="408.6" y="707.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.68%)</title><rect x="416.6" y="755.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.68%)</title><rect x="416.6" y="739.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.68%)</title><rect x="416.6" y="723.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.68%)</title><rect x="416.6" y="707.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.68%)</title><rect x="416.6" y="691.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.35%)</title><rect x="424.6" y="755.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.35%)</title><rect x="424.6" y="739.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.35%)</title><rect x="424.6" y="723.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.35%)</title><rect x="424.6" y="707.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="427.6" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.35%)</title><rect x="424.6" y="691.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.6" y="702.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.68%)</title><rect x="424.6" y="675.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.6" y="686.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (1 samples, 0.68%)</title><rect x="424.6" y="659.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.68%)</title><rect x="424.6" y="643.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="427.6" y="654.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.68%)</title><rect x="424.6" y="627.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="427.6" y="638.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor10.newInstance (1 samples, 0.68%)</title><rect x="432.6" y="675.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.68%)</title><rect x="440.5" y="819.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.68%)</title><rect x="448.5" y="835.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="451.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.68%)</title><rect x="448.5" y="819.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="451.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.68%)</title><rect x="448.5" y="803.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="451.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.68%)</title><rect x="448.5" y="787.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="451.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.68%)</title><rect x="448.5" y="771.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="451.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (21 samples, 14.19%)</title><rect x="456.5" y="931.0" width="167.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.5" y="942.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.70%)</title><rect x="456.5" y="915.0" width="31.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.5" y="926.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.70%)</title><rect x="456.5" y="899.0" width="31.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.5" y="910.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.70%)</title><rect x="456.5" y="883.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.5" y="894.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.70%)</title><rect x="456.5" y="867.0" width="31.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="459.5" y="878.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 2.03%)</title><rect x="464.5" y="851.0" width="23.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.5" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 6.76%)</title><rect x="488.4" y="915.0" width="79.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.4" y="926.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.68%)</title><rect x="488.4" y="899.0" width="8.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="491.4" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="488.4" y="883.0" width="8.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="491.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 6.08%)</title><rect x="496.4" y="899.0" width="71.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="499.4" y="910.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.35%)</title><rect x="496.4" y="883.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.4" y="894.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.68%)</title><rect x="504.3" y="867.0" width="8.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="507.3" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 4.73%)</title><rect x="512.3" y="883.0" width="55.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.3" y="894.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 4.73%)</title><rect x="512.3" y="867.0" width="55.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.3" y="878.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 4.73%)</title><rect x="512.3" y="851.0" width="55.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.3" y="862.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 2.03%)</title><rect x="544.2" y="835.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.2" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.38%)</title><rect x="568.1" y="915.0" width="39.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.1" y="926.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.38%)</title><rect x="568.1" y="899.0" width="39.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.1" y="910.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/564617543.process (1 samples, 0.68%)</title><rect x="568.1" y="883.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="571.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.68%)</title><rect x="568.1" y="867.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="571.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.68%)</title><rect x="568.1" y="851.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.68%)</title><rect x="568.1" y="835.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.1" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.35%)</title><rect x="576.1" y="883.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="579.1" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.68%)</title><rect x="576.1" y="867.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.1" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.68%)</title><rect x="576.1" y="851.0" width="8.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="579.1" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.68%)</title><rect x="584.1" y="867.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="587.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 1.35%)</title><rect x="592.0" y="883.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="595.0" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 1.35%)</title><rect x="592.0" y="867.0" width="16.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="595.0" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (2 samples, 1.35%)</title><rect x="592.0" y="851.0" width="16.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="595.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.35%)</title><rect x="608.0" y="915.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="611.0" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.68%)</title><rect x="608.0" y="899.0" width="7.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="611.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="608.0" y="883.0" width="7.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="611.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.68%)</title><rect x="615.9" y="899.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.68%)</title><rect x="615.9" y="883.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="618.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1984165998.accept (1 samples, 0.68%)</title><rect x="615.9" y="867.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="618.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.68%)</title><rect x="615.9" y="851.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.9" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.68%)</title><rect x="615.9" y="835.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="618.9" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.68%)</title><rect x="615.9" y="819.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="618.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.68%)</title><rect x="623.9" y="931.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.68%)</title><rect x="623.9" y="915.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="626.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.68%)</title><rect x="623.9" y="899.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1621676405.accept (1 samples, 0.68%)</title><rect x="623.9" y="883.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.68%)</title><rect x="623.9" y="867.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="626.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1798780163.complete (1 samples, 0.68%)</title><rect x="623.9" y="851.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.68%)</title><rect x="623.9" y="835.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.68%)</title><rect x="623.9" y="819.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.9" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.68%)</title><rect x="623.9" y="803.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.9" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.68%)</title><rect x="623.9" y="787.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.68%)</title><rect x="623.9" y="771.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="626.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.68%)</title><rect x="623.9" y="755.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="626.9" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.68%)</title><rect x="631.9" y="931.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="634.9" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="631.9" y="915.0" width="8.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="634.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.68%)</title><rect x="639.9" y="947.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="642.9" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.68%)</title><rect x="639.9" y="931.0" width="7.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="642.9" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.68%)</title><rect x="639.9" y="915.0" width="7.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="642.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 2.70%)</title><rect x="647.8" y="995.0" width="31.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="650.8" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 2.70%)</title><rect x="647.8" y="979.0" width="31.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="650.8" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.68%)</title><rect x="671.8" y="963.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="674.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.68%)</title><rect x="679.7" y="995.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 8.11%)</title><rect x="687.7" y="995.0" width="95.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.7" y="1006.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 8.11%)</title><rect x="687.7" y="979.0" width="95.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="690.7" y="990.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 7.43%)</title><rect x="695.7" y="963.0" width="87.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.7" y="974.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.68%)</title><rect x="695.7" y="947.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.68%)</title><rect x="695.7" y="931.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="698.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.68%)</title><rect x="695.7" y="915.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.68%)</title><rect x="695.7" y="899.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="698.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 6.76%)</title><rect x="703.6" y="947.0" width="79.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.6" y="958.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (10 samples, 6.76%)</title><rect x="703.6" y="931.0" width="79.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.6" y="942.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (9 samples, 6.08%)</title><rect x="711.6" y="915.0" width="71.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="714.6" y="926.0">Unsafe_P..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.68%)</title><rect x="711.6" y="899.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="714.6" y="910.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.68%)</title><rect x="719.6" y="899.0" width="8.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="722.6" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.68%)</title><rect x="727.6" y="899.0" width="7.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="730.6" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 3.38%)</title><rect x="735.5" y="899.0" width="39.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="738.5" y="910.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.68%)</title><rect x="775.4" y="899.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="778.4" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.68%)</title><rect x="783.4" y="1027.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.4" y="1038.0"></text>
</g>
<g>
<title>start_thread (50 samples, 33.78%)</title><rect x="791.4" y="1043.0" width="398.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="794.4" y="1054.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (50 samples, 33.78%)</title><rect x="791.4" y="1027.0" width="398.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="794.4" y="1038.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 8.78%)</title><rect x="791.4" y="1011.0" width="103.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.4" y="1022.0">GangWorker::..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 8.78%)</title><rect x="791.4" y="995.0" width="103.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.4" y="1006.0">G1ParTask::w..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 8.78%)</title><rect x="791.4" y="979.0" width="103.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.4" y="990.0">G1ParEvacuat..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 4.73%)</title><rect x="799.3" y="963.0" width="55.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="802.3" y="974.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.68%)</title><rect x="823.2" y="947.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="826.2" y="958.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.68%)</title><rect x="823.2" y="931.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.68%)</title><rect x="823.2" y="915.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.2" y="926.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.68%)</title><rect x="823.2" y="899.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="826.2" y="910.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (2 samples, 1.35%)</title><rect x="831.2" y="947.0" width="16.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="834.2" y="958.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.68%)</title><rect x="847.2" y="947.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.2" y="958.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 2.03%)</title><rect x="855.1" y="963.0" width="24.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="858.1" y="974.0">G..</text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.68%)</title><rect x="879.1" y="963.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.1" y="974.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.68%)</title><rect x="887.0" y="963.0" width="8.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="890.0" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (37 samples, 25.00%)</title><rect x="895.0" y="1011.0" width="295.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.0" y="1022.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (37 samples, 25.00%)</title><rect x="895.0" y="995.0" width="295.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.0" y="1006.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (37 samples, 25.00%)</title><rect x="895.0" y="979.0" width="295.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.0" y="990.0">CompileBroker::invoke_compiler_on_method..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (36 samples, 24.32%)</title><rect x="895.0" y="963.0" width="287.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.0" y="974.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (36 samples, 24.32%)</title><rect x="895.0" y="947.0" width="287.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="898.0" y="958.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (15 samples, 10.14%)</title><rect x="895.0" y="931.0" width="119.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.0" y="942.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.68%)</title><rect x="895.0" y="915.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.0" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.68%)</title><rect x="895.0" y="899.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.0" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.68%)</title><rect x="895.0" y="883.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="898.0" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.35%)</title><rect x="903.0" y="915.0" width="15.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="906.0" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.35%)</title><rect x="903.0" y="899.0" width="15.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="906.0" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.68%)</title><rect x="903.0" y="883.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="906.0" y="894.0"></text>
</g>
<g>
<title>membar_acquire_lockNode::ideal_Opcode() const (1 samples, 0.68%)</title><rect x="910.9" y="883.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="913.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 8.11%)</title><rect x="918.9" y="915.0" width="95.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.9" y="926.0">PhaseChaiti..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.68%)</title><rect x="918.9" y="899.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.35%)</title><rect x="926.9" y="899.0" width="15.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.68%)</title><rect x="926.9" y="883.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.9" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.68%)</title><rect x="934.9" y="883.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.68%)</title><rect x="934.9" y="867.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.35%)</title><rect x="942.8" y="899.0" width="16.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="945.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.68%)</title><rect x="950.8" y="883.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.68%)</title><rect x="950.8" y="867.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.35%)</title><rect x="958.8" y="899.0" width="15.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="961.8" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.68%)</title><rect x="958.8" y="883.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="961.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.68%)</title><rect x="966.8" y="883.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.8" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.68%)</title><rect x="966.8" y="867.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="969.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.68%)</title><rect x="974.7" y="899.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.7" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (1 samples, 0.68%)</title><rect x="982.7" y="899.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.7" y="910.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.68%)</title><rect x="982.7" y="883.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.35%)</title><rect x="990.7" y="899.0" width="15.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="993.7" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.68%)</title><rect x="998.6" y="883.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.6" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.68%)</title><rect x="1006.6" y="899.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.6" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.68%)</title><rect x="1006.6" y="883.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.6" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 11.49%)</title><rect x="1014.6" y="931.0" width="135.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.6" y="942.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.68%)</title><rect x="1014.6" y="915.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.6" y="926.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.68%)</title><rect x="1014.6" y="899.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 8.78%)</title><rect x="1022.6" y="915.0" width="103.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.6" y="926.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.35%)</title><rect x="1022.6" y="899.0" width="15.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1025.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.35%)</title><rect x="1038.5" y="899.0" width="16.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.5" y="910.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.68%)</title><rect x="1038.5" y="883.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1041.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.68%)</title><rect x="1046.5" y="883.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 2.03%)</title><rect x="1054.5" y="899.0" width="23.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.5" y="910.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.35%)</title><rect x="1062.4" y="883.0" width="16.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.68%)</title><rect x="1070.4" y="867.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.68%)</title><rect x="1078.4" y="899.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 3.38%)</title><rect x="1086.4" y="899.0" width="39.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.4" y="910.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 1.35%)</title><rect x="1086.4" y="883.0" width="15.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 2.03%)</title><rect x="1102.3" y="883.0" width="23.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.3" y="894.0">P..</text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.68%)</title><rect x="1102.3" y="867.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.68%)</title><rect x="1110.3" y="867.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.68%)</title><rect x="1110.3" y="851.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.3" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.68%)</title><rect x="1118.2" y="867.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.2" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 2.03%)</title><rect x="1126.2" y="915.0" width="23.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.2" y="926.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 2.03%)</title><rect x="1126.2" y="899.0" width="23.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.2" y="910.0">P..</text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.68%)</title><rect x="1126.2" y="883.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.2" y="894.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.68%)</title><rect x="1126.2" y="867.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.2" y="878.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.68%)</title><rect x="1126.2" y="851.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.2" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.68%)</title><rect x="1126.2" y="835.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.68%)</title><rect x="1134.2" y="883.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.68%)</title><rect x="1134.2" y="867.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.2" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.68%)</title><rect x="1142.2" y="883.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.2" y="894.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.68%)</title><rect x="1142.2" y="867.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.2" y="878.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.68%)</title><rect x="1150.1" y="931.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.1" y="942.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.68%)</title><rect x="1150.1" y="915.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1150.1" y="899.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1150.1" y="883.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1150.1" y="867.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1150.1" y="851.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1150.1" y="835.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.68%)</title><rect x="1150.1" y="819.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1150.1" y="803.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1150.1" y="787.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1150.1" y="771.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1150.1" y="755.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1150.1" y="739.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.68%)</title><rect x="1150.1" y="723.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.68%)</title><rect x="1150.1" y="707.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.1" y="718.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.68%)</title><rect x="1150.1" y="691.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.1" y="702.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.68%)</title><rect x="1150.1" y="675.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.03%)</title><rect x="1158.1" y="931.0" width="23.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.1" y="942.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.03%)</title><rect x="1158.1" y="915.0" width="23.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.03%)</title><rect x="1158.1" y="899.0" width="23.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.1" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.03%)</title><rect x="1158.1" y="883.0" width="23.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.1" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 2.03%)</title><rect x="1158.1" y="867.0" width="23.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.1" y="878.0">P..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.68%)</title><rect x="1158.1" y="851.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.1" y="862.0"></text>
</g>
<g>
<title>GraphKit::load_array_length(Node*) (1 samples, 0.68%)</title><rect x="1158.1" y="835.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.35%)</title><rect x="1166.1" y="851.0" width="15.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.35%)</title><rect x="1166.1" y="835.0" width="15.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.35%)</title><rect x="1166.1" y="819.0" width="15.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.35%)</title><rect x="1166.1" y="803.0" width="15.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.35%)</title><rect x="1166.1" y="787.0" width="15.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.35%)</title><rect x="1166.1" y="771.0" width="15.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.35%)</title><rect x="1166.1" y="755.0" width="15.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.35%)</title><rect x="1166.1" y="739.0" width="15.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.35%)</title><rect x="1166.1" y="723.0" width="15.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.35%)</title><rect x="1166.1" y="707.0" width="15.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.35%)</title><rect x="1166.1" y="691.0" width="15.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.35%)</title><rect x="1166.1" y="675.0" width="15.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.35%)</title><rect x="1166.1" y="659.0" width="15.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.68%)</title><rect x="1166.1" y="643.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.68%)</title><rect x="1166.1" y="627.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.68%)</title><rect x="1166.1" y="611.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.68%)</title><rect x="1166.1" y="595.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.68%)</title><rect x="1166.1" y="579.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.68%)</title><rect x="1166.1" y="563.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.68%)</title><rect x="1166.1" y="547.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.1" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::SuccIter::next() (1 samples, 0.68%)</title><rect x="1166.1" y="531.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1174.1" y="643.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1174.1" y="627.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1174.1" y="611.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1174.1" y="595.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1174.1" y="579.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.68%)</title><rect x="1174.1" y="563.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1174.1" y="547.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1174.1" y="531.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1174.1" y="515.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1174.1" y="499.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1174.1" y="483.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.68%)</title><rect x="1174.1" y="467.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.68%)</title><rect x="1174.1" y="451.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.68%)</title><rect x="1174.1" y="435.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.68%)</title><rect x="1174.1" y="419.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.68%)</title><rect x="1174.1" y="403.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.68%)</title><rect x="1174.1" y="387.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.68%)</title><rect x="1174.1" y="371.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.68%)</title><rect x="1174.1" y="355.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.1" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.68%)</title><rect x="1174.1" y="339.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.68%)</title><rect x="1174.1" y="323.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.68%)</title><rect x="1174.1" y="307.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.68%)</title><rect x="1174.1" y="291.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.68%)</title><rect x="1174.1" y="275.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.68%)</title><rect x="1174.1" y="259.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.68%)</title><rect x="1174.1" y="243.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.68%)</title><rect x="1174.1" y="227.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.1" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.68%)</title><rect x="1174.1" y="211.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.68%)</title><rect x="1174.1" y="195.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.68%)</title><rect x="1174.1" y="179.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.68%)</title><rect x="1174.1" y="163.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="174.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.68%)</title><rect x="1174.1" y="147.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="158.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.68%)</title><rect x="1174.1" y="131.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.68%)</title><rect x="1174.1" y="115.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.68%)</title><rect x="1174.1" y="99.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="110.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.68%)</title><rect x="1174.1" y="83.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.68%)</title><rect x="1174.1" y="67.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.68%)</title><rect x="1174.1" y="51.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="62.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.68%)</title><rect x="1174.1" y="35.0" width="7.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1177.1" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.68%)</title><rect x="1182.0" y="963.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.68%)</title><rect x="1182.0" y="947.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.68%)</title><rect x="1182.0" y="931.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.68%)</title><rect x="1182.0" y="915.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.0" y="926.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.68%)</title><rect x="1182.0" y="899.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="910.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.68%)</title><rect x="1182.0" y="883.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.68%)</title><rect x="1182.0" y="867.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.68%)</title><rect x="1182.0" y="851.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.68%)</title><rect x="1182.0" y="835.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.68%)</title><rect x="1182.0" y="819.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::increment() (1 samples, 0.68%)</title><rect x="1182.0" y="803.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="814.0"></text>
</g>
<g>
<title>ValueStack::push(ValueType*, Instruction*) (1 samples, 0.68%)</title><rect x="1182.0" y="787.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
</g>
</svg>
