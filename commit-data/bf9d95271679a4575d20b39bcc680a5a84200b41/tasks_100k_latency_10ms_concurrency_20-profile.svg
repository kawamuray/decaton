<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (215 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 8.84%)</title><rect x="10.0" y="675.0" width="104.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="686.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (19 samples, 8.84%)</title><rect x="10.0" y="659.0" width="104.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="670.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.47%)</title><rect x="10.0" y="643.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.47%)</title><rect x="10.0" y="627.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.47%)</title><rect x="10.0" y="611.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.47%)</title><rect x="10.0" y="595.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.47%)</title><rect x="10.0" y="579.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.47%)</title><rect x="10.0" y="563.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.47%)</title><rect x="10.0" y="547.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.47%)</title><rect x="10.0" y="531.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.47%)</title><rect x="10.0" y="515.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.47%)</title><rect x="10.0" y="499.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/1006138421.test (1 samples, 0.47%)</title><rect x="10.0" y="483.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 3.26%)</title><rect x="15.5" y="643.0" width="38.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.5" y="654.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1934761668.accept (7 samples, 3.26%)</title><rect x="15.5" y="627.0" width="38.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.5" y="638.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (7 samples, 3.26%)</title><rect x="15.5" y="611.0" width="38.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.5" y="622.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.47%)</title><rect x="15.5" y="595.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.40%)</title><rect x="21.0" y="595.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.40%)</title><rect x="21.0" y="579.0" width="16.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.40%)</title><rect x="21.0" y="563.0" width="16.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.40%)</title><rect x="21.0" y="547.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.40%)</title><rect x="21.0" y="531.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.40%)</title><rect x="21.0" y="515.0" width="16.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.40%)</title><rect x="21.0" y="499.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.40%)</title><rect x="21.0" y="483.0" width="16.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 1.40%)</title><rect x="21.0" y="467.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.40%)</title><rect x="37.4" y="595.0" width="16.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.40%)</title><rect x="37.4" y="579.0" width="16.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.12%)</title><rect x="53.9" y="643.0" width="60.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.9" y="654.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.12%)</title><rect x="53.9" y="627.0" width="60.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.9" y="638.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.72%)</title><rect x="53.9" y="611.0" width="43.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.9" y="622.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.86%)</title><rect x="53.9" y="595.0" width="22.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.9" y="606.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.86%)</title><rect x="53.9" y="579.0" width="22.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.9" y="590.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.86%)</title><rect x="53.9" y="563.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.9" y="574.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.47%)</title><rect x="53.9" y="547.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.47%)</title><rect x="53.9" y="531.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.9" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="53.9" y="515.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 1.40%)</title><rect x="59.4" y="547.0" width="16.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="59.4" y="531.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="59.4" y="515.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.47%)</title><rect x="59.4" y="499.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.47%)</title><rect x="59.4" y="483.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.47%)</title><rect x="64.9" y="531.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.remove (1 samples, 0.47%)</title><rect x="64.9" y="515.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.47%)</title><rect x="64.9" y="499.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.47%)</title><rect x="70.4" y="531.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.47%)</title><rect x="70.4" y="515.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.47%)</title><rect x="70.4" y="499.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.47%)</title><rect x="70.4" y="483.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.47%)</title><rect x="70.4" y="467.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.47%)</title><rect x="70.4" y="451.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.47%)</title><rect x="70.4" y="435.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.86%)</title><rect x="75.9" y="595.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.9" y="606.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.86%)</title><rect x="75.9" y="579.0" width="21.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.9" y="590.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.40%)</title><rect x="75.9" y="563.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.93%)</title><rect x="75.9" y="547.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.47%)</title><rect x="81.3" y="531.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.47%)</title><rect x="81.3" y="515.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.47%)</title><rect x="81.3" y="499.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="84.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.47%)</title><rect x="86.8" y="547.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.47%)</title><rect x="86.8" y="531.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.8" y="542.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.47%)</title><rect x="86.8" y="515.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.47%)</title><rect x="92.3" y="563.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.47%)</title><rect x="92.3" y="547.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="92.3" y="531.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="92.3" y="515.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="92.3" y="499.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.47%)</title><rect x="92.3" y="483.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.47%)</title><rect x="97.8" y="611.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.47%)</title><rect x="97.8" y="595.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.47%)</title><rect x="97.8" y="579.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.47%)</title><rect x="97.8" y="563.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.47%)</title><rect x="97.8" y="547.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.8" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.47%)</title><rect x="97.8" y="531.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.8" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.47%)</title><rect x="97.8" y="515.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.47%)</title><rect x="97.8" y="499.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.47%)</title><rect x="97.8" y="483.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.8" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.47%)</title><rect x="97.8" y="467.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.8" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.47%)</title><rect x="97.8" y="451.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.8" y="462.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.47%)</title><rect x="97.8" y="435.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.8" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.47%)</title><rect x="97.8" y="419.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.47%)</title><rect x="97.8" y="403.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.8" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.47%)</title><rect x="97.8" y="387.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.8" y="398.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="97.8" y="371.0" width="5.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="100.8" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.47%)</title><rect x="103.3" y="611.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.47%)</title><rect x="103.3" y="595.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.47%)</title><rect x="103.3" y="579.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.47%)</title><rect x="103.3" y="563.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.47%)</title><rect x="108.8" y="611.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.47%)</title><rect x="108.8" y="595.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.47%)</title><rect x="108.8" y="579.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.47%)</title><rect x="108.8" y="563.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (155 samples, 72.09%)</title><rect x="114.3" y="675.0" width="850.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.3" y="686.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (155 samples, 72.09%)</title><rect x="114.3" y="659.0" width="850.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.3" y="670.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (155 samples, 72.09%)</title><rect x="114.3" y="643.0" width="850.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.3" y="654.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1505749004.run (148 samples, 68.84%)</title><rect x="125.3" y="627.0" width="812.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.3" y="638.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1505749004.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (148 samples, 68.84%)</title><rect x="125.3" y="611.0" width="812.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.3" y="622.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (148 samples, 68.84%)</title><rect x="125.3" y="595.0" width="812.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.3" y="606.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (145 samples, 67.44%)</title><rect x="125.3" y="579.0" width="795.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.3" y="590.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 16.74%)</title><rect x="147.2" y="563.0" width="197.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="150.2" y="574.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (36 samples, 16.74%)</title><rect x="147.2" y="547.0" width="197.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="150.2" y="558.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (36 samples, 16.74%)</title><rect x="147.2" y="531.0" width="197.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.2" y="542.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 16.74%)</title><rect x="147.2" y="515.0" width="197.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.2" y="526.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 16.74%)</title><rect x="147.2" y="499.0" width="197.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.2" y="510.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 16.74%)</title><rect x="147.2" y="483.0" width="197.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.2" y="494.0">com/fasterxml/jackson/data..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 4.65%)</title><rect x="147.2" y="467.0" width="54.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.2" y="478.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.79%)</title><rect x="169.2" y="451.0" width="32.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="172.2" y="462.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.40%)</title><rect x="185.6" y="435.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.6" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.47%)</title><rect x="185.6" y="419.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="188.6" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.47%)</title><rect x="185.6" y="403.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="188.6" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.47%)</title><rect x="185.6" y="387.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="188.6" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.47%)</title><rect x="185.6" y="371.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="188.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.47%)</title><rect x="185.6" y="355.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="188.6" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.47%)</title><rect x="185.6" y="339.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="188.6" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.47%)</title><rect x="185.6" y="323.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="188.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.93%)</title><rect x="191.1" y="419.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.93%)</title><rect x="191.1" y="403.0" width="11.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (25 samples, 11.63%)</title><rect x="202.1" y="467.0" width="137.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.1" y="478.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.93%)</title><rect x="202.1" y="451.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.47%)</title><rect x="213.1" y="451.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.47%)</title><rect x="218.6" y="451.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.47%)</title><rect x="218.6" y="435.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 2.33%)</title><rect x="224.0" y="451.0" width="27.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.0" y="462.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 2.33%)</title><rect x="224.0" y="435.0" width="27.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.0" y="446.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.47%)</title><rect x="235.0" y="419.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.47%)</title><rect x="240.5" y="419.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.47%)</title><rect x="240.5" y="403.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.47%)</title><rect x="246.0" y="419.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.93%)</title><rect x="251.5" y="451.0" width="11.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.93%)</title><rect x="251.5" y="435.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 6.05%)</title><rect x="262.5" y="451.0" width="71.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.5" y="462.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.93%)</title><rect x="262.5" y="435.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.93%)</title><rect x="262.5" y="419.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.47%)</title><rect x="262.5" y="403.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.47%)</title><rect x="268.0" y="403.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.47%)</title><rect x="268.0" y="387.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.47%)</title><rect x="268.0" y="371.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.47%)</title><rect x="268.0" y="355.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 5.12%)</title><rect x="273.4" y="435.0" width="60.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.4" y="446.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 5.12%)</title><rect x="273.4" y="419.0" width="60.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.4" y="430.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 4.65%)</title><rect x="278.9" y="403.0" width="54.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.9" y="414.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.47%)</title><rect x="284.4" y="387.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.47%)</title><rect x="284.4" y="371.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.47%)</title><rect x="284.4" y="355.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.47%)</title><rect x="289.9" y="387.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.47%)</title><rect x="289.9" y="371.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.47%)</title><rect x="289.9" y="355.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.47%)</title><rect x="289.9" y="339.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.47%)</title><rect x="289.9" y="323.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.47%)</title><rect x="295.4" y="387.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.47%)</title><rect x="295.4" y="371.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.47%)</title><rect x="295.4" y="355.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.47%)</title><rect x="295.4" y="339.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.4" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.47%)</title><rect x="295.4" y="323.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.4" y="334.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.47%)</title><rect x="295.4" y="307.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.4" y="318.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.47%)</title><rect x="295.4" y="291.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.40%)</title><rect x="300.9" y="387.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.40%)</title><rect x="300.9" y="371.0" width="16.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.40%)</title><rect x="300.9" y="355.0" width="16.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.93%)</title><rect x="306.4" y="339.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 1.40%)</title><rect x="317.3" y="387.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.47%)</title><rect x="333.8" y="451.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.47%)</title><rect x="339.3" y="467.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.47%)</title><rect x="339.3" y="451.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (95 samples, 44.19%)</title><rect x="344.8" y="563.0" width="521.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.8" y="574.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (18 samples, 8.37%)</title><rect x="344.8" y="547.0" width="98.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.8" y="558.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (18 samples, 8.37%)</title><rect x="344.8" y="531.0" width="98.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.8" y="542.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (17 samples, 7.91%)</title><rect x="350.3" y="515.0" width="93.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.3" y="526.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.86%)</title><rect x="383.2" y="499.0" width="22.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.2" y="510.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.93%)</title><rect x="388.7" y="483.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.7" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.47%)</title><rect x="394.2" y="467.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.47%)</title><rect x="394.2" y="451.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="397.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.47%)</title><rect x="399.7" y="483.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.7" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.47%)</title><rect x="399.7" y="467.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.7" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.47%)</title><rect x="399.7" y="451.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.7" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.86%)</title><rect x="405.2" y="499.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.2" y="510.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.40%)</title><rect x="405.2" y="483.0" width="16.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="408.2" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.40%)</title><rect x="405.2" y="467.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.47%)</title><rect x="421.6" y="483.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.6" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.40%)</title><rect x="427.1" y="499.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.93%)</title><rect x="432.6" y="483.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="435.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.93%)</title><rect x="432.6" y="467.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 10.23%)</title><rect x="443.6" y="547.0" width="120.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="446.6" y="558.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 10.23%)</title><rect x="443.6" y="531.0" width="120.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="446.6" y="542.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.26%)</title><rect x="454.6" y="515.0" width="38.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.6" y="526.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.33%)</title><rect x="454.6" y="499.0" width="27.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.6" y="510.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.40%)</title><rect x="454.6" y="483.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.6" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.40%)</title><rect x="454.6" y="467.0" width="16.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.6" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.40%)</title><rect x="454.6" y="451.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.6" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.40%)</title><rect x="454.6" y="435.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.6" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.93%)</title><rect x="460.0" y="419.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="463.0" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.47%)</title><rect x="460.0" y="403.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="463.0" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.47%)</title><rect x="460.0" y="387.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="463.0" y="398.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.47%)</title><rect x="460.0" y="371.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="463.0" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.47%)</title><rect x="460.0" y="355.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="463.0" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.47%)</title><rect x="460.0" y="339.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="463.0" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.47%)</title><rect x="465.5" y="403.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="468.5" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.47%)</title><rect x="465.5" y="387.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="468.5" y="398.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.47%)</title><rect x="465.5" y="371.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="468.5" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.93%)</title><rect x="471.0" y="483.0" width="11.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="474.0" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.93%)</title><rect x="482.0" y="499.0" width="11.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="485.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.47%)</title><rect x="493.0" y="515.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.47%)</title><rect x="493.0" y="499.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.47%)</title><rect x="493.0" y="483.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.0" y="494.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 5.58%)</title><rect x="498.5" y="515.0" width="65.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.5" y="526.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 5.12%)</title><rect x="504.0" y="499.0" width="60.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.0" y="510.0">ch/qos..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.47%)</title><rect x="504.0" y="483.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.47%)</title><rect x="504.0" y="467.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.47%)</title><rect x="504.0" y="451.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.0" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 4.65%)</title><rect x="509.4" y="483.0" width="54.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.4" y="494.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 4.65%)</title><rect x="509.4" y="467.0" width="54.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.4" y="478.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 3.26%)</title><rect x="525.9" y="451.0" width="38.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.9" y="462.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.47%)</title><rect x="553.3" y="435.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.3" y="446.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.47%)</title><rect x="558.8" y="435.0" width="5.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="561.8" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (48 samples, 22.33%)</title><rect x="564.3" y="547.0" width="263.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.3" y="558.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (48 samples, 22.33%)</title><rect x="564.3" y="531.0" width="263.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.3" y="542.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2031298035.process (41 samples, 19.07%)</title><rect x="569.8" y="515.0" width="225.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="572.8" y="526.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (41 samples, 19.07%)</title><rect x="569.8" y="499.0" width="225.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="572.8" y="510.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (41 samples, 19.07%)</title><rect x="569.8" y="483.0" width="225.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.8" y="494.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="575.3" y="467.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (39 samples, 18.14%)</title><rect x="580.8" y="467.0" width="214.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.8" y="478.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (39 samples, 18.14%)</title><rect x="580.8" y="451.0" width="214.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.8" y="462.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (36 samples, 16.74%)</title><rect x="597.3" y="435.0" width="197.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="600.3" y="446.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.40%)</title><rect x="608.2" y="419.0" width="16.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="611.2" y="430.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.47%)</title><rect x="624.7" y="419.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="627.7" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.93%)</title><rect x="630.2" y="419.0" width="11.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="633.2" y="430.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.93%)</title><rect x="630.2" y="403.0" width="11.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="633.2" y="414.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (28 samples, 13.02%)</title><rect x="641.2" y="419.0" width="153.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="644.2" y="430.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="674.1" y="403.0" width="5.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="677.1" y="414.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="674.1" y="387.0" width="5.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="677.1" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.40%)</title><rect x="679.6" y="403.0" width="16.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="682.6" y="414.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 6.51%)</title><rect x="696.0" y="403.0" width="76.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="699.0" y="414.0">__pthrea..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.47%)</title><rect x="772.9" y="403.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="775.9" y="414.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.93%)</title><rect x="778.4" y="403.0" width="10.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="781.4" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.47%)</title><rect x="789.3" y="403.0" width="5.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="792.3" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.93%)</title><rect x="794.8" y="515.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.8" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.93%)</title><rect x="794.8" y="499.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.8" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/695684826.get$Lambda (2 samples, 0.93%)</title><rect x="794.8" y="483.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="797.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/695684826.&lt;init&gt; (2 samples, 0.93%)</title><rect x="794.8" y="467.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.8" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.47%)</title><rect x="805.8" y="515.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.8" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.47%)</title><rect x="805.8" y="499.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="808.8" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.93%)</title><rect x="811.3" y="515.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.3" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.93%)</title><rect x="811.3" y="499.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="814.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.47%)</title><rect x="822.3" y="515.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="825.3" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/749089181.linkToTargetMethod (1 samples, 0.47%)</title><rect x="827.8" y="547.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.8" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/110771485.invokeStatic_L3_L (1 samples, 0.47%)</title><rect x="827.8" y="531.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="830.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1995477884.get$Lambda (1 samples, 0.47%)</title><rect x="827.8" y="515.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="830.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.79%)</title><rect x="833.3" y="547.0" width="32.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="836.3" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.47%)</title><rect x="860.7" y="531.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.47%)</title><rect x="860.7" y="515.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1995477884.accept (1 samples, 0.47%)</title><rect x="860.7" y="499.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.47%)</title><rect x="860.7" y="483.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="863.7" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.47%)</title><rect x="860.7" y="467.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="863.7" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.47%)</title><rect x="860.7" y="451.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 4.65%)</title><rect x="866.2" y="563.0" width="54.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="869.2" y="574.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 3.26%)</title><rect x="882.7" y="547.0" width="38.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="885.7" y="558.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 3.26%)</title><rect x="882.7" y="531.0" width="38.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.7" y="542.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/30222920.accept (7 samples, 3.26%)</title><rect x="882.7" y="515.0" width="38.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="885.7" y="526.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (7 samples, 3.26%)</title><rect x="882.7" y="499.0" width="38.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="885.7" y="510.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1808613656.complete (7 samples, 3.26%)</title><rect x="882.7" y="483.0" width="38.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="885.7" y="494.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (7 samples, 3.26%)</title><rect x="882.7" y="467.0" width="38.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="885.7" y="478.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 3.26%)</title><rect x="882.7" y="451.0" width="38.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="885.7" y="462.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 3.26%)</title><rect x="882.7" y="435.0" width="38.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="885.7" y="446.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 3.26%)</title><rect x="882.7" y="419.0" width="38.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="885.7" y="430.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 3.26%)</title><rect x="882.7" y="403.0" width="38.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="885.7" y="414.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 3.26%)</title><rect x="882.7" y="387.0" width="38.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="885.7" y="398.0">ch/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.40%)</title><rect x="921.1" y="579.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.1" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="932.0" y="563.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="935.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="932.0" y="547.0" width="5.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="935.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.33%)</title><rect x="937.5" y="627.0" width="27.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="940.5" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.33%)</title><rect x="937.5" y="611.0" width="27.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="940.5" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.86%)</title><rect x="943.0" y="595.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="946.0" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.86%)</title><rect x="943.0" y="579.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="946.0" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.86%)</title><rect x="943.0" y="563.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.0" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.86%)</title><rect x="943.0" y="547.0" width="22.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.0" y="558.0">j..</text>
</g>
<g>
<title>start_thread (41 samples, 19.07%)</title><rect x="965.0" y="675.0" width="225.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="968.0" y="686.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (41 samples, 19.07%)</title><rect x="965.0" y="659.0" width="225.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="968.0" y="670.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 4.65%)</title><rect x="965.0" y="643.0" width="54.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.0" y="654.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 4.65%)</title><rect x="965.0" y="627.0" width="54.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="968.0" y="638.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 4.65%)</title><rect x="965.0" y="611.0" width="54.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="968.0" y="622.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 4.19%)</title><rect x="965.0" y="595.0" width="49.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="968.0" y="606.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.33%)</title><rect x="986.9" y="579.0" width="27.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.9" y="590.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 1.40%)</title><rect x="997.9" y="563.0" width="16.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.9" y="574.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.47%)</title><rect x="1008.9" y="547.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.9" y="558.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.47%)</title><rect x="1014.4" y="595.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.4" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 14.42%)</title><rect x="1019.9" y="643.0" width="170.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.9" y="654.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 14.42%)</title><rect x="1019.9" y="627.0" width="170.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.9" y="638.0">JavaThread::thread_mai..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 14.42%)</title><rect x="1019.9" y="611.0" width="170.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.9" y="622.0">CompileBroker::compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 14.42%)</title><rect x="1019.9" y="595.0" width="170.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.9" y="606.0">CompileBroker::invoke_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (30 samples, 13.95%)</title><rect x="1019.9" y="579.0" width="164.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.9" y="590.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (30 samples, 13.95%)</title><rect x="1019.9" y="563.0" width="164.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.9" y="574.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 9.77%)</title><rect x="1019.9" y="547.0" width="115.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.9" y="558.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.93%)</title><rect x="1019.9" y="531.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.9" y="542.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.47%)</title><rect x="1019.9" y="515.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.9" y="526.0"></text>
</g>
<g>
<title>jmpConUNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.47%)</title><rect x="1025.3" y="515.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.3" y="526.0"></text>
</g>
<g>
<title>Assembler::jcc(Assembler::Condition, Label&amp;, bool) (1 samples, 0.47%)</title><rect x="1025.3" y="499.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.3" y="510.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.47%)</title><rect x="1030.8" y="531.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.8" y="542.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.47%)</title><rect x="1030.8" y="515.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.8" y="526.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.47%)</title><rect x="1030.8" y="499.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1033.8" y="510.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.47%)</title><rect x="1036.3" y="531.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.3" y="542.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.47%)</title><rect x="1036.3" y="515.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.3" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.47%)</title><rect x="1041.8" y="531.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.47%)</title><rect x="1041.8" y="515.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.8" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.47%)</title><rect x="1041.8" y="499.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.8" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.47%)</title><rect x="1041.8" y="483.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.8" y="494.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.47%)</title><rect x="1041.8" y="467.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.8" y="478.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.47%)</title><rect x="1041.8" y="451.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.8" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.47%)</title><rect x="1041.8" y="435.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1044.8" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1041.8" y="419.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.8" y="430.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.47%)</title><rect x="1041.8" y="403.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.8" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 7.44%)</title><rect x="1047.3" y="531.0" width="87.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.3" y="542.0">PhaseChait..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.93%)</title><rect x="1047.3" y="515.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.3" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.47%)</title><rect x="1047.3" y="499.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.3" y="510.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.47%)</title><rect x="1052.8" y="499.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.8" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.47%)</title><rect x="1058.3" y="515.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.3" y="526.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.47%)</title><rect x="1058.3" y="499.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.3" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.47%)</title><rect x="1063.8" y="515.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.8" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.47%)</title><rect x="1063.8" y="499.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.8" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1063.8" y="483.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.8" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.93%)</title><rect x="1069.3" y="515.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.3" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.47%)</title><rect x="1074.7" y="499.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.7" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.47%)</title><rect x="1074.7" y="483.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1077.7" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.47%)</title><rect x="1080.2" y="515.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.2" y="526.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.47%)</title><rect x="1080.2" y="499.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.2" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.47%)</title><rect x="1085.7" y="515.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.7" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.47%)</title><rect x="1091.2" y="515.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.2" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.47%)</title><rect x="1091.2" y="499.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.2" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.93%)</title><rect x="1096.7" y="515.0" width="11.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.7" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.93%)</title><rect x="1096.7" y="499.0" width="11.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.93%)</title><rect x="1107.7" y="515.0" width="11.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.7" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.93%)</title><rect x="1118.7" y="515.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.7" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.47%)</title><rect x="1118.7" y="499.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.7" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1124.1" y="499.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.1" y="510.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.47%)</title><rect x="1129.6" y="515.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.6" y="526.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 3.26%)</title><rect x="1135.1" y="547.0" width="38.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.1" y="558.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 2.33%)</title><rect x="1135.1" y="531.0" width="27.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.1" y="542.0">P..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.47%)</title><rect x="1135.1" y="515.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.1" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.47%)</title><rect x="1140.6" y="515.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.6" y="526.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.47%)</title><rect x="1140.6" y="499.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.6" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="1146.1" y="515.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.1" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.47%)</title><rect x="1146.1" y="499.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="1151.6" y="515.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.6" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.47%)</title><rect x="1151.6" y="499.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.6" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.47%)</title><rect x="1151.6" y="483.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.6" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="1157.1" y="515.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.1" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.47%)</title><rect x="1157.1" y="499.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.47%)</title><rect x="1157.1" y="483.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.47%)</title><rect x="1157.1" y="467.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="478.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.47%)</title><rect x="1157.1" y="451.0" width="5.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1160.1" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.93%)</title><rect x="1162.6" y="531.0" width="10.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.93%)</title><rect x="1162.6" y="515.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="526.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1162.6" y="499.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="510.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.47%)</title><rect x="1162.6" y="483.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="494.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.47%)</title><rect x="1162.6" y="467.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.47%)</title><rect x="1168.0" y="499.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1173.5" y="547.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1173.5" y="531.0" width="11.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1173.5" y="515.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1173.5" y="499.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1173.5" y="483.0" width="11.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1173.5" y="467.0" width="11.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1173.5" y="451.0" width="11.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1173.5" y="435.0" width="11.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1173.5" y="419.0" width="11.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1173.5" y="403.0" width="11.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1173.5" y="387.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1173.5" y="371.0" width="11.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1173.5" y="355.0" width="11.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1173.5" y="339.0" width="11.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1173.5" y="323.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1173.5" y="307.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.47%)</title><rect x="1173.5" y="291.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="302.0"></text>
</g>
<g>
<title>SafePointNode::set_next_exception(SafePointNode*) (1 samples, 0.47%)</title><rect x="1173.5" y="275.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1179.0" y="291.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1179.0" y="275.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1179.0" y="259.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1179.0" y="243.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1179.0" y="227.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1179.0" y="211.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1179.0" y="195.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1179.0" y="179.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1179.0" y="163.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1179.0" y="147.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="158.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.47%)</title><rect x="1179.0" y="131.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="142.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.47%)</title><rect x="1179.0" y="115.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="126.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.47%)</title><rect x="1179.0" y="99.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.47%)</title><rect x="1179.0" y="83.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.47%)</title><rect x="1179.0" y="67.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1179.0" y="51.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1179.0" y="35.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.47%)</title><rect x="1184.5" y="579.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.47%)</title><rect x="1184.5" y="563.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.47%)</title><rect x="1184.5" y="547.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.47%)</title><rect x="1184.5" y="531.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.47%)</title><rect x="1184.5" y="515.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.47%)</title><rect x="1184.5" y="499.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.47%)</title><rect x="1184.5" y="483.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.47%)</title><rect x="1184.5" y="467.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.47%)</title><rect x="1184.5" y="451.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>Assembler::call_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.47%)</title><rect x="1184.5" y="435.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>Relocation::pack_data_to(CodeSection*) (1 samples, 0.47%)</title><rect x="1184.5" y="419.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
</g>
</svg>
