<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (1,386 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (254 samples, 18.33%)</title><rect x="10.0" y="1155.0" width="216.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (253 samples, 18.25%)</title><rect x="10.9" y="1139.0" width="215.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.9" y="1150.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (7 samples, 0.51%)</title><rect x="10.9" y="1123.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.51%)</title><rect x="10.9" y="1107.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/757019687.accept (7 samples, 0.51%)</title><rect x="10.9" y="1091.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (7 samples, 0.51%)</title><rect x="10.9" y="1075.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.43%)</title><rect x="11.7" y="1059.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.7" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.29%)</title><rect x="12.6" y="1043.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.6" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="16.0" y="1043.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.0" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="16.0" y="1027.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.0" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="16.0" y="1011.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.0" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="16.0" y="995.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.22%)</title><rect x="16.8" y="1123.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.22%)</title><rect x="16.8" y="1107.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="16.8" y="1091.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="16.8" y="1075.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.22%)</title><rect x="16.8" y="1059.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="16.8" y="1043.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="16.8" y="1027.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.8" y="1038.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="16.8" y="1011.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="19.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="18.5" y="1011.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="18.5" y="995.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="18.5" y="979.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.07%)</title><rect x="18.5" y="963.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.5" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (195 samples, 14.07%)</title><rect x="19.4" y="1123.0" width="166.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.4" y="1134.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/814755623.accept (186 samples, 13.42%)</title><rect x="21.1" y="1107.0" width="158.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.1" y="1118.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (186 samples, 13.42%)</title><rect x="21.1" y="1091.0" width="158.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.1" y="1102.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="21.1" y="1075.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (152 samples, 10.97%)</title><rect x="21.9" y="1075.0" width="129.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.9" y="1086.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (152 samples, 10.97%)</title><rect x="21.9" y="1059.0" width="129.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.9" y="1070.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (152 samples, 10.97%)</title><rect x="21.9" y="1043.0" width="129.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.9" y="1054.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (152 samples, 10.97%)</title><rect x="21.9" y="1027.0" width="129.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.9" y="1038.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (152 samples, 10.97%)</title><rect x="21.9" y="1011.0" width="129.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.9" y="1022.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (152 samples, 10.97%)</title><rect x="21.9" y="995.0" width="129.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.9" y="1006.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (106 samples, 7.65%)</title><rect x="21.9" y="979.0" width="90.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.9" y="990.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.52%)</title><rect x="21.9" y="963.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.52%)</title><rect x="21.9" y="947.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.01%)</title><rect x="27.9" y="931.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (14 samples, 1.01%)</title><rect x="27.9" y="915.0" width="11.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.51%)</title><rect x="39.8" y="963.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.51%)</title><rect x="39.8" y="947.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.14%)</title><rect x="39.8" y="931.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.8" y="942.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.14%)</title><rect x="39.8" y="915.0" width="1.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="42.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.36%)</title><rect x="41.5" y="931.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 5.63%)</title><rect x="45.8" y="963.0" width="66.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.8" y="974.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 5.63%)</title><rect x="45.8" y="947.0" width="66.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.8" y="958.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 5.41%)</title><rect x="45.8" y="931.0" width="63.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.8" y="942.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 5.41%)</title><rect x="45.8" y="915.0" width="63.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.8" y="926.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 5.41%)</title><rect x="45.8" y="899.0" width="63.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.8" y="910.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 4.62%)</title><rect x="45.8" y="883.0" width="54.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="48.8" y="894.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="47.5" y="867.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="50.5" y="878.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.14%)</title><rect x="49.2" y="867.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="52.2" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 2.96%)</title><rect x="50.9" y="867.0" width="34.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="53.9" y="878.0">__..</text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="85.8" y="867.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="88.8" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="86.6" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="89.6" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.08%)</title><rect x="87.5" y="867.0" width="12.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="90.5" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 0.65%)</title><rect x="100.2" y="883.0" width="7.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="103.2" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="107.9" y="883.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="110.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.22%)</title><rect x="109.6" y="931.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (41 samples, 2.96%)</title><rect x="112.2" y="979.0" width="34.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.2" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (41 samples, 2.96%)</title><rect x="112.2" y="963.0" width="34.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="115.2" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (41 samples, 2.96%)</title><rect x="112.2" y="947.0" width="34.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.2" y="958.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="146.2" y="931.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="149.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.36%)</title><rect x="147.1" y="979.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.36%)</title><rect x="147.1" y="963.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.36%)</title><rect x="147.1" y="947.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.14%)</title><rect x="151.3" y="1075.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.14%)</title><rect x="151.3" y="1059.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.29%)</title><rect x="153.0" y="1075.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.29%)</title><rect x="153.0" y="1059.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.29%)</title><rect x="153.0" y="1043.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 1.95%)</title><rect x="156.4" y="1075.0" width="23.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.4" y="1086.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 1.95%)</title><rect x="156.4" y="1059.0" width="23.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="159.4" y="1070.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.51%)</title><rect x="170.9" y="1043.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.22%)</title><rect x="171.8" y="1027.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.22%)</title><rect x="171.8" y="1011.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.22%)</title><rect x="171.8" y="995.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.8" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="172.6" y="979.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="175.6" y="990.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="174.3" y="1027.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="175.2" y="1027.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.2" y="1038.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="176.9" y="1043.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="179.9" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="177.7" y="1043.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="180.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.22%)</title><rect x="179.4" y="1107.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.22%)</title><rect x="179.4" y="1091.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="181.1" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="182.0" y="1107.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="182.0" y="1091.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="182.0" y="1075.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="182.0" y="1059.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="185.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="182.0" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="185.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="182.0" y="1027.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.22%)</title><rect x="182.8" y="1107.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="185.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.22%)</title><rect x="182.8" y="1091.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.14%)</title><rect x="183.7" y="1075.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.14%)</title><rect x="183.7" y="1059.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (2 samples, 0.14%)</title><rect x="183.7" y="1043.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.14%)</title><rect x="183.7" y="1027.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 3.46%)</title><rect x="185.4" y="1123.0" width="40.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="188.4" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 3.39%)</title><rect x="186.2" y="1107.0" width="40.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.2" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.45%)</title><rect x="186.2" y="1091.0" width="29.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.2" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="186.2" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="186.2" y="1059.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.2" y="1070.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="186.2" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="189.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.38%)</title><rect x="187.1" y="1075.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.1" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.38%)</title><rect x="187.1" y="1059.0" width="28.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.1" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.09%)</title><rect x="187.1" y="1043.0" width="24.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.1" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.09%)</title><rect x="187.1" y="1027.0" width="24.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.1" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.08%)</title><rect x="188.8" y="1011.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.43%)</title><rect x="195.6" y="995.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.43%)</title><rect x="195.6" y="979.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.43%)</title><rect x="195.6" y="963.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.43%)</title><rect x="195.6" y="947.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.43%)</title><rect x="195.6" y="931.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.43%)</title><rect x="195.6" y="915.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.43%)</title><rect x="195.6" y="899.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="200.7" y="995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="200.7" y="979.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.87%)</title><rect x="201.6" y="1011.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="201.6" y="995.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="204.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.79%)</title><rect x="202.4" y="995.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.58%)</title><rect x="202.4" y="979.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.4" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.58%)</title><rect x="202.4" y="963.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.4" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="208.4" y="947.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="211.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.22%)</title><rect x="209.2" y="979.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.2" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.22%)</title><rect x="209.2" y="963.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="211.8" y="1043.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="211.8" y="1027.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="211.8" y="1011.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="211.8" y="995.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="211.8" y="979.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="211.8" y="963.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="211.8" y="947.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.14%)</title><rect x="212.6" y="1043.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.14%)</title><rect x="212.6" y="1027.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="212.6" y="1011.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="212.6" y="995.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="213.5" y="1011.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="213.5" y="995.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="213.5" y="979.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="213.5" y="963.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.5" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.07%)</title><rect x="213.5" y="947.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.5" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="213.5" y="931.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.07%)</title><rect x="214.3" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.07%)</title><rect x="214.3" y="1027.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="214.3" y="1011.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="214.3" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.14%)</title><rect x="215.2" y="1091.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.14%)</title><rect x="215.2" y="1075.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.07%)</title><rect x="215.2" y="1059.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.2" y="1070.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="215.2" y="1043.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="215.2" y="1027.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="215.2" y="1011.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.07%)</title><rect x="215.2" y="995.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="216.0" y="1059.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="216.0" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="216.0" y="1027.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="216.0" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="216.0" y="995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.22%)</title><rect x="216.9" y="1091.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.14%)</title><rect x="216.9" y="1075.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.14%)</title><rect x="216.9" y="1059.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="216.9" y="1043.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="216.9" y="1027.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="216.9" y="1011.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="216.9" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.9" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="216.9" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="219.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="217.7" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.7" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="217.7" y="1027.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="217.7" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="217.7" y="995.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="217.7" y="979.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.7" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="217.7" y="963.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.7" y="974.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.07%)</title><rect x="217.7" y="947.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="220.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="218.6" y="1075.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="218.6" y="1059.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="218.6" y="1043.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="218.6" y="1027.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="218.6" y="1011.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="218.6" y="995.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="218.6" y="979.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.07%)</title><rect x="218.6" y="963.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.51%)</title><rect x="219.4" y="1091.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.07%)</title><rect x="219.4" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.07%)</title><rect x="219.4" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.4" y="1043.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.4" y="1027.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.&lt;init&gt; (1 samples, 0.07%)</title><rect x="219.4" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.43%)</title><rect x="220.3" y="1075.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="220.3" y="1059.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/145366870.accept (1 samples, 0.07%)</title><rect x="220.3" y="1043.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="220.3" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="220.3" y="1011.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="220.3" y="995.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="220.3" y="979.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="220.3" y="963.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.22%)</title><rect x="221.1" y="1059.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.22%)</title><rect x="221.1" y="1043.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="221.1" y="1027.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="221.1" y="1011.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="222.0" y="995.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="222.0" y="979.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="222.0" y="963.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="222.0" y="947.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.07%)</title><rect x="222.8" y="1027.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="222.8" y="1011.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="222.8" y="995.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="222.8" y="979.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.14%)</title><rect x="223.7" y="1059.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.14%)</title><rect x="223.7" y="1043.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.7" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="223.7" y="1027.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="223.7" y="1011.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="223.7" y="995.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.7" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.07%)</title><rect x="224.5" y="1027.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="225.4" y="1091.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.4" y="1075.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.4" y="1059.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.4" y="1043.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="225.4" y="1027.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.4" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="225.4" y="1011.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="228.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (667 samples, 48.12%)</title><rect x="226.2" y="1155.0" width="567.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.2" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (667 samples, 48.12%)</title><rect x="226.2" y="1139.0" width="567.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.2" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (667 samples, 48.12%)</title><rect x="226.2" y="1123.0" width="567.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.2" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2086066237.run (454 samples, 32.76%)</title><rect x="226.2" y="1107.0" width="386.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.2" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (454 samples, 32.76%)</title><rect x="226.2" y="1091.0" width="386.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.2" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (453 samples, 32.68%)</title><rect x="227.1" y="1075.0" width="385.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.1" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (448 samples, 32.32%)</title><rect x="227.1" y="1059.0" width="381.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.1" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.07%)</title><rect x="236.5" y="1043.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="236.5" y="1027.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1587776936.get (1 samples, 0.07%)</title><rect x="236.5" y="1011.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="236.5" y="995.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="236.5" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="239.5" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="236.5" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="239.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="236.5" y="947.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="239.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (151 samples, 10.89%)</title><rect x="237.3" y="1043.0" width="128.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.3" y="1054.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (151 samples, 10.89%)</title><rect x="237.3" y="1027.0" width="128.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.3" y="1038.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (151 samples, 10.89%)</title><rect x="237.3" y="1011.0" width="128.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.3" y="1022.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 10.89%)</title><rect x="237.3" y="995.0" width="128.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.3" y="1006.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 10.89%)</title><rect x="237.3" y="979.0" width="128.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.3" y="990.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (151 samples, 10.89%)</title><rect x="237.3" y="963.0" width="128.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.3" y="974.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (49 samples, 3.54%)</title><rect x="237.3" y="947.0" width="41.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.3" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (27 samples, 1.95%)</title><rect x="237.3" y="931.0" width="23.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.3" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (25 samples, 1.80%)</title><rect x="237.3" y="915.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.3" y="926.0">c..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="249.2" y="899.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="252.2" y="910.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="249.2" y="883.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="252.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.58%)</title><rect x="251.8" y="899.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.58%)</title><rect x="251.8" y="883.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.58%)</title><rect x="251.8" y="867.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.58%)</title><rect x="251.8" y="851.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="258.6" y="915.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="259.5" y="899.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.59%)</title><rect x="260.3" y="931.0" width="18.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.22%)</title><rect x="260.3" y="915.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (19 samples, 1.37%)</title><rect x="262.9" y="915.0" width="16.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="265.4" y="899.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="268.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="265.4" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="268.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="265.4" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="268.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="265.4" y="851.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="268.4" y="862.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="265.4" y="835.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="268.4" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="265.4" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="268.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.07%)</title><rect x="266.3" y="899.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="266.3" y="883.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.58%)</title><rect x="267.1" y="899.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 0.58%)</title><rect x="267.1" y="883.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (8 samples, 0.58%)</title><rect x="267.1" y="867.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.43%)</title><rect x="273.9" y="899.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (91 samples, 6.57%)</title><rect x="279.0" y="947.0" width="77.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.0" y="958.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.36%)</title><rect x="279.0" y="931.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.36%)</title><rect x="279.0" y="915.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.22%)</title><rect x="279.0" y="899.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.14%)</title><rect x="279.9" y="883.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.07%)</title><rect x="281.6" y="899.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.07%)</title><rect x="282.4" y="899.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.43%)</title><rect x="283.3" y="931.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.43%)</title><rect x="283.3" y="915.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.07%)</title><rect x="285.8" y="899.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.14%)</title><rect x="286.7" y="899.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="289.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.72%)</title><rect x="288.4" y="931.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.51%)</title><rect x="290.1" y="915.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="293.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.43%)</title><rect x="290.1" y="899.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.43%)</title><rect x="290.1" y="883.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="291.8" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="294.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="291.8" y="851.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="294.8" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="291.8" y="835.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="294.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.22%)</title><rect x="292.7" y="867.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="295.2" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.07%)</title><rect x="296.1" y="915.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.58%)</title><rect x="296.9" y="931.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (8 samples, 0.58%)</title><rect x="296.9" y="915.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="300.3" y="899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="301.2" y="899.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.22%)</title><rect x="301.2" y="883.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.22%)</title><rect x="301.2" y="867.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (62 samples, 4.47%)</title><rect x="303.7" y="931.0" width="52.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="306.7" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.08%)</title><rect x="303.7" y="915.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.58%)</title><rect x="304.6" y="899.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="307.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.43%)</title><rect x="311.4" y="899.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.43%)</title><rect x="311.4" y="883.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (47 samples, 3.39%)</title><rect x="316.5" y="915.0" width="40.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.5" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (47 samples, 3.39%)</title><rect x="316.5" y="899.0" width="40.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.5" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (47 samples, 3.39%)</title><rect x="316.5" y="883.0" width="40.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.5" y="894.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.01%)</title><rect x="328.4" y="867.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.36%)</title><rect x="331.0" y="851.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.36%)</title><rect x="331.0" y="835.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.36%)</title><rect x="331.0" y="819.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.29%)</title><rect x="331.8" y="803.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.29%)</title><rect x="331.8" y="787.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.22%)</title><rect x="332.7" y="771.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.22%)</title><rect x="332.7" y="755.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.22%)</title><rect x="335.2" y="851.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="337.8" y="851.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="337.8" y="835.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="338.6" y="851.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="339.5" y="851.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.65%)</title><rect x="340.3" y="867.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.65%)</title><rect x="340.3" y="851.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.65%)</title><rect x="340.3" y="835.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.65%)</title><rect x="340.3" y="819.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.65%)</title><rect x="340.3" y="803.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="343.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.22%)</title><rect x="348.0" y="867.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.36%)</title><rect x="350.5" y="867.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.36%)</title><rect x="350.5" y="851.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.36%)</title><rect x="350.5" y="835.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.14%)</title><rect x="354.8" y="867.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.14%)</title><rect x="354.8" y="851.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.79%)</title><rect x="356.5" y="947.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.79%)</title><rect x="356.5" y="931.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.79%)</title><rect x="356.5" y="915.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="359.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.22%)</title><rect x="357.4" y="899.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.07%)</title><rect x="359.9" y="899.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.07%)</title><rect x="360.8" y="899.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.36%)</title><rect x="361.6" y="899.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.36%)</title><rect x="361.6" y="883.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (261 samples, 18.83%)</title><rect x="365.9" y="1043.0" width="222.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.9" y="1054.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (51 samples, 3.68%)</title><rect x="366.7" y="1027.0" width="43.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.7" y="1038.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 3.61%)</title><rect x="367.6" y="1011.0" width="42.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.6" y="1022.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 3.39%)</title><rect x="370.1" y="995.0" width="40.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.1" y="1006.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.29%)</title><rect x="371.8" y="979.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.29%)</title><rect x="371.8" y="963.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.29%)</title><rect x="371.8" y="947.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.29%)</title><rect x="371.8" y="931.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="374.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.36%)</title><rect x="375.2" y="979.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.36%)</title><rect x="375.2" y="963.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.36%)</title><rect x="375.2" y="947.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.22%)</title><rect x="376.9" y="931.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (36 samples, 2.60%)</title><rect x="379.5" y="979.0" width="30.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.5" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (32 samples, 2.31%)</title><rect x="382.9" y="963.0" width="27.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.9" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.29%)</title><rect x="406.7" y="947.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.43%)</title><rect x="410.1" y="1027.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.43%)</title><rect x="410.1" y="1011.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.43%)</title><rect x="410.1" y="995.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (140 samples, 10.10%)</title><rect x="415.3" y="1027.0" width="119.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.3" y="1038.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (140 samples, 10.10%)</title><rect x="415.3" y="1011.0" width="119.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.3" y="1022.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="421.2" y="995.0" width="2.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="424.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="421.2" y="979.0" width="2.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="424.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (47 samples, 3.39%)</title><rect x="423.8" y="995.0" width="40.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.8" y="1006.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (46 samples, 3.32%)</title><rect x="424.6" y="979.0" width="39.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="427.6" y="990.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (36 samples, 2.60%)</title><rect x="428.0" y="963.0" width="30.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.0" y="974.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 1.73%)</title><rect x="434.0" y="947.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.0" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (24 samples, 1.73%)</title><rect x="434.0" y="931.0" width="20.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 1.73%)</title><rect x="434.0" y="915.0" width="20.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.65%)</title><rect x="441.6" y="899.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="444.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="443.3" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="446.3" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.14%)</title><rect x="444.2" y="883.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="447.2" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="444.2" y="867.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="447.2" y="878.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="444.2" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="447.2" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="445.1" y="867.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="448.1" y="878.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="445.9" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="448.9" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.22%)</title><rect x="446.8" y="883.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="449.8" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.22%)</title><rect x="446.8" y="867.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="449.8" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.14%)</title><rect x="446.8" y="851.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="449.8" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="447.6" y="835.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="450.6" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="447.6" y="819.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="450.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="447.6" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="450.6" y="814.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="447.6" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="450.6" y="798.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="447.6" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="450.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="448.5" y="851.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="451.5" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.43%)</title><rect x="449.3" y="899.0" width="5.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="452.3" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="454.4" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.4" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="455.3" y="947.0" width="2.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="458.3" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="457.8" y="947.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="460.8" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="458.7" y="963.0" width="1.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="461.7" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="460.4" y="963.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="463.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.72%)</title><rect x="463.8" y="995.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="466.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.22%)</title><rect x="463.8" y="979.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="466.8" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="463.8" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="466.8" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="463.8" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="466.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="463.8" y="931.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="466.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="463.8" y="915.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="466.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.14%)</title><rect x="464.6" y="963.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.6" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="464.6" y="947.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="467.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="464.6" y="931.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="467.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="464.6" y="915.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="467.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="464.6" y="899.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="467.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="464.6" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="467.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="464.6" y="867.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.6" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="464.6" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="467.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="464.6" y="835.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="467.6" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="464.6" y="819.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="467.6" y="830.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="465.5" y="883.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="468.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.51%)</title><rect x="466.3" y="979.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.3" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.51%)</title><rect x="466.3" y="963.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="469.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="471.4" y="947.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.4" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (73 samples, 5.27%)</title><rect x="472.3" y="995.0" width="62.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.3" y="1006.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (72 samples, 5.19%)</title><rect x="473.1" y="979.0" width="61.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.1" y="990.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.36%)</title><rect x="473.1" y="963.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.36%)</title><rect x="473.1" y="947.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.36%)</title><rect x="473.1" y="931.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.36%)</title><rect x="473.1" y="915.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="477.4" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="477.4" y="947.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="477.4" y="931.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="477.4" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (66 samples, 4.76%)</title><rect x="478.3" y="963.0" width="56.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.3" y="974.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.18%)</title><rect x="485.1" y="947.0" width="49.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.1" y="958.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (28 samples, 2.02%)</title><rect x="510.6" y="931.0" width="23.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="513.6" y="942.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.36%)</title><rect x="522.5" y="915.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="525.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.43%)</title><rect x="526.8" y="915.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="531.0" y="899.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="534.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="531.0" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="534.0" y="894.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="531.9" y="915.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="534.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (43 samples, 3.10%)</title><rect x="534.4" y="1027.0" width="36.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="537.4" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (42 samples, 3.03%)</title><rect x="534.4" y="1011.0" width="35.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="537.4" y="1022.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/827091737.process (13 samples, 0.94%)</title><rect x="537.0" y="995.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (13 samples, 0.94%)</title><rect x="537.0" y="979.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 0.87%)</title><rect x="537.8" y="963.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="540.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="537.8" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.8" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="537.8" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="540.8" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="537.8" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.8" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="537.8" y="899.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.43%)</title><rect x="538.7" y="947.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="541.7" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.43%)</title><rect x="538.7" y="931.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="541.7" y="942.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.43%)</title><rect x="538.7" y="915.0" width="5.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="541.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.14%)</title><rect x="543.8" y="947.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="545.5" y="947.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="548.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.43%)</title><rect x="548.1" y="995.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.43%)</title><rect x="548.1" y="979.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.29%)</title><rect x="553.2" y="995.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="556.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.29%)</title><rect x="553.2" y="979.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/96421032.get$Lambda (4 samples, 0.29%)</title><rect x="553.2" y="963.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/96421032.&lt;init&gt; (4 samples, 0.29%)</title><rect x="553.2" y="947.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="556.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.58%)</title><rect x="556.6" y="995.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.58%)</title><rect x="556.6" y="979.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.6" y="990.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.29%)</title><rect x="556.6" y="963.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="559.6" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.29%)</title><rect x="560.0" y="963.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="563.4" y="995.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.51%)</title><rect x="564.2" y="995.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.2" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="570.2" y="1011.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="571.1" y="1027.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="574.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.37%)</title><rect x="571.9" y="1027.0" width="16.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="574.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.37%)</title><rect x="571.9" y="1011.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.9" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.72%)</title><rect x="576.2" y="995.0" width="8.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="579.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="578.7" y="979.0" width="6.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="581.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.29%)</title><rect x="584.7" y="995.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1600476481.accept (4 samples, 0.29%)</title><rect x="584.7" y="979.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (4 samples, 0.29%)</title><rect x="584.7" y="963.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="587.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 0.29%)</title><rect x="584.7" y="947.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.7" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.29%)</title><rect x="584.7" y="931.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="587.7" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.29%)</title><rect x="584.7" y="915.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.7" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="586.4" y="899.0" width="1.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="589.4" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="586.4" y="883.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="589.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.23%)</title><rect x="588.1" y="1043.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.23%)</title><rect x="588.1" y="1027.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.87%)</title><rect x="592.3" y="1011.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="595.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1600476481.accept (12 samples, 0.87%)</title><rect x="592.3" y="995.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="595.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (12 samples, 0.87%)</title><rect x="592.3" y="979.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (12 samples, 0.87%)</title><rect x="592.3" y="963.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="595.3" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (12 samples, 0.87%)</title><rect x="592.3" y="947.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="595.3" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (12 samples, 0.87%)</title><rect x="592.3" y="931.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.3" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="602.6" y="1043.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.6" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.07%)</title><rect x="602.6" y="1027.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="602.6" y="1011.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="605.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="602.6" y="995.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="602.6" y="979.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.6" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.43%)</title><rect x="603.4" y="1043.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="606.4" y="1054.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.43%)</title><rect x="603.4" y="1027.0" width="5.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="606.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="608.5" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="611.5" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="608.5" y="1043.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="611.5" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="608.5" y="1027.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="608.5" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="608.5" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="611.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="608.5" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="611.5" y="990.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="608.5" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="611.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.29%)</title><rect x="609.4" y="1059.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="612.4" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="610.2" y="1043.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="613.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="610.2" y="1027.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="613.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.72%)</title><rect x="612.8" y="1107.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="615.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.72%)</title><rect x="612.8" y="1091.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.72%)</title><rect x="612.8" y="1075.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.72%)</title><rect x="612.8" y="1059.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (2 samples, 0.14%)</title><rect x="619.6" y="1043.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="622.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (203 samples, 14.65%)</title><rect x="621.3" y="1107.0" width="172.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="624.3" y="1118.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (202 samples, 14.57%)</title><rect x="622.1" y="1091.0" width="172.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="625.1" y="1102.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (187 samples, 13.49%)</title><rect x="623.0" y="1075.0" width="159.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.0" y="1086.0">java/util/concurrent..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (26 samples, 1.88%)</title><rect x="625.5" y="1059.0" width="22.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.5" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.58%)</title><rect x="647.7" y="1059.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="650.7" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="647.7" y="1043.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="650.7" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="647.7" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="650.7" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="647.7" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="650.7" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="647.7" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="650.7" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="647.7" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="650.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.51%)</title><rect x="648.5" y="1043.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="651.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.51%)</title><rect x="648.5" y="1027.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.51%)</title><rect x="648.5" y="1011.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 10.75%)</title><rect x="654.5" y="1059.0" width="126.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.5" y="1070.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (149 samples, 10.75%)</title><rect x="654.5" y="1043.0" width="126.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.5" y="1054.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="656.2" y="1027.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="659.2" y="1038.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="657.0" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="660.0" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Park (143 samples, 10.32%)</title><rect x="657.9" y="1027.0" width="121.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="660.9" y="1038.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="660.4" y="1011.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="663.4" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 1.52%)</title><rect x="661.3" y="1011.0" width="17.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="664.3" y="1022.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.43%)</title><rect x="669.0" y="995.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="672.0" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.29%)</title><rect x="669.0" y="979.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="672.0" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.29%)</title><rect x="669.0" y="963.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="672.0" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="672.4" y="979.0" width="1.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="675.4" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="674.1" y="995.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="677.1" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.36%)</title><rect x="674.9" y="995.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="677.9" y="1006.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="679.2" y="1011.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="682.2" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="680.0" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="683.0" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="680.9" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="683.9" y="1022.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="681.7" y="1011.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="684.7" y="1022.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.43%)</title><rect x="682.6" y="1011.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="685.6" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (43 samples, 3.10%)</title><rect x="687.7" y="1011.0" width="36.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="690.7" y="1022.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 3.75%)</title><rect x="724.3" y="1011.0" width="44.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="727.3" y="1022.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.22%)</title><rect x="768.6" y="1011.0" width="2.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="771.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="771.1" y="1011.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="774.1" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="772.0" y="1011.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="775.0" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.29%)</title><rect x="772.8" y="1011.0" width="3.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="775.8" y="1022.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="776.2" y="1011.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="779.2" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="777.1" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="780.1" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="777.9" y="1011.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="780.9" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="778.8" y="1011.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="781.8" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="779.6" y="1027.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="782.6" y="1038.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="781.3" y="1059.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="784.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.01%)</title><rect x="782.2" y="1075.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.01%)</title><rect x="782.2" y="1059.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="785.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.01%)</title><rect x="782.2" y="1043.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.01%)</title><rect x="782.2" y="1027.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.07%)</title><rect x="793.3" y="1011.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="794.1" y="1155.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="797.1" y="1166.0"></text>
</g>
<g>
<title>start_thread (464 samples, 33.48%)</title><rect x="795.0" y="1155.0" width="395.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="798.0" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (464 samples, 33.48%)</title><rect x="795.0" y="1139.0" width="395.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="798.0" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.52%)</title><rect x="795.0" y="1123.0" width="17.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="798.0" y="1134.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.58%)</title><rect x="795.0" y="1107.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="798.0" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.58%)</title><rect x="795.0" y="1091.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="798.0" y="1102.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.22%)</title><rect x="795.0" y="1075.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="798.0" y="1086.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.36%)</title><rect x="797.5" y="1075.0" width="4.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="800.5" y="1086.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.87%)</title><rect x="801.8" y="1107.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="804.8" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.29%)</title><rect x="801.8" y="1091.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="804.8" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="801.8" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="804.8" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="801.8" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="804.8" y="1070.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.07%)</title><rect x="802.6" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="805.6" y="1086.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="803.5" y="1075.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="806.5" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.29%)</title><rect x="805.2" y="1091.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="808.2" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.22%)</title><rect x="805.2" y="1075.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.2" y="1086.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.22%)</title><rect x="805.2" y="1059.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="808.2" y="1070.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.22%)</title><rect x="805.2" y="1043.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="808.2" y="1054.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="805.2" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="808.2" y="1038.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (1 samples, 0.07%)</title><rect x="805.2" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.2" y="1022.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.14%)</title><rect x="806.0" y="1027.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="809.0" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (2 samples, 0.14%)</title><rect x="806.0" y="1011.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="809.0" y="1022.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.07%)</title><rect x="806.9" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="809.9" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="807.7" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="810.7" y="1086.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="807.7" y="1059.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.7" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="808.6" y="1091.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="811.6" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="808.6" y="1075.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="811.6" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.29%)</title><rect x="808.6" y="1059.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="811.6" y="1070.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.29%)</title><rect x="808.6" y="1043.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="811.6" y="1054.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.29%)</title><rect x="808.6" y="1027.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="811.6" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.29%)</title><rect x="808.6" y="1011.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.6" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.14%)</title><rect x="809.4" y="995.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.4" y="1006.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.07%)</title><rect x="809.4" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="812.4" y="990.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="810.3" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.3" y="990.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.07%)</title><rect x="811.1" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="814.1" y="1006.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="812.0" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.0" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="812.0" y="1091.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="815.0" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.07%)</title><rect x="812.0" y="1075.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="815.0" y="1086.0"></text>
</g>
<g>
<title>JavaThread::run() (441 samples, 31.82%)</title><rect x="812.8" y="1123.0" width="375.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.8" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (441 samples, 31.82%)</title><rect x="812.8" y="1107.0" width="375.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="815.8" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (440 samples, 31.75%)</title><rect x="812.8" y="1091.0" width="374.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="815.8" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (439 samples, 31.67%)</title><rect x="812.8" y="1075.0" width="373.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="815.8" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTas..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (439 samples, 31.67%)</title><rect x="812.8" y="1059.0" width="373.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="815.8" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (439 samples, 31.67%)</title><rect x="812.8" y="1043.0" width="373.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="815.8" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, in..</text>
</g>
<g>
<title>Compile::Code_Gen() (167 samples, 12.05%)</title><rect x="812.8" y="1027.0" width="142.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="815.8" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.36%)</title><rect x="812.8" y="1011.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="815.8" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.14%)</title><rect x="813.7" y="995.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="816.7" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="815.4" y="995.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="818.4" y="1006.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.07%)</title><rect x="815.4" y="979.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="818.4" y="990.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.07%)</title><rect x="815.4" y="963.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.4" y="974.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.07%)</title><rect x="815.4" y="947.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.4" y="958.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="815.4" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.4" y="942.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="816.2" y="995.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="819.2" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.51%)</title><rect x="817.1" y="1011.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.1" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.29%)</title><rect x="818.0" y="995.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.0" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (4 samples, 0.29%)</title><rect x="818.0" y="979.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="821.0" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.29%)</title><rect x="818.0" y="963.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="821.0" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="821.4" y="995.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.4" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="821.4" y="979.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="824.4" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (17 samples, 1.23%)</title><rect x="823.1" y="1011.0" width="14.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="826.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="823.1" y="995.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="826.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (16 samples, 1.15%)</title><rect x="823.9" y="995.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="826.9" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (9 samples, 0.65%)</title><rect x="824.8" y="979.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.8" y="990.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.14%)</title><rect x="832.4" y="979.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="835.4" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="833.3" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="836.3" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.29%)</title><rect x="834.1" y="979.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="837.1" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="835.8" y="963.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="838.8" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="835.8" y="947.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="838.8" y="958.0"></text>
</g>
<g>
<title>State::_sub_Op_AddL(Node const*) (1 samples, 0.07%)</title><rect x="835.8" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.8" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="836.7" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.7" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="836.7" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.7" y="958.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="836.7" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.7" y="942.0"></text>
</g>
<g>
<title>MachOper::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="836.7" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.7" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.14%)</title><rect x="837.5" y="1011.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="840.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.14%)</title><rect x="837.5" y="995.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="840.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.36%)</title><rect x="839.2" y="1011.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="842.2" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.36%)</title><rect x="839.2" y="995.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="842.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.29%)</title><rect x="839.2" y="979.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="842.2" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.14%)</title><rect x="840.1" y="963.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.1" y="974.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="840.9" y="947.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="843.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="841.8" y="963.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="844.8" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="842.6" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="845.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.07%)</title><rect x="843.5" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="846.5" y="1022.0"></text>
</g>
<g>
<title>jmpConNode::negate() (1 samples, 0.07%)</title><rect x="843.5" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="846.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (129 samples, 9.31%)</title><rect x="844.3" y="1011.0" width="109.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="847.3" y="1022.0">PhaseChaitin:..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="845.2" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="848.2" y="1006.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="846.0" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="849.0" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (7 samples, 0.51%)</title><rect x="846.9" y="995.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="849.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (9 samples, 0.65%)</title><rect x="852.9" y="995.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.9" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="855.4" y="979.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.4" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.22%)</title><rect x="858.0" y="979.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="861.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="858.8" y="963.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="861.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.58%)</title><rect x="860.5" y="995.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="863.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.51%)</title><rect x="861.4" y="979.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.4" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="865.6" y="963.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (15 samples, 1.08%)</title><rect x="867.3" y="995.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="870.3" y="1006.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="876.7" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="877.5" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="877.5" y="963.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.5" y="974.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="877.5" y="947.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.5" y="958.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="878.4" y="979.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="881.4" y="990.0"></text>
</g>
<g>
<title>compareAndSwapNNode::rule() const (1 samples, 0.07%)</title><rect x="879.2" y="979.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (24 samples, 1.73%)</title><rect x="880.1" y="995.0" width="20.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="883.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="887.8" y="979.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.8" y="990.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="890.3" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.65%)</title><rect x="891.2" y="979.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="894.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="897.1" y="963.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="900.1" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="898.8" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.8" y="990.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="899.7" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="902.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="900.5" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="903.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.07%)</title><rect x="901.4" y="995.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="904.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.43%)</title><rect x="902.2" y="995.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="905.2" y="1006.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="906.5" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="909.5" y="990.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="906.5" y="963.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.5" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="907.3" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="907.3" y="979.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="910.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.43%)</title><rect x="908.2" y="995.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.22%)</title><rect x="909.0" y="979.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="910.8" y="963.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.8" y="974.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.07%)</title><rect x="910.8" y="947.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="913.8" y="958.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.07%)</title><rect x="910.8" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.8" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (2 samples, 0.14%)</title><rect x="911.6" y="979.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.6" y="990.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (2 samples, 0.14%)</title><rect x="911.6" y="963.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.6" y="974.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (2 samples, 0.14%)</title><rect x="911.6" y="947.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="913.3" y="995.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="916.3" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (17 samples, 1.23%)</title><rect x="914.2" y="995.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.2" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="914.2" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="917.2" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (16 samples, 1.15%)</title><rect x="915.0" y="979.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="918.0" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="915.0" y="963.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="918.0" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (15 samples, 1.08%)</title><rect x="915.9" y="963.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.9" y="974.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 0.36%)</title><rect x="915.9" y="947.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.9" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 0.65%)</title><rect x="920.1" y="947.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="923.1" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="926.1" y="931.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.1" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="927.8" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="930.8" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="928.6" y="995.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.29%)</title><rect x="930.3" y="995.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.3" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="931.2" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="932.0" y="979.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="935.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.29%)</title><rect x="933.7" y="995.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.7" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.14%)</title><rect x="934.6" y="979.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.6" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="936.3" y="979.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="939.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.07%)</title><rect x="937.1" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="940.1" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (16 samples, 1.15%)</title><rect x="938.0" y="995.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="941.0" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.29%)</title><rect x="947.4" y="979.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="950.4" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="949.9" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.9" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="950.8" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.8" y="990.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.14%)</title><rect x="951.6" y="995.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="954.6" y="1006.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="953.3" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.3" y="1006.0"></text>
</g>
<g>
<title>compN_rRegNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="954.2" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.2" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (255 samples, 18.40%)</title><rect x="955.0" y="1027.0" width="217.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.0" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="955.0" y="1011.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.0" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="955.0" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.0" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="955.0" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.0" y="990.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.07%)</title><rect x="955.0" y="963.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.0" y="974.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="955.0" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.0" y="958.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="955.9" y="1011.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.9" y="1022.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (2 samples, 0.14%)</title><rect x="955.9" y="995.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.9" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="955.9" y="979.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="958.9" y="990.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="955.9" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="958.9" y="974.0"></text>
</g>
<g>
<title>ReplacedNodes::reset() (1 samples, 0.07%)</title><rect x="956.7" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.43%)</title><rect x="957.6" y="1011.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.43%)</title><rect x="957.6" y="995.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="957.6" y="979.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="957.6" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="957.6" y="947.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="957.6" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="957.6" y="915.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.6" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="957.6" y="899.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="957.6" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="957.6" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.6" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="957.6" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="957.6" y="835.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="957.6" y="819.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="960.6" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="957.6" y="803.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.6" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="957.6" y="787.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="957.6" y="771.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="957.6" y="755.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.6" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="957.6" y="739.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.36%)</title><rect x="958.4" y="979.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="961.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.36%)</title><rect x="958.4" y="963.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="931.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="961.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="915.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="961.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="867.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="851.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="961.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="835.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="961.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="819.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="961.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="707.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="675.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="961.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="595.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="961.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="563.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="961.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="531.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="515.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="961.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="483.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="961.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="467.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="451.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="961.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="435.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="961.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="419.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="403.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="387.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="371.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="355.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="961.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="958.4" y="339.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="961.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="959.3" y="947.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="959.3" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.3" y="942.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="959.3" y="915.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="960.1" y="931.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="960.1" y="915.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="960.1" y="899.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="960.1" y="883.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="963.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="960.1" y="867.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="963.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="960.1" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="960.1" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="960.1" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="963.1" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="960.1" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="851.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="835.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="819.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="803.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="787.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="771.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="755.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="739.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="964.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="723.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="707.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="675.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="659.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="643.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="627.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="611.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="595.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="579.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="964.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="563.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="547.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="531.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="515.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="964.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="499.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="964.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="483.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="467.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="451.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="435.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="419.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="961.0" y="403.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.0" y="414.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="961.0" y="387.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.8" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.8" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.8" y="851.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.8" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.8" y="819.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.8" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="961.8" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.8" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.14%)</title><rect x="962.7" y="1011.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.7" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="963.5" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (218 samples, 15.73%)</title><rect x="964.4" y="1011.0" width="185.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.4" y="1022.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="964.4" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.4" y="1006.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.14%)</title><rect x="965.2" y="995.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="968.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.51%)</title><rect x="966.9" y="995.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.9" y="1006.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="970.3" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.3" y="990.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="971.2" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.2" y="990.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="972.0" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.43%)</title><rect x="972.9" y="995.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="976.3" y="979.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.3" y="990.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.07%)</title><rect x="977.2" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (189 samples, 13.64%)</title><rect x="978.0" y="995.0" width="160.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.0" y="1006.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.14%)</title><rect x="984.0" y="979.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (180 samples, 12.99%)</title><rect x="985.7" y="979.0" width="153.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.7" y="990.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.51%)</title><rect x="989.1" y="963.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="995.0" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="998.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (168 samples, 12.12%)</title><rect x="995.9" y="963.0" width="143.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="998.9" y="974.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1123.6" y="947.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.6" y="958.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1123.6" y="931.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1126.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (15 samples, 1.08%)</title><rect x="1124.4" y="947.0" width="12.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1137.2" y="947.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1138.1" y="931.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.29%)</title><rect x="1138.9" y="995.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.14%)</title><rect x="1140.6" y="979.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.07%)</title><rect x="1142.3" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1142.3" y="979.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.36%)</title><rect x="1143.2" y="995.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.14%)</title><rect x="1144.0" y="979.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.07%)</title><rect x="1144.0" y="963.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.0" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1144.0" y="947.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.9" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.9" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1144.9" y="947.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1147.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.14%)</title><rect x="1145.7" y="979.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1145.7" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.07%)</title><rect x="1145.7" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1146.6" y="963.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1146.6" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.22%)</title><rect x="1147.4" y="995.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1147.4" y="979.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.4" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1147.4" y="963.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.4" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1147.4" y="947.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.4" y="958.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1149.1" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.1" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1149.1" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.1" y="958.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1149.1" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.1" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (22 samples, 1.59%)</title><rect x="1150.0" y="1011.0" width="18.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (22 samples, 1.59%)</title><rect x="1150.0" y="995.0" width="18.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.0" y="1006.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1150.0" y="979.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="990.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.0" y="963.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform(Node*) (1 samples, 0.07%)</title><rect x="1150.8" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.8" y="974.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1151.7" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="990.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1151.7" y="963.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.7" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.5" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.5" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1152.5" y="963.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.5" y="974.0"></text>
</g>
<g>
<title>MemNode::memory_size() const (1 samples, 0.07%)</title><rect x="1152.5" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="958.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1153.4" y="979.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.4" y="990.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1153.4" y="963.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.4" y="974.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1154.2" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="990.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1154.2" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1155.1" y="979.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.1" y="990.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.07%)</title><rect x="1156.8" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.36%)</title><rect x="1157.6" y="979.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.6" y="990.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1159.4" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.4" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.14%)</title><rect x="1160.2" y="963.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1161.9" y="979.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="990.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1162.8" y="963.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="974.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1163.6" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.6" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.22%)</title><rect x="1164.5" y="979.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.5" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1165.3" y="963.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="974.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1166.2" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.2" y="958.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1167.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="990.0"></text>
</g>
<g>
<title>URShiftLNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1167.9" y="979.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="990.0"></text>
</g>
<g>
<title>PhaseTransform::type(Node const*) const (1 samples, 0.07%)</title><rect x="1167.9" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (3 samples, 0.22%)</title><rect x="1168.7" y="1011.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (3 samples, 0.22%)</title><rect x="1168.7" y="995.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (2 samples, 0.14%)</title><rect x="1168.7" y="979.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.14%)</title><rect x="1168.7" y="963.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.4" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.3" y="1011.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1171.3" y="995.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1171.3" y="979.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.3" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1171.3" y="963.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.08%)</title><rect x="1172.1" y="1027.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.08%)</title><rect x="1172.1" y="1011.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.08%)</title><rect x="1172.1" y="995.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.08%)</title><rect x="1172.1" y="979.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.08%)</title><rect x="1172.1" y="963.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 1.08%)</title><rect x="1172.1" y="947.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.1" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.1" y="931.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.1" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.1" y="915.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.1" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.1" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.1" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.1" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.1" y="867.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.1" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.1" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.1" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.1" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.1" y="819.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.87%)</title><rect x="1173.0" y="931.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.87%)</title><rect x="1173.0" y="915.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.87%)</title><rect x="1173.0" y="899.0" width="10.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.87%)</title><rect x="1173.0" y="883.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.87%)</title><rect x="1173.0" y="867.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.87%)</title><rect x="1173.0" y="851.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.72%)</title><rect x="1173.0" y="835.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.72%)</title><rect x="1173.0" y="819.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.72%)</title><rect x="1173.0" y="803.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.72%)</title><rect x="1173.0" y="787.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.72%)</title><rect x="1173.0" y="771.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.65%)</title><rect x="1173.0" y="755.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.65%)</title><rect x="1173.0" y="739.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.65%)</title><rect x="1173.0" y="723.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.65%)</title><rect x="1173.0" y="707.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.65%)</title><rect x="1173.0" y="691.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.65%)</title><rect x="1173.0" y="675.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.58%)</title><rect x="1173.8" y="659.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.58%)</title><rect x="1173.8" y="643.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.58%)</title><rect x="1173.8" y="627.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.58%)</title><rect x="1173.8" y="611.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.58%)</title><rect x="1173.8" y="595.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.58%)</title><rect x="1173.8" y="579.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.51%)</title><rect x="1173.8" y="563.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1173.8" y="547.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1173.8" y="531.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1173.8" y="515.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1173.8" y="499.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1173.8" y="483.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1173.8" y="467.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="478.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1173.8" y="451.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.8" y="462.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1173.8" y="435.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1173.8" y="419.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1173.8" y="403.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1174.7" y="451.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1174.7" y="435.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1174.7" y="419.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1174.7" y="403.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1174.7" y="387.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="398.0"></text>
</g>
<g>
<title>Parse::array_store_check() (1 samples, 0.07%)</title><rect x="1174.7" y="371.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1174.7" y="355.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="366.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1174.7" y="339.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="350.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1174.7" y="323.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.5" y="371.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.5" y="355.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.5" y="339.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.5" y="323.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.5" y="307.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.5" y="291.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.5" y="275.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="286.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.5" y="259.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1175.5" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1175.5" y="227.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.5" y="211.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.5" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="206.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1175.5" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="190.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="163.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="174.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.5" y="147.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="158.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.07%)</title><rect x="1175.5" y="131.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="259.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="243.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.4" y="227.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.4" y="211.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.4" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.4" y="179.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.4" y="163.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.4" y="147.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.4" y="131.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.4" y="115.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.4" y="99.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1176.4" y="83.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="94.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.07%)</title><rect x="1176.4" y="67.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1176.4" y="51.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1176.4" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1177.2" y="547.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="531.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="515.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.2" y="499.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.2" y="483.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.2" y="467.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.2" y="451.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="435.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="419.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.2" y="403.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.2" y="387.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.2" y="371.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.2" y="355.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="339.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="323.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.2" y="307.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.2" y="291.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.2" y="275.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.2" y="259.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.2" y="243.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.2" y="227.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.2" y="211.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.2" y="195.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.2" y="179.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.2" y="163.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.2" y="147.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.2" y="131.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1177.2" y="115.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1177.2" y="99.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="110.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1178.1" y="195.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="206.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="179.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="190.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.07%)</title><rect x="1178.1" y="163.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="174.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1178.1" y="147.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="158.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.07%)</title><rect x="1178.1" y="131.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="142.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.07%)</title><rect x="1178.1" y="115.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="531.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="515.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="499.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="483.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="467.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="435.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="403.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="371.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="339.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="323.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="307.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="291.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="275.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="259.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="227.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.9" y="211.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="222.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.9" y="195.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="206.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.07%)</title><rect x="1178.9" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="190.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.07%)</title><rect x="1178.9" y="163.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="174.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.07%)</title><rect x="1178.9" y="147.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="158.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.9" y="131.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="142.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.9" y="115.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="563.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="547.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.8" y="531.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="515.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.8" y="499.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1179.8" y="483.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="467.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1179.8" y="451.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.6" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.6" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1180.6" y="723.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="734.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1180.6" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1180.6" y="691.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.6" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1180.6" y="659.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1180.6" y="643.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1183.6" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.5" y="835.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.5" y="819.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.5" y="803.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.5" y="787.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.5" y="771.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.5" y="755.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.5" y="739.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.5" y="723.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.5" y="707.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.5" y="691.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.5" y="675.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.5" y="659.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.5" y="643.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.5" y="627.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.5" y="611.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.5" y="595.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.5" y="579.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.5" y="563.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.5" y="547.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.5" y="531.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.5" y="515.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.5" y="499.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.5" y="483.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.5" y="467.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.5" y="451.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.5" y="435.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.5" y="419.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.5" y="403.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.5" y="387.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.5" y="371.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.5" y="355.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.5" y="339.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.5" y="323.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.5" y="307.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.5" y="291.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.5" y="275.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.5" y="259.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="243.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="227.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="211.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="195.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="179.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="163.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="147.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="131.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="115.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="99.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="83.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.5" y="67.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="78.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.07%)</title><rect x="1181.5" y="51.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="62.0"></text>
</g>
<g>
<title>TypeTuple::singleton() const (1 samples, 0.07%)</title><rect x="1181.5" y="35.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="243.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="227.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="211.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="195.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="179.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="163.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.3" y="147.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="131.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="115.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="99.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="110.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1182.3" y="83.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1182.3" y="67.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="78.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1182.3" y="51.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="931.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="915.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="899.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="883.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="867.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="851.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="835.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.2" y="819.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.2" y="803.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.2" y="787.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.2" y="771.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.2" y="755.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.2" y="739.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.2" y="723.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1183.2" y="707.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1183.2" y="691.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1183.2" y="675.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1183.2" y="659.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1183.2" y="643.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1183.2" y="627.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.2" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1183.2" y="611.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1183.2" y="595.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1183.2" y="579.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1183.2" y="563.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1183.2" y="547.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1183.2" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="542.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.07%)</title><rect x="1183.2" y="515.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="707.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="691.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="595.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="579.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="563.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="547.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="515.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="499.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="483.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="451.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="435.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="419.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="403.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="387.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="371.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="339.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="323.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="307.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="291.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="275.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="259.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="243.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="227.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="211.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="222.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.0" y="195.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="206.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1184.0" y="179.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="190.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1184.9" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="1038.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.9" y="1011.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.9" y="1022.0"></text>
</g>
<g>
<title>PhaseValues::PhaseValues(Arena*, unsigned int) (1 samples, 0.07%)</title><rect x="1185.7" y="1027.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="1038.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1185.7" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="1022.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1186.6" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.6" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1186.6" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1186.6" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1186.6" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="1038.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.4" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="1102.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.4" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="1086.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.4" y="1070.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.4" y="1043.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1190.4" y="1054.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1187.4" y="1027.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.4" y="1038.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.07%)</title><rect x="1187.4" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.07%)</title><rect x="1187.4" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.4" y="1006.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_object_value() (1 samples, 0.07%)</title><rect x="1187.4" y="979.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.4" y="990.0"></text>
</g>
<g>
<title>ObjectValue::read_object(DebugInfoReadStream*) (1 samples, 0.07%)</title><rect x="1187.4" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="974.0"></text>
</g>
<g>
<title>ScopeValue::read_from(DebugInfoReadStream*) (1 samples, 0.07%)</title><rect x="1187.4" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="958.0"></text>
</g>
<g>
<title>LocationValue::LocationValue(DebugInfoReadStream*) (1 samples, 0.07%)</title><rect x="1187.4" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.4" y="942.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.07%)</title><rect x="1187.4" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.4" y="926.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1188.3" y="1123.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="1134.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.3" y="1107.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="1118.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1188.3" y="1091.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.3" y="1102.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.1" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="1102.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.1" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="1086.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.1" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.1" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.1" y="1043.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.1" y="1027.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.1" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.07%)</title><rect x="1189.1" y="1011.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1022.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.07%)</title><rect x="1189.1" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="1006.0"></text>
</g>
<g>
<title>PtrQueueSet::enqueue_complete_buffer(void**, unsigned long) (1 samples, 0.07%)</title><rect x="1189.1" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.1" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="1189.1" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.1" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="1189.1" y="947.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="958.0"></text>
</g>
</g>
</svg>
