<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (185 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.54%)</title><rect x="10.0" y="883.0" width="6.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 15.14%)</title><rect x="16.4" y="883.0" width="178.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="894.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 15.14%)</title><rect x="16.4" y="867.0" width="178.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="878.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.54%)</title><rect x="16.4" y="851.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.54%)</title><rect x="16.4" y="835.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.54%)</title><rect x="16.4" y="819.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.54%)</title><rect x="16.4" y="803.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (20 samples, 10.81%)</title><rect x="22.8" y="851.0" width="127.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.8" y="862.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1631608305.accept (19 samples, 10.27%)</title><rect x="22.8" y="835.0" width="121.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.8" y="846.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 10.27%)</title><rect x="22.8" y="819.0" width="121.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.8" y="830.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (13 samples, 7.03%)</title><rect x="22.8" y="803.0" width="82.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.8" y="814.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (13 samples, 7.03%)</title><rect x="22.8" y="787.0" width="82.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.8" y="798.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (13 samples, 7.03%)</title><rect x="22.8" y="771.0" width="82.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="782.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (13 samples, 7.03%)</title><rect x="22.8" y="755.0" width="82.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.8" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 7.03%)</title><rect x="22.8" y="739.0" width="82.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.8" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (13 samples, 7.03%)</title><rect x="22.8" y="723.0" width="82.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.8" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 4.86%)</title><rect x="22.8" y="707.0" width="57.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.8" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 4.86%)</title><rect x="22.8" y="691.0" width="57.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="702.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 4.86%)</title><rect x="22.8" y="675.0" width="57.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.8" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 4.86%)</title><rect x="22.8" y="659.0" width="57.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.8" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 4.86%)</title><rect x="22.8" y="643.0" width="57.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.8" y="654.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (9 samples, 4.86%)</title><rect x="22.8" y="627.0" width="57.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="638.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 4.86%)</title><rect x="22.8" y="611.0" width="57.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="25.8" y="622.0">Unsafe..</text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 3.78%)</title><rect x="22.8" y="595.0" width="44.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="25.8" y="606.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.08%)</title><rect x="67.4" y="595.0" width="12.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="70.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 2.16%)</title><rect x="80.2" y="707.0" width="25.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="83.2" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 2.16%)</title><rect x="80.2" y="691.0" width="25.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="83.2" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 2.16%)</title><rect x="80.2" y="675.0" width="25.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.2" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.54%)</title><rect x="105.7" y="803.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.54%)</title><rect x="105.7" y="787.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.70%)</title><rect x="112.1" y="803.0" width="31.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.1" y="814.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.54%)</title><rect x="112.1" y="787.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.62%)</title><rect x="118.4" y="787.0" width="19.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="121.4" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.08%)</title><rect x="118.4" y="771.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.4" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.08%)</title><rect x="118.4" y="755.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.4" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.08%)</title><rect x="118.4" y="739.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.4" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.08%)</title><rect x="118.4" y="723.0" width="12.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="121.4" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="131.2" y="771.0" width="6.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="134.2" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="137.6" y="787.0" width="6.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="140.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.54%)</title><rect x="143.9" y="835.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.54%)</title><rect x="143.9" y="819.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.54%)</title><rect x="143.9" y="803.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.54%)</title><rect x="143.9" y="787.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.54%)</title><rect x="143.9" y="771.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.54%)</title><rect x="143.9" y="755.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.78%)</title><rect x="150.3" y="851.0" width="44.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.3" y="862.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.78%)</title><rect x="150.3" y="835.0" width="44.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.3" y="846.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.16%)</title><rect x="150.3" y="819.0" width="25.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.3" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.16%)</title><rect x="150.3" y="803.0" width="25.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.3" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.08%)</title><rect x="156.7" y="787.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.08%)</title><rect x="156.7" y="771.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.08%)</title><rect x="156.7" y="755.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.54%)</title><rect x="156.7" y="739.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.54%)</title><rect x="156.7" y="723.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.54%)</title><rect x="156.7" y="707.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.54%)</title><rect x="156.7" y="691.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.54%)</title><rect x="156.7" y="675.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.54%)</title><rect x="163.1" y="739.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.54%)</title><rect x="163.1" y="723.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.54%)</title><rect x="163.1" y="707.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.1" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.54%)</title><rect x="163.1" y="691.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.1" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.54%)</title><rect x="163.1" y="675.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.54%)</title><rect x="163.1" y="659.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.54%)</title><rect x="163.1" y="643.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.54%)</title><rect x="163.1" y="627.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.54%)</title><rect x="169.5" y="787.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="172.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.54%)</title><rect x="169.5" y="771.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.54%)</title><rect x="169.5" y="755.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.5" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.54%)</title><rect x="169.5" y="739.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.54%)</title><rect x="169.5" y="723.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.54%)</title><rect x="175.8" y="819.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.54%)</title><rect x="175.8" y="803.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.54%)</title><rect x="175.8" y="787.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.54%)</title><rect x="175.8" y="771.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.54%)</title><rect x="182.2" y="819.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.54%)</title><rect x="182.2" y="803.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.54%)</title><rect x="182.2" y="787.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.54%)</title><rect x="182.2" y="771.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.54%)</title><rect x="182.2" y="755.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.54%)</title><rect x="182.2" y="739.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.54%)</title><rect x="182.2" y="723.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.54%)</title><rect x="182.2" y="707.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.54%)</title><rect x="182.2" y="691.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.2" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.54%)</title><rect x="182.2" y="675.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.54%)</title><rect x="182.2" y="659.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.2" y="670.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.54%)</title><rect x="182.2" y="643.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="185.2" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.54%)</title><rect x="182.2" y="627.0" width="6.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="185.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.54%)</title><rect x="188.6" y="819.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.54%)</title><rect x="188.6" y="803.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.54%)</title><rect x="188.6" y="787.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1143691219.accept (1 samples, 0.54%)</title><rect x="188.6" y="771.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.54%)</title><rect x="188.6" y="755.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.54%)</title><rect x="188.6" y="739.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="191.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.54%)</title><rect x="188.6" y="723.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.54%)</title><rect x="188.6" y="707.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (60 samples, 32.43%)</title><rect x="195.0" y="883.0" width="382.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.0" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (60 samples, 32.43%)</title><rect x="195.0" y="867.0" width="382.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.0" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (60 samples, 32.43%)</title><rect x="195.0" y="851.0" width="382.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.0" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1583312751.run (37 samples, 20.00%)</title><rect x="207.7" y="835.0" width="236.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.7" y="846.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (37 samples, 20.00%)</title><rect x="207.7" y="819.0" width="236.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.7" y="830.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (37 samples, 20.00%)</title><rect x="207.7" y="803.0" width="236.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.7" y="814.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 19.46%)</title><rect x="207.7" y="787.0" width="229.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.7" y="798.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (17 samples, 9.19%)</title><rect x="207.7" y="771.0" width="108.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.7" y="782.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (17 samples, 9.19%)</title><rect x="207.7" y="755.0" width="108.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.7" y="766.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (17 samples, 9.19%)</title><rect x="207.7" y="739.0" width="108.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.7" y="750.0">com/linecorp/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="207.7" y="723.0" width="6.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="210.7" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="207.7" y="707.0" width="6.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="210.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 8.65%)</title><rect x="214.1" y="723.0" width="102.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.1" y="734.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 8.65%)</title><rect x="214.1" y="707.0" width="102.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.1" y="718.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 8.65%)</title><rect x="214.1" y="691.0" width="102.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.1" y="702.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.62%)</title><rect x="214.1" y="675.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.62%)</title><rect x="214.1" y="659.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.62%)</title><rect x="214.1" y="643.0" width="19.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.54%)</title><rect x="214.1" y="627.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="217.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.54%)</title><rect x="214.1" y="611.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.08%)</title><rect x="220.5" y="627.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.08%)</title><rect x="220.5" y="611.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 1.08%)</title><rect x="220.5" y="595.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 1.08%)</title><rect x="220.5" y="579.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (2 samples, 1.08%)</title><rect x="220.5" y="563.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 7.03%)</title><rect x="233.2" y="675.0" width="83.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.2" y="686.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 1.08%)</title><rect x="233.2" y="659.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.08%)</title><rect x="233.2" y="643.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.54%)</title><rect x="239.6" y="627.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.54%)</title><rect x="246.0" y="659.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 5.41%)</title><rect x="252.4" y="659.0" width="63.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.4" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.08%)</title><rect x="252.4" y="643.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="255.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 1.08%)</title><rect x="252.4" y="627.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 4.32%)</title><rect x="265.1" y="643.0" width="51.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.1" y="654.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 4.32%)</title><rect x="265.1" y="627.0" width="51.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.1" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 4.32%)</title><rect x="265.1" y="611.0" width="51.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.1" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 2.16%)</title><rect x="265.1" y="595.0" width="25.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.62%)</title><rect x="265.1" y="579.0" width="19.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.62%)</title><rect x="265.1" y="563.0" width="19.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.62%)</title><rect x="265.1" y="547.0" width="19.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.54%)</title><rect x="277.9" y="531.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.54%)</title><rect x="284.3" y="579.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.54%)</title><rect x="284.3" y="563.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.54%)</title><rect x="284.3" y="547.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.08%)</title><rect x="290.6" y="595.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 1.08%)</title><rect x="290.6" y="579.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.08%)</title><rect x="290.6" y="563.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.08%)</title><rect x="290.6" y="547.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 1.08%)</title><rect x="290.6" y="531.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.08%)</title><rect x="303.4" y="595.0" width="12.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.54%)</title><rect x="309.8" y="579.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="312.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.54%)</title><rect x="309.8" y="563.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.54%)</title><rect x="309.8" y="547.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.8" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.54%)</title><rect x="309.8" y="531.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.8" y="542.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.54%)</title><rect x="309.8" y="515.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.8" y="526.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.54%)</title><rect x="309.8" y="499.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.8" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (18 samples, 9.73%)</title><rect x="316.2" y="771.0" width="114.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.2" y="782.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (13 samples, 7.03%)</title><rect x="316.2" y="755.0" width="82.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.2" y="766.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (13 samples, 7.03%)</title><rect x="316.2" y="739.0" width="82.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.2" y="750.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.16%)</title><rect x="335.3" y="723.0" width="25.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.3" y="734.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.16%)</title><rect x="335.3" y="707.0" width="25.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.3" y="718.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.62%)</title><rect x="341.7" y="691.0" width="19.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.7" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.08%)</title><rect x="348.1" y="675.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.1" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.08%)</title><rect x="348.1" y="659.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.54%)</title><rect x="360.8" y="723.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.8" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.70%)</title><rect x="367.2" y="723.0" width="31.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.2" y="734.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.70%)</title><rect x="367.2" y="707.0" width="31.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.2" y="718.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.70%)</title><rect x="367.2" y="691.0" width="31.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.2" y="702.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.16%)</title><rect x="373.6" y="675.0" width="25.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="376.6" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.16%)</title><rect x="399.1" y="755.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="402.1" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.16%)</title><rect x="399.1" y="739.0" width="25.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.1" y="750.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="399.1" y="723.0" width="6.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="402.1" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="399.1" y="707.0" width="6.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="402.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/340408986.process (1 samples, 0.54%)</title><rect x="405.5" y="723.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.54%)</title><rect x="411.8" y="723.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.54%)</title><rect x="411.8" y="707.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.54%)</title><rect x="418.2" y="723.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.2" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.54%)</title><rect x="418.2" y="707.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.2" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.54%)</title><rect x="418.2" y="691.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="421.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.54%)</title><rect x="424.6" y="755.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.54%)</title><rect x="424.6" y="739.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.54%)</title><rect x="424.6" y="723.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/660358637.accept (1 samples, 0.54%)</title><rect x="424.6" y="707.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.54%)</title><rect x="424.6" y="691.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.54%)</title><rect x="424.6" y="675.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.6" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.54%)</title><rect x="424.6" y="659.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="427.6" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.54%)</title><rect x="424.6" y="643.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.6" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="424.6" y="627.0" width="6.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="427.6" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="424.6" y="611.0" width="6.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="427.6" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.54%)</title><rect x="431.0" y="771.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="434.0" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="431.0" y="755.0" width="6.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="434.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.54%)</title><rect x="437.4" y="787.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.54%)</title><rect x="437.4" y="771.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.4" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.54%)</title><rect x="437.4" y="755.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="440.4" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.54%)</title><rect x="437.4" y="739.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="440.4" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.54%)</title><rect x="437.4" y="723.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="440.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.54%)</title><rect x="437.4" y="707.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="440.4" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.54%)</title><rect x="437.4" y="691.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="440.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.54%)</title><rect x="437.4" y="675.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="440.4" y="686.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.54%)</title><rect x="437.4" y="659.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="440.4" y="670.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.54%)</title><rect x="437.4" y="643.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="440.4" y="654.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.54%)</title><rect x="437.4" y="627.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="440.4" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.08%)</title><rect x="443.7" y="835.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.08%)</title><rect x="443.7" y="819.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.7" y="830.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.54%)</title><rect x="450.1" y="803.0" width="6.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="453.1" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (1 samples, 0.54%)</title><rect x="450.1" y="787.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="453.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.54%)</title><rect x="456.5" y="835.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.54%)</title><rect x="456.5" y="819.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.54%)</title><rect x="456.5" y="803.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.08%)</title><rect x="462.9" y="835.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.08%)</title><rect x="462.9" y="819.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.08%)</title><rect x="462.9" y="803.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.08%)</title><rect x="462.9" y="787.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 1.08%)</title><rect x="462.9" y="771.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="465.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 8.11%)</title><rect x="475.6" y="835.0" width="95.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.6" y="846.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 7.57%)</title><rect x="482.0" y="819.0" width="89.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.0" y="830.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 6.49%)</title><rect x="482.0" y="803.0" width="76.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.0" y="814.0">java/uti..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.08%)</title><rect x="488.4" y="787.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 4.86%)</title><rect x="501.1" y="787.0" width="57.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.1" y="798.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 4.86%)</title><rect x="501.1" y="771.0" width="57.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.1" y="782.0">sun/mi..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.54%)</title><rect x="501.1" y="755.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="504.1" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (8 samples, 4.32%)</title><rect x="507.5" y="755.0" width="51.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="510.5" y="766.0">Unsaf..</text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 2.16%)</title><rect x="507.5" y="739.0" width="25.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="510.5" y="750.0">P..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.54%)</title><rect x="526.6" y="723.0" width="6.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="529.6" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.08%)</title><rect x="533.0" y="739.0" width="12.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="536.0" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.54%)</title><rect x="545.8" y="739.0" width="6.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="548.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.54%)</title><rect x="552.2" y="739.0" width="6.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="555.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.08%)</title><rect x="558.5" y="803.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="561.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.08%)</title><rect x="558.5" y="787.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.08%)</title><rect x="558.5" y="771.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="561.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.08%)</title><rect x="558.5" y="755.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="561.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.54%)</title><rect x="571.3" y="835.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="574.3" y="846.0"></text>
</g>
<g>
<title>start_thread (95 samples, 51.35%)</title><rect x="577.7" y="883.0" width="605.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="580.7" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (95 samples, 51.35%)</title><rect x="577.7" y="867.0" width="605.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="580.7" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 8.11%)</title><rect x="577.7" y="851.0" width="95.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="580.7" y="862.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.08%)</title><rect x="577.7" y="835.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="580.7" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.08%)</title><rect x="577.7" y="819.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="580.7" y="830.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 1.08%)</title><rect x="577.7" y="803.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="580.7" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 7.03%)</title><rect x="590.4" y="835.0" width="83.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="593.4" y="846.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 5.95%)</title><rect x="590.4" y="819.0" width="70.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="593.4" y="830.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.08%)</title><rect x="590.4" y="803.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="593.4" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.54%)</title><rect x="596.8" y="787.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.8" y="798.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.54%)</title><rect x="596.8" y="771.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="599.8" y="782.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.54%)</title><rect x="596.8" y="755.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="599.8" y="766.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 2.16%)</title><rect x="603.2" y="803.0" width="25.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="606.2" y="814.0">P..</text>
</g>
<g>
<title>SpinPause (5 samples, 2.70%)</title><rect x="628.7" y="803.0" width="31.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="631.7" y="814.0">Sp..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.08%)</title><rect x="660.6" y="819.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="663.6" y="830.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 1.08%)</title><rect x="660.6" y="803.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.6" y="814.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (2 samples, 1.08%)</title><rect x="660.6" y="787.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.6" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 1.08%)</title><rect x="660.6" y="771.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="663.6" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.08%)</title><rect x="660.6" y="755.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="663.6" y="766.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (80 samples, 43.24%)</title><rect x="673.4" y="851.0" width="510.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="676.4" y="862.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (80 samples, 43.24%)</title><rect x="673.4" y="835.0" width="510.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="676.4" y="846.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (80 samples, 43.24%)</title><rect x="673.4" y="819.0" width="510.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="676.4" y="830.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 42.16%)</title><rect x="673.4" y="803.0" width="497.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="676.4" y="814.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 42.16%)</title><rect x="673.4" y="787.0" width="497.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="676.4" y="798.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (34 samples, 18.38%)</title><rect x="673.4" y="771.0" width="216.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="676.4" y="782.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.62%)</title><rect x="673.4" y="755.0" width="19.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="676.4" y="766.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.08%)</title><rect x="673.4" y="739.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="676.4" y="750.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.54%)</title><rect x="679.7" y="723.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="682.7" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.54%)</title><rect x="686.1" y="739.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="689.1" y="750.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.54%)</title><rect x="686.1" y="723.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="689.1" y="734.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.54%)</title><rect x="686.1" y="707.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="689.1" y="718.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.54%)</title><rect x="686.1" y="691.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="689.1" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.08%)</title><rect x="692.5" y="755.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="695.5" y="766.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.54%)</title><rect x="692.5" y="739.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="695.5" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.54%)</title><rect x="698.9" y="739.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="701.9" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.54%)</title><rect x="698.9" y="723.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="701.9" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.54%)</title><rect x="698.9" y="707.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="701.9" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.54%)</title><rect x="698.9" y="691.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="701.9" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.54%)</title><rect x="698.9" y="675.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="701.9" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.08%)</title><rect x="705.2" y="755.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="708.2" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.54%)</title><rect x="705.2" y="739.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.2" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.54%)</title><rect x="711.6" y="739.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="714.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 14.59%)</title><rect x="718.0" y="755.0" width="172.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.0" y="766.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.54%)</title><rect x="718.0" y="739.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="721.0" y="750.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.54%)</title><rect x="724.4" y="739.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="727.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.08%)</title><rect x="730.8" y="739.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.08%)</title><rect x="730.8" y="723.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="733.8" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="737.1" y="707.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="740.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.54%)</title><rect x="743.5" y="739.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="746.5" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.54%)</title><rect x="743.5" y="723.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.16%)</title><rect x="749.9" y="739.0" width="25.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="752.9" y="750.0">P..</text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.54%)</title><rect x="769.0" y="723.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="772.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.24%)</title><rect x="775.4" y="739.0" width="38.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="778.4" y="750.0">Pha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.54%)</title><rect x="781.8" y="723.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="784.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.16%)</title><rect x="788.2" y="723.0" width="25.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="791.2" y="734.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.54%)</title><rect x="813.7" y="739.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.54%)</title><rect x="813.7" y="723.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.7" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="813.7" y="707.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.62%)</title><rect x="820.1" y="739.0" width="19.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.1" y="750.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.54%)</title><rect x="832.8" y="723.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.08%)</title><rect x="839.2" y="739.0" width="12.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="842.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.54%)</title><rect x="845.6" y="723.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="848.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.54%)</title><rect x="845.6" y="707.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="848.6" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.54%)</title><rect x="845.6" y="691.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="848.6" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.54%)</title><rect x="851.9" y="739.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="854.9" y="750.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.54%)</title><rect x="851.9" y="723.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.9" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.54%)</title><rect x="858.3" y="739.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="861.3" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.08%)</title><rect x="864.7" y="739.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="867.7" y="750.0"></text>
</g>
<g>
<title>loadNNode::oper_input_base() const (1 samples, 0.54%)</title><rect x="877.5" y="739.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.5" y="750.0"></text>
</g>
<g>
<title>xorL_rRegNode::use_cisc_RegMask() (1 samples, 0.54%)</title><rect x="883.8" y="739.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.8" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 16.76%)</title><rect x="890.2" y="771.0" width="197.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="893.2" y="782.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.54%)</title><rect x="890.2" y="755.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.54%)</title><rect x="890.2" y="739.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="893.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="723.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="893.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="707.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="893.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="691.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="675.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="659.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="893.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="643.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="893.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="627.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="893.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="611.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="893.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.54%)</title><rect x="890.2" y="595.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.2" y="606.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.54%)</title><rect x="896.6" y="755.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.6" y="766.0"></text>
</g>
<g>
<title>Type::widen(Type const*, Type const*) const (1 samples, 0.54%)</title><rect x="896.6" y="739.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.6" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.54%)</title><rect x="903.0" y="755.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="906.0" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.54%)</title><rect x="903.0" y="739.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="906.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (21 samples, 11.35%)</title><rect x="909.4" y="755.0" width="133.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="912.4" y="766.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 2.16%)</title><rect x="909.4" y="739.0" width="25.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.4" y="750.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.08%)</title><rect x="934.9" y="739.0" width="12.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 6.49%)</title><rect x="947.6" y="739.0" width="76.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.6" y="750.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 5.41%)</title><rect x="960.4" y="723.0" width="63.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.4" y="734.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 3.24%)</title><rect x="973.1" y="707.0" width="38.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.1" y="718.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 2.70%)</title><rect x="979.5" y="691.0" width="31.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.5" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.08%)</title><rect x="1011.4" y="707.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.08%)</title><rect x="1024.2" y="739.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.2" y="750.0"></text>
</g>
<g>
<title>Node_List::Node_List() (1 samples, 0.54%)</title><rect x="1024.2" y="723.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1027.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.54%)</title><rect x="1030.5" y="723.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.54%)</title><rect x="1036.9" y="739.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.54%)</title><rect x="1036.9" y="723.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.54%)</title><rect x="1036.9" y="707.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.9" y="718.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.54%)</title><rect x="1036.9" y="691.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.9" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.70%)</title><rect x="1043.3" y="755.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.3" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.70%)</title><rect x="1043.3" y="739.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.3" y="750.0">Ph..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 1.08%)</title><rect x="1049.7" y="723.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.7" y="734.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 1.08%)</title><rect x="1049.7" y="707.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1052.7" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 1.08%)</title><rect x="1049.7" y="691.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.7" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 1.08%)</title><rect x="1049.7" y="675.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.7" y="686.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1062.4" y="723.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.54%)</title><rect x="1062.4" y="707.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.4" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="691.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="675.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="659.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.4" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="643.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.4" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="627.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.4" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="611.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.4" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="595.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.4" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="579.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.4" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.54%)</title><rect x="1062.4" y="563.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1065.4" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="1062.4" y="547.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.4" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="1068.8" y="723.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.8" y="734.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.54%)</title><rect x="1068.8" y="707.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.8" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.54%)</title><rect x="1075.2" y="755.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.2" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.54%)</title><rect x="1075.2" y="739.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.54%)</title><rect x="1075.2" y="723.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.2" y="734.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1075.2" y="707.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.2" y="718.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.54%)</title><rect x="1075.2" y="691.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.2" y="702.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.54%)</title><rect x="1081.6" y="755.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.6" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.54%)</title><rect x="1081.6" y="739.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.6" y="750.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.54%)</title><rect x="1081.6" y="723.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 7.03%)</title><rect x="1087.9" y="771.0" width="83.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.9" y="782.0">ParseGene..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 7.03%)</title><rect x="1087.9" y="755.0" width="83.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.9" y="766.0">Parse::Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 7.03%)</title><rect x="1087.9" y="739.0" width="83.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.9" y="750.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 7.03%)</title><rect x="1087.9" y="723.0" width="83.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.9" y="734.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 7.03%)</title><rect x="1087.9" y="707.0" width="83.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.9" y="718.0">Parse::do..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.54%)</title><rect x="1087.9" y="691.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.9" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1087.9" y="675.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.9" y="686.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1087.9" y="659.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.9" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1087.9" y="643.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.54%)</title><rect x="1087.9" y="627.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.9" y="638.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.54%)</title><rect x="1087.9" y="611.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 6.49%)</title><rect x="1094.3" y="691.0" width="76.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.3" y="702.0">Parse::d..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1094.3" y="675.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.3" y="686.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.54%)</title><rect x="1094.3" y="659.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.3" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1094.3" y="643.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.3" y="654.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.54%)</title><rect x="1094.3" y="627.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.41%)</title><rect x="1100.7" y="675.0" width="63.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.7" y="686.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.41%)</title><rect x="1100.7" y="659.0" width="63.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.7" y="670.0">Parse::..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.54%)</title><rect x="1100.7" y="643.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.7" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.54%)</title><rect x="1100.7" y="627.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.7" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.54%)</title><rect x="1100.7" y="611.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1100.7" y="595.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1100.7" y="579.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.7" y="590.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1100.7" y="563.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.7" y="574.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.54%)</title><rect x="1100.7" y="547.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.7" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.54%)</title><rect x="1100.7" y="531.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.7" y="542.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, char const*, Thread*) (1 samples, 0.54%)</title><rect x="1100.7" y="515.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.7" y="526.0"></text>
</g>
<g>
<title>BarrierSet::obj_equals(oopDesc*, oopDesc*) (1 samples, 0.54%)</title><rect x="1100.7" y="499.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 4.86%)</title><rect x="1107.1" y="643.0" width="57.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.1" y="654.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 4.86%)</title><rect x="1107.1" y="627.0" width="57.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.1" y="638.0">Parse:..</text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.54%)</title><rect x="1107.1" y="611.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.32%)</title><rect x="1113.5" y="611.0" width="51.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.5" y="622.0">Parse..</text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1113.5" y="595.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.24%)</title><rect x="1119.8" y="595.0" width="38.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.8" y="606.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1119.8" y="579.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.8" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1119.8" y="563.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.8" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1119.8" y="547.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.8" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1119.8" y="531.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.8" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.54%)</title><rect x="1119.8" y="515.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.8" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1119.8" y="499.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1119.8" y="483.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1119.8" y="467.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.54%)</title><rect x="1119.8" y="451.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.8" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.54%)</title><rect x="1119.8" y="435.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1119.8" y="419.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1119.8" y="403.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="414.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1119.8" y="387.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.8" y="398.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.54%)</title><rect x="1119.8" y="371.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="382.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.54%)</title><rect x="1119.8" y="355.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.8" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.54%)</title><rect x="1119.8" y="339.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.8" y="350.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.54%)</title><rect x="1119.8" y="323.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.8" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.54%)</title><rect x="1119.8" y="307.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.54%)</title><rect x="1119.8" y="291.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="302.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.54%)</title><rect x="1119.8" y="275.0" width="6.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1122.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.70%)</title><rect x="1126.2" y="579.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.2" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.70%)</title><rect x="1126.2" y="563.0" width="31.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.2" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.70%)</title><rect x="1126.2" y="547.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.2" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.70%)</title><rect x="1126.2" y="531.0" width="31.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.2" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.70%)</title><rect x="1126.2" y="515.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.16%)</title><rect x="1126.2" y="499.0" width="25.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="510.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.16%)</title><rect x="1126.2" y="483.0" width="25.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="494.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.16%)</title><rect x="1126.2" y="467.0" width="25.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.16%)</title><rect x="1126.2" y="451.0" width="25.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.16%)</title><rect x="1126.2" y="435.0" width="25.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.2" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.16%)</title><rect x="1126.2" y="419.0" width="25.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.2" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.16%)</title><rect x="1126.2" y="403.0" width="25.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="414.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.16%)</title><rect x="1126.2" y="387.0" width="25.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.2" y="398.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.16%)</title><rect x="1126.2" y="371.0" width="25.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.2" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.16%)</title><rect x="1126.2" y="355.0" width="25.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.2" y="366.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.16%)</title><rect x="1126.2" y="339.0" width="25.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.2" y="350.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.16%)</title><rect x="1126.2" y="323.0" width="25.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="334.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.62%)</title><rect x="1126.2" y="307.0" width="19.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.62%)</title><rect x="1126.2" y="291.0" width="19.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.62%)</title><rect x="1126.2" y="275.0" width="19.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.2" y="286.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.54%)</title><rect x="1126.2" y="259.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.2" y="270.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.54%)</title><rect x="1126.2" y="243.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.2" y="254.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.54%)</title><rect x="1126.2" y="227.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.08%)</title><rect x="1132.6" y="259.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.08%)</title><rect x="1132.6" y="243.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.08%)</title><rect x="1132.6" y="227.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.08%)</title><rect x="1132.6" y="211.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.6" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1132.6" y="195.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.6" y="206.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1132.6" y="179.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.6" y="190.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1132.6" y="163.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.6" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.54%)</title><rect x="1132.6" y="147.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.6" y="158.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.54%)</title><rect x="1132.6" y="131.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.6" y="142.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.54%)</title><rect x="1132.6" y="115.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.6" y="126.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.54%)</title><rect x="1132.6" y="99.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.6" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1139.0" y="195.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1139.0" y="179.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1139.0" y="163.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1139.0" y="147.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1139.0" y="131.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1139.0" y="115.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.0" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1139.0" y="99.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1139.0" y="83.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.54%)</title><rect x="1139.0" y="67.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.0" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1139.0" y="51.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.0" y="62.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1139.0" y="35.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.54%)</title><rect x="1145.4" y="307.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.54%)</title><rect x="1145.4" y="291.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.4" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1145.4" y="275.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="286.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.54%)</title><rect x="1145.4" y="259.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.54%)</title><rect x="1151.7" y="499.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.7" y="510.0"></text>
</g>
<g>
<title>Parse::merge(int) (1 samples, 0.54%)</title><rect x="1151.7" y="483.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.54%)</title><rect x="1158.1" y="595.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.1" y="606.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.54%)</title><rect x="1158.1" y="579.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.1" y="590.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.54%)</title><rect x="1158.1" y="563.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="574.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.54%)</title><rect x="1158.1" y="547.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.1" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1164.5" y="675.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1164.5" y="659.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1164.5" y="643.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1164.5" y="627.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1164.5" y="611.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1164.5" y="595.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1164.5" y="579.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1164.5" y="563.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1164.5" y="547.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1164.5" y="531.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1164.5" y="515.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1164.5" y="499.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1164.5" y="483.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.54%)</title><rect x="1164.5" y="467.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.54%)</title><rect x="1164.5" y="451.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="462.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.54%)</title><rect x="1164.5" y="435.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="446.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.54%)</title><rect x="1164.5" y="419.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.5" y="430.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.54%)</title><rect x="1164.5" y="403.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.5" y="414.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.54%)</title><rect x="1164.5" y="387.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="398.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.54%)</title><rect x="1164.5" y="371.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="382.0"></text>
</g>
<g>
<title>IdealKit::delay_transform(Node*) (1 samples, 0.54%)</title><rect x="1164.5" y="355.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="366.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.08%)</title><rect x="1170.9" y="803.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.9" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.08%)</title><rect x="1170.9" y="787.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.08%)</title><rect x="1170.9" y="771.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.9" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.08%)</title><rect x="1170.9" y="755.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.08%)</title><rect x="1170.9" y="739.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.9" y="750.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.54%)</title><rect x="1170.9" y="723.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="734.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.54%)</title><rect x="1170.9" y="707.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::do_NewInstance(NewInstance*) (1 samples, 0.54%)</title><rect x="1170.9" y="691.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.54%)</title><rect x="1170.9" y="675.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="686.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.54%)</title><rect x="1170.9" y="659.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="670.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.54%)</title><rect x="1170.9" y="643.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="654.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.54%)</title><rect x="1170.9" y="627.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.9" y="638.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.54%)</title><rect x="1170.9" y="611.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="622.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.54%)</title><rect x="1177.2" y="723.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="734.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.54%)</title><rect x="1177.2" y="707.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.54%)</title><rect x="1183.6" y="883.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1186.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.54%)</title><rect x="1183.6" y="867.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1186.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.54%)</title><rect x="1183.6" y="851.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1186.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.54%)</title><rect x="1183.6" y="835.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1186.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.54%)</title><rect x="1183.6" y="819.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
</g>
</svg>
