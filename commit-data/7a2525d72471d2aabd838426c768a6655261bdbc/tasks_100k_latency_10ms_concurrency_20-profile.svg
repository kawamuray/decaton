<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="869"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="869"> </text>
<g id="frames">
<g>
<title>all (208 samples, 100.00%)</title><rect x="10.0" y="835.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="846.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 7.69%)</title><rect x="10.0" y="819.0" width="90.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="830.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.96%)</title><rect x="10.0" y="803.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.96%)</title><rect x="10.0" y="787.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.96%)</title><rect x="10.0" y="771.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.96%)</title><rect x="10.0" y="755.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.96%)</title><rect x="10.0" y="739.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.96%)</title><rect x="10.0" y="723.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.96%)</title><rect x="10.0" y="707.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.48%)</title><rect x="10.0" y="691.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.48%)</title><rect x="15.7" y="691.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.48%)</title><rect x="15.7" y="675.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.48%)</title><rect x="15.7" y="659.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.7" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.48%)</title><rect x="15.7" y="643.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.48%)</title><rect x="15.7" y="627.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.48%)</title><rect x="15.7" y="611.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.48%)</title><rect x="15.7" y="595.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.48%)</title><rect x="15.7" y="579.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.48%)</title><rect x="15.7" y="563.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (14 samples, 6.73%)</title><rect x="21.3" y="803.0" width="79.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="814.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.48%)</title><rect x="21.3" y="787.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.48%)</title><rect x="21.3" y="771.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/679415268.accept (1 samples, 0.48%)</title><rect x="21.3" y="755.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.48%)</title><rect x="21.3" y="739.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.48%)</title><rect x="21.3" y="723.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.48%)</title><rect x="21.3" y="707.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.48%)</title><rect x="21.3" y="691.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.48%)</title><rect x="27.0" y="787.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.48%)</title><rect x="27.0" y="771.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.92%)</title><rect x="32.7" y="787.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.7" y="798.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/422209909.accept (4 samples, 1.92%)</title><rect x="32.7" y="771.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.7" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (4 samples, 1.92%)</title><rect x="32.7" y="755.0" width="22.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.7" y="766.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="32.7" y="739.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="35.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="32.7" y="723.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="35.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.48%)</title><rect x="32.7" y="707.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="35.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="32.7" y="691.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="35.7" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.48%)</title><rect x="32.7" y="675.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="35.7" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.48%)</title><rect x="32.7" y="659.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="35.7" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.48%)</title><rect x="32.7" y="643.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="35.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.48%)</title><rect x="32.7" y="627.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="35.7" y="638.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.48%)</title><rect x="32.7" y="611.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="35.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.48%)</title><rect x="38.4" y="739.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.48%)</title><rect x="38.4" y="723.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.48%)</title><rect x="38.4" y="707.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.48%)</title><rect x="38.4" y="691.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.48%)</title><rect x="38.4" y="675.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.48%)</title><rect x="38.4" y="659.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.48%)</title><rect x="44.0" y="739.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.48%)</title><rect x="44.0" y="723.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.48%)</title><rect x="44.0" y="707.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.48%)</title><rect x="49.7" y="739.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.48%)</title><rect x="49.7" y="723.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.85%)</title><rect x="55.4" y="787.0" width="45.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.4" y="798.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.85%)</title><rect x="55.4" y="771.0" width="45.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.4" y="782.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.85%)</title><rect x="55.4" y="755.0" width="45.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.4" y="766.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.40%)</title><rect x="55.4" y="739.0" width="28.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.4" y="750.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.40%)</title><rect x="55.4" y="723.0" width="28.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.4" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.48%)</title><rect x="55.4" y="707.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="58.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.48%)</title><rect x="55.4" y="691.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.4" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.48%)</title><rect x="55.4" y="675.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$73/518143474.get (1 samples, 0.48%)</title><rect x="55.4" y="659.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="58.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.96%)</title><rect x="61.1" y="707.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.96%)</title><rect x="61.1" y="691.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.48%)</title><rect x="61.1" y="675.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.48%)</title><rect x="66.7" y="675.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.48%)</title><rect x="66.7" y="659.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.7" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.48%)</title><rect x="66.7" y="643.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.7" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.48%)</title><rect x="66.7" y="627.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.48%)</title><rect x="66.7" y="611.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.48%)</title><rect x="66.7" y="595.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.7" y="606.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.48%)</title><rect x="66.7" y="579.0" width="5.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="69.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/572551754.shouldBlock (1 samples, 0.48%)</title><rect x="72.4" y="707.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.48%)</title><rect x="72.4" y="691.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.48%)</title><rect x="72.4" y="675.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.48%)</title><rect x="72.4" y="659.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.48%)</title><rect x="72.4" y="643.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.48%)</title><rect x="72.4" y="627.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.48%)</title><rect x="72.4" y="611.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.48%)</title><rect x="72.4" y="595.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.48%)</title><rect x="72.4" y="579.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.48%)</title><rect x="72.4" y="563.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.48%)</title><rect x="72.4" y="547.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.48%)</title><rect x="72.4" y="531.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.48%)</title><rect x="78.1" y="707.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.48%)</title><rect x="78.1" y="691.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.48%)</title><rect x="78.1" y="675.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.48%)</title><rect x="78.1" y="659.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.48%)</title><rect x="78.1" y="643.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.48%)</title><rect x="78.1" y="627.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.48%)</title><rect x="78.1" y="611.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.48%)</title><rect x="78.1" y="595.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.48%)</title><rect x="78.1" y="579.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.48%)</title><rect x="78.1" y="563.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.48%)</title><rect x="78.1" y="547.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.48%)</title><rect x="78.1" y="531.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.44%)</title><rect x="83.8" y="739.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.44%)</title><rect x="83.8" y="723.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.44%)</title><rect x="83.8" y="707.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.44%)</title><rect x="83.8" y="691.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.48%)</title><rect x="89.4" y="675.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.48%)</title><rect x="95.1" y="675.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.48%)</title><rect x="95.1" y="659.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.48%)</title><rect x="95.1" y="643.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.1" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.48%)</title><rect x="95.1" y="627.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.1" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.48%)</title><rect x="95.1" y="611.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (158 samples, 75.96%)</title><rect x="100.8" y="819.0" width="896.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.8" y="830.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (158 samples, 75.96%)</title><rect x="100.8" y="803.0" width="896.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.8" y="814.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (158 samples, 75.96%)</title><rect x="100.8" y="787.0" width="896.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.8" y="798.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1798090716.run (148 samples, 71.15%)</title><rect x="123.5" y="771.0" width="839.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.5" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1798090716.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50 (148 samples, 71.15%)</title><rect x="123.5" y="755.0" width="839.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.5" y="766.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (148 samples, 71.15%)</title><rect x="123.5" y="739.0" width="839.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.5" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (144 samples, 69.23%)</title><rect x="123.5" y="723.0" width="816.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.5" y="734.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 17.31%)</title><rect x="129.1" y="707.0" width="204.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.1" y="718.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (36 samples, 17.31%)</title><rect x="129.1" y="691.0" width="204.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.1" y="702.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (36 samples, 17.31%)</title><rect x="129.1" y="675.0" width="204.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.1" y="686.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 16.83%)</title><rect x="129.1" y="659.0" width="198.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.1" y="670.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 16.83%)</title><rect x="129.1" y="643.0" width="198.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.1" y="654.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (35 samples, 16.83%)</title><rect x="129.1" y="627.0" width="198.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.1" y="638.0">com/fasterxml/jackson/data..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 6.25%)</title><rect x="129.1" y="611.0" width="73.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.1" y="622.0">com/fast..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="134.8" y="595.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="137.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="134.8" y="579.0" width="5.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="137.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.48%)</title><rect x="140.5" y="595.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.48%)</title><rect x="140.5" y="579.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="143.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.48%)</title><rect x="140.5" y="563.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.48%)</title><rect x="140.5" y="547.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.48%)</title><rect x="140.5" y="531.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.48%)</title><rect x="140.5" y="515.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 4.33%)</title><rect x="146.2" y="595.0" width="51.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.2" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.88%)</title><rect x="163.2" y="579.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.2" y="590.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="163.2" y="563.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="166.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="163.2" y="547.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="166.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.48%)</title><rect x="163.2" y="531.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="163.2" y="515.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="166.2" y="526.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.48%)</title><rect x="163.2" y="499.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="166.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.44%)</title><rect x="168.8" y="563.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.8" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.48%)</title><rect x="168.8" y="547.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="171.8" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.48%)</title><rect x="168.8" y="531.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="171.8" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="168.8" y="515.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="171.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.96%)</title><rect x="174.5" y="547.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.96%)</title><rect x="185.9" y="563.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.96%)</title><rect x="185.9" y="547.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.96%)</title><rect x="185.9" y="531.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.9" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.96%)</title><rect x="185.9" y="515.0" width="11.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="188.9" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.96%)</title><rect x="185.9" y="499.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="188.9" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.96%)</title><rect x="185.9" y="483.0" width="11.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="188.9" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="191.5" y="467.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="194.5" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.48%)</title><rect x="197.2" y="595.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="200.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 10.58%)</title><rect x="202.9" y="611.0" width="124.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.9" y="622.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 1.92%)</title><rect x="202.9" y="595.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.9" y="606.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.92%)</title><rect x="202.9" y="579.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.9" y="590.0">j..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 1.92%)</title><rect x="202.9" y="563.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.9" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.44%)</title><rect x="225.6" y="595.0" width="17.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.44%)</title><rect x="225.6" y="579.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.44%)</title><rect x="225.6" y="563.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 1.44%)</title><rect x="225.6" y="547.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.48%)</title><rect x="236.9" y="531.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 1.44%)</title><rect x="242.6" y="595.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.48%)</title><rect x="242.6" y="579.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.96%)</title><rect x="248.3" y="579.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 5.77%)</title><rect x="259.6" y="595.0" width="68.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.6" y="606.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.88%)</title><rect x="259.6" y="579.0" width="34.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.6" y="590.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.44%)</title><rect x="265.3" y="563.0" width="17.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.44%)</title><rect x="265.3" y="547.0" width="17.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.44%)</title><rect x="265.3" y="531.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.96%)</title><rect x="282.3" y="563.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.88%)</title><rect x="293.7" y="579.0" width="34.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.7" y="590.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.88%)</title><rect x="293.7" y="563.0" width="34.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.7" y="574.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.88%)</title><rect x="293.7" y="547.0" width="34.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.7" y="558.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.44%)</title><rect x="305.0" y="531.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.48%)</title><rect x="316.3" y="515.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.48%)</title><rect x="316.3" y="499.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.48%)</title><rect x="316.3" y="483.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.48%)</title><rect x="322.0" y="531.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.48%)</title><rect x="322.0" y="515.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.48%)</title><rect x="322.0" y="499.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.48%)</title><rect x="322.0" y="483.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.0" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.48%)</title><rect x="322.0" y="467.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.48%)</title><rect x="322.0" y="451.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.48%)</title><rect x="327.7" y="659.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="327.7" y="643.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="330.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="327.7" y="627.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="330.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.48%)</title><rect x="327.7" y="611.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="330.7" y="622.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.48%)</title><rect x="327.7" y="595.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="330.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (103 samples, 49.52%)</title><rect x="333.4" y="707.0" width="584.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.4" y="718.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 8.17%)</title><rect x="339.0" y="691.0" width="96.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.0" y="702.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.96%)</title><rect x="356.1" y="675.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.1" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 5.77%)</title><rect x="367.4" y="675.0" width="68.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.4" y="686.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 4.33%)</title><rect x="384.4" y="659.0" width="51.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.4" y="670.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.96%)</title><rect x="384.4" y="643.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.48%)</title><rect x="390.1" y="627.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.48%)</title><rect x="390.1" y="611.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.48%)</title><rect x="390.1" y="595.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.48%)</title><rect x="395.8" y="643.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.48%)</title><rect x="395.8" y="627.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.48%)</title><rect x="395.8" y="611.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.88%)</title><rect x="401.4" y="643.0" width="34.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.4" y="654.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 2.40%)</title><rect x="407.1" y="627.0" width="28.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.1" y="638.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 2.40%)</title><rect x="407.1" y="611.0" width="28.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.1" y="622.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.48%)</title><rect x="429.8" y="595.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="432.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.92%)</title><rect x="435.5" y="691.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.5" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.92%)</title><rect x="435.5" y="675.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.5" y="686.0">c..</text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 1.92%)</title><rect x="435.5" y="659.0" width="22.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="438.5" y="670.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (23 samples, 11.06%)</title><rect x="458.2" y="691.0" width="130.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.2" y="702.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 10.58%)</title><rect x="458.2" y="675.0" width="124.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="461.2" y="686.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 5.29%)</title><rect x="463.8" y="659.0" width="62.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.8" y="670.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 3.85%)</title><rect x="475.2" y="643.0" width="45.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.2" y="654.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.40%)</title><rect x="480.9" y="627.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="483.9" y="638.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.44%)</title><rect x="492.2" y="611.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.2" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.44%)</title><rect x="492.2" y="595.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.2" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.44%)</title><rect x="492.2" y="579.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="495.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.44%)</title><rect x="492.2" y="563.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="495.2" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 1.44%)</title><rect x="492.2" y="547.0" width="17.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="495.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 1.44%)</title><rect x="492.2" y="531.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="495.2" y="542.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.48%)</title><rect x="492.2" y="515.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.2" y="526.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.48%)</title><rect x="492.2" y="499.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="495.2" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.48%)</title><rect x="497.9" y="515.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="500.9" y="526.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.48%)</title><rect x="503.6" y="515.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="506.6" y="526.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.48%)</title><rect x="509.2" y="627.0" width="5.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="512.2" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="514.9" y="627.0" width="5.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="517.9" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="520.6" y="643.0" width="5.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="523.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.96%)</title><rect x="526.2" y="659.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.48%)</title><rect x="526.2" y="643.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="529.2" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.48%)</title><rect x="526.2" y="627.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="529.2" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.48%)</title><rect x="526.2" y="611.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="529.2" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="526.2" y="595.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="529.2" y="606.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.48%)</title><rect x="526.2" y="579.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="529.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.48%)</title><rect x="531.9" y="643.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.9" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.48%)</title><rect x="531.9" y="627.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.9" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.85%)</title><rect x="537.6" y="659.0" width="45.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="540.6" y="670.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.85%)</title><rect x="537.6" y="643.0" width="45.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.6" y="654.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.92%)</title><rect x="537.6" y="627.0" width="22.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.6" y="638.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.96%)</title><rect x="548.9" y="611.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.96%)</title><rect x="548.9" y="595.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.96%)</title><rect x="548.9" y="579.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="551.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.48%)</title><rect x="560.3" y="627.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.48%)</title><rect x="560.3" y="611.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="563.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.48%)</title><rect x="560.3" y="595.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="563.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.48%)</title><rect x="560.3" y="579.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="563.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.44%)</title><rect x="566.0" y="627.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="569.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.44%)</title><rect x="566.0" y="611.0" width="17.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.48%)</title><rect x="566.0" y="595.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.96%)</title><rect x="571.6" y="595.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.6" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.48%)</title><rect x="583.0" y="675.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="586.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (53 samples, 25.48%)</title><rect x="588.7" y="691.0" width="300.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.7" y="702.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (53 samples, 25.48%)</title><rect x="588.7" y="675.0" width="300.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="591.7" y="686.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1538933891.process (43 samples, 20.67%)</title><rect x="594.3" y="659.0" width="244.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="597.3" y="670.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (43 samples, 20.67%)</title><rect x="594.3" y="643.0" width="244.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="597.3" y="654.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (43 samples, 20.67%)</title><rect x="594.3" y="627.0" width="244.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.3" y="638.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.48%)</title><rect x="600.0" y="611.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="603.0" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.48%)</title><rect x="600.0" y="595.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.48%)</title><rect x="600.0" y="579.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.48%)</title><rect x="600.0" y="563.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.48%)</title><rect x="600.0" y="547.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.48%)</title><rect x="600.0" y="531.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (38 samples, 18.27%)</title><rect x="605.7" y="611.0" width="215.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.7" y="622.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (38 samples, 18.27%)</title><rect x="605.7" y="595.0" width="215.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.7" y="606.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (32 samples, 15.38%)</title><rect x="634.0" y="579.0" width="181.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="637.0" y="590.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.96%)</title><rect x="656.7" y="563.0" width="11.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="659.7" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="668.1" y="563.0" width="5.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="671.1" y="574.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.44%)</title><rect x="673.8" y="563.0" width="17.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="676.8" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.48%)</title><rect x="690.8" y="563.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.8" y="574.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (21 samples, 10.10%)</title><rect x="696.4" y="563.0" width="119.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.4" y="574.0">os::sleep(Threa..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="707.8" y="547.0" width="5.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="710.8" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="707.8" y="531.0" width="5.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="710.8" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.48%)</title><rect x="713.5" y="547.0" width="5.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="716.5" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.48%)</title><rect x="719.1" y="547.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="722.1" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 5.77%)</title><rect x="724.8" y="547.0" width="68.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="727.8" y="558.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.44%)</title><rect x="792.9" y="547.0" width="17.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="795.9" y="558.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.48%)</title><rect x="809.9" y="547.0" width="5.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="812.9" y="558.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.48%)</title><rect x="815.6" y="579.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="818.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.48%)</title><rect x="821.2" y="611.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.2" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.96%)</title><rect x="826.9" y="611.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="829.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.48%)</title><rect x="838.3" y="659.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1651482882.complete (2 samples, 0.96%)</title><rect x="843.9" y="659.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$35 (2 samples, 0.96%)</title><rect x="843.9" y="643.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.96%)</title><rect x="843.9" y="627.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.96%)</title><rect x="843.9" y="611.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.9" y="622.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.48%)</title><rect x="855.3" y="659.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="858.3" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.48%)</title><rect x="861.0" y="659.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.48%)</title><rect x="861.0" y="643.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="864.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1651482882.get$Lambda (1 samples, 0.48%)</title><rect x="861.0" y="627.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="864.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1651482882.&lt;init&gt; (1 samples, 0.48%)</title><rect x="861.0" y="611.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="864.0" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 1.92%)</title><rect x="866.6" y="659.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="869.6" y="670.0">j..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.96%)</title><rect x="878.0" y="643.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="881.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.40%)</title><rect x="889.3" y="691.0" width="28.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.3" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 2.40%)</title><rect x="889.3" y="675.0" width="28.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="892.3" y="686.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="906.3" y="659.0" width="5.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="909.3" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="906.3" y="643.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="909.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.48%)</title><rect x="912.0" y="659.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="915.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1983684255.accept (1 samples, 0.48%)</title><rect x="912.0" y="643.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="915.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.48%)</title><rect x="912.0" y="627.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.48%)</title><rect x="912.0" y="611.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="915.0" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.48%)</title><rect x="912.0" y="595.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.0" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.48%)</title><rect x="912.0" y="579.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="915.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.92%)</title><rect x="917.7" y="707.0" width="22.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="920.7" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.92%)</title><rect x="917.7" y="691.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.7" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.96%)</title><rect x="929.0" y="675.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/1983684255.accept (2 samples, 0.96%)</title><rect x="929.0" y="659.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="932.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.96%)</title><rect x="929.0" y="643.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.96%)</title><rect x="929.0" y="627.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="932.0" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.96%)</title><rect x="929.0" y="611.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.0" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.96%)</title><rect x="929.0" y="595.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="932.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.92%)</title><rect x="940.4" y="723.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.4" y="734.0">c..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.96%)</title><rect x="951.7" y="707.0" width="11.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="954.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.96%)</title><rect x="951.7" y="691.0" width="11.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="954.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.88%)</title><rect x="963.1" y="771.0" width="34.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="966.1" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.44%)</title><rect x="980.1" y="755.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="983.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.48%)</title><rect x="991.4" y="739.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="994.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.48%)</title><rect x="991.4" y="723.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="994.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.48%)</title><rect x="991.4" y="707.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="994.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.48%)</title><rect x="991.4" y="691.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="994.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.48%)</title><rect x="997.1" y="819.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1000.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.48%)</title><rect x="997.1" y="803.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1000.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.48%)</title><rect x="997.1" y="787.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1000.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.48%)</title><rect x="997.1" y="771.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1000.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.48%)</title><rect x="997.1" y="755.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1000.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.48%)</title><rect x="997.1" y="739.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.48%)</title><rect x="997.1" y="723.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1000.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.48%)</title><rect x="997.1" y="707.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1000.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.48%)</title><rect x="997.1" y="691.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1000.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.48%)</title><rect x="997.1" y="675.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1000.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.48%)</title><rect x="997.1" y="659.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.48%)</title><rect x="997.1" y="643.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1000.1" y="654.0"></text>
</g>
<g>
<title>start_thread (33 samples, 15.87%)</title><rect x="1002.8" y="819.0" width="187.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1005.8" y="830.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (33 samples, 15.87%)</title><rect x="1002.8" y="803.0" width="187.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1005.8" y="814.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 4.33%)</title><rect x="1002.8" y="787.0" width="51.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.8" y="798.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.85%)</title><rect x="1002.8" y="771.0" width="45.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.8" y="782.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.88%)</title><rect x="1002.8" y="755.0" width="34.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.8" y="766.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.88%)</title><rect x="1002.8" y="739.0" width="34.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.8" y="750.0">G1..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.48%)</title><rect x="1036.8" y="755.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.8" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.48%)</title><rect x="1036.8" y="739.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.8" y="750.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.48%)</title><rect x="1036.8" y="723.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.8" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.48%)</title><rect x="1042.5" y="755.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1045.5" y="766.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.48%)</title><rect x="1042.5" y="739.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.5" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.48%)</title><rect x="1042.5" y="723.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.5" y="734.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.48%)</title><rect x="1042.5" y="707.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.5" y="718.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.48%)</title><rect x="1042.5" y="691.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1045.5" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.48%)</title><rect x="1042.5" y="675.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.5" y="686.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.48%)</title><rect x="1042.5" y="659.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.5" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.48%)</title><rect x="1042.5" y="643.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.5" y="654.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.48%)</title><rect x="1048.2" y="771.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.2" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (24 samples, 11.54%)</title><rect x="1053.8" y="787.0" width="136.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.8" y="798.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (24 samples, 11.54%)</title><rect x="1053.8" y="771.0" width="136.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.8" y="782.0">JavaThread::threa..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 11.54%)</title><rect x="1053.8" y="755.0" width="136.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.8" y="766.0">CompileBroker::co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (24 samples, 11.54%)</title><rect x="1053.8" y="739.0" width="136.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.8" y="750.0">CompileBroker::in..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (21 samples, 10.10%)</title><rect x="1053.8" y="723.0" width="119.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1056.8" y="734.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (21 samples, 10.10%)</title><rect x="1053.8" y="707.0" width="119.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1056.8" y="718.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (12 samples, 5.77%)</title><rect x="1053.8" y="691.0" width="68.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.8" y="702.0">Compile..</text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.44%)</title><rect x="1053.8" y="675.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.8" y="686.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.48%)</title><rect x="1053.8" y="659.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.8" y="670.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.48%)</title><rect x="1053.8" y="643.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.8" y="654.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.96%)</title><rect x="1059.5" y="659.0" width="11.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 4.33%)</title><rect x="1070.9" y="675.0" width="51.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.9" y="686.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.92%)</title><rect x="1070.9" y="659.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.9" y="670.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.48%)</title><rect x="1076.5" y="643.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.5" y="654.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.48%)</title><rect x="1082.2" y="643.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.2" y="654.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.48%)</title><rect x="1087.9" y="643.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.9" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.48%)</title><rect x="1093.6" y="659.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.6" y="670.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.48%)</title><rect x="1093.6" y="643.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.6" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.48%)</title><rect x="1099.2" y="659.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.2" y="670.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.48%)</title><rect x="1099.2" y="643.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.2" y="654.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.96%)</title><rect x="1104.9" y="659.0" width="11.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.9" y="670.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.48%)</title><rect x="1116.2" y="659.0" width="5.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1119.2" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 2.88%)</title><rect x="1121.9" y="691.0" width="34.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.9" y="702.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.48%)</title><rect x="1121.9" y="675.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.9" y="686.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.48%)</title><rect x="1121.9" y="659.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.9" y="670.0"></text>
</g>
<g>
<title>Conv2BNode::Opcode() const (1 samples, 0.48%)</title><rect x="1127.6" y="675.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 1.44%)</title><rect x="1133.3" y="675.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.96%)</title><rect x="1133.3" y="659.0" width="11.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.48%)</title><rect x="1133.3" y="643.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.3" y="654.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.48%)</title><rect x="1138.9" y="643.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.9" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.48%)</title><rect x="1144.6" y="659.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.6" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.48%)</title><rect x="1150.3" y="675.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.48%)</title><rect x="1150.3" y="659.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="670.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1150.3" y="643.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.3" y="654.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.48%)</title><rect x="1150.3" y="627.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.44%)</title><rect x="1156.0" y="691.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.44%)</title><rect x="1156.0" y="675.0" width="17.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.44%)</title><rect x="1156.0" y="659.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.44%)</title><rect x="1156.0" y="643.0" width="17.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.44%)</title><rect x="1156.0" y="627.0" width="17.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.44%)</title><rect x="1156.0" y="611.0" width="17.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.44%)</title><rect x="1156.0" y="595.0" width="17.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.44%)</title><rect x="1156.0" y="579.0" width="17.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.44%)</title><rect x="1156.0" y="563.0" width="17.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.44%)</title><rect x="1156.0" y="547.0" width="17.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.44%)</title><rect x="1156.0" y="531.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1156.0" y="515.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1156.0" y="499.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="1156.0" y="483.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.96%)</title><rect x="1156.0" y="467.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.96%)</title><rect x="1156.0" y="451.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.96%)</title><rect x="1156.0" y="435.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1156.0" y="419.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.48%)</title><rect x="1156.0" y="403.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.48%)</title><rect x="1156.0" y="387.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.48%)</title><rect x="1156.0" y="371.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.48%)</title><rect x="1156.0" y="355.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.48%)</title><rect x="1156.0" y="339.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.48%)</title><rect x="1156.0" y="323.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.48%)</title><rect x="1156.0" y="307.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1161.6" y="403.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1161.6" y="387.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1161.6" y="371.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1161.6" y="355.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1161.6" y="339.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1161.6" y="323.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1161.6" y="307.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1161.6" y="291.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1161.6" y="275.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1161.6" y="259.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1161.6" y="243.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1161.6" y="227.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1161.6" y="211.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1161.6" y="195.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1161.6" y="179.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1161.6" y="163.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1161.6" y="147.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.48%)</title><rect x="1161.6" y="131.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.48%)</title><rect x="1161.6" y="115.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="126.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.48%)</title><rect x="1161.6" y="99.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="1161.6" y="83.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.6" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1161.6" y="67.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.6" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="1161.6" y="51.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.6" y="62.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.48%)</title><rect x="1161.6" y="35.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.48%)</title><rect x="1167.3" y="515.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.48%)</title><rect x="1167.3" y="499.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.3" y="510.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.48%)</title><rect x="1167.3" y="483.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.3" y="494.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.48%)</title><rect x="1167.3" y="467.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::g1_wb_post_Type() (1 samples, 0.48%)</title><rect x="1167.3" y="451.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.3" y="462.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.48%)</title><rect x="1167.3" y="435.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.3" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.44%)</title><rect x="1173.0" y="723.0" width="17.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.44%)</title><rect x="1173.0" y="707.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.0" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.44%)</title><rect x="1173.0" y="691.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.96%)</title><rect x="1173.0" y="675.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.0" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.96%)</title><rect x="1173.0" y="659.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="670.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.48%)</title><rect x="1173.0" y="643.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="654.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.48%)</title><rect x="1173.0" y="627.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.0" y="638.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.48%)</title><rect x="1173.0" y="611.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.0" y="622.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.48%)</title><rect x="1173.0" y="595.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="606.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(PhiResolver*, Instruction*, Instruction*) (1 samples, 0.48%)</title><rect x="1173.0" y="579.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="590.0"></text>
</g>
<g>
<title>LIRGenerator::operand_for_instruction(Instruction*) (1 samples, 0.48%)</title><rect x="1173.0" y="563.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.0" y="574.0"></text>
</g>
<g>
<title>Values::at_put_grow(int, Instruction*, Instruction*) (1 samples, 0.48%)</title><rect x="1173.0" y="547.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="558.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.48%)</title><rect x="1178.7" y="643.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="654.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.48%)</title><rect x="1178.7" y="627.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="638.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.48%)</title><rect x="1178.7" y="611.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="622.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.48%)</title><rect x="1178.7" y="595.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.48%)</title><rect x="1178.7" y="579.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.48%)</title><rect x="1184.3" y="675.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.48%)</title><rect x="1184.3" y="659.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="670.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.48%)</title><rect x="1184.3" y="643.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="654.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.48%)</title><rect x="1184.3" y="627.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="638.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.48%)</title><rect x="1184.3" y="611.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="622.0"></text>
</g>
</g>
</svg>
