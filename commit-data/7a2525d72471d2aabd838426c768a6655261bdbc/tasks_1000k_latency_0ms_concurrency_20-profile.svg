<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,382 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.14%)</title><rect x="10.9" y="2035.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.9" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.14%)</title><rect x="10.9" y="2019.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.9" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (257 samples, 18.60%)</title><rect x="12.6" y="2035.0" width="219.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.6" y="2046.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (3 samples, 0.22%)</title><rect x="12.6" y="2019.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.6" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (3 samples, 0.22%)</title><rect x="12.6" y="2003.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.6" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (3 samples, 0.22%)</title><rect x="12.6" y="1987.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (3 samples, 0.22%)</title><rect x="12.6" y="1971.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onCommit (1 samples, 0.07%)</title><rect x="12.6" y="1955.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.14%)</title><rect x="13.4" y="1955.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.14%)</title><rect x="13.4" y="1939.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.14%)</title><rect x="13.4" y="1923.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="13.4" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="13.4" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="13.4" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="13.4" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="1870.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.07%)</title><rect x="13.4" y="1843.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="14.3" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="14.3" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="14.3" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="14.3" y="1859.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="14.3" y="1843.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="14.3" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="14.3" y="1811.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="14.3" y="1795.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="14.3" y="1779.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.07%)</title><rect x="14.3" y="1763.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="14.3" y="1747.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.07%)</title><rect x="14.3" y="1731.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="14.3" y="1715.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$11.write (1 samples, 0.07%)</title><rect x="14.3" y="1699.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.3" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.07%)</title><rect x="14.3" y="1683.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.07%)</title><rect x="14.3" y="1667.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="17.3" y="1678.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.07%)</title><rect x="14.3" y="1651.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.3" y="1662.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.07%)</title><rect x="14.3" y="1635.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.3" y="1646.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="14.3" y="1619.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.3" y="1630.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="14.3" y="1603.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.3" y="1614.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="14.3" y="1587.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1598.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="14.3" y="1571.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.3" y="1582.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.07%)</title><rect x="14.3" y="1555.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.3" y="1566.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="14.3" y="1539.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="17.3" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (253 samples, 18.31%)</title><rect x="15.1" y="2019.0" width="216.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.1" y="2030.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.14%)</title><rect x="15.1" y="2003.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.1" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.14%)</title><rect x="15.1" y="1987.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.1" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (2 samples, 0.14%)</title><rect x="15.1" y="1971.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.1" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.14%)</title><rect x="15.1" y="1955.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.07%)</title><rect x="16.0" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.0" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.07%)</title><rect x="16.0" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.0" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.07%)</title><rect x="16.0" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.22%)</title><rect x="16.8" y="2003.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.22%)</title><rect x="16.8" y="1987.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="17.7" y="1971.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="17.7" y="1955.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="17.7" y="1939.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="17.7" y="1923.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="17.7" y="1907.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="17.7" y="1891.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="17.7" y="1875.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="17.7" y="1859.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/2042334003.test (1 samples, 0.07%)</title><rect x="17.7" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/30426601.test (1 samples, 0.07%)</title><rect x="18.5" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.14%)</title><rect x="19.4" y="2003.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.4" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.14%)</title><rect x="19.4" y="1987.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.4" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (175 samples, 12.66%)</title><rect x="21.1" y="2003.0" width="149.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.1" y="2014.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (170 samples, 12.30%)</title><rect x="22.0" y="1987.0" width="145.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.0" y="1998.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (169 samples, 12.23%)</title><rect x="22.8" y="1971.0" width="144.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.8" y="1982.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (128 samples, 9.26%)</title><rect x="22.8" y="1955.0" width="109.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.8" y="1966.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (128 samples, 9.26%)</title><rect x="22.8" y="1939.0" width="109.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.8" y="1950.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (128 samples, 9.26%)</title><rect x="22.8" y="1923.0" width="109.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.8" y="1934.0">com/linecorp/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="29.6" y="1907.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (118 samples, 8.54%)</title><rect x="30.5" y="1907.0" width="100.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.5" y="1918.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (117 samples, 8.47%)</title><rect x="31.3" y="1891.0" width="99.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.3" y="1902.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (117 samples, 8.47%)</title><rect x="31.3" y="1875.0" width="99.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.3" y="1886.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (90 samples, 6.51%)</title><rect x="31.3" y="1859.0" width="76.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.3" y="1870.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.37%)</title><rect x="31.3" y="1843.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.37%)</title><rect x="31.3" y="1827.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.37%)</title><rect x="31.3" y="1811.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (71 samples, 5.14%)</title><rect x="47.6" y="1843.0" width="60.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.6" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (71 samples, 5.14%)</title><rect x="47.6" y="1827.0" width="60.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (71 samples, 5.14%)</title><rect x="47.6" y="1811.0" width="60.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.6" y="1822.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (71 samples, 5.14%)</title><rect x="47.6" y="1795.0" width="60.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.6" y="1806.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 5.07%)</title><rect x="48.4" y="1779.0" width="59.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.4" y="1790.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="48.4" y="1763.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="51.4" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (62 samples, 4.49%)</title><rect x="49.3" y="1763.0" width="52.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="52.3" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.22%)</title><rect x="50.1" y="1747.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="53.1" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.22%)</title><rect x="52.7" y="1747.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="55.7" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="55.3" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="58.3" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 2.89%)</title><rect x="56.1" y="1747.0" width="34.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="59.1" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="90.3" y="1747.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="93.3" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.87%)</title><rect x="92.0" y="1747.0" width="10.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="95.0" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.22%)</title><rect x="102.2" y="1763.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="105.2" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="104.8" y="1763.0" width="1.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="107.8" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="106.5" y="1763.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="108.2" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.07%)</title><rect x="108.2" y="1843.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.07%)</title><rect x="108.2" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.07%)</title><rect x="108.2" y="1811.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.2" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="108.2" y="1795.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="111.2" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="108.2" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="111.2" y="1790.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="108.2" y="1763.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="111.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.14%)</title><rect x="109.0" y="1859.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.14%)</title><rect x="109.0" y="1843.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.14%)</title><rect x="109.0" y="1827.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 1.74%)</title><rect x="110.8" y="1859.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 1.74%)</title><rect x="110.8" y="1843.0" width="20.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 1.74%)</title><rect x="110.8" y="1827.0" width="20.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 1.74%)</title><rect x="110.8" y="1811.0" width="20.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.8" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="131.2" y="1907.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="134.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.22%)</title><rect x="132.1" y="1955.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.22%)</title><rect x="132.1" y="1939.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="135.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.29%)</title><rect x="134.7" y="1955.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.7" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.29%)</title><rect x="134.7" y="1939.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.29%)</title><rect x="134.7" y="1923.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (34 samples, 2.46%)</title><rect x="138.1" y="1955.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.1" y="1966.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (34 samples, 2.46%)</title><rect x="138.1" y="1939.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.1" y="1950.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (18 samples, 1.30%)</title><rect x="150.9" y="1923.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.9" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.80%)</title><rect x="150.9" y="1907.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.9" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.80%)</title><rect x="150.9" y="1891.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.80%)</title><rect x="150.9" y="1875.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="153.9" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.36%)</title><rect x="156.0" y="1859.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="159.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.22%)</title><rect x="160.3" y="1907.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.3" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.29%)</title><rect x="162.8" y="1907.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.8" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="166.3" y="1923.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="169.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="167.1" y="1987.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.1" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="167.1" y="1971.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="167.1" y="1955.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.22%)</title><rect x="168.0" y="1987.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.22%)</title><rect x="168.0" y="1971.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="168.0" y="1955.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="171.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="168.0" y="1939.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="171.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (3 samples, 0.22%)</title><rect x="168.0" y="1923.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.22%)</title><rect x="168.0" y="1907.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="171.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (71 samples, 5.14%)</title><rect x="170.5" y="2003.0" width="60.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.5" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (70 samples, 5.07%)</title><rect x="170.5" y="1987.0" width="59.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.5" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (43 samples, 3.11%)</title><rect x="171.4" y="1971.0" width="36.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.4" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (3 samples, 0.22%)</title><rect x="171.4" y="1955.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (3 samples, 0.22%)</title><rect x="171.4" y="1939.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.4" y="1950.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.07%)</title><rect x="171.4" y="1923.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="174.4" y="1934.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.07%)</title><rect x="172.2" y="1923.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="175.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="173.1" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (40 samples, 2.89%)</title><rect x="173.9" y="1955.0" width="34.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.9" y="1966.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="173.9" y="1939.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (38 samples, 2.75%)</title><rect x="174.8" y="1939.0" width="32.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.8" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 2.39%)</title><rect x="174.8" y="1923.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.8" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (33 samples, 2.39%)</title><rect x="174.8" y="1907.0" width="28.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="177.8" y="1918.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="174.8" y="1891.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="177.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.30%)</title><rect x="175.6" y="1891.0" width="15.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.58%)</title><rect x="184.2" y="1875.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.58%)</title><rect x="184.2" y="1859.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.58%)</title><rect x="184.2" y="1843.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.58%)</title><rect x="184.2" y="1827.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.58%)</title><rect x="184.2" y="1811.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.58%)</title><rect x="184.2" y="1795.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="187.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.51%)</title><rect x="185.0" y="1779.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.01%)</title><rect x="191.0" y="1891.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.01%)</title><rect x="191.0" y="1875.0" width="12.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="194.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (11 samples, 0.80%)</title><rect x="191.0" y="1859.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (11 samples, 0.80%)</title><rect x="191.0" y="1843.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.0" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="198.7" y="1827.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="201.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.22%)</title><rect x="200.4" y="1859.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.4" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.22%)</title><rect x="200.4" y="1843.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.14%)</title><rect x="203.0" y="1923.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.14%)</title><rect x="203.0" y="1907.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="203.0" y="1891.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="203.0" y="1875.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="203.0" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="203.0" y="1843.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.0" y="1854.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="203.8" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="206.8" y="1870.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="203.8" y="1843.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="206.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.14%)</title><rect x="204.7" y="1923.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.14%)</title><rect x="204.7" y="1907.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.14%)</title><rect x="204.7" y="1891.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="204.7" y="1875.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="206.4" y="1923.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.07%)</title><rect x="207.2" y="1939.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasValidPosition (1 samples, 0.07%)</title><rect x="207.2" y="1923.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="207.2" y="1907.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="207.2" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (15 samples, 1.09%)</title><rect x="208.1" y="1971.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (13 samples, 0.94%)</title><rect x="208.1" y="1955.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (12 samples, 0.87%)</title><rect x="208.1" y="1939.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.1" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="208.9" y="1923.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (2 samples, 0.14%)</title><rect x="208.9" y="1907.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.14%)</title><rect x="208.9" y="1891.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.14%)</title><rect x="208.9" y="1875.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="208.9" y="1859.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="208.9" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.07%)</title><rect x="208.9" y="1827.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.07%)</title><rect x="208.9" y="1811.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.9" y="1822.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.07%)</title><rect x="208.9" y="1795.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="209.8" y="1859.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="209.8" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.8" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="209.8" y="1827.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="209.8" y="1811.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="210.7" y="1923.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="213.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="211.5" y="1923.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="211.5" y="1907.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="211.5" y="1891.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="211.5" y="1875.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="211.5" y="1859.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.5" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="211.5" y="1843.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="214.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (4 samples, 0.29%)</title><rect x="212.4" y="1923.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (4 samples, 0.29%)</title><rect x="212.4" y="1907.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.4" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="212.4" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="212.4" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="212.4" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="213.2" y="1891.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="213.2" y="1875.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.22%)</title><rect x="213.2" y="1859.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="213.2" y="1843.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="213.2" y="1827.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.2" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="213.2" y="1811.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="216.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="214.1" y="1811.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="214.9" y="1811.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.9" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/524035158.get (1 samples, 0.07%)</title><rect x="214.9" y="1795.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="215.8" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="215.8" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.8" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="215.8" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.07%)</title><rect x="215.8" y="1875.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.8" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.07%)</title><rect x="215.8" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="216.6" y="1923.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="216.6" y="1907.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="216.6" y="1891.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="216.6" y="1875.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="216.6" y="1859.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="216.6" y="1843.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="216.6" y="1827.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="216.6" y="1811.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.6" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="216.6" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.6" y="1806.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.07%)</title><rect x="216.6" y="1779.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.6" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="217.5" y="1811.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.5" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="217.5" y="1795.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.5" y="1806.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="217.5" y="1779.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="220.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="218.3" y="1939.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="218.3" y="1923.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="218.3" y="1907.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.14%)</title><rect x="219.2" y="1955.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (2 samples, 0.14%)</title><rect x="219.2" y="1939.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.14%)</title><rect x="220.9" y="1971.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (2 samples, 0.14%)</title><rect x="220.9" y="1955.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (2 samples, 0.14%)</title><rect x="220.9" y="1939.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (2 samples, 0.14%)</title><rect x="220.9" y="1923.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (2 samples, 0.14%)</title><rect x="220.9" y="1907.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (2 samples, 0.14%)</title><rect x="220.9" y="1891.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.07%)</title><rect x="222.6" y="1971.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.14%)</title><rect x="223.5" y="1971.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.14%)</title><rect x="223.5" y="1955.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.5" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.07%)</title><rect x="223.5" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="224.3" y="1939.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="224.3" y="1923.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="224.3" y="1907.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.3" y="1918.0"></text>
</g>
<g>
<title>java/util/function/Predicate.isEqual (1 samples, 0.07%)</title><rect x="224.3" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.29%)</title><rect x="225.2" y="1971.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.29%)</title><rect x="225.2" y="1955.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.2" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="225.2" y="1939.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="225.2" y="1923.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.2" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="225.2" y="1907.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="228.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (2 samples, 0.14%)</title><rect x="226.0" y="1939.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (2 samples, 0.14%)</title><rect x="226.0" y="1923.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (2 samples, 0.14%)</title><rect x="226.0" y="1907.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.14%)</title><rect x="226.0" y="1891.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.0" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="226.0" y="1875.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="227.7" y="1939.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.14%)</title><rect x="228.6" y="1971.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="228.6" y="1955.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="228.6" y="1939.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="228.6" y="1923.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="229.4" y="1907.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="229.4" y="1891.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.07%)</title><rect x="230.3" y="1987.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.3" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="230.3" y="1971.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.3" y="1982.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.07%)</title><rect x="231.1" y="2019.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.1" y="2030.0"></text>
</g>
<g>
<title>JVM_CurrentTimeMillis (1 samples, 0.07%)</title><rect x="231.1" y="2003.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="234.1" y="2014.0"></text>
</g>
<g>
<title>java/lang/Thread.run (758 samples, 54.85%)</title><rect x="232.0" y="2035.0" width="647.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.0" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (758 samples, 54.85%)</title><rect x="232.0" y="2019.0" width="647.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.0" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (758 samples, 54.85%)</title><rect x="232.0" y="2003.0" width="647.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.0" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="239.7" y="1987.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="242.7" y="1998.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="239.7" y="1971.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="242.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (517 samples, 37.41%)</title><rect x="241.4" y="1987.0" width="441.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.4" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50 (517 samples, 37.41%)</title><rect x="241.4" y="1971.0" width="441.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.4" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (517 samples, 37.41%)</title><rect x="241.4" y="1955.0" width="441.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.4" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processT..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="242.2" y="1939.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="245.2" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.43%)</title><rect x="244.0" y="1939.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="247.0" y="1950.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="245.7" y="1923.0" width="3.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="248.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (508 samples, 36.76%)</title><rect x="249.1" y="1939.0" width="433.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.1" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sche..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (164 samples, 11.87%)</title><rect x="258.5" y="1923.0" width="140.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.5" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (164 samples, 11.87%)</title><rect x="258.5" y="1907.0" width="140.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.5" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (164 samples, 11.87%)</title><rect x="258.5" y="1891.0" width="140.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.5" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (163 samples, 11.79%)</title><rect x="258.5" y="1875.0" width="139.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.5" y="1886.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (163 samples, 11.79%)</title><rect x="258.5" y="1859.0" width="139.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.5" y="1870.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (163 samples, 11.79%)</title><rect x="258.5" y="1843.0" width="139.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.5" y="1854.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (38 samples, 2.75%)</title><rect x="258.5" y="1827.0" width="32.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.5" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (14 samples, 1.01%)</title><rect x="258.5" y="1811.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (14 samples, 1.01%)</title><rect x="258.5" y="1795.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (10 samples, 0.72%)</title><rect x="258.5" y="1779.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.29%)</title><rect x="267.0" y="1779.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.22%)</title><rect x="267.9" y="1763.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="269.6" y="1747.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.6" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="269.6" y="1731.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (24 samples, 1.74%)</title><rect x="270.4" y="1811.0" width="20.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 1.74%)</title><rect x="270.4" y="1795.0" width="20.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="270.4" y="1779.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.07%)</title><rect x="270.4" y="1763.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.58%)</title><rect x="271.3" y="1779.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.07%)</title><rect x="276.4" y="1763.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.4" y="1774.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="276.4" y="1747.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="279.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.07%)</title><rect x="277.3" y="1763.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.65%)</title><rect x="278.1" y="1779.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="279.8" y="1763.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="282.8" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="279.8" y="1747.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="282.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="279.8" y="1731.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="282.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="279.8" y="1715.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="282.8" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="280.7" y="1699.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="283.7" y="1710.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="281.5" y="1763.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="284.5" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="281.5" y="1747.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="284.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.29%)</title><rect x="282.4" y="1763.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.29%)</title><rect x="282.4" y="1747.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.43%)</title><rect x="285.8" y="1779.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.14%)</title><rect x="288.4" y="1763.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="290.1" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (113 samples, 8.18%)</title><rect x="290.9" y="1827.0" width="96.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.9" y="1838.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.36%)</title><rect x="290.9" y="1811.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.36%)</title><rect x="290.9" y="1795.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.22%)</title><rect x="290.9" y="1779.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.07%)</title><rect x="291.8" y="1763.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="292.6" y="1763.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.14%)</title><rect x="293.5" y="1779.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.14%)</title><rect x="293.5" y="1763.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.36%)</title><rect x="295.2" y="1811.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.36%)</title><rect x="295.2" y="1795.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="296.9" y="1779.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.14%)</title><rect x="297.7" y="1779.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (18 samples, 1.30%)</title><rect x="299.5" y="1811.0" width="15.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.09%)</title><rect x="300.3" y="1795.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (13 samples, 0.94%)</title><rect x="302.0" y="1779.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (13 samples, 0.94%)</title><rect x="302.0" y="1763.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (6 samples, 0.43%)</title><rect x="308.0" y="1747.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="313.1" y="1795.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.51%)</title><rect x="314.8" y="1811.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.51%)</title><rect x="314.8" y="1795.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="314.8" y="1779.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="317.8" y="1790.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="314.8" y="1763.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="317.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="315.7" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="318.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="315.7" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="318.7" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="315.7" y="1715.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="318.7" y="1726.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used() const (1 samples, 0.07%)</title><rect x="315.7" y="1699.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="318.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.36%)</title><rect x="316.5" y="1779.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.29%)</title><rect x="317.4" y="1763.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.29%)</title><rect x="317.4" y="1747.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (78 samples, 5.64%)</title><rect x="320.8" y="1811.0" width="66.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.8" y="1822.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.52%)</title><rect x="323.4" y="1795.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.43%)</title><rect x="330.2" y="1779.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.43%)</title><rect x="330.2" y="1763.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.43%)</title><rect x="330.2" y="1747.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (7 samples, 0.51%)</title><rect x="335.3" y="1779.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (54 samples, 3.91%)</title><rect x="341.3" y="1795.0" width="46.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.3" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (54 samples, 3.91%)</title><rect x="341.3" y="1779.0" width="46.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.3" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="343.0" y="1763.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (51 samples, 3.69%)</title><rect x="343.8" y="1763.0" width="43.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="346.8" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.59%)</title><rect x="349.0" y="1747.0" width="18.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="352.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.14%)</title><rect x="354.1" y="1731.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.51%)</title><rect x="355.8" y="1731.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.51%)</title><rect x="355.8" y="1715.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.51%)</title><rect x="355.8" y="1699.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.36%)</title><rect x="357.5" y="1683.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.36%)</title><rect x="357.5" y="1667.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="360.9" y="1651.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.07%)</title><rect x="360.9" y="1635.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="363.9" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.43%)</title><rect x="361.8" y="1731.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.43%)</title><rect x="361.8" y="1715.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.43%)</title><rect x="361.8" y="1699.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="366.9" y="1731.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.58%)</title><rect x="367.8" y="1747.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.51%)</title><rect x="368.6" y="1731.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="371.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.51%)</title><rect x="368.6" y="1715.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.51%)</title><rect x="368.6" y="1699.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="371.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.51%)</title><rect x="368.6" y="1683.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="371.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.65%)</title><rect x="374.6" y="1747.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.65%)</title><rect x="374.6" y="1731.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="377.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.65%)</title><rect x="374.6" y="1715.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.65%)</title><rect x="374.6" y="1699.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.65%)</title><rect x="374.6" y="1683.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="377.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.65%)</title><rect x="374.6" y="1667.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.6" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (9 samples, 0.65%)</title><rect x="374.6" y="1651.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="381.4" y="1635.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.43%)</title><rect x="382.3" y="1747.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.3" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.43%)</title><rect x="382.3" y="1731.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.3" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.43%)</title><rect x="382.3" y="1715.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 0.87%)</title><rect x="387.4" y="1827.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.4" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 0.87%)</title><rect x="387.4" y="1811.0" width="10.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 0.87%)</title><rect x="387.4" y="1795.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="390.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 0.87%)</title><rect x="387.4" y="1779.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.22%)</title><rect x="392.5" y="1763.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.22%)</title><rect x="395.1" y="1763.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.07%)</title><rect x="397.6" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.6" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="397.6" y="1859.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="400.6" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="397.6" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="400.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="397.6" y="1827.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="400.6" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="397.6" y="1811.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="400.6" y="1822.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="397.6" y="1795.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="400.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (316 samples, 22.87%)</title><rect x="398.5" y="1923.0" width="269.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.5" y="1934.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (47 samples, 3.40%)</title><rect x="398.5" y="1907.0" width="40.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.5" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="398.5" y="1891.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.5" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 3.33%)</title><rect x="399.3" y="1891.0" width="39.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.3" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 3.18%)</title><rect x="401.1" y="1875.0" width="37.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.1" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.43%)</title><rect x="402.8" y="1859.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="405.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.36%)</title><rect x="403.6" y="1843.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.22%)</title><rect x="405.3" y="1827.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.22%)</title><rect x="405.3" y="1811.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.43%)</title><rect x="407.9" y="1859.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="411.3" y="1843.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="411.3" y="1827.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (28 samples, 2.03%)</title><rect x="413.0" y="1859.0" width="23.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.0" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.80%)</title><rect x="427.5" y="1843.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.5" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.80%)</title><rect x="427.5" y="1827.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.22%)</title><rect x="434.4" y="1811.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.14%)</title><rect x="436.9" y="1859.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="439.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.65%)</title><rect x="438.6" y="1907.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.65%)</title><rect x="438.6" y="1891.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.6" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="438.6" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="441.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="438.6" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="441.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="438.6" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="441.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="438.6" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="441.6" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="438.6" y="1811.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="441.6" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="438.6" y="1795.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="441.6" y="1806.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="438.6" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="441.6" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="438.6" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="441.6" y="1774.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="438.6" y="1747.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="441.6" y="1758.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="438.6" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="441.6" y="1742.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="438.6" y="1715.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="441.6" y="1726.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="438.6" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="441.6" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.58%)</title><rect x="439.5" y="1875.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="442.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (171 samples, 12.37%)</title><rect x="446.3" y="1907.0" width="146.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.3" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (171 samples, 12.37%)</title><rect x="446.3" y="1891.0" width="146.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="449.3" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="453.1" y="1875.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="456.1" y="1886.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="453.1" y="1859.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="456.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (64 samples, 4.63%)</title><rect x="454.8" y="1875.0" width="54.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="457.8" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (61 samples, 4.41%)</title><rect x="455.7" y="1859.0" width="52.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.7" y="1870.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (41 samples, 2.97%)</title><rect x="462.5" y="1843.0" width="35.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.5" y="1854.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (30 samples, 2.17%)</title><rect x="467.7" y="1827.0" width="25.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.7" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (30 samples, 2.17%)</title><rect x="467.7" y="1811.0" width="25.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.7" y="1822.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (30 samples, 2.17%)</title><rect x="467.7" y="1795.0" width="25.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.7" y="1806.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (16 samples, 1.16%)</title><rect x="474.5" y="1779.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="477.5" y="1790.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="476.2" y="1763.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="479.2" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="477.0" y="1763.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="480.0" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.43%)</title><rect x="477.9" y="1763.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="480.9" y="1774.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="477.9" y="1747.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="480.9" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.36%)</title><rect x="478.8" y="1747.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="481.8" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.29%)</title><rect x="479.6" y="1731.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="482.6" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.22%)</title><rect x="479.6" y="1715.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="482.6" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="482.2" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="485.2" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.43%)</title><rect x="483.0" y="1763.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="486.0" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.29%)</title><rect x="484.7" y="1747.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="487.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="484.7" y="1731.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="487.7" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="484.7" y="1715.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="487.7" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="485.6" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="488.6" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="486.4" y="1731.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="489.4" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="486.4" y="1715.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="489.4" y="1726.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="487.3" y="1731.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="490.3" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.43%)</title><rect x="488.1" y="1779.0" width="5.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="491.1" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.22%)</title><rect x="493.3" y="1827.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="496.3" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="495.8" y="1827.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="498.8" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="496.7" y="1827.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="499.7" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 0.87%)</title><rect x="497.5" y="1843.0" width="10.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="500.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.14%)</title><rect x="507.8" y="1859.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.14%)</title><rect x="507.8" y="1843.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.8" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.14%)</title><rect x="507.8" y="1827.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.8" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="507.8" y="1811.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="510.8" y="1822.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="508.6" y="1795.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="511.6" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="508.6" y="1779.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="511.6" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="508.6" y="1763.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="511.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.72%)</title><rect x="509.5" y="1875.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.72%)</title><rect x="509.5" y="1859.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.72%)</title><rect x="509.5" y="1843.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.5" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (86 samples, 6.22%)</title><rect x="518.0" y="1875.0" width="73.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="521.0" y="1886.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 6.15%)</title><rect x="518.9" y="1859.0" width="72.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="521.9" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.43%)</title><rect x="518.9" y="1843.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="521.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.43%)</title><rect x="518.9" y="1827.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="521.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.43%)</title><rect x="518.9" y="1811.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="521.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.43%)</title><rect x="518.9" y="1795.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="521.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="523.2" y="1779.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.2" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="523.2" y="1763.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.2" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (79 samples, 5.72%)</title><rect x="524.0" y="1843.0" width="67.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.0" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (70 samples, 5.07%)</title><rect x="531.7" y="1827.0" width="59.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="534.7" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 2.68%)</title><rect x="559.9" y="1811.0" width="31.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="562.9" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.14%)</title><rect x="575.2" y="1795.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="578.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.80%)</title><rect x="576.9" y="1795.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="584.6" y="1779.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="587.6" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="584.6" y="1763.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="587.6" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="584.6" y="1747.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="587.6" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="585.5" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="588.5" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="585.5" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.5" y="1726.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.43%)</title><rect x="586.3" y="1795.0" width="5.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="589.3" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="591.5" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="594.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (56 samples, 4.05%)</title><rect x="592.3" y="1907.0" width="47.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="595.3" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (55 samples, 3.98%)</title><rect x="592.3" y="1891.0" width="47.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.3" y="1902.0">com/..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="594.9" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="597.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (18 samples, 1.30%)</title><rect x="595.7" y="1875.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="598.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.30%)</title><rect x="595.7" y="1859.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="598.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 0.94%)</title><rect x="599.1" y="1843.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="602.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.51%)</title><rect x="599.1" y="1827.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="602.1" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.36%)</title><rect x="600.9" y="1811.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="601.7" y="1795.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="604.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.43%)</title><rect x="605.1" y="1827.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="608.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="610.2" y="1843.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="613.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="610.2" y="1827.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="610.2" y="1811.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="613.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="610.2" y="1795.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.07%)</title><rect x="610.2" y="1779.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.2" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.51%)</title><rect x="611.1" y="1875.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="614.1" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="611.1" y="1859.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="614.1" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="611.1" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="614.1" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="611.1" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="614.1" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="611.1" y="1811.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="614.1" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="611.1" y="1795.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="614.1" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.43%)</title><rect x="612.0" y="1859.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="615.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (5 samples, 0.36%)</title><rect x="617.1" y="1875.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="620.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (5 samples, 0.36%)</title><rect x="617.1" y="1859.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="620.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/1947628528.get$Lambda (5 samples, 0.36%)</title><rect x="617.1" y="1843.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="620.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/1947628528.&lt;init&gt; (4 samples, 0.29%)</title><rect x="617.9" y="1827.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="620.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (5 samples, 0.36%)</title><rect x="621.3" y="1875.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="624.8" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="627.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.29%)</title><rect x="625.6" y="1875.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.14%)</title><rect x="627.3" y="1859.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="630.3" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="627.3" y="1843.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="630.3" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="628.2" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="629.0" y="1875.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="629.0" y="1859.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="632.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.72%)</title><rect x="630.7" y="1875.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="633.7" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="633.3" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="636.3" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="633.3" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="636.3" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="633.3" y="1827.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="636.3" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="634.2" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.2" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="634.2" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.2" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="634.2" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="637.2" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="634.2" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="637.2" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="634.2" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="637.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.36%)</title><rect x="635.0" y="1859.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.0" y="1870.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="639.3" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="640.1" y="1907.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.1" y="1918.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="640.1" y="1891.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.1" y="1902.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="640.1" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.32%)</title><rect x="641.0" y="1907.0" width="27.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.0" y="1918.0">j..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="647.8" y="1891.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="650.8" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.43%)</title><rect x="648.7" y="1891.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="651.7" y="1902.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="650.4" y="1875.0" width="3.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="653.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.23%)</title><rect x="653.8" y="1891.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.16%)</title><rect x="654.6" y="1875.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/620063611.accept (16 samples, 1.16%)</title><rect x="654.6" y="1859.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="657.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (16 samples, 1.16%)</title><rect x="654.6" y="1843.0" width="13.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.6" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (16 samples, 1.16%)</title><rect x="654.6" y="1827.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.6" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (16 samples, 1.16%)</title><rect x="654.6" y="1811.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.6" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="664.0" y="1795.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="667.0" y="1806.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="664.9" y="1779.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="667.9" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="667.5" y="1795.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="670.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.01%)</title><rect x="668.3" y="1923.0" width="12.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="671.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.01%)</title><rect x="668.3" y="1907.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="668.3" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 0.94%)</title><rect x="669.2" y="1891.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="672.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/620063611.accept (13 samples, 0.94%)</title><rect x="669.2" y="1875.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="672.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (13 samples, 0.94%)</title><rect x="669.2" y="1859.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="672.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 0.94%)</title><rect x="669.2" y="1843.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="672.2" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 0.94%)</title><rect x="669.2" y="1827.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="672.2" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 0.94%)</title><rect x="669.2" y="1811.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="672.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="680.3" y="1923.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="683.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="680.3" y="1907.0" width="2.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="683.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.22%)</title><rect x="682.8" y="1987.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.8" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.22%)</title><rect x="682.8" y="1971.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.22%)</title><rect x="682.8" y="1955.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="685.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.22%)</title><rect x="682.8" y="1939.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="684.5" y="1923.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="687.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 16.43%)</title><rect x="685.4" y="1987.0" width="193.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.4" y="1998.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (226 samples, 16.35%)</title><rect x="686.2" y="1971.0" width="193.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="689.2" y="1982.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (196 samples, 14.18%)</title><rect x="687.1" y="1955.0" width="167.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.1" y="1966.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.65%)</title><rect x="699.0" y="1939.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (173 samples, 12.52%)</title><rect x="706.7" y="1939.0" width="147.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.7" y="1950.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 12.08%)</title><rect x="711.9" y="1923.0" width="142.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="714.9" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.14%)</title><rect x="717.8" y="1907.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="720.8" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="719.5" y="1907.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="722.5" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 11.00%)</title><rect x="721.2" y="1907.0" width="129.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="724.2" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="726.4" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="729.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.10%)</title><rect x="727.2" y="1891.0" width="24.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="730.2" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.58%)</title><rect x="739.2" y="1875.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="742.2" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="740.9" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="743.9" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.22%)</title><rect x="741.7" y="1859.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="744.7" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="744.3" y="1859.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="747.3" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="746.0" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="749.0" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.29%)</title><rect x="746.9" y="1875.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="749.9" y="1886.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.07%)</title><rect x="749.4" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="752.4" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="749.4" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="752.4" y="1854.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="749.4" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="752.4" y="1838.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.07%)</title><rect x="749.4" y="1811.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="752.4" y="1822.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="750.3" y="1875.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="753.3" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.14%)</title><rect x="752.0" y="1891.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.0" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (12 samples, 0.87%)</title><rect x="753.7" y="1891.0" width="10.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="756.7" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.10%)</title><rect x="763.9" y="1891.0" width="24.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="766.9" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 3.62%)</title><rect x="788.7" y="1891.0" width="42.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="791.7" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.36%)</title><rect x="831.4" y="1891.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="834.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="835.7" y="1891.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="838.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.29%)</title><rect x="836.5" y="1891.0" width="3.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="839.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="839.9" y="1891.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="842.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.51%)</title><rect x="840.8" y="1891.0" width="6.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="843.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="846.8" y="1891.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="849.8" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="847.6" y="1891.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.6" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.22%)</title><rect x="848.5" y="1891.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="851.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="851.0" y="1907.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="854.0" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.22%)</title><rect x="851.9" y="1907.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="854.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (29 samples, 2.10%)</title><rect x="854.4" y="1955.0" width="24.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="857.4" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (29 samples, 2.10%)</title><rect x="854.4" y="1939.0" width="24.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.4" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (29 samples, 2.10%)</title><rect x="854.4" y="1923.0" width="24.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.4" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (29 samples, 2.10%)</title><rect x="854.4" y="1907.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.4" y="1918.0">j..</text>
</g>
<g>
<title>start_thread (364 samples, 26.34%)</title><rect x="879.2" y="2035.0" width="310.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="882.2" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (364 samples, 26.34%)</title><rect x="879.2" y="2019.0" width="310.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="882.2" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (31 samples, 2.24%)</title><rect x="879.2" y="2003.0" width="26.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.2" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 0.65%)</title><rect x="879.2" y="1987.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.2" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.65%)</title><rect x="879.2" y="1971.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.2" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.36%)</title><rect x="879.2" y="1955.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.2" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.29%)</title><rect x="883.5" y="1955.0" width="3.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="886.5" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 1.59%)</title><rect x="886.9" y="1987.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="889.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 0.80%)</title><rect x="886.9" y="1971.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.9" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.14%)</title><rect x="886.9" y="1955.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.9" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.22%)</title><rect x="888.6" y="1955.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="891.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.43%)</title><rect x="891.2" y="1955.0" width="5.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="894.2" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.51%)</title><rect x="896.3" y="1971.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.3" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.22%)</title><rect x="896.3" y="1955.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="899.3" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="896.3" y="1939.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.3" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="896.3" y="1923.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="899.3" y="1934.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="896.3" y="1907.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="899.3" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="897.1" y="1939.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.1" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="897.1" y="1923.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.1" y="1934.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.14%)</title><rect x="897.1" y="1907.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="900.1" y="1918.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.14%)</title><rect x="897.1" y="1891.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="900.1" y="1902.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.07%)</title><rect x="897.1" y="1875.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="900.1" y="1886.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.07%)</title><rect x="897.1" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="900.1" y="1870.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.07%)</title><rect x="898.0" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.0" y="1886.0"></text>
</g>
<g>
<title>Relocation::pd_address_in_code() (1 samples, 0.07%)</title><rect x="898.0" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="901.0" y="1870.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.29%)</title><rect x="898.8" y="1955.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="901.8" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.29%)</title><rect x="898.8" y="1939.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.8" y="1950.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="901.4" y="1923.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="904.4" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="902.3" y="1971.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.3" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="902.3" y="1955.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="905.3" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.29%)</title><rect x="902.3" y="1939.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="905.3" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.22%)</title><rect x="902.3" y="1923.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="905.3" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.22%)</title><rect x="902.3" y="1907.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="905.3" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.22%)</title><rect x="902.3" y="1891.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="905.3" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="903.1" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.1" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.07%)</title><rect x="904.0" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="907.0" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.07%)</title><rect x="904.0" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.0" y="1870.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.07%)</title><rect x="904.8" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="907.8" y="1934.0"></text>
</g>
<g>
<title>JavaThread::run() (330 samples, 23.88%)</title><rect x="905.7" y="2003.0" width="281.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.7" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (330 samples, 23.88%)</title><rect x="905.7" y="1987.0" width="281.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="908.7" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (329 samples, 23.81%)</title><rect x="905.7" y="1971.0" width="280.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="908.7" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (329 samples, 23.81%)</title><rect x="905.7" y="1955.0" width="280.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="908.7" y="1966.0">CompileBroker::invoke_compiler_on_meth..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (329 samples, 23.81%)</title><rect x="905.7" y="1939.0" width="280.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.7" y="1950.0">C2Compiler::compile_method(ciEnv*, ciM..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (329 samples, 23.81%)</title><rect x="905.7" y="1923.0" width="280.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="908.7" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (85 samples, 6.15%)</title><rect x="905.7" y="1907.0" width="72.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="908.7" y="1918.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.22%)</title><rect x="905.7" y="1891.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="908.7" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="905.7" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="908.7" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.14%)</title><rect x="906.5" y="1875.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="909.5" y="1886.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.07%)</title><rect x="906.5" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="909.5" y="1870.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.07%)</title><rect x="906.5" y="1843.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="909.5" y="1854.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.07%)</title><rect x="906.5" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.5" y="1838.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="906.5" y="1811.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="909.5" y="1822.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="907.4" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="910.4" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.14%)</title><rect x="908.2" y="1891.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="911.2" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="908.2" y="1875.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.2" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="908.2" y="1859.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.2" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="909.9" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="912.9" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.65%)</title><rect x="910.8" y="1891.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.8" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="910.8" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="913.8" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="911.6" y="1875.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.6" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.51%)</title><rect x="912.5" y="1875.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.5" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.29%)</title><rect x="913.4" y="1859.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="916.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="916.8" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="919.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="917.6" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="917.6" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="920.6" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="917.6" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.6" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.07%)</title><rect x="917.6" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.6" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.07%)</title><rect x="917.6" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.6" y="1806.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.07%)</title><rect x="917.6" y="1779.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.6" y="1790.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="917.6" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.6" y="1774.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="917.6" y="1747.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="920.6" y="1758.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.29%)</title><rect x="918.5" y="1891.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="921.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.29%)</title><rect x="918.5" y="1875.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="918.5" y="1859.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.5" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="918.5" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.5" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="919.3" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="922.3" y="1854.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="919.3" y="1827.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.3" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="920.2" y="1859.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="923.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="921.0" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (66 samples, 4.78%)</title><rect x="921.9" y="1891.0" width="56.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.9" y="1902.0">PhaseC..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.14%)</title><rect x="921.9" y="1875.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="924.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.14%)</title><rect x="923.6" y="1875.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="923.6" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.07%)</title><rect x="924.5" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="924.5" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.22%)</title><rect x="925.3" y="1875.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="928.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="926.2" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="929.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="927.0" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="927.0" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="930.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.87%)</title><rect x="927.9" y="1875.0" width="10.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.9" y="1886.0"></text>
</g>
<g>
<title>loadRangeNode::rule() const (1 samples, 0.07%)</title><rect x="937.3" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="940.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 1.01%)</title><rect x="938.1" y="1875.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="942.4" y="1859.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.29%)</title><rect x="944.1" y="1859.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.1" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="947.5" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="950.5" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="948.4" y="1859.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="951.4" y="1870.0"></text>
</g>
<g>
<title>testI_regNode::rule() const (1 samples, 0.07%)</title><rect x="949.2" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.22%)</title><rect x="950.1" y="1875.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="950.1" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.14%)</title><rect x="950.9" y="1859.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.22%)</title><rect x="952.6" y="1875.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="955.6" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="952.6" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="955.6" y="1870.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="953.5" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.5" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.07%)</title><rect x="954.3" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.51%)</title><rect x="955.2" y="1875.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.2" y="1886.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="957.8" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.22%)</title><rect x="958.6" y="1859.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="961.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="961.2" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.2" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="961.2" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.36%)</title><rect x="962.0" y="1875.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.0" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.22%)</title><rect x="962.0" y="1859.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (2 samples, 0.14%)</title><rect x="962.9" y="1843.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (2 samples, 0.14%)</title><rect x="962.9" y="1827.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.9" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.14%)</title><rect x="964.6" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="964.6" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.6" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="965.4" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="968.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="965.4" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="966.3" y="1875.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="967.1" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.29%)</title><rect x="968.0" y="1875.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="968.9" y="1859.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="971.4" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="971.4" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.4" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.51%)</title><rect x="972.3" y="1875.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.07%)</title><rect x="974.0" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.29%)</title><rect x="974.8" y="1859.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="976.5" y="1843.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.5" y="1854.0"></text>
</g>
<g>
<title>Compile::Optimize() (228 samples, 16.50%)</title><rect x="978.2" y="1907.0" width="194.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.2" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.14%)</title><rect x="978.2" y="1891.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.2" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.14%)</title><rect x="978.2" y="1875.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.2" y="1886.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.07%)</title><rect x="979.1" y="1859.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.43%)</title><rect x="980.0" y="1891.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.43%)</title><rect x="980.0" y="1875.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="980.8" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="983.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="980.8" y="1843.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.07%)</title><rect x="980.8" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="983.8" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="980.8" y="1811.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.8" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="980.8" y="1795.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.8" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="980.8" y="1779.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="983.8" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="980.8" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.8" y="1774.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="980.8" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.29%)</title><rect x="981.7" y="1859.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.22%)</title><rect x="982.5" y="1843.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1811.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1795.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1779.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1731.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1699.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1683.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1667.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1651.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1635.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1619.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1587.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1571.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1555.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1539.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1523.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1507.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1491.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1475.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1459.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1443.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1427.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1411.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1395.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1379.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1363.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1347.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1331.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1315.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1299.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1283.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1251.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="985.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1235.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1219.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1187.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1171.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1107.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="1011.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="995.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="947.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="915.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="883.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="851.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="819.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="803.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="771.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="675.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="611.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="563.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="547.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="531.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="515.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="435.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="419.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="403.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="387.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="371.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="982.5" y="355.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.5" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.07%)</title><rect x="982.5" y="339.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="983.4" y="1827.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="983.4" y="1811.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1747.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1731.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="986.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1699.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1683.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="986.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1651.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="986.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1635.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="986.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1619.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1603.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1587.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1571.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1555.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1539.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1523.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1507.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1491.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1475.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1459.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1443.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1427.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1411.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1395.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1379.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1347.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="986.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1331.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1315.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1299.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1283.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1267.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="986.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="986.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1203.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1171.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1155.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1139.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1091.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="986.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1059.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1011.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1795.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1763.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1731.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1715.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1699.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1683.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1667.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1651.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1635.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1619.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1603.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1587.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1571.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1555.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1539.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1523.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1507.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1491.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1475.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1459.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1443.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1427.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1411.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1395.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1363.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1347.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1331.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1315.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1299.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1283.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1267.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1235.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1203.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1187.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1171.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.2" y="1166.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="984.2" y="1139.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.2" y="1150.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="984.2" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.2" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.22%)</title><rect x="985.1" y="1891.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.1" y="1902.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="985.9" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.9" y="1886.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="986.8" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="987.6" y="1891.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="987.6" y="1875.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (188 samples, 13.60%)</title><rect x="988.5" y="1891.0" width="160.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.5" y="1902.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="988.5" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.5" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="988.5" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="991.5" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="988.5" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.07%)</title><rect x="988.5" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="988.5" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.5" y="1822.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="988.5" y="1795.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="991.5" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="989.3" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate_insertion_point(Node*, Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="989.3" y="1859.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.3" y="1870.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="990.2" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.36%)</title><rect x="991.1" y="1875.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.1" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="993.6" y="1859.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.36%)</title><rect x="995.3" y="1875.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.14%)</title><rect x="997.0" y="1859.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="997.9" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.9" y="1854.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="998.7" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (158 samples, 11.43%)</title><rect x="999.6" y="1875.0" width="134.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.6" y="1886.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (154 samples, 11.14%)</title><rect x="1003.0" y="1859.0" width="131.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.0" y="1870.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (11 samples, 0.80%)</title><rect x="1007.3" y="1843.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1016.7" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1019.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (137 samples, 9.91%)</title><rect x="1017.5" y="1843.0" width="117.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.5" y="1854.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.14%)</title><rect x="1113.2" y="1827.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1113.2" y="1811.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (22 samples, 1.59%)</title><rect x="1114.9" y="1827.0" width="18.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1133.6" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1133.6" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.29%)</title><rect x="1134.5" y="1875.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1137.1" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.51%)</title><rect x="1137.9" y="1875.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (6 samples, 0.43%)</title><rect x="1138.8" y="1859.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.14%)</title><rect x="1139.6" y="1843.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (2 samples, 0.14%)</title><rect x="1139.6" y="1827.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.22%)</title><rect x="1141.3" y="1843.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.3" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1141.3" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1141.3" y="1811.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1141.3" y="1795.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.3" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1141.3" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1141.3" y="1763.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="1774.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1141.3" y="1747.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::find_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1141.3" y="1731.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="1742.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.07%)</title><rect x="1141.3" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.3" y="1726.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1142.2" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1143.0" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.0" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1143.0" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.22%)</title><rect x="1143.9" y="1875.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1143.9" y="1859.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.9" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1143.9" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.7" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.7" y="1854.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.07%)</title><rect x="1144.7" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.7" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1145.6" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.6" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="1145.6" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="1838.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1145.6" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.6" y="1822.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1145.6" y="1795.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="1806.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.07%)</title><rect x="1146.5" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.5" y="1886.0"></text>
</g>
<g>
<title>UnlockNode::Opcode() const (1 samples, 0.07%)</title><rect x="1147.3" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.3" y="1886.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1148.2" y="1875.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1151.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1149.0" y="1891.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1149.0" y="1875.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (24 samples, 1.74%)</title><rect x="1149.9" y="1891.0" width="20.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.9" y="1902.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.07%)</title><rect x="1149.9" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 1.66%)</title><rect x="1150.7" y="1875.0" width="19.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.7" y="1886.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.6" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.6" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.6" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.6" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1152.4" y="1859.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1152.4" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1152.4" y="1827.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="1838.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1153.3" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.3" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1153.3" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.3" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1153.3" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.3" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1154.1" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.1" y="1870.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1154.1" y="1843.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.1" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1154.1" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.1" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1154.1" y="1811.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.1" y="1822.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1154.1" y="1795.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.1" y="1806.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.0" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1155.0" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1155.0" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="1838.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1155.0" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (5 samples, 0.36%)</title><rect x="1155.8" y="1859.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1160.1" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1161.0" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1161.8" y="1859.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1163.5" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1164.4" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.4" y="1870.0"></text>
</g>
<g>
<title>Type::empty() const (1 samples, 0.07%)</title><rect x="1164.4" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.4" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.2" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.2" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1165.2" y="1827.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.2" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.29%)</title><rect x="1166.1" y="1859.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.1" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 0.29%)</title><rect x="1166.1" y="1843.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.29%)</title><rect x="1166.1" y="1827.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.29%)</title><rect x="1166.1" y="1811.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1795.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.1" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1779.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1763.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1747.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.1" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.1" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1699.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1683.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.1" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1651.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1635.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1619.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.1" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1603.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1571.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.1" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1555.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1539.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1523.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.1" y="1507.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1166.1" y="1491.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="1502.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.22%)</title><rect x="1166.9" y="1795.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.22%)</title><rect x="1166.9" y="1779.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1169.5" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1169.5" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.5" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1169.5" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.5" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.4" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1170.4" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.4" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1170.4" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.4" y="1827.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1173.4" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.2" y="1891.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.07%)</title><rect x="1171.2" y="1875.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.2" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="1870.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1171.2" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="1854.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1171.2" y="1827.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1174.2" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1172.1" y="1891.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1175.1" y="1902.0"></text>
</g>
<g>
<title>CompileWrapper::~CompileWrapper() (1 samples, 0.07%)</title><rect x="1172.9" y="1907.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="1918.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.07%)</title><rect x="1172.9" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="1902.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.07%)</title><rect x="1172.9" y="1875.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="1886.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.09%)</title><rect x="1173.8" y="1907.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.09%)</title><rect x="1173.8" y="1891.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.09%)</title><rect x="1173.8" y="1875.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.8" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.09%)</title><rect x="1173.8" y="1859.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.09%)</title><rect x="1173.8" y="1843.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 1.09%)</title><rect x="1173.8" y="1827.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.8" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.8" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.8" y="1795.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.8" y="1779.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.8" y="1763.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.8" y="1747.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.8" y="1731.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.8" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.8" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.8" y="1683.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1173.8" y="1667.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.8" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1173.8" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1173.8" y="1635.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.8" y="1646.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1173.8" y="1619.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1173.8" y="1603.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1173.8" y="1587.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.8" y="1598.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1173.8" y="1571.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.94%)</title><rect x="1174.6" y="1811.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.94%)</title><rect x="1174.6" y="1795.0" width="11.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.94%)</title><rect x="1174.6" y="1779.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.94%)</title><rect x="1174.6" y="1763.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.94%)</title><rect x="1174.6" y="1747.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.94%)</title><rect x="1174.6" y="1731.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.72%)</title><rect x="1174.6" y="1715.0" width="8.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.72%)</title><rect x="1174.6" y="1699.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.72%)</title><rect x="1174.6" y="1683.0" width="8.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.72%)</title><rect x="1174.6" y="1667.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.72%)</title><rect x="1174.6" y="1651.0" width="8.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.6" y="1662.0"></text>
</g>
<g>
<title>CmpNode::CmpNode(Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.6" y="1635.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.6" y="1646.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.6" y="1619.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.6" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.51%)</title><rect x="1175.5" y="1635.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.51%)</title><rect x="1175.5" y="1619.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.51%)</title><rect x="1175.5" y="1603.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.51%)</title><rect x="1175.5" y="1587.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.51%)</title><rect x="1175.5" y="1571.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.51%)</title><rect x="1175.5" y="1555.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.51%)</title><rect x="1175.5" y="1539.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.36%)</title><rect x="1175.5" y="1523.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.36%)</title><rect x="1175.5" y="1507.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.36%)</title><rect x="1175.5" y="1491.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.36%)</title><rect x="1175.5" y="1475.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.36%)</title><rect x="1175.5" y="1459.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.36%)</title><rect x="1175.5" y="1443.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.36%)</title><rect x="1175.5" y="1427.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.36%)</title><rect x="1175.5" y="1411.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.36%)</title><rect x="1175.5" y="1395.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="1406.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1175.5" y="1379.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="1390.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="1363.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="1374.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.5" y="1347.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="1358.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1175.5" y="1331.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="1342.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1175.5" y="1315.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="1326.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1175.5" y="1299.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="1310.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1175.5" y="1283.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1178.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1176.3" y="1379.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1176.3" y="1363.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1176.3" y="1347.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1176.3" y="1331.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1176.3" y="1315.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.3" y="1299.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.3" y="1283.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.3" y="1267.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.3" y="1251.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.3" y="1235.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.3" y="1219.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.3" y="1203.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.3" y="1187.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.3" y="1171.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.3" y="1155.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.3" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.3" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.3" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.3" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.3" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.3" y="1059.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.3" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.3" y="1027.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.3" y="1011.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.3" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.3" y="979.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.3" y="963.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.3" y="947.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.3" y="931.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="942.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1176.3" y="915.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1176.3" y="899.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="910.0"></text>
</g>
<g>
<title>SubLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1176.3" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="894.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1176.3" y="867.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1176.3" y="851.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1179.3" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1177.2" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="1310.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1177.2" y="1283.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="1294.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1331.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1315.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.0" y="1299.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.0" y="1283.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.0" y="1267.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="1278.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1178.0" y="1251.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.0" y="1262.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.07%)</title><rect x="1178.0" y="1235.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="1246.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1178.9" y="1347.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="1358.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.8" y="1523.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.8" y="1507.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.8" y="1491.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.8" y="1475.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.8" y="1459.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.8" y="1443.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.8" y="1427.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.8" y="1411.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.8" y="1395.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.8" y="1379.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.8" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.8" y="1347.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.8" y="1331.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.8" y="1315.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.8" y="1299.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.8" y="1283.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.8" y="1267.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.8" y="1251.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.8" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.8" y="1219.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.8" y="1203.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.8" y="1187.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.8" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.8" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.8" y="1139.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.8" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.8" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.8" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.8" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.8" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.8" y="1043.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1179.8" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="1006.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1179.8" y="979.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="1507.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="1491.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="1475.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="1459.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="1443.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.6" y="1427.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="1411.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="1395.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.6" y="1379.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.6" y="1363.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.6" y="1347.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.6" y="1331.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.6" y="1315.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1326.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.6" y="1299.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="1310.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.07%)</title><rect x="1180.6" y="1283.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="1294.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.6" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="1278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.6" y="1251.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1262.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1180.6" y="1235.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="1246.0"></text>
</g>
<g>
<title>CatchProjNode::hash() const (1 samples, 0.07%)</title><rect x="1180.6" y="1219.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="1180.6" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.07%)</title><rect x="1181.5" y="1635.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="1646.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.07%)</title><rect x="1181.5" y="1619.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="1630.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="1181.5" y="1603.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1635.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="1646.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1619.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="1630.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1182.3" y="1603.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="1614.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1182.3" y="1587.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="1598.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1571.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="1582.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.07%)</title><rect x="1182.3" y="1555.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="1566.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1183.2" y="1715.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1726.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1183.2" y="1699.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="1710.0"></text>
</g>
<g>
<title>ReplacedNodes::record(Node*, Node*) (1 samples, 0.07%)</title><rect x="1183.2" y="1683.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="1694.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1183.2" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="1683.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="1667.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="1651.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="1635.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="1619.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="1587.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="1571.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="1555.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="1539.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="1523.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="1507.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.0" y="1491.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.0" y="1475.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.0" y="1459.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.0" y="1443.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.0" y="1427.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="1438.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1184.0" y="1411.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="1422.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.0" y="1395.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.0" y="1379.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="1390.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1184.0" y="1363.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="1374.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="1347.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="1358.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.0" y="1331.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="1342.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.0" y="1315.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="1326.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.0" y="1299.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="1310.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.07%)</title><rect x="1184.0" y="1283.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="1294.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.9" y="1699.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.9" y="1683.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.9" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.9" y="1651.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.9" y="1635.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.9" y="1619.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.9" y="1603.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.9" y="1587.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.9" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.9" y="1571.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.9" y="1555.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.9" y="1539.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.9" y="1523.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.9" y="1507.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.9" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.9" y="1491.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.9" y="1475.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.9" y="1459.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.9" y="1443.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.9" y="1427.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.9" y="1411.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="1422.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1184.9" y="1395.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.9" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.9" y="1379.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="1390.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.9" y="1363.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="1374.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1184.9" y="1347.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="1358.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1184.9" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="1342.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.9" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="1326.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.9" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="1310.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.9" y="1283.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="1294.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.9" y="1267.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="1278.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1184.9" y="1251.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="1262.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.07%)</title><rect x="1184.9" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.7" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.7" y="1795.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.7" y="1779.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.7" y="1763.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.7" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.7" y="1731.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.7" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.7" y="1699.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.7" y="1683.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.7" y="1667.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.7" y="1651.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.7" y="1635.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.7" y="1619.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.7" y="1603.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.7" y="1587.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.7" y="1571.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.7" y="1555.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.7" y="1539.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="1523.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.7" y="1534.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="1507.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="1518.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1185.7" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="1502.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1185.7" y="1475.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="1486.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1185.7" y="1459.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="1470.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1185.7" y="1443.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="1454.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="1427.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="1438.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.6" y="1971.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.6" y="1955.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.6" y="1939.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.6" y="1923.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1189.6" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(instanceKlassHandle, methodHandle) (1 samples, 0.07%)</title><rect x="1186.6" y="1907.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="1918.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.22%)</title><rect x="1187.4" y="2003.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.4" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.22%)</title><rect x="1187.4" y="1987.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.4" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1187.4" y="1971.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.14%)</title><rect x="1188.3" y="1971.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.3" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.14%)</title><rect x="1188.3" y="1955.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.14%)</title><rect x="1188.3" y="1939.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.14%)</title><rect x="1188.3" y="1923.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.3" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.14%)</title><rect x="1188.3" y="1907.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.3" y="1918.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.07%)</title><rect x="1188.3" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.3" y="1902.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="1188.3" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="1188.3" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="1870.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.07%)</title><rect x="1189.1" y="1891.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="1902.0"></text>
</g>
</g>
</svg>
