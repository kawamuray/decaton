<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (305 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 5.25%)</title><rect x="10.0" y="1139.0" width="61.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.66%)</title><rect x="10.0" y="1123.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.33%)</title><rect x="13.9" y="1107.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.33%)</title><rect x="13.9" y="1091.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.33%)</title><rect x="13.9" y="1075.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.33%)</title><rect x="13.9" y="1059.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.33%)</title><rect x="13.9" y="1043.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (14 samples, 4.59%)</title><rect x="17.7" y="1123.0" width="54.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.7" y="1134.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.33%)</title><rect x="17.7" y="1107.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.33%)</title><rect x="17.7" y="1091.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (1 samples, 0.33%)</title><rect x="17.7" y="1075.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.33%)</title><rect x="17.7" y="1059.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.33%)</title><rect x="17.7" y="1043.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.33%)</title><rect x="17.7" y="1027.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.31%)</title><rect x="21.6" y="1107.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (3 samples, 0.98%)</title><rect x="21.6" y="1091.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (3 samples, 0.98%)</title><rect x="21.6" y="1075.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.66%)</title><rect x="21.6" y="1059.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.66%)</title><rect x="21.6" y="1043.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.66%)</title><rect x="21.6" y="1027.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.66%)</title><rect x="21.6" y="1011.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.66%)</title><rect x="21.6" y="995.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.66%)</title><rect x="21.6" y="979.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.33%)</title><rect x="21.6" y="963.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.33%)</title><rect x="21.6" y="947.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.33%)</title><rect x="21.6" y="931.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.33%)</title><rect x="25.5" y="963.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.33%)</title><rect x="25.5" y="947.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.33%)</title><rect x="25.5" y="931.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.5" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="25.5" y="915.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.5" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.33%)</title><rect x="25.5" y="899.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="28.5" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.33%)</title><rect x="25.5" y="883.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="28.5" y="894.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.33%)</title><rect x="25.5" y="867.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.33%)</title><rect x="29.3" y="1059.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.3" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="33.2" y="1091.0" width="3.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="36.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.95%)</title><rect x="37.1" y="1107.0" width="34.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.1" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.95%)</title><rect x="37.1" y="1091.0" width="34.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.1" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 1.97%)</title><rect x="37.1" y="1075.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.1" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.33%)</title><rect x="37.1" y="1059.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.33%)</title><rect x="37.1" y="1043.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.1" y="1054.0"></text>
</g>
<g>
<title>monitorenter_nofpu Runtime1 stub (1 samples, 0.33%)</title><rect x="37.1" y="1027.0" width="3.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="40.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="41.0" y="1059.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="41.0" y="1043.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="41.0" y="1027.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.33%)</title><rect x="41.0" y="1011.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.33%)</title><rect x="41.0" y="995.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.33%)</title><rect x="41.0" y="979.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.33%)</title><rect x="41.0" y="963.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.33%)</title><rect x="41.0" y="947.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.33%)</title><rect x="41.0" y="931.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.33%)</title><rect x="41.0" y="915.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.33%)</title><rect x="41.0" y="899.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.33%)</title><rect x="41.0" y="883.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.0" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.33%)</title><rect x="41.0" y="867.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.0" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.33%)</title><rect x="41.0" y="851.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.31%)</title><rect x="44.8" y="1059.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.31%)</title><rect x="44.8" y="1043.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.98%)</title><rect x="44.8" y="1027.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.98%)</title><rect x="44.8" y="1011.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.33%)</title><rect x="48.7" y="995.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.33%)</title><rect x="52.6" y="995.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.33%)</title><rect x="52.6" y="979.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.33%)</title><rect x="52.6" y="963.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.6" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.33%)</title><rect x="52.6" y="947.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.33%)</title><rect x="56.4" y="1027.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.33%)</title><rect x="56.4" y="1011.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.33%)</title><rect x="56.4" y="995.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.33%)</title><rect x="56.4" y="979.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.4" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.33%)</title><rect x="56.4" y="963.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.33%)</title><rect x="56.4" y="947.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.66%)</title><rect x="60.3" y="1075.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.66%)</title><rect x="60.3" y="1059.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.66%)</title><rect x="60.3" y="1043.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.33%)</title><rect x="60.3" y="1027.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (1 samples, 0.33%)</title><rect x="60.3" y="1011.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.33%)</title><rect x="60.3" y="995.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.33%)</title><rect x="60.3" y="979.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.33%)</title><rect x="60.3" y="963.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="60.3" y="947.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="60.3" y="931.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.33%)</title><rect x="64.2" y="1027.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.33%)</title><rect x="68.0" y="1075.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.33%)</title><rect x="68.0" y="1059.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="68.0" y="1043.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="71.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (158 samples, 51.80%)</title><rect x="71.9" y="1139.0" width="611.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.9" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (158 samples, 51.80%)</title><rect x="71.9" y="1123.0" width="611.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.9" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (158 samples, 51.80%)</title><rect x="71.9" y="1107.0" width="611.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.9" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (151 samples, 49.51%)</title><rect x="79.6" y="1091.0" width="584.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.6" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50 (151 samples, 49.51%)</title><rect x="79.6" y="1075.0" width="584.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.6" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (151 samples, 49.51%)</title><rect x="79.6" y="1059.0" width="584.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.6" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (148 samples, 48.52%)</title><rect x="79.6" y="1043.0" width="572.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="82.6" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (25 samples, 8.20%)</title><rect x="83.5" y="1027.0" width="96.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.5" y="1038.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (25 samples, 8.20%)</title><rect x="83.5" y="1011.0" width="96.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.5" y="1022.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 8.20%)</title><rect x="83.5" y="995.0" width="96.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.5" y="1006.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 8.20%)</title><rect x="83.5" y="979.0" width="96.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.5" y="990.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 8.20%)</title><rect x="83.5" y="963.0" width="96.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.5" y="974.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 8.20%)</title><rect x="83.5" y="947.0" width="96.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.5" y="958.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 2.62%)</title><rect x="83.5" y="931.0" width="31.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.5" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.66%)</title><rect x="87.4" y="915.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.66%)</title><rect x="87.4" y="899.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.66%)</title><rect x="87.4" y="883.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.66%)</title><rect x="87.4" y="867.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.66%)</title><rect x="87.4" y="851.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.66%)</title><rect x="87.4" y="835.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.64%)</title><rect x="95.1" y="915.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.31%)</title><rect x="99.0" y="899.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.33%)</title><rect x="99.0" y="883.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.33%)</title><rect x="99.0" y="867.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.66%)</title><rect x="102.9" y="883.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.66%)</title><rect x="102.9" y="867.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.66%)</title><rect x="102.9" y="851.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.9" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.66%)</title><rect x="102.9" y="835.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="105.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.66%)</title><rect x="102.9" y="819.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="105.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.66%)</title><rect x="102.9" y="803.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="105.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.66%)</title><rect x="102.9" y="787.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="105.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.33%)</title><rect x="102.9" y="771.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="105.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.33%)</title><rect x="102.9" y="755.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="105.9" y="766.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.33%)</title><rect x="102.9" y="739.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="105.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.33%)</title><rect x="102.9" y="723.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="105.9" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.33%)</title><rect x="102.9" y="707.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="105.9" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.33%)</title><rect x="106.7" y="771.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="109.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.33%)</title><rect x="110.6" y="883.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.6" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="110.6" y="867.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="113.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="110.6" y="851.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="110.6" y="835.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="113.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="110.6" y="819.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="113.6" y="830.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.33%)</title><rect x="110.6" y="803.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="113.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.33%)</title><rect x="110.6" y="787.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="113.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 4.92%)</title><rect x="114.5" y="931.0" width="58.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.5" y="942.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.33%)</title><rect x="114.5" y="915.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.98%)</title><rect x="118.3" y="915.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.98%)</title><rect x="118.3" y="899.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="121.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.33%)</title><rect x="118.3" y="883.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.66%)</title><rect x="122.2" y="883.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.66%)</title><rect x="122.2" y="867.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="125.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="126.1" y="851.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="129.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="126.1" y="835.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="129.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="126.1" y="819.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="129.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 3.28%)</title><rect x="129.9" y="915.0" width="38.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.9" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.98%)</title><rect x="133.8" y="899.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.66%)</title><rect x="133.8" y="883.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.66%)</title><rect x="133.8" y="867.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.66%)</title><rect x="133.8" y="851.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.33%)</title><rect x="137.7" y="835.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.33%)</title><rect x="141.5" y="883.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.33%)</title><rect x="141.5" y="867.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.33%)</title><rect x="141.5" y="851.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.33%)</title><rect x="141.5" y="835.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.33%)</title><rect x="141.5" y="819.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.33%)</title><rect x="145.4" y="899.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.64%)</title><rect x="149.3" y="899.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.64%)</title><rect x="149.3" y="883.0" width="19.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.64%)</title><rect x="149.3" y="867.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.33%)</title><rect x="149.3" y="851.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.33%)</title><rect x="149.3" y="835.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.33%)</title><rect x="149.3" y="819.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.33%)</title><rect x="149.3" y="803.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.33%)</title><rect x="153.1" y="851.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.66%)</title><rect x="157.0" y="851.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.66%)</title><rect x="157.0" y="835.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.66%)</title><rect x="157.0" y="819.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.66%)</title><rect x="157.0" y="803.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.0" y="814.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.66%)</title><rect x="157.0" y="787.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="160.9" y="771.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="163.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.33%)</title><rect x="164.8" y="851.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="164.8" y="835.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="164.8" y="819.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="167.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.33%)</title><rect x="168.6" y="915.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.66%)</title><rect x="172.5" y="931.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.66%)</title><rect x="172.5" y="915.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.66%)</title><rect x="172.5" y="899.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.66%)</title><rect x="172.5" y="883.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.66%)</title><rect x="172.5" y="867.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (114 samples, 37.38%)</title><rect x="180.2" y="1027.0" width="441.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.2" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (18 samples, 5.90%)</title><rect x="180.2" y="1011.0" width="69.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.2" y="1022.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 5.25%)</title><rect x="188.0" y="995.0" width="61.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.0" y="1006.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 4.26%)</title><rect x="199.6" y="979.0" width="50.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.6" y="990.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.33%)</title><rect x="203.4" y="963.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.33%)</title><rect x="203.4" y="947.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.33%)</title><rect x="203.4" y="931.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.33%)</title><rect x="203.4" y="915.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 3.61%)</title><rect x="207.3" y="963.0" width="42.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.3" y="974.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.66%)</title><rect x="242.1" y="947.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.66%)</title><rect x="242.1" y="931.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="249.9" y="1011.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 7.21%)</title><rect x="253.7" y="1011.0" width="85.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.7" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 7.21%)</title><rect x="253.7" y="995.0" width="85.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.7" y="1006.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 2.95%)</title><rect x="261.5" y="979.0" width="34.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.5" y="990.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.98%)</title><rect x="277.0" y="963.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.0" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.66%)</title><rect x="280.8" y="947.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.8" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.66%)</title><rect x="280.8" y="931.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.8" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.66%)</title><rect x="280.8" y="915.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.8" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.66%)</title><rect x="280.8" y="899.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.8" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="284.7" y="883.0" width="3.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="287.7" y="894.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.33%)</title><rect x="288.6" y="963.0" width="3.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="291.6" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="292.4" y="963.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="295.4" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.66%)</title><rect x="296.3" y="979.0" width="7.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="299.3" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 2.95%)</title><rect x="304.0" y="979.0" width="34.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.0" y="990.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 2.95%)</title><rect x="304.0" y="963.0" width="34.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.0" y="974.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.66%)</title><rect x="304.0" y="947.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.66%)</title><rect x="304.0" y="931.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.66%)</title><rect x="304.0" y="915.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.66%)</title><rect x="304.0" y="899.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.0" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.30%)</title><rect x="311.8" y="947.0" width="27.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.8" y="958.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 1.97%)</title><rect x="315.6" y="931.0" width="23.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.6" y="942.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.31%)</title><rect x="323.4" y="915.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.33%)</title><rect x="335.0" y="899.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (61 samples, 20.00%)</title><rect x="338.9" y="1011.0" width="236.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.9" y="1022.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 20.00%)</title><rect x="338.9" y="995.0" width="236.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.9" y="1006.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (53 samples, 17.38%)</title><rect x="342.7" y="979.0" width="205.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.7" y="990.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (52 samples, 17.05%)</title><rect x="346.6" y="963.0" width="201.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.6" y="974.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (52 samples, 17.05%)</title><rect x="346.6" y="947.0" width="201.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.6" y="958.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (48 samples, 15.74%)</title><rect x="354.3" y="931.0" width="185.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.3" y="942.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (48 samples, 15.74%)</title><rect x="354.3" y="915.0" width="185.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.3" y="926.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 14.75%)</title><rect x="365.9" y="899.0" width="174.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="368.9" y="910.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.66%)</title><rect x="369.8" y="883.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="372.8" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.98%)</title><rect x="377.5" y="883.0" width="11.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="380.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.98%)</title><rect x="377.5" y="867.0" width="11.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="380.5" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.33%)</title><rect x="389.1" y="883.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="392.1" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.98%)</title><rect x="393.0" y="883.0" width="11.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="396.0" y="894.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (35 samples, 11.48%)</title><rect x="404.6" y="883.0" width="135.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="407.6" y="894.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.66%)</title><rect x="451.0" y="867.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="454.0" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="458.8" y="867.0" width="3.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="461.8" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.66%)</title><rect x="462.7" y="867.0" width="7.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="465.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="462.7" y="851.0" width="7.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="465.7" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.93%)</title><rect x="470.4" y="867.0" width="46.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="473.4" y="878.0">__pt..</text>
</g>
<g>
<title>_init (2 samples, 0.66%)</title><rect x="516.8" y="867.0" width="7.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="519.8" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.66%)</title><rect x="524.6" y="867.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="527.6" y="878.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.33%)</title><rect x="532.3" y="867.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="535.3" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="536.2" y="867.0" width="3.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="539.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.33%)</title><rect x="540.0" y="931.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="543.9" y="931.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="546.9" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 1.31%)</title><rect x="547.8" y="979.0" width="15.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="550.8" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 1.31%)</title><rect x="547.8" y="963.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="550.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1063699324.get$Lambda (4 samples, 1.31%)</title><rect x="547.8" y="947.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="550.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$266/1063699324.&lt;init&gt; (4 samples, 1.31%)</title><rect x="547.8" y="931.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.8" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.66%)</title><rect x="563.2" y="979.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.33%)</title><rect x="571.0" y="979.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.93%)</title><rect x="574.9" y="1011.0" width="46.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="577.9" y="1022.0">java..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.66%)</title><rect x="590.3" y="995.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="593.3" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="590.3" y="979.0" width="7.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="593.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.97%)</title><rect x="598.1" y="995.0" width="23.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.1" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.97%)</title><rect x="598.1" y="979.0" width="23.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="601.1" y="990.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1434009224.accept (6 samples, 1.97%)</title><rect x="598.1" y="963.0" width="23.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="601.1" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (6 samples, 1.97%)</title><rect x="598.1" y="947.0" width="23.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="601.1" y="958.0">c..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 1.97%)</title><rect x="598.1" y="931.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.1" y="942.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 1.97%)</title><rect x="598.1" y="915.0" width="23.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="601.1" y="926.0">i..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="617.4" y="899.0" width="3.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="620.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.62%)</title><rect x="621.3" y="1027.0" width="30.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.3" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.64%)</title><rect x="632.9" y="1011.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.98%)</title><rect x="640.6" y="995.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/2125159926.accept (3 samples, 0.98%)</title><rect x="640.6" y="979.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="643.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (3 samples, 0.98%)</title><rect x="640.6" y="963.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (3 samples, 0.98%)</title><rect x="640.6" y="947.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (3 samples, 0.98%)</title><rect x="640.6" y="931.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 0.98%)</title><rect x="640.6" y="915.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.98%)</title><rect x="640.6" y="899.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="643.6" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.98%)</title><rect x="640.6" y="883.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.6" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.98%)</title><rect x="640.6" y="867.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="643.6" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.98%)</title><rect x="640.6" y="851.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="643.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.98%)</title><rect x="652.2" y="1043.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.2" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="660.0" y="1027.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="663.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.64%)</title><rect x="663.8" y="1091.0" width="19.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.31%)</title><rect x="667.7" y="1075.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.66%)</title><rect x="675.4" y="1059.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="678.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.66%)</title><rect x="675.4" y="1043.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.66%)</title><rect x="675.4" y="1027.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="678.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.66%)</title><rect x="675.4" y="1011.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.33%)</title><rect x="683.2" y="1139.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="686.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.33%)</title><rect x="683.2" y="1123.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="683.2" y="1107.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="686.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="683.2" y="1091.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.33%)</title><rect x="683.2" y="1075.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.33%)</title><rect x="683.2" y="1059.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.2" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.33%)</title><rect x="683.2" y="1043.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="686.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.33%)</title><rect x="683.2" y="1027.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.2" y="1038.0"></text>
</g>
<g>
<title>start_thread (130 samples, 42.62%)</title><rect x="687.0" y="1139.0" width="503.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="690.0" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (130 samples, 42.62%)</title><rect x="687.0" y="1123.0" width="503.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="690.0" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 3.61%)</title><rect x="687.0" y="1107.0" width="42.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="690.0" y="1118.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.61%)</title><rect x="687.0" y="1091.0" width="42.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="690.0" y="1102.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 3.61%)</title><rect x="687.0" y="1075.0" width="42.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="690.0" y="1086.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 3.61%)</title><rect x="687.0" y="1059.0" width="42.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="690.0" y="1070.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.33%)</title><rect x="706.4" y="1043.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="709.4" y="1054.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (5 samples, 1.64%)</title><rect x="710.3" y="1043.0" width="19.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="713.3" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (118 samples, 38.69%)</title><rect x="729.6" y="1107.0" width="456.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="732.6" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (118 samples, 38.69%)</title><rect x="729.6" y="1091.0" width="456.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="732.6" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (118 samples, 38.69%)</title><rect x="729.6" y="1075.0" width="456.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.6" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (118 samples, 38.69%)</title><rect x="729.6" y="1059.0" width="456.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="732.6" y="1070.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (116 samples, 38.03%)</title><rect x="729.6" y="1043.0" width="448.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.6" y="1054.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (116 samples, 38.03%)</title><rect x="729.6" y="1027.0" width="448.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="732.6" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (74 samples, 24.26%)</title><rect x="729.6" y="1011.0" width="286.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.6" y="1022.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.33%)</title><rect x="729.6" y="995.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="732.6" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.33%)</title><rect x="729.6" y="979.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="732.6" y="990.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.33%)</title><rect x="729.6" y="963.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="732.6" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.98%)</title><rect x="733.5" y="995.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.5" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.66%)</title><rect x="737.3" y="979.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="740.3" y="990.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.33%)</title><rect x="737.3" y="963.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="740.3" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.33%)</title><rect x="741.2" y="963.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="744.2" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.33%)</title><rect x="741.2" y="947.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="744.2" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.30%)</title><rect x="745.1" y="995.0" width="27.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="748.1" y="1006.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.66%)</title><rect x="745.1" y="979.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="748.1" y="990.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.33%)</title><rect x="749.0" y="963.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.0" y="974.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.64%)</title><rect x="752.8" y="979.0" width="19.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="755.8" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.98%)</title><rect x="756.7" y="963.0" width="11.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.7" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.33%)</title><rect x="768.3" y="963.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.3" y="974.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.33%)</title><rect x="768.3" y="947.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="771.3" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.33%)</title><rect x="768.3" y="931.0" width="3.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="771.3" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.66%)</title><rect x="772.2" y="995.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="775.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.66%)</title><rect x="772.2" y="979.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="775.2" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.33%)</title><rect x="772.2" y="963.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="775.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.33%)</title><rect x="776.0" y="963.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="779.0" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.33%)</title><rect x="776.0" y="947.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (60 samples, 19.67%)</title><rect x="779.9" y="995.0" width="232.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="782.9" y="1006.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.33%)</title><rect x="783.8" y="979.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="786.8" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="787.6" y="979.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.6" y="990.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.33%)</title><rect x="791.5" y="979.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.5" y="990.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.33%)</title><rect x="795.4" y="979.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="798.4" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.66%)</title><rect x="799.2" y="979.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 1.64%)</title><rect x="807.0" y="979.0" width="19.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.98%)</title><rect x="814.7" y="963.0" width="11.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="817.7" y="974.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.33%)</title><rect x="814.7" y="947.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.7" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.66%)</title><rect x="818.6" y="947.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="821.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.66%)</title><rect x="826.3" y="979.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="829.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.33%)</title><rect x="830.2" y="963.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="830.2" y="947.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 2.30%)</title><rect x="834.1" y="979.0" width="27.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="837.1" y="990.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.33%)</title><rect x="853.4" y="963.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="856.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.33%)</title><rect x="853.4" y="947.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.33%)</title><rect x="857.3" y="963.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.33%)</title><rect x="857.3" y="947.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.3" y="958.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.33%)</title><rect x="857.3" y="931.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="860.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.28%)</title><rect x="861.1" y="979.0" width="38.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.1" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.98%)</title><rect x="884.4" y="963.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.4" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="892.1" y="947.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="895.1" y="958.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.33%)</title><rect x="896.0" y="963.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="899.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.98%)</title><rect x="899.8" y="979.0" width="11.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="902.8" y="990.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.33%)</title><rect x="907.6" y="963.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.66%)</title><rect x="911.4" y="979.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="914.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.64%)</title><rect x="919.2" y="979.0" width="19.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.98%)</title><rect x="926.9" y="963.0" width="11.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="929.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.33%)</title><rect x="934.7" y="947.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="937.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.33%)</title><rect x="938.5" y="979.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.5" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 1.97%)</title><rect x="942.4" y="979.0" width="23.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="945.4" y="990.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 1.97%)</title><rect x="942.4" y="963.0" width="23.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="945.4" y="974.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 1.97%)</title><rect x="942.4" y="947.0" width="23.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="945.4" y="958.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.33%)</title><rect x="942.4" y="931.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.4" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.64%)</title><rect x="946.3" y="931.0" width="19.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.3" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.66%)</title><rect x="965.6" y="979.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="968.6" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.66%)</title><rect x="965.6" y="963.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.6" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.98%)</title><rect x="973.3" y="979.0" width="11.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.3" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.98%)</title><rect x="973.3" y="963.0" width="11.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.3" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.66%)</title><rect x="985.0" y="979.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.0" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.66%)</title><rect x="985.0" y="963.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.0" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.33%)</title><rect x="992.7" y="979.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.7" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.31%)</title><rect x="996.6" y="979.0" width="15.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.6" y="990.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1000.4" y="963.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1003.4" y="974.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.33%)</title><rect x="1000.4" y="947.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.4" y="958.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.33%)</title><rect x="1000.4" y="931.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1003.4" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.66%)</title><rect x="1004.3" y="963.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.3" y="974.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.33%)</title><rect x="1008.2" y="947.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.2" y="958.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.33%)</title><rect x="1008.2" y="931.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.2" y="942.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.33%)</title><rect x="1012.0" y="995.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1015.0" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 11.48%)</title><rect x="1015.9" y="1011.0" width="135.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1018.9" y="1022.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.66%)</title><rect x="1015.9" y="995.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1018.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.33%)</title><rect x="1015.9" y="979.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1015.9" y="963.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1018.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1015.9" y="947.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.9" y="958.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.33%)</title><rect x="1019.8" y="979.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1022.8" y="990.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.33%)</title><rect x="1019.8" y="963.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.8" y="974.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.33%)</title><rect x="1019.8" y="947.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.8" y="958.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.66%)</title><rect x="1023.6" y="995.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.66%)</title><rect x="1023.6" y="979.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1026.6" y="990.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.33%)</title><rect x="1027.5" y="963.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 8.20%)</title><rect x="1031.4" y="995.0" width="96.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.4" y="1006.0">PhaseIdealL..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1031.4" y="979.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.4" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1031.4" y="963.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.4" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1031.4" y="947.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.4" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1031.4" y="931.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.33%)</title><rect x="1031.4" y="915.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.4" y="926.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.33%)</title><rect x="1035.2" y="979.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.98%)</title><rect x="1039.1" y="979.0" width="11.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.1" y="990.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.98%)</title><rect x="1039.1" y="963.0" width="11.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.66%)</title><rect x="1050.7" y="979.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 5.57%)</title><rect x="1058.5" y="979.0" width="65.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.5" y="990.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 5.57%)</title><rect x="1058.5" y="963.0" width="65.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.5" y="974.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.33%)</title><rect x="1062.3" y="947.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 4.92%)</title><rect x="1066.2" y="947.0" width="58.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.2" y="958.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.33%)</title><rect x="1112.6" y="931.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.33%)</title><rect x="1112.6" y="915.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.33%)</title><rect x="1112.6" y="899.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.66%)</title><rect x="1116.5" y="931.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.33%)</title><rect x="1124.2" y="979.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.2" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.31%)</title><rect x="1128.1" y="995.0" width="15.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.66%)</title><rect x="1132.0" y="979.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.0" y="990.0"></text>
</g>
<g>
<title>CheckCastPPNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1132.0" y="963.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.0" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1135.8" y="963.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.8" y="974.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1135.8" y="947.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.8" y="958.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.33%)</title><rect x="1135.8" y="931.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.8" y="942.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1139.7" y="979.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.7" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.33%)</title><rect x="1143.6" y="995.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.6" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.33%)</title><rect x="1143.6" y="979.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.6" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1143.6" y="963.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.6" y="974.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.33%)</title><rect x="1143.6" y="947.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.6" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.33%)</title><rect x="1147.4" y="995.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.97%)</title><rect x="1151.3" y="1011.0" width="23.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.3" y="1022.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.97%)</title><rect x="1151.3" y="995.0" width="23.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.3" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.97%)</title><rect x="1151.3" y="979.0" width="23.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.3" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.97%)</title><rect x="1151.3" y="963.0" width="23.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.3" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.33%)</title><rect x="1151.3" y="947.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.3" y="958.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.33%)</title><rect x="1151.3" y="931.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.3" y="942.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.33%)</title><rect x="1151.3" y="915.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="926.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.33%)</title><rect x="1151.3" y="899.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.3" y="910.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.33%)</title><rect x="1151.3" y="883.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.64%)</title><rect x="1155.2" y="947.0" width="19.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.64%)</title><rect x="1155.2" y="931.0" width="19.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.64%)</title><rect x="1155.2" y="915.0" width="19.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.64%)</title><rect x="1155.2" y="899.0" width="19.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.64%)</title><rect x="1155.2" y="883.0" width="19.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.64%)</title><rect x="1155.2" y="867.0" width="19.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.64%)</title><rect x="1155.2" y="851.0" width="19.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.64%)</title><rect x="1155.2" y="835.0" width="19.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.98%)</title><rect x="1155.2" y="819.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.98%)</title><rect x="1155.2" y="803.0" width="11.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.98%)</title><rect x="1155.2" y="787.0" width="11.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.98%)</title><rect x="1155.2" y="771.0" width="11.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.98%)</title><rect x="1155.2" y="755.0" width="11.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.98%)</title><rect x="1155.2" y="739.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.2" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1155.2" y="723.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1155.2" y="707.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.2" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.33%)</title><rect x="1155.2" y="691.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.33%)</title><rect x="1155.2" y="675.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.33%)</title><rect x="1155.2" y="659.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1155.2" y="643.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1155.2" y="627.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.33%)</title><rect x="1155.2" y="611.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.33%)</title><rect x="1155.2" y="595.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.33%)</title><rect x="1155.2" y="579.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1155.2" y="563.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1155.2" y="547.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1155.2" y="531.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="542.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.33%)</title><rect x="1155.2" y="515.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.2" y="526.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.33%)</title><rect x="1155.2" y="499.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.33%)</title><rect x="1155.2" y="483.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="494.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.33%)</title><rect x="1155.2" y="467.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.33%)</title><rect x="1155.2" y="451.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.33%)</title><rect x="1155.2" y="435.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1159.0" y="723.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1159.0" y="707.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1159.0" y="691.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1159.0" y="675.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1159.0" y="659.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1159.0" y="643.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1159.0" y="627.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1159.0" y="611.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1159.0" y="595.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1159.0" y="579.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.33%)</title><rect x="1159.0" y="563.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="574.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.33%)</title><rect x="1159.0" y="547.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.0" y="558.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.33%)</title><rect x="1159.0" y="531.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="542.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.33%)</title><rect x="1159.0" y="515.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="526.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.33%)</title><rect x="1159.0" y="499.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.0" y="510.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.33%)</title><rect x="1159.0" y="483.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1162.9" y="563.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1162.9" y="547.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1162.9" y="531.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1162.9" y="515.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.33%)</title><rect x="1162.9" y="499.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.33%)</title><rect x="1162.9" y="483.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.33%)</title><rect x="1162.9" y="467.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1162.9" y="451.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1166.8" y="819.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1166.8" y="803.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1166.8" y="787.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1166.8" y="771.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1166.8" y="755.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1166.8" y="739.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1166.8" y="723.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1166.8" y="707.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1166.8" y="691.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1166.8" y="675.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1166.8" y="659.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1166.8" y="643.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1166.8" y="627.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1166.8" y="611.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1166.8" y="595.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="606.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.33%)</title><rect x="1166.8" y="579.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="590.0"></text>
</g>
<g>
<title>InlineTree::InlineTree(Compile*, InlineTree const*, ciMethod*, JVMState*, int, float, int) (1 samples, 0.33%)</title><rect x="1166.8" y="563.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.7" y="611.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.7" y="595.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.7" y="579.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.7" y="563.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.7" y="547.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.7" y="531.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.7" y="515.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.7" y="499.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.7" y="483.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.7" y="467.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.7" y="451.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.7" y="435.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.7" y="419.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.7" y="403.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.7" y="387.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.7" y="371.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.7" y="355.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.7" y="339.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.7" y="323.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.7" y="307.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.7" y="291.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.7" y="275.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.7" y="259.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.7" y="243.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.7" y="227.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.7" y="211.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.7" y="195.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.7" y="179.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.7" y="163.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.7" y="147.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.7" y="131.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.7" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.7" y="115.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.7" y="99.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.7" y="83.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.7" y="67.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="78.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.33%)</title><rect x="1170.7" y="51.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="62.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.33%)</title><rect x="1170.7" y="35.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="46.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.33%)</title><rect x="1174.5" y="1011.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="1022.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.33%)</title><rect x="1174.5" y="995.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.33%)</title><rect x="1174.5" y="979.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.33%)</title><rect x="1178.4" y="1043.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.33%)</title><rect x="1178.4" y="1027.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.33%)</title><rect x="1178.4" y="1011.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.33%)</title><rect x="1178.4" y="995.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.33%)</title><rect x="1178.4" y="979.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.33%)</title><rect x="1178.4" y="963.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.33%)</title><rect x="1178.4" y="947.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.33%)</title><rect x="1178.4" y="931.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1178.4" y="915.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1178.4" y="899.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1178.4" y="883.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1178.4" y="867.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1178.4" y="851.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1178.4" y="835.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1178.4" y="819.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1178.4" y="803.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1178.4" y="787.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1178.4" y="771.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1178.4" y="755.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1178.4" y="739.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1178.4" y="723.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.33%)</title><rect x="1178.4" y="707.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.33%)</title><rect x="1178.4" y="691.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.33%)</title><rect x="1178.4" y="675.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.33%)</title><rect x="1178.4" y="659.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1178.4" y="643.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.33%)</title><rect x="1182.3" y="1043.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1182.3" y="1027.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1182.3" y="1011.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="1022.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1182.3" y="995.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="1006.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.33%)</title><rect x="1182.3" y="979.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.33%)</title><rect x="1182.3" y="963.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.3" y="947.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.3" y="931.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.3" y="915.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="926.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.33%)</title><rect x="1182.3" y="899.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="910.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.33%)</title><rect x="1186.1" y="1107.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1118.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.33%)</title><rect x="1186.1" y="1091.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="1102.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.33%)</title><rect x="1186.1" y="1075.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1086.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.33%)</title><rect x="1186.1" y="1059.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="1070.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.33%)</title><rect x="1186.1" y="1043.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1189.1" y="1054.0"></text>
</g>
</g>
</svg>
