<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (1,048 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (245 samples, 23.38%)</title><rect x="10.0" y="1155.0" width="275.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (245 samples, 23.38%)</title><rect x="10.0" y="1139.0" width="275.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.48%)</title><rect x="10.0" y="1123.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.48%)</title><rect x="10.0" y="1107.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (5 samples, 0.48%)</title><rect x="10.0" y="1091.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.48%)</title><rect x="10.0" y="1075.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.48%)</title><rect x="10.0" y="1059.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.38%)</title><rect x="11.1" y="1043.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.1" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (4 samples, 0.38%)</title><rect x="11.1" y="1027.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.38%)</title><rect x="15.6" y="1123.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.38%)</title><rect x="15.6" y="1107.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.38%)</title><rect x="15.6" y="1091.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.38%)</title><rect x="15.6" y="1075.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="15.6" y="1059.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="15.6" y="1043.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="15.6" y="1027.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="15.6" y="1011.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="15.6" y="995.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.29%)</title><rect x="16.8" y="1059.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.29%)</title><rect x="16.8" y="1043.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="16.8" y="1027.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.8" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="16.8" y="1011.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.19%)</title><rect x="17.9" y="1027.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (2 samples, 0.19%)</title><rect x="17.9" y="1011.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (2 samples, 0.19%)</title><rect x="17.9" y="995.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (2 samples, 0.19%)</title><rect x="17.9" y="979.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.19%)</title><rect x="17.9" y="963.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (190 samples, 18.13%)</title><rect x="20.1" y="1123.0" width="214.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.1" y="1134.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (185 samples, 17.65%)</title><rect x="20.1" y="1107.0" width="208.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.1" y="1118.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (185 samples, 17.65%)</title><rect x="20.1" y="1091.0" width="208.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1102.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.10%)</title><rect x="20.1" y="1075.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (135 samples, 12.88%)</title><rect x="21.3" y="1075.0" width="152.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (135 samples, 12.88%)</title><rect x="21.3" y="1059.0" width="152.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.3" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (135 samples, 12.88%)</title><rect x="21.3" y="1043.0" width="152.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.3" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (135 samples, 12.88%)</title><rect x="21.3" y="1027.0" width="152.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.3" y="1038.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (135 samples, 12.88%)</title><rect x="21.3" y="1011.0" width="152.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.3" y="1022.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (134 samples, 12.79%)</title><rect x="22.4" y="995.0" width="150.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.4" y="1006.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (92 samples, 8.78%)</title><rect x="22.4" y="979.0" width="103.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="990.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (11 samples, 1.05%)</title><rect x="22.4" y="963.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (11 samples, 1.05%)</title><rect x="22.4" y="947.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.67%)</title><rect x="26.9" y="931.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (6 samples, 0.57%)</title><rect x="28.0" y="915.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.38%)</title><rect x="34.8" y="963.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.38%)</title><rect x="34.8" y="947.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="34.8" y="931.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.8" y="942.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="34.8" y="915.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="37.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.29%)</title><rect x="35.9" y="931.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (77 samples, 7.35%)</title><rect x="39.3" y="963.0" width="86.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.3" y="974.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (77 samples, 7.35%)</title><rect x="39.3" y="947.0" width="86.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.3" y="958.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (77 samples, 7.35%)</title><rect x="39.3" y="931.0" width="86.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.3" y="942.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (77 samples, 7.35%)</title><rect x="39.3" y="915.0" width="86.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.3" y="926.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 7.25%)</title><rect x="40.4" y="899.0" width="85.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.4" y="910.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 6.58%)</title><rect x="41.5" y="883.0" width="77.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="44.5" y="894.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="44.9" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="47.9" y="878.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="46.0" y="867.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="49.0" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 4.39%)</title><rect x="47.2" y="867.0" width="51.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="50.2" y="878.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.29%)</title><rect x="99.0" y="867.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="102.0" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.43%)</title><rect x="102.3" y="867.0" width="16.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="105.3" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.38%)</title><rect x="119.2" y="883.0" width="4.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="122.2" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="123.7" y="883.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="126.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (37 samples, 3.53%)</title><rect x="126.0" y="979.0" width="41.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.0" y="990.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (37 samples, 3.53%)</title><rect x="126.0" y="963.0" width="41.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.0" y="974.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (37 samples, 3.53%)</title><rect x="126.0" y="947.0" width="41.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="129.0" y="958.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="166.5" y="931.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="169.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.29%)</title><rect x="167.6" y="979.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="170.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.29%)</title><rect x="167.6" y="963.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="170.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.29%)</title><rect x="167.6" y="947.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.6" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="168.8" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="171.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="168.8" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="171.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="168.8" y="899.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="171.8" y="910.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.10%)</title><rect x="168.8" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="171.8" y="894.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.10%)</title><rect x="168.8" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="171.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="169.9" y="931.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.19%)</title><rect x="171.0" y="979.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="171.0" y="963.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.19%)</title><rect x="171.0" y="947.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.19%)</title><rect x="171.0" y="931.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.19%)</title><rect x="173.3" y="1075.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.19%)</title><rect x="173.3" y="1059.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.38%)</title><rect x="175.5" y="1075.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.38%)</title><rect x="175.5" y="1059.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.38%)</title><rect x="175.5" y="1043.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (43 samples, 4.10%)</title><rect x="180.0" y="1075.0" width="48.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.0" y="1086.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (40 samples, 3.82%)</title><rect x="180.0" y="1059.0" width="45.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.0" y="1070.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 1.62%)</title><rect x="202.5" y="1043.0" width="19.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.95%)</title><rect x="202.5" y="1027.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.95%)</title><rect x="202.5" y="1011.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.95%)</title><rect x="202.5" y="995.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.5" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="210.4" y="979.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="213.4" y="990.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="213.8" y="1027.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.57%)</title><rect x="214.9" y="1027.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.9" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="221.7" y="1043.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="224.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.19%)</title><rect x="225.1" y="1059.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.1" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="225.1" y="1043.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="228.1" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="225.1" y="1027.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="228.1" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="225.1" y="1011.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="228.1" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="225.1" y="995.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="228.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="226.2" y="1043.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.10%)</title><rect x="226.2" y="1027.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="226.2" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="229.2" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="226.2" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="229.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="226.2" y="979.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="229.2" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="227.3" y="1059.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="230.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="228.4" y="1107.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.10%)</title><rect x="228.4" y="1091.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="228.4" y="1075.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.10%)</title><rect x="228.4" y="1059.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="228.4" y="1043.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="228.4" y="1027.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.38%)</title><rect x="229.6" y="1107.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.38%)</title><rect x="229.6" y="1091.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.38%)</title><rect x="229.6" y="1075.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.38%)</title><rect x="229.6" y="1059.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (4 samples, 0.38%)</title><rect x="229.6" y="1043.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.38%)</title><rect x="229.6" y="1027.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 4.39%)</title><rect x="234.1" y="1123.0" width="51.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.1" y="1134.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 4.29%)</title><rect x="234.1" y="1107.0" width="50.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.1" y="1118.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.96%)</title><rect x="234.1" y="1091.0" width="34.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.1" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.96%)</title><rect x="234.1" y="1075.0" width="34.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.1" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 2.96%)</title><rect x="234.1" y="1059.0" width="34.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.1" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.48%)</title><rect x="234.1" y="1043.0" width="29.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.1" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.48%)</title><rect x="234.1" y="1027.0" width="29.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.1" y="1038.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.34%)</title><rect x="234.1" y="1011.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.10%)</title><rect x="244.2" y="995.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.10%)</title><rect x="244.2" y="979.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="244.2" y="963.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.38%)</title><rect x="245.3" y="995.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.38%)</title><rect x="245.3" y="979.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.38%)</title><rect x="245.3" y="963.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.38%)</title><rect x="245.3" y="947.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.38%)</title><rect x="245.3" y="931.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.38%)</title><rect x="245.3" y="915.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.38%)</title><rect x="245.3" y="899.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.15%)</title><rect x="249.8" y="1011.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.15%)</title><rect x="249.8" y="995.0" width="13.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.38%)</title><rect x="249.8" y="979.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.8" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.38%)</title><rect x="249.8" y="963.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.8" y="974.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="253.2" y="947.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="256.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.76%)</title><rect x="254.3" y="979.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.3" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.67%)</title><rect x="254.3" y="963.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.3" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="260.0" y="947.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="263.0" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.asList (1 samples, 0.10%)</title><rect x="262.2" y="963.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.2" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="262.2" y="947.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="265.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="262.2" y="931.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="265.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="262.2" y="915.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="265.2" y="926.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.10%)</title><rect x="262.2" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="265.2" y="910.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.10%)</title><rect x="262.2" y="883.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="265.2" y="894.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.10%)</title><rect x="262.2" y="867.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.19%)</title><rect x="263.3" y="1043.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.19%)</title><rect x="263.3" y="1027.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="263.3" y="1011.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="263.3" y="995.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="264.5" y="979.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="264.5" y="963.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="265.6" y="1043.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="265.6" y="1027.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="265.6" y="1011.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="265.6" y="995.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="265.6" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.19%)</title><rect x="266.7" y="1043.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.67%)</title><rect x="269.0" y="1091.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.57%)</title><rect x="270.1" y="1075.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.48%)</title><rect x="270.1" y="1059.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="270.1" y="1043.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="270.1" y="1027.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.10%)</title><rect x="270.1" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="270.1" y="995.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="270.1" y="979.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (1 samples, 0.10%)</title><rect x="271.2" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.10%)</title><rect x="271.2" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="271.2" y="995.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="271.2" y="979.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="271.2" y="963.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="271.2" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="272.3" y="1043.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="272.3" y="1027.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="272.3" y="1011.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="272.3" y="995.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="272.3" y="979.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="272.3" y="963.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="272.3" y="947.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.3" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="272.3" y="931.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="272.3" y="915.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.19%)</title><rect x="273.5" y="1043.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.19%)</title><rect x="273.5" y="1027.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="273.5" y="1011.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="273.5" y="995.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="274.6" y="979.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="274.6" y="963.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="274.6" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.6" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="274.6" y="931.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.6" y="942.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="274.6" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="274.6" y="899.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="274.6" y="883.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="274.6" y="867.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$214/49146861.test (1 samples, 0.10%)</title><rect x="274.6" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.10%)</title><rect x="275.7" y="1059.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.10%)</title><rect x="275.7" y="1043.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="275.7" y="1027.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="275.7" y="1011.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.10%)</title><rect x="275.7" y="995.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="275.7" y="979.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="275.7" y="963.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.7" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="275.7" y="947.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.10%)</title><rect x="275.7" y="931.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.7" y="942.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.10%)</title><rect x="275.7" y="915.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="275.7" y="899.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.19%)</title><rect x="276.9" y="1091.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.19%)</title><rect x="276.9" y="1075.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.19%)</title><rect x="276.9" y="1059.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="276.9" y="1043.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="276.9" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="276.9" y="1011.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="276.9" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="276.9" y="979.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="276.9" y="963.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.9" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="276.9" y="947.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="276.9" y="931.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="279.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.10%)</title><rect x="278.0" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="278.0" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="281.0" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="278.0" y="995.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="281.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.48%)</title><rect x="279.1" y="1091.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="280.2" y="1075.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="280.2" y="1059.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.10%)</title><rect x="280.2" y="1043.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.10%)</title><rect x="280.2" y="1027.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.29%)</title><rect x="281.4" y="1075.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="282.5" y="1059.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="283.6" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/981530120.accept (1 samples, 0.10%)</title><rect x="283.6" y="1027.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.6" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="284.7" y="1107.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="287.7" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="284.7" y="1091.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="287.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (721 samples, 68.80%)</title><rect x="285.9" y="1155.0" width="811.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.9" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (721 samples, 68.80%)</title><rect x="285.9" y="1139.0" width="811.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.9" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (721 samples, 68.80%)</title><rect x="285.9" y="1123.0" width="811.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.9" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (489 samples, 46.66%)</title><rect x="289.2" y="1107.0" width="550.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.2" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50 (489 samples, 46.66%)</title><rect x="289.2" y="1091.0" width="550.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.2" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$50</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (489 samples, 46.66%)</title><rect x="289.2" y="1075.0" width="550.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.2" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="289.2" y="1059.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="292.2" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="289.2" y="1043.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="292.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="289.2" y="1027.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="292.2" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="289.2" y="1011.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="292.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="289.2" y="995.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="292.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (482 samples, 45.99%)</title><rect x="290.4" y="1059.0" width="542.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.4" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="292.6" y="1043.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="295.6" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="292.6" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="293.7" y="1043.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="296.7" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.67%)</title><rect x="296.0" y="1043.0" width="7.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="299.0" y="1054.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.57%)</title><rect x="297.1" y="1027.0" width="6.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="300.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (136 samples, 12.98%)</title><rect x="303.9" y="1043.0" width="153.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.9" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (136 samples, 12.98%)</title><rect x="303.9" y="1027.0" width="153.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.9" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (136 samples, 12.98%)</title><rect x="303.9" y="1011.0" width="153.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.9" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 12.98%)</title><rect x="303.9" y="995.0" width="153.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.9" y="1006.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 12.98%)</title><rect x="303.9" y="979.0" width="153.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.9" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (136 samples, 12.98%)</title><rect x="303.9" y="963.0" width="153.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.9" y="974.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (45 samples, 4.29%)</title><rect x="303.9" y="947.0" width="50.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.9" y="958.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (12 samples, 1.15%)</title><rect x="303.9" y="931.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (12 samples, 1.15%)</title><rect x="303.9" y="915.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (12 samples, 1.15%)</title><rect x="303.9" y="899.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.15%)</title><rect x="303.9" y="883.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="316.3" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="316.3" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 3.15%)</title><rect x="317.4" y="931.0" width="37.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.4" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (33 samples, 3.15%)</title><rect x="317.4" y="915.0" width="37.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.4" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.76%)</title><rect x="317.4" y="899.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (8 samples, 0.76%)</title><rect x="317.4" y="883.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.19%)</title><rect x="324.1" y="867.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (23 samples, 2.19%)</title><rect x="326.4" y="899.0" width="25.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.4" y="910.0">c..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="326.4" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="329.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="327.5" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="330.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="328.6" y="883.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="331.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="328.6" y="867.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="331.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="328.6" y="851.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="331.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="328.6" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.6" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="328.6" y="819.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="328.6" y="803.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="331.6" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="328.6" y="787.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="328.6" y="771.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="331.6" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="328.6" y="755.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="331.6" y="766.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.10%)</title><rect x="328.6" y="739.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (20 samples, 1.91%)</title><rect x="329.8" y="883.0" width="22.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.8" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (3 samples, 0.29%)</title><rect x="341.0" y="867.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="344.4" y="867.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.29%)</title><rect x="345.5" y="867.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="348.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.29%)</title><rect x="348.9" y="867.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.9" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="350.0" y="851.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="353.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="350.0" y="835.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="353.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="350.0" y="819.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="353.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="350.0" y="803.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="353.0" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="351.2" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="354.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="351.2" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="354.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.19%)</title><rect x="352.3" y="899.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.10%)</title><rect x="352.3" y="883.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="353.4" y="883.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (85 samples, 8.11%)</title><rect x="354.5" y="947.0" width="95.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.5" y="958.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.57%)</title><rect x="354.5" y="931.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.57%)</title><rect x="354.5" y="915.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (6 samples, 0.57%)</title><rect x="354.5" y="899.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (6 samples, 0.57%)</title><rect x="354.5" y="883.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="357.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.29%)</title><rect x="355.7" y="867.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (3 samples, 0.29%)</title><rect x="355.7" y="851.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (3 samples, 0.29%)</title><rect x="355.7" y="835.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (2 samples, 0.19%)</title><rect x="359.0" y="867.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.38%)</title><rect x="361.3" y="931.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.38%)</title><rect x="361.3" y="915.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="364.7" y="899.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.95%)</title><rect x="365.8" y="931.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.95%)</title><rect x="365.8" y="915.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.57%)</title><rect x="370.3" y="899.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.57%)</title><rect x="370.3" y="883.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="373.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.29%)</title><rect x="373.7" y="867.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.86%)</title><rect x="377.1" y="931.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.86%)</title><rect x="377.1" y="915.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.29%)</title><rect x="377.1" y="899.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="380.1" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="379.3" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="382.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="379.3" y="867.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="382.3" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="379.3" y="851.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="382.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.57%)</title><rect x="380.4" y="899.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.57%)</title><rect x="380.4" y="883.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.19%)</title><rect x="381.6" y="867.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="384.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.29%)</title><rect x="383.8" y="867.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (56 samples, 5.34%)</title><rect x="387.2" y="931.0" width="63.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.2" y="942.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.05%)</title><rect x="388.3" y="915.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.48%)</title><rect x="389.4" y="899.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.48%)</title><rect x="389.4" y="883.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.48%)</title><rect x="389.4" y="867.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="392.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.48%)</title><rect x="395.1" y="899.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (44 samples, 4.20%)</title><rect x="400.7" y="915.0" width="49.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.7" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (44 samples, 4.20%)</title><rect x="400.7" y="899.0" width="49.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.7" y="910.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 4.10%)</title><rect x="401.8" y="883.0" width="48.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.8" y="894.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.34%)</title><rect x="405.2" y="867.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.48%)</title><rect x="408.6" y="851.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.48%)</title><rect x="408.6" y="835.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.48%)</title><rect x="408.6" y="819.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.38%)</title><rect x="409.7" y="803.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.29%)</title><rect x="414.2" y="851.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="417.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="417.6" y="851.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="417.6" y="835.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="418.7" y="819.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.10%)</title><rect x="419.8" y="851.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.76%)</title><rect x="421.0" y="867.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.76%)</title><rect x="421.0" y="851.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.76%)</title><rect x="421.0" y="835.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="424.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.76%)</title><rect x="421.0" y="819.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.76%)</title><rect x="421.0" y="803.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="424.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.95%)</title><rect x="430.0" y="867.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.95%)</title><rect x="430.0" y="851.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.95%)</title><rect x="430.0" y="835.0" width="11.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.95%)</title><rect x="430.0" y="819.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.0" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.95%)</title><rect x="430.0" y="803.0" width="11.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.0" y="814.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.29%)</title><rect x="436.7" y="787.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.7" y="798.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor29.newInstance (2 samples, 0.19%)</title><rect x="437.9" y="771.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.9" y="782.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor29.newInstance (1 samples, 0.10%)</title><rect x="440.1" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.19%)</title><rect x="441.2" y="867.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.19%)</title><rect x="441.2" y="851.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="444.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.19%)</title><rect x="441.2" y="835.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.57%)</title><rect x="443.5" y="867.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.57%)</title><rect x="450.2" y="947.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.57%)</title><rect x="450.2" y="931.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.57%)</title><rect x="450.2" y="915.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.57%)</title><rect x="450.2" y="899.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.57%)</title><rect x="450.2" y="883.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.19%)</title><rect x="453.6" y="867.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="456.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.10%)</title><rect x="455.9" y="867.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="458.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (308 samples, 29.39%)</title><rect x="457.0" y="1043.0" width="346.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.0" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessP..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (67 samples, 6.39%)</title><rect x="459.3" y="1027.0" width="75.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.3" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="459.3" y="1011.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.3" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (66 samples, 6.30%)</title><rect x="460.4" y="1011.0" width="74.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.4" y="1022.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (62 samples, 5.92%)</title><rect x="464.9" y="995.0" width="69.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.9" y="1006.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.48%)</title><rect x="466.0" y="979.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="469.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.48%)</title><rect x="466.0" y="963.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.48%)</title><rect x="466.0" y="947.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.48%)</title><rect x="466.0" y="931.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="469.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="471.6" y="979.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="471.6" y="963.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="471.6" y="947.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="472.8" y="931.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.8" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (54 samples, 5.15%)</title><rect x="473.9" y="979.0" width="60.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.9" y="990.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (24 samples, 2.29%)</title><rect x="507.7" y="963.0" width="27.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.7" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="507.7" y="947.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (23 samples, 2.19%)</title><rect x="508.8" y="947.0" width="25.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.8" y="958.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.76%)</title><rect x="525.7" y="931.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="528.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.67%)</title><rect x="534.7" y="1027.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.57%)</title><rect x="535.8" y="1011.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="538.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.57%)</title><rect x="535.8" y="995.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="538.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (172 samples, 16.41%)</title><rect x="542.6" y="1027.0" width="193.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="545.6" y="1038.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (172 samples, 16.41%)</title><rect x="542.6" y="1011.0" width="193.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.6" y="1022.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="553.8" y="995.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="556.8" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="553.8" y="979.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="556.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="553.8" y="963.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="556.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="553.8" y="947.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="556.8" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="553.8" y="931.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="556.8" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="555.0" y="995.0" width="2.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="558.0" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="555.0" y="979.0" width="2.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="558.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 5.25%)</title><rect x="557.2" y="995.0" width="61.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="560.2" y="1006.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 4.01%)</title><rect x="565.1" y="979.0" width="47.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.1" y="990.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (39 samples, 3.72%)</title><rect x="568.5" y="963.0" width="43.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="571.5" y="974.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (26 samples, 2.48%)</title><rect x="579.7" y="947.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.7" y="958.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (26 samples, 2.48%)</title><rect x="579.7" y="931.0" width="29.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.7" y="942.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (26 samples, 2.48%)</title><rect x="579.7" y="915.0" width="29.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.7" y="926.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (14 samples, 1.34%)</title><rect x="588.7" y="899.0" width="15.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="591.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="588.7" y="883.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="591.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="588.7" y="867.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="591.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.48%)</title><rect x="589.9" y="883.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="592.9" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="589.9" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="592.9" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.29%)</title><rect x="591.0" y="867.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="594.0" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.19%)</title><rect x="592.1" y="851.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="595.1" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="592.1" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="595.1" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="592.1" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.1" y="830.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="593.2" y="835.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.2" y="846.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.10%)</title><rect x="594.4" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="597.4" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.67%)</title><rect x="595.5" y="883.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="598.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.38%)</title><rect x="597.7" y="867.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="600.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.19%)</title><rect x="597.7" y="851.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.19%)</title><rect x="597.7" y="835.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="600.7" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="597.7" y="819.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="600.7" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="597.7" y="803.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="600.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="597.7" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="600.7" y="798.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="598.9" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="601.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="598.9" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="601.9" y="814.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="598.9" y="787.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="601.9" y="798.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="598.9" y="771.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="601.9" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.10%)</title><rect x="598.9" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="601.9" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.19%)</title><rect x="600.0" y="851.0" width="2.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="603.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="602.3" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="605.3" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="603.4" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.4" y="894.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.10%)</title><rect x="604.5" y="899.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="607.5" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="605.6" y="899.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="608.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.29%)</title><rect x="609.0" y="947.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="612.0" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="612.4" y="979.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="615.4" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.48%)</title><rect x="613.5" y="979.0" width="5.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="616.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="619.1" y="995.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.67%)</title><rect x="621.4" y="995.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.67%)</title><rect x="621.4" y="979.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.4" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="621.4" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="624.4" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="621.4" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.4" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="621.4" y="931.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.4" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="621.4" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="624.4" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="621.4" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="624.4" y="910.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="621.4" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="624.4" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="621.4" y="867.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="624.4" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="621.4" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="624.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.57%)</title><rect x="622.5" y="963.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="625.5" y="974.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.10%)</title><rect x="628.1" y="947.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.1" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (95 samples, 9.06%)</title><rect x="629.3" y="995.0" width="106.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.3" y="1006.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (93 samples, 8.87%)</title><rect x="631.5" y="979.0" width="104.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.5" y="990.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.76%)</title><rect x="631.5" y="963.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.76%)</title><rect x="631.5" y="947.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.76%)</title><rect x="631.5" y="931.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.76%)</title><rect x="631.5" y="915.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.5" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="640.5" y="963.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="640.5" y="947.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="640.5" y="931.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.5" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (84 samples, 8.02%)</title><rect x="641.7" y="963.0" width="94.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.7" y="974.0">java/util/C..</text>
</g>
<g>
<title>java/util/HashMap.put (77 samples, 7.35%)</title><rect x="649.5" y="947.0" width="86.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="652.5" y="958.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (44 samples, 4.20%)</title><rect x="686.7" y="931.0" width="49.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.7" y="942.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.29%)</title><rect x="714.8" y="915.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (16 samples, 1.53%)</title><rect x="718.2" y="915.0" width="18.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="721.2" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="734.0" y="899.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="735.1" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="738.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="735.1" y="883.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="738.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="735.1" y="867.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="738.1" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="735.1" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.1" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="735.1" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (35 samples, 3.34%)</title><rect x="736.2" y="1027.0" width="39.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.2" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (35 samples, 3.34%)</title><rect x="736.2" y="1011.0" width="39.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.2" y="1022.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (20 samples, 1.91%)</title><rect x="739.6" y="995.0" width="22.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="742.6" y="1006.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.91%)</title><rect x="739.6" y="979.0" width="22.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="742.6" y="990.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.81%)</title><rect x="739.6" y="963.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.6" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.76%)</title><rect x="748.6" y="947.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="751.6" y="958.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="750.9" y="931.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="753.9" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.48%)</title><rect x="752.0" y="931.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="755.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.48%)</title><rect x="752.0" y="915.0" width="5.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="755.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="757.6" y="947.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.10%)</title><rect x="759.9" y="947.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="761.0" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="764.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="761.0" y="947.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="761.0" y="931.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="764.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="761.0" y="915.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="764.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="762.1" y="995.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="762.1" y="979.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 0.38%)</title><rect x="764.4" y="995.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 0.38%)</title><rect x="764.4" y="979.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$272/200668160.get$Lambda (4 samples, 0.38%)</title><rect x="764.4" y="963.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="767.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$272/200668160.&lt;init&gt; (4 samples, 0.38%)</title><rect x="764.4" y="947.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="767.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="768.9" y="995.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="768.9" y="979.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.9" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.10%)</title><rect x="770.0" y="995.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.10%)</title><rect x="770.0" y="979.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="773.0" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="770.0" y="963.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="773.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="771.1" y="995.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="774.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="771.1" y="979.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="774.1" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.29%)</title><rect x="772.3" y="995.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.29%)</title><rect x="772.3" y="979.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="775.6" y="1027.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.6" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="775.6" y="1011.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.6" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="775.6" y="995.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.6" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="775.6" y="979.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="778.6" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="775.6" y="963.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="778.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="775.6" y="947.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="778.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="775.6" y="931.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="778.6" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="775.6" y="915.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="778.6" y="926.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="775.6" y="899.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.10%)</title><rect x="776.8" y="1027.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="779.8" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="776.8" y="1011.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.8" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="776.8" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="776.8" y="979.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="779.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="776.8" y="963.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="779.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="776.8" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="779.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 2.19%)</title><rect x="777.9" y="1027.0" width="25.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.9" y="1038.0">j..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="783.5" y="1011.0" width="5.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="786.5" y="1022.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.48%)</title><rect x="783.5" y="995.0" width="5.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="786.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.15%)</title><rect x="789.2" y="1011.0" width="13.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="792.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.95%)</title><rect x="791.4" y="995.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/694510268.accept (10 samples, 0.95%)</title><rect x="791.4" y="979.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (10 samples, 0.95%)</title><rect x="791.4" y="963.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="794.4" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.95%)</title><rect x="791.4" y="947.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="794.4" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.95%)</title><rect x="791.4" y="931.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.4" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.86%)</title><rect x="792.5" y="915.0" width="10.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="795.5" y="926.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.76%)</title><rect x="793.7" y="899.0" width="9.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="796.7" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="802.7" y="1011.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="805.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.72%)</title><rect x="803.8" y="1043.0" width="20.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="806.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.19%)</title><rect x="803.8" y="1027.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.53%)</title><rect x="806.0" y="1027.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="809.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.34%)</title><rect x="808.3" y="1011.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/694510268.accept (1 samples, 0.10%)</title><rect x="808.3" y="995.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.10%)</title><rect x="808.3" y="979.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="808.3" y="963.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.3" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="808.3" y="947.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.3" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="808.3" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.3" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="808.3" y="915.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="811.3" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="808.3" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="811.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="808.3" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="808.3" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="811.3" y="878.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="808.3" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="811.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$292/1727767169.accept (13 samples, 1.24%)</title><rect x="809.4" y="995.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="812.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (13 samples, 1.24%)</title><rect x="809.4" y="979.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (13 samples, 1.24%)</title><rect x="809.4" y="963.0" width="14.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="812.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (13 samples, 1.24%)</title><rect x="809.4" y="947.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="812.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 1.24%)</title><rect x="809.4" y="931.0" width="14.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.4" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.24%)</title><rect x="809.4" y="915.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.4" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.24%)</title><rect x="809.4" y="899.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 1.24%)</title><rect x="809.4" y="883.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.4" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (13 samples, 1.24%)</title><rect x="809.4" y="867.0" width="14.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.4" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.67%)</title><rect x="824.1" y="1043.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="827.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.67%)</title><rect x="824.1" y="1027.0" width="7.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="827.1" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="831.9" y="1043.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="834.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="833.1" y="1059.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.1" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="833.1" y="1043.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.1" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="833.1" y="1027.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="836.1" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="833.1" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.1" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="833.1" y="995.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.1" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="833.1" y="979.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="836.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="833.1" y="963.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="836.1" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="833.1" y="947.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="836.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.48%)</title><rect x="834.2" y="1059.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.2" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="835.3" y="1043.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="838.3" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.29%)</title><rect x="836.5" y="1043.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="839.5" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="836.5" y="1027.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="839.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.67%)</title><rect x="839.8" y="1107.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.67%)</title><rect x="839.8" y="1091.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="842.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.67%)</title><rect x="839.8" y="1075.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="842.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.67%)</title><rect x="839.8" y="1059.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="842.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (1 samples, 0.10%)</title><rect x="846.6" y="1043.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (222 samples, 21.18%)</title><rect x="847.7" y="1107.0" width="250.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.7" y="1118.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (222 samples, 21.18%)</title><rect x="847.7" y="1091.0" width="250.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="850.7" y="1102.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (188 samples, 17.94%)</title><rect x="868.0" y="1075.0" width="211.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="871.0" y="1086.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (182 samples, 17.37%)</title><rect x="874.7" y="1059.0" width="205.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="877.7" y="1070.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (169 samples, 16.13%)</title><rect x="889.4" y="1043.0" width="190.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="892.4" y="1054.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="900.6" y="1027.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.6" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.29%)</title><rect x="901.8" y="1027.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.8" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 14.41%)</title><rect x="905.1" y="1027.0" width="170.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="908.1" y="1038.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.29%)</title><rect x="910.8" y="1011.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.8" y="1022.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="914.1" y="1011.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.1" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 2.00%)</title><rect x="915.3" y="1011.0" width="23.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.3" y="1022.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.48%)</title><rect x="925.4" y="995.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="928.4" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.19%)</title><rect x="925.4" y="979.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="928.4" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="926.5" y="963.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.5" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="927.7" y="979.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="930.7" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="929.9" y="979.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="932.9" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.67%)</title><rect x="931.0" y="995.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="934.0" y="1006.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.19%)</title><rect x="938.9" y="1011.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="941.9" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.19%)</title><rect x="941.2" y="1011.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.2" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="943.4" y="1011.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="946.4" y="1022.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.19%)</title><rect x="945.7" y="1011.0" width="2.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="948.7" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 3.82%)</title><rect x="947.9" y="1011.0" width="45.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="950.9" y="1022.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (53 samples, 5.06%)</title><rect x="993.0" y="1011.0" width="59.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="996.0" y="1022.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="1052.6" y="1011.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1055.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1053.8" y="1011.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1056.8" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.38%)</title><rect x="1054.9" y="1011.0" width="4.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1057.9" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1059.4" y="1011.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1062.4" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="1060.5" y="1011.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1063.5" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1062.8" y="1011.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1065.8" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (7 samples, 0.67%)</title><rect x="1063.9" y="1011.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.9" y="1022.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1071.8" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.8" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.19%)</title><rect x="1072.9" y="1011.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1075.9" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.29%)</title><rect x="1075.2" y="1027.0" width="3.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1078.2" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1078.5" y="1027.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.53%)</title><rect x="1079.7" y="1075.0" width="18.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1082.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.53%)</title><rect x="1079.7" y="1059.0" width="18.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1082.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.53%)</title><rect x="1079.7" y="1043.0" width="18.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1082.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.53%)</title><rect x="1079.7" y="1027.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1082.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1097.7" y="1155.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1100.7" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.10%)</title><rect x="1097.7" y="1139.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.7" y="1150.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.10%)</title><rect x="1097.7" y="1123.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.7" y="1134.0"></text>
</g>
<g>
<title>start_thread (81 samples, 7.73%)</title><rect x="1098.8" y="1155.0" width="91.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1101.8" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (81 samples, 7.73%)</title><rect x="1098.8" y="1139.0" width="91.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1101.8" y="1150.0">java_start(..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.91%)</title><rect x="1098.8" y="1123.0" width="22.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.8" y="1134.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.67%)</title><rect x="1098.8" y="1107.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.8" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.67%)</title><rect x="1098.8" y="1091.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.8" y="1102.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1098.8" y="1075.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.8" y="1086.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.48%)</title><rect x="1101.0" y="1075.0" width="5.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1104.0" y="1086.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.24%)</title><rect x="1106.7" y="1107.0" width="14.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.7" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.29%)</title><rect x="1106.7" y="1091.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.7" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.19%)</title><rect x="1106.7" y="1075.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.7" y="1086.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="1108.9" y="1075.0" width="1.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1111.9" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.57%)</title><rect x="1110.1" y="1091.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.1" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.19%)</title><rect x="1111.2" y="1075.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.2" y="1086.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1111.2" y="1059.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.2" y="1070.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1111.2" y="1043.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.2" y="1054.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="1111.2" y="1027.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.2" y="1038.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.10%)</title><rect x="1112.3" y="1027.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.3" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.10%)</title><rect x="1112.3" y="1011.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.3" y="1022.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1112.3" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.3" y="1006.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1112.3" y="979.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.3" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1112.3" y="963.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.3" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.29%)</title><rect x="1113.4" y="1075.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.4" y="1086.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.29%)</title><rect x="1113.4" y="1059.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.4" y="1070.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1115.7" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.7" y="1054.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1115.7" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.7" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.38%)</title><rect x="1116.8" y="1091.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.8" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.38%)</title><rect x="1116.8" y="1075.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.8" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.38%)</title><rect x="1116.8" y="1059.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.8" y="1070.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.38%)</title><rect x="1116.8" y="1043.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.8" y="1054.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.38%)</title><rect x="1116.8" y="1027.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.8" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.38%)</title><rect x="1116.8" y="1011.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.8" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.10%)</title><rect x="1120.2" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.2" y="1006.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1120.2" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.2" y="990.0"></text>
</g>
<g>
<title>JavaThread::run() (57 samples, 5.44%)</title><rect x="1121.3" y="1123.0" width="64.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.3" y="1134.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (57 samples, 5.44%)</title><rect x="1121.3" y="1107.0" width="64.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.3" y="1118.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (57 samples, 5.44%)</title><rect x="1121.3" y="1091.0" width="64.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.3" y="1102.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (56 samples, 5.34%)</title><rect x="1121.3" y="1075.0" width="63.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.3" y="1086.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (56 samples, 5.34%)</title><rect x="1121.3" y="1059.0" width="63.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.3" y="1070.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (56 samples, 5.34%)</title><rect x="1121.3" y="1043.0" width="63.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.3" y="1054.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (27 samples, 2.58%)</title><rect x="1121.3" y="1027.0" width="30.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.3" y="1038.0">Co..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.19%)</title><rect x="1121.3" y="1011.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.3" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.19%)</title><rect x="1121.3" y="995.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.3" y="1006.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="1121.3" y="979.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.3" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;ScopeValue*&gt;::append(ScopeValue* const&amp;) (1 samples, 0.10%)</title><rect x="1121.3" y="963.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.3" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1122.4" y="979.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.4" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1122.4" y="963.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.4" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.29%)</title><rect x="1123.6" y="1011.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.6" y="1022.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1123.6" y="995.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.6" y="1006.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.10%)</title><rect x="1123.6" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.6" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1124.7" y="995.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.7" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1125.8" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.8" y="990.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.10%)</title><rect x="1126.9" y="1011.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.9" y="1022.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.10%)</title><rect x="1126.9" y="995.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="1006.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.10%)</title><rect x="1126.9" y="979.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="990.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.10%)</title><rect x="1126.9" y="963.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.9" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1128.1" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1128.1" y="995.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1128.1" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.1" y="990.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="1128.1" y="963.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 1.91%)</title><rect x="1129.2" y="1011.0" width="22.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.2" y="1022.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1129.2" y="995.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.2" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1129.2" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.10%)</title><rect x="1130.3" y="995.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.29%)</title><rect x="1131.5" y="995.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.19%)</title><rect x="1131.5" y="979.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1132.6" y="963.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.6" y="974.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.10%)</title><rect x="1133.7" y="979.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.48%)</title><rect x="1134.8" y="995.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.8" y="1006.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.10%)</title><rect x="1137.1" y="979.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="990.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1138.2" y="979.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.2" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1139.3" y="979.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.19%)</title><rect x="1140.5" y="995.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.29%)</title><rect x="1142.7" y="995.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1145.0" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.0" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.29%)</title><rect x="1146.1" y="995.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.1" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.19%)</title><rect x="1146.1" y="979.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.1" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.10%)</title><rect x="1147.2" y="963.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.10%)</title><rect x="1147.2" y="947.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.2" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1147.2" y="931.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.2" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1148.3" y="979.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1149.5" y="995.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1149.5" y="979.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.5" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.10%)</title><rect x="1150.6" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.6" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1150.6" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.6" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 2.29%)</title><rect x="1151.7" y="1027.0" width="27.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.7" y="1038.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1151.7" y="1011.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.7" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1151.7" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.7" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1151.7" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.19%)</title><rect x="1152.8" y="1011.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.19%)</title><rect x="1152.8" y="995.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.10%)</title><rect x="1154.0" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.10%)</title><rect x="1154.0" y="963.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.0" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.10%)</title><rect x="1154.0" y="947.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.0" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.10%)</title><rect x="1154.0" y="931.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.0" y="942.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.10%)</title><rect x="1154.0" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.0" y="926.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.10%)</title><rect x="1154.0" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.0" y="910.0"></text>
</g>
<g>
<title>Method::backedge_count() (1 samples, 0.10%)</title><rect x="1154.0" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 1.43%)</title><rect x="1155.1" y="1011.0" width="16.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.1" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1155.1" y="995.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.1" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1155.1" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.1" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1155.1" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1155.1" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::register_new_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1155.1" y="931.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.1" y="942.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1155.1" y="915.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.1" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1156.2" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.10%)</title><rect x="1156.2" y="979.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="990.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.10%)</title><rect x="1156.2" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.67%)</title><rect x="1157.3" y="995.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.48%)</title><rect x="1159.6" y="979.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.48%)</title><rect x="1159.6" y="963.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.29%)</title><rect x="1161.9" y="947.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.19%)</title><rect x="1165.2" y="995.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1166.4" y="979.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.29%)</title><rect x="1167.5" y="995.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (3 samples, 0.29%)</title><rect x="1167.5" y="979.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1170.9" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1170.9" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1170.9" y="963.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="974.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.10%)</title><rect x="1170.9" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.48%)</title><rect x="1172.0" y="1011.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.38%)</title><rect x="1173.1" y="995.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.19%)</title><rect x="1174.2" y="979.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.2" y="990.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.10%)</title><rect x="1175.4" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.4" y="974.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1176.5" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="990.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1176.5" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1176.5" y="947.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1176.5" y="931.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.10%)</title><rect x="1177.6" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1177.6" y="995.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1177.6" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.48%)</title><rect x="1178.7" y="1027.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.48%)</title><rect x="1178.7" y="1011.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.48%)</title><rect x="1178.7" y="995.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.48%)</title><rect x="1178.7" y="979.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.48%)</title><rect x="1178.7" y="963.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.38%)</title><rect x="1178.7" y="947.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1178.7" y="931.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1178.7" y="915.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.38%)</title><rect x="1178.7" y="899.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.38%)</title><rect x="1178.7" y="883.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.38%)</title><rect x="1178.7" y="867.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.38%)</title><rect x="1178.7" y="851.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1178.7" y="835.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1178.7" y="819.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1178.7" y="803.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1178.7" y="787.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1178.7" y="771.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1178.7" y="755.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1178.7" y="739.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1178.7" y="723.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1178.7" y="707.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1178.7" y="691.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1178.7" y="675.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1178.7" y="659.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1178.7" y="643.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1178.7" y="627.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1178.7" y="611.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1178.7" y="595.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1178.7" y="579.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1178.7" y="563.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1178.7" y="547.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1178.7" y="531.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1178.7" y="515.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1178.7" y="499.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1178.7" y="483.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1178.7" y="467.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1178.7" y="451.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1178.7" y="435.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1178.7" y="419.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1178.7" y="403.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1178.7" y="387.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1178.7" y="371.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1178.7" y="355.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1178.7" y="339.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1178.7" y="323.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1178.7" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1178.7" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1178.7" y="275.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1178.7" y="259.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1178.7" y="243.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1178.7" y="227.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1178.7" y="211.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1178.7" y="195.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1178.7" y="179.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="190.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1178.7" y="163.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1178.7" y="147.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1178.7" y="131.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1178.7" y="115.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1178.7" y="99.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="110.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1178.7" y="83.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1178.7" y="67.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="78.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1178.7" y="51.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="62.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1178.7" y="35.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="46.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.9" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.10%)</title><rect x="1179.9" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1179.9" y="323.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1179.9" y="307.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.10%)</title><rect x="1179.9" y="291.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1179.9" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1179.9" y="259.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.0" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.0" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.0" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.0" y="307.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.0" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.0" y="275.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.0" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.0" y="243.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="254.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1181.0" y="227.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1181.0" y="211.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1181.0" y="195.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="179.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="163.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="147.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.10%)</title><rect x="1181.0" y="131.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1181.0" y="115.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="803.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="771.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1182.1" y="643.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1182.1" y="627.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1185.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1183.2" y="947.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1183.2" y="931.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="942.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.10%)</title><rect x="1183.2" y="915.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1183.2" y="899.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1183.2" y="883.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.10%)</title><rect x="1183.2" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="878.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.10%)</title><rect x="1184.4" y="1075.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.10%)</title><rect x="1184.4" y="1059.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.10%)</title><rect x="1184.4" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.10%)</title><rect x="1184.4" y="1027.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="1038.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.38%)</title><rect x="1185.5" y="1123.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="1134.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.38%)</title><rect x="1185.5" y="1107.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="1118.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.19%)</title><rect x="1185.5" y="1091.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="1102.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.19%)</title><rect x="1187.7" y="1091.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="1102.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.19%)</title><rect x="1187.7" y="1075.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="1086.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.19%)</title><rect x="1187.7" y="1059.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.19%)</title><rect x="1187.7" y="1043.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1187.7" y="1027.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.10%)</title><rect x="1187.7" y="1011.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="1022.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.10%)</title><rect x="1187.7" y="995.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="1006.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.10%)</title><rect x="1187.7" y="979.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.7" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.9" y="1027.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="1038.0"></text>
</g>
</g>
</svg>
