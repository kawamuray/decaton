<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1557"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1557"> </text>
<g id="frames">
<g>
<title>all (326 samples, 100.00%)</title><rect x="10.0" y="1523.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1534.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 7.36%)</title><rect x="10.0" y="1507.0" width="86.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1518.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (3 samples, 0.92%)</title><rect x="10.0" y="1491.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (3 samples, 0.92%)</title><rect x="10.0" y="1475.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (3 samples, 0.92%)</title><rect x="10.0" y="1459.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (3 samples, 0.92%)</title><rect x="10.0" y="1443.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (3 samples, 0.92%)</title><rect x="10.0" y="1427.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.31%)</title><rect x="10.0" y="1411.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.61%)</title><rect x="13.6" y="1411.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.61%)</title><rect x="13.6" y="1395.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.61%)</title><rect x="13.6" y="1379.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.61%)</title><rect x="13.6" y="1363.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.61%)</title><rect x="13.6" y="1347.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.61%)</title><rect x="13.6" y="1331.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (2 samples, 0.61%)</title><rect x="13.6" y="1315.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (2 samples, 0.61%)</title><rect x="13.6" y="1299.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (2 samples, 0.61%)</title><rect x="13.6" y="1283.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (2 samples, 0.61%)</title><rect x="13.6" y="1267.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.6" y="1278.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.61%)</title><rect x="13.6" y="1251.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.61%)</title><rect x="13.6" y="1235.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.31%)</title><rect x="17.2" y="1219.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.2" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.31%)</title><rect x="17.2" y="1203.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.2" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.31%)</title><rect x="17.2" y="1187.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1198.0"></text>
</g>
<g>
<title>__writev (1 samples, 0.31%)</title><rect x="17.2" y="1171.0" width="3.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="20.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 6.44%)</title><rect x="20.9" y="1491.0" width="76.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.9" y="1502.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 1.23%)</title><rect x="24.5" y="1475.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.5" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.92%)</title><rect x="24.5" y="1459.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.92%)</title><rect x="24.5" y="1443.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.92%)</title><rect x="24.5" y="1427.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.5" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.92%)</title><rect x="24.5" y="1411.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.5" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.61%)</title><rect x="24.5" y="1395.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.61%)</title><rect x="24.5" y="1379.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.5" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.61%)</title><rect x="24.5" y="1363.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.5" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.61%)</title><rect x="24.5" y="1347.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.61%)</title><rect x="24.5" y="1331.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.5" y="1342.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.31%)</title><rect x="24.5" y="1315.0" width="3.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="27.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/941727178.test (1 samples, 0.31%)</title><rect x="28.1" y="1315.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.1" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.31%)</title><rect x="31.7" y="1395.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.31%)</title><rect x="31.7" y="1379.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.7" y="1390.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.31%)</title><rect x="31.7" y="1363.0" width="3.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="34.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.31%)</title><rect x="35.3" y="1459.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.3" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.31%)</title><rect x="39.0" y="1475.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.31%)</title><rect x="39.0" y="1459.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.0" y="1470.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.31%)</title><rect x="39.0" y="1443.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.0" y="1454.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.23%)</title><rect x="42.6" y="1475.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.6" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/913387780.accept (3 samples, 0.92%)</title><rect x="42.6" y="1459.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.6" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (3 samples, 0.92%)</title><rect x="42.6" y="1443.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.6" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.31%)</title><rect x="42.6" y="1427.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.6" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.31%)</title><rect x="42.6" y="1411.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.6" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.31%)</title><rect x="42.6" y="1395.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.31%)</title><rect x="42.6" y="1379.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.31%)</title><rect x="42.6" y="1363.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.61%)</title><rect x="46.2" y="1427.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.2" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.31%)</title><rect x="46.2" y="1411.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.2" y="1422.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.31%)</title><rect x="46.2" y="1395.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="49.2" y="1406.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="46.2" y="1379.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="49.2" y="1390.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.31%)</title><rect x="46.2" y="1363.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="49.2" y="1374.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="49.8" y="1411.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="52.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.31%)</title><rect x="53.4" y="1459.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.4" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.37%)</title><rect x="57.1" y="1475.0" width="39.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.1" y="1486.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.37%)</title><rect x="57.1" y="1459.0" width="39.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.1" y="1470.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.15%)</title><rect x="57.1" y="1443.0" width="25.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.1" y="1454.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.92%)</title><rect x="57.1" y="1427.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.92%)</title><rect x="57.1" y="1411.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.61%)</title><rect x="57.1" y="1395.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.31%)</title><rect x="57.1" y="1379.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.31%)</title><rect x="57.1" y="1363.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.31%)</title><rect x="57.1" y="1347.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="57.1" y="1331.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.31%)</title><rect x="57.1" y="1315.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="57.1" y="1299.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="57.1" y="1283.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.31%)</title><rect x="57.1" y="1267.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="57.1" y="1251.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="57.1" y="1235.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="57.1" y="1219.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="57.1" y="1203.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.31%)</title><rect x="57.1" y="1187.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.31%)</title><rect x="60.7" y="1379.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.7" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="60.7" y="1363.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="60.7" y="1347.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.31%)</title><rect x="60.7" y="1331.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.31%)</title><rect x="64.3" y="1395.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.nodes (1 samples, 0.31%)</title><rect x="64.3" y="1379.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.23%)</title><rect x="67.9" y="1427.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.23%)</title><rect x="67.9" y="1411.0" width="14.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.23%)</title><rect x="67.9" y="1395.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.23%)</title><rect x="67.9" y="1379.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.92%)</title><rect x="67.9" y="1363.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.31%)</title><rect x="75.2" y="1347.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.31%)</title><rect x="75.2" y="1331.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.31%)</title><rect x="75.2" y="1315.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.31%)</title><rect x="75.2" y="1299.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.31%)</title><rect x="75.2" y="1283.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.31%)</title><rect x="75.2" y="1267.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.31%)</title><rect x="75.2" y="1251.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.31%)</title><rect x="78.8" y="1363.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.31%)</title><rect x="78.8" y="1347.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.31%)</title><rect x="78.8" y="1331.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.8" y="1342.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.31%)</title><rect x="78.8" y="1315.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.61%)</title><rect x="82.4" y="1443.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.4" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.61%)</title><rect x="82.4" y="1427.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.61%)</title><rect x="82.4" y="1411.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="82.4" y="1395.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.31%)</title><rect x="82.4" y="1379.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.31%)</title><rect x="82.4" y="1363.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.4" y="1374.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.31%)</title><rect x="82.4" y="1347.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.4" y="1358.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.31%)</title><rect x="82.4" y="1331.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.31%)</title><rect x="86.0" y="1395.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.0" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.31%)</title><rect x="86.0" y="1379.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.0" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.31%)</title><rect x="86.0" y="1363.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.0" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.31%)</title><rect x="86.0" y="1347.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="89.0" y="1358.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="86.0" y="1331.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="89.0" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.31%)</title><rect x="86.0" y="1315.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="89.0" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.31%)</title><rect x="86.0" y="1299.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="89.0" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.31%)</title><rect x="86.0" y="1283.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="89.0" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.31%)</title><rect x="86.0" y="1267.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="89.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.61%)</title><rect x="89.6" y="1443.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.6" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.61%)</title><rect x="89.6" y="1427.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.6" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.31%)</title><rect x="89.6" y="1411.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.31%)</title><rect x="89.6" y="1395.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.31%)</title><rect x="93.3" y="1411.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.3" y="1422.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.31%)</title><rect x="93.3" y="1395.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.3" y="1406.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.31%)</title><rect x="93.3" y="1379.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.3" y="1390.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.31%)</title><rect x="93.3" y="1363.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.3" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.31%)</title><rect x="93.3" y="1347.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.3" y="1358.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.31%)</title><rect x="93.3" y="1331.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (176 samples, 53.99%)</title><rect x="96.9" y="1507.0" width="637.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.9" y="1518.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (176 samples, 53.99%)</title><rect x="96.9" y="1491.0" width="637.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.9" y="1502.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (176 samples, 53.99%)</title><rect x="96.9" y="1475.0" width="637.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.9" y="1486.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2057761063.run (164 samples, 50.31%)</title><rect x="104.1" y="1459.0" width="593.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.1" y="1470.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2057761063.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (164 samples, 50.31%)</title><rect x="104.1" y="1443.0" width="593.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.1" y="1454.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (164 samples, 50.31%)</title><rect x="104.1" y="1427.0" width="593.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.1" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (159 samples, 48.77%)</title><rect x="104.1" y="1411.0" width="575.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.1" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.31%)</title><rect x="122.2" y="1395.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.2" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (32 samples, 9.82%)</title><rect x="125.8" y="1395.0" width="115.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.8" y="1406.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (32 samples, 9.82%)</title><rect x="125.8" y="1379.0" width="115.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.8" y="1390.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (32 samples, 9.82%)</title><rect x="125.8" y="1363.0" width="115.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="128.8" y="1374.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 9.82%)</title><rect x="125.8" y="1347.0" width="115.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.8" y="1358.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 9.82%)</title><rect x="125.8" y="1331.0" width="115.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.8" y="1342.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 9.82%)</title><rect x="125.8" y="1315.0" width="115.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="128.8" y="1326.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.37%)</title><rect x="125.8" y="1299.0" width="39.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.8" y="1310.0">com..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.31%)</title><rect x="136.7" y="1283.0" width="3.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="139.7" y="1294.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.31%)</title><rect x="136.7" y="1267.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="139.7" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="140.3" y="1283.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="143.3" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="140.3" y="1267.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="143.3" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.61%)</title><rect x="143.9" y="1283.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.61%)</title><rect x="143.9" y="1267.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.9" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.31%)</title><rect x="147.5" y="1251.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.31%)</title><rect x="147.5" y="1235.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.31%)</title><rect x="147.5" y="1219.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.31%)</title><rect x="147.5" y="1203.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.23%)</title><rect x="151.2" y="1283.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.2" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.31%)</title><rect x="162.0" y="1267.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.0" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.31%)</title><rect x="162.0" y="1251.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.31%)</title><rect x="162.0" y="1235.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="165.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.31%)</title><rect x="162.0" y="1219.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="165.0" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="162.0" y="1203.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="165.0" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="162.0" y="1187.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="165.0" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="162.0" y="1171.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="165.0" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="162.0" y="1155.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="165.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 5.52%)</title><rect x="165.6" y="1299.0" width="65.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.6" y="1310.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.31%)</title><rect x="165.6" y="1283.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.6" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.61%)</title><rect x="169.3" y="1283.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.31%)</title><rect x="172.9" y="1267.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.9" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.23%)</title><rect x="176.5" y="1283.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.5" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.23%)</title><rect x="176.5" y="1267.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.5" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.61%)</title><rect x="183.7" y="1251.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.61%)</title><rect x="183.7" y="1235.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.31%)</title><rect x="187.4" y="1219.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.4" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.31%)</title><rect x="191.0" y="1283.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.31%)</title><rect x="191.0" y="1267.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.0" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 3.07%)</title><rect x="194.6" y="1283.0" width="36.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="197.6" y="1294.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.23%)</title><rect x="194.6" y="1267.0" width="14.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.31%)</title><rect x="198.2" y="1251.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.31%)</title><rect x="198.2" y="1235.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.31%)</title><rect x="198.2" y="1219.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.2" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.61%)</title><rect x="201.8" y="1251.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 1.84%)</title><rect x="209.1" y="1267.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.1" y="1278.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 1.84%)</title><rect x="209.1" y="1251.0" width="21.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.1" y="1262.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 1.84%)</title><rect x="209.1" y="1235.0" width="21.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.1" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.92%)</title><rect x="209.1" y="1219.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="212.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.31%)</title><rect x="219.9" y="1219.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.31%)</title><rect x="223.6" y="1219.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.31%)</title><rect x="223.6" y="1203.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.31%)</title><rect x="223.6" y="1187.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.31%)</title><rect x="223.6" y="1171.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.31%)</title><rect x="223.6" y="1155.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.6" y="1166.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.31%)</title><rect x="223.6" y="1139.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.6" y="1150.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor15.newInstance (1 samples, 0.31%)</title><rect x="223.6" y="1123.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.31%)</title><rect x="227.2" y="1219.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.31%)</title><rect x="227.2" y="1203.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.31%)</title><rect x="227.2" y="1187.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.92%)</title><rect x="230.8" y="1299.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.8" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.92%)</title><rect x="230.8" y="1283.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.8" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.92%)</title><rect x="230.8" y="1267.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.92%)</title><rect x="230.8" y="1251.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.92%)</title><rect x="230.8" y="1235.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (108 samples, 33.13%)</title><rect x="241.7" y="1395.0" width="390.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.7" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (19 samples, 5.83%)</title><rect x="241.7" y="1379.0" width="68.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.7" y="1390.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 4.60%)</title><rect x="256.1" y="1363.0" width="54.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.1" y="1374.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 3.99%)</title><rect x="263.4" y="1347.0" width="47.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.4" y="1358.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.31%)</title><rect x="263.4" y="1331.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.31%)</title><rect x="263.4" y="1315.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.31%)</title><rect x="263.4" y="1299.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.31%)</title><rect x="263.4" y="1283.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.4" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 3.68%)</title><rect x="267.0" y="1331.0" width="43.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.0" y="1342.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.15%)</title><rect x="285.1" y="1315.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.1" y="1326.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.15%)</title><rect x="285.1" y="1299.0" width="25.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.1" y="1310.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.61%)</title><rect x="303.2" y="1283.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.2" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (25 samples, 7.67%)</title><rect x="310.4" y="1379.0" width="90.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.4" y="1390.0">com/lineco..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="314.0" y="1363.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="317.0" y="1374.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="314.0" y="1347.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="317.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (23 samples, 7.06%)</title><rect x="317.7" y="1363.0" width="83.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.7" y="1374.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.45%)</title><rect x="321.3" y="1347.0" width="28.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.3" y="1358.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.53%)</title><rect x="324.9" y="1331.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.53%)</title><rect x="324.9" y="1315.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.23%)</title><rect x="328.5" y="1299.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.23%)</title><rect x="328.5" y="1283.0" width="14.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.5" y="1294.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.23%)</title><rect x="328.5" y="1267.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.5" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.61%)</title><rect x="328.5" y="1251.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="331.5" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.31%)</title><rect x="328.5" y="1235.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.5" y="1246.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.31%)</title><rect x="328.5" y="1219.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="331.5" y="1230.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.31%)</title><rect x="328.5" y="1203.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.5" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.31%)</title><rect x="328.5" y="1187.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.5" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.31%)</title><rect x="328.5" y="1171.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="331.5" y="1182.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="332.1" y="1235.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="335.1" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="332.1" y="1219.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="335.1" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="335.8" y="1251.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="338.8" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="339.4" y="1251.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="342.4" y="1262.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.31%)</title><rect x="343.0" y="1331.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="346.0" y="1342.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="346.6" y="1331.0" width="3.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="349.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.92%)</title><rect x="350.2" y="1347.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.2" y="1358.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.92%)</title><rect x="350.2" y="1331.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.92%)</title><rect x="350.2" y="1315.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.2" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.37%)</title><rect x="361.1" y="1347.0" width="39.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.1" y="1358.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 3.37%)</title><rect x="361.1" y="1331.0" width="39.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.1" y="1342.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.61%)</title><rect x="361.1" y="1315.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.61%)</title><rect x="361.1" y="1299.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.61%)</title><rect x="361.1" y="1283.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.61%)</title><rect x="361.1" y="1267.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.1" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.76%)</title><rect x="368.3" y="1315.0" width="32.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.3" y="1326.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.15%)</title><rect x="375.6" y="1299.0" width="25.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="378.6" y="1310.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.84%)</title><rect x="379.2" y="1283.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.2" y="1294.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.61%)</title><rect x="393.7" y="1267.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 17.79%)</title><rect x="400.9" y="1379.0" width="210.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.9" y="1390.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (58 samples, 17.79%)</title><rect x="400.9" y="1363.0" width="210.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.9" y="1374.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/173717178.process (49 samples, 15.03%)</title><rect x="400.9" y="1347.0" width="177.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.9" y="1358.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (49 samples, 15.03%)</title><rect x="400.9" y="1331.0" width="177.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.9" y="1342.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (47 samples, 14.42%)</title><rect x="400.9" y="1315.0" width="170.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.9" y="1326.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (45 samples, 13.80%)</title><rect x="408.2" y="1299.0" width="162.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.2" y="1310.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (43 samples, 13.19%)</title><rect x="411.8" y="1283.0" width="155.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.8" y="1294.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (38 samples, 11.66%)</title><rect x="426.3" y="1267.0" width="137.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="429.3" y="1278.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.31%)</title><rect x="433.5" y="1251.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="436.5" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="437.1" y="1251.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="440.1" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.92%)</title><rect x="440.7" y="1251.0" width="10.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="443.7" y="1262.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.92%)</title><rect x="440.7" y="1235.0" width="10.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="443.7" y="1246.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.31%)</title><rect x="451.6" y="1251.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="454.6" y="1262.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.31%)</title><rect x="455.2" y="1251.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="458.2" y="1262.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 8.90%)</title><rect x="458.8" y="1251.0" width="105.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="461.8" y="1262.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.61%)</title><rect x="476.9" y="1235.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="479.9" y="1246.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.61%)</title><rect x="476.9" y="1219.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="479.9" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.53%)</title><rect x="484.2" y="1235.0" width="18.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="487.2" y="1246.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 3.07%)</title><rect x="502.3" y="1235.0" width="36.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="505.3" y="1246.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.92%)</title><rect x="538.5" y="1235.0" width="10.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="541.5" y="1246.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.61%)</title><rect x="549.3" y="1235.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="552.3" y="1246.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.31%)</title><rect x="556.6" y="1235.0" width="3.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="559.6" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.31%)</title><rect x="560.2" y="1235.0" width="3.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="563.2" y="1246.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.31%)</title><rect x="563.8" y="1267.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.8" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.31%)</title><rect x="567.4" y="1283.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="570.4" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="567.4" y="1267.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="570.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.61%)</title><rect x="571.0" y="1315.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="574.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.61%)</title><rect x="571.0" y="1299.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.61%)</title><rect x="571.0" y="1283.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.61%)</title><rect x="571.0" y="1267.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.31%)</title><rect x="578.3" y="1347.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="581.3" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.31%)</title><rect x="578.3" y="1331.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 1.84%)</title><rect x="581.9" y="1347.0" width="21.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.9" y="1358.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 1.84%)</title><rect x="581.9" y="1331.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="584.9" y="1342.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1042854987.get$Lambda (6 samples, 1.84%)</title><rect x="581.9" y="1315.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.9" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1042854987.&lt;init&gt; (6 samples, 1.84%)</title><rect x="581.9" y="1299.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="584.9" y="1310.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.31%)</title><rect x="603.6" y="1347.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="606.6" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.31%)</title><rect x="603.6" y="1331.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="606.6" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.31%)</title><rect x="607.2" y="1347.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.2" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.31%)</title><rect x="607.2" y="1331.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.84%)</title><rect x="610.9" y="1379.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.9" y="1390.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.61%)</title><rect x="625.3" y="1363.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.61%)</title><rect x="625.3" y="1347.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="628.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1796005171.accept (2 samples, 0.61%)</title><rect x="625.3" y="1331.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="628.3" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (2 samples, 0.61%)</title><rect x="625.3" y="1315.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.3" y="1326.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.61%)</title><rect x="625.3" y="1299.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="628.3" y="1310.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.61%)</title><rect x="625.3" y="1283.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.3" y="1294.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="625.3" y="1267.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="628.3" y="1278.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="625.3" y="1251.0" width="3.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="628.3" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.31%)</title><rect x="629.0" y="1267.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="632.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.68%)</title><rect x="632.6" y="1395.0" width="43.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.6" y="1406.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.53%)</title><rect x="657.9" y="1379.0" width="18.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="660.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.53%)</title><rect x="657.9" y="1363.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1191469514.accept (5 samples, 1.53%)</title><rect x="657.9" y="1347.0" width="18.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="660.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (5 samples, 1.53%)</title><rect x="657.9" y="1331.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="660.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/922356050.complete (5 samples, 1.53%)</title><rect x="657.9" y="1315.0" width="18.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (5 samples, 1.53%)</title><rect x="657.9" y="1299.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 1.53%)</title><rect x="657.9" y="1283.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.9" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.53%)</title><rect x="657.9" y="1267.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.9" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.53%)</title><rect x="657.9" y="1251.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.9" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 1.53%)</title><rect x="657.9" y="1235.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.9" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 1.53%)</title><rect x="657.9" y="1219.0" width="18.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.9" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.31%)</title><rect x="676.0" y="1395.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="679.0" y="1406.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="676.0" y="1379.0" width="3.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="679.0" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 1.53%)</title><rect x="679.6" y="1411.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="682.6" y="1422.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.92%)</title><rect x="686.9" y="1395.0" width="10.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="689.9" y="1406.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.61%)</title><rect x="690.5" y="1379.0" width="7.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="693.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.31%)</title><rect x="697.7" y="1459.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.31%)</title><rect x="697.7" y="1443.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.31%)</title><rect x="697.7" y="1427.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.31%)</title><rect x="697.7" y="1411.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.7" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 2.76%)</title><rect x="701.3" y="1459.0" width="32.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.3" y="1470.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.76%)</title><rect x="701.3" y="1443.0" width="32.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="704.3" y="1454.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.61%)</title><rect x="701.3" y="1427.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.3" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.61%)</title><rect x="701.3" y="1411.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.3" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 2.15%)</title><rect x="708.6" y="1427.0" width="25.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.6" y="1438.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.15%)</title><rect x="708.6" y="1411.0" width="25.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.6" y="1422.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.15%)</title><rect x="708.6" y="1395.0" width="25.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="711.6" y="1406.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 2.15%)</title><rect x="708.6" y="1379.0" width="25.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="711.6" y="1390.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.61%)</title><rect x="733.9" y="1507.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="736.9" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.31%)</title><rect x="737.5" y="1491.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.5" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="737.5" y="1475.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.31%)</title><rect x="737.5" y="1459.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.31%)</title><rect x="737.5" y="1443.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="740.5" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.31%)</title><rect x="737.5" y="1427.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.5" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.31%)</title><rect x="737.5" y="1411.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.31%)</title><rect x="737.5" y="1395.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.5" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.31%)</title><rect x="737.5" y="1379.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.31%)</title><rect x="737.5" y="1363.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.31%)</title><rect x="737.5" y="1347.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="740.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.31%)</title><rect x="737.5" y="1331.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.write (1 samples, 0.31%)</title><rect x="737.5" y="1315.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="740.5" y="1326.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (1 samples, 0.31%)</title><rect x="737.5" y="1299.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.5" y="1310.0"></text>
</g>
<g>
<title>start_thread (124 samples, 38.04%)</title><rect x="741.2" y="1507.0" width="448.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="744.2" y="1518.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (124 samples, 38.04%)</title><rect x="741.2" y="1491.0" width="448.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="744.2" y="1502.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 3.37%)</title><rect x="741.2" y="1475.0" width="39.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="744.2" y="1486.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.37%)</title><rect x="741.2" y="1459.0" width="39.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="744.2" y="1470.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 3.37%)</title><rect x="741.2" y="1443.0" width="39.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="744.2" y="1454.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 3.37%)</title><rect x="741.2" y="1427.0" width="39.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="744.2" y="1438.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.53%)</title><rect x="759.3" y="1411.0" width="18.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="762.3" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.92%)</title><rect x="766.5" y="1395.0" width="10.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="769.5" y="1406.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.31%)</title><rect x="773.7" y="1379.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.7" y="1390.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.31%)</title><rect x="777.4" y="1411.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="780.4" y="1422.0"></text>
</g>
<g>
<title>JavaThread::run() (113 samples, 34.66%)</title><rect x="781.0" y="1475.0" width="409.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="784.0" y="1486.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (113 samples, 34.66%)</title><rect x="781.0" y="1459.0" width="409.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="784.0" y="1470.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (113 samples, 34.66%)</title><rect x="781.0" y="1443.0" width="409.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.0" y="1454.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (113 samples, 34.66%)</title><rect x="781.0" y="1427.0" width="409.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.0" y="1438.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (110 samples, 33.74%)</title><rect x="781.0" y="1411.0" width="398.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.0" y="1422.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (110 samples, 33.74%)</title><rect x="781.0" y="1395.0" width="398.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="784.0" y="1406.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 15.34%)</title><rect x="781.0" y="1379.0" width="181.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.0" y="1390.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.61%)</title><rect x="781.0" y="1363.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.0" y="1374.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.61%)</title><rect x="781.0" y="1347.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="784.0" y="1358.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.61%)</title><rect x="788.2" y="1363.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.2" y="1374.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.61%)</title><rect x="788.2" y="1347.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="791.2" y="1358.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.61%)</title><rect x="788.2" y="1331.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="791.2" y="1342.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.23%)</title><rect x="795.5" y="1363.0" width="14.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="798.5" y="1374.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.23%)</title><rect x="795.5" y="1347.0" width="14.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="798.5" y="1358.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.92%)</title><rect x="799.1" y="1331.0" width="10.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="802.1" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.92%)</title><rect x="809.9" y="1363.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="812.9" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.92%)</title><rect x="809.9" y="1347.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="812.9" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.61%)</title><rect x="809.9" y="1331.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="812.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.31%)</title><rect x="817.2" y="1331.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="820.2" y="1342.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.31%)</title><rect x="817.2" y="1315.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 11.96%)</title><rect x="820.8" y="1363.0" width="141.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="823.8" y="1374.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.31%)</title><rect x="820.8" y="1347.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="823.8" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.61%)</title><rect x="824.4" y="1347.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="827.4" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 2.45%)</title><rect x="831.7" y="1347.0" width="28.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="834.7" y="1358.0">Ph..</text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.31%)</title><rect x="849.8" y="1331.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="852.8" y="1342.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.31%)</title><rect x="849.8" y="1315.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.8" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.31%)</title><rect x="853.4" y="1331.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="856.4" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.31%)</title><rect x="853.4" y="1315.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="856.4" y="1326.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.31%)</title><rect x="853.4" y="1299.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="856.4" y="1310.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.31%)</title><rect x="853.4" y="1283.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="856.4" y="1294.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.31%)</title><rect x="853.4" y="1267.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.4" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.31%)</title><rect x="853.4" y="1251.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="856.4" y="1262.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.31%)</title><rect x="857.0" y="1331.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="860.0" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.15%)</title><rect x="860.6" y="1347.0" width="25.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="863.6" y="1358.0">P..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.31%)</title><rect x="871.5" y="1331.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="874.5" y="1342.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.31%)</title><rect x="871.5" y="1315.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="874.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.92%)</title><rect x="875.1" y="1331.0" width="10.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.1" y="1342.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.31%)</title><rect x="875.1" y="1315.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="878.1" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.61%)</title><rect x="878.7" y="1315.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.7" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.61%)</title><rect x="886.0" y="1347.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="889.0" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.23%)</title><rect x="893.2" y="1347.0" width="14.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="896.2" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.23%)</title><rect x="893.2" y="1331.0" width="14.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="896.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.31%)</title><rect x="907.7" y="1347.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.7" y="1358.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 2.76%)</title><rect x="911.3" y="1347.0" width="32.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.3" y="1358.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 2.76%)</title><rect x="911.3" y="1331.0" width="32.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.3" y="1342.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 2.76%)</title><rect x="911.3" y="1315.0" width="32.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.3" y="1326.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.61%)</title><rect x="911.3" y="1299.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.3" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 1.53%)</title><rect x="918.5" y="1299.0" width="18.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.61%)</title><rect x="936.6" y="1299.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="939.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.31%)</title><rect x="943.9" y="1347.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="946.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.31%)</title><rect x="947.5" y="1347.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.5" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="947.5" y="1331.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="950.5" y="1342.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.92%)</title><rect x="951.1" y="1347.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.1" y="1358.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.31%)</title><rect x="954.7" y="1331.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.7" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="958.3" y="1331.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="961.3" y="1342.0"></text>
</g>
<g>
<title>Compile::Optimize() (54 samples, 16.56%)</title><rect x="962.0" y="1379.0" width="195.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.0" y="1390.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.31%)</title><rect x="962.0" y="1363.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.0" y="1374.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.31%)</title><rect x="962.0" y="1347.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="965.0" y="1358.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.31%)</title><rect x="962.0" y="1331.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.31%)</title><rect x="965.6" y="1363.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.31%)</title><rect x="965.6" y="1347.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="965.6" y="1331.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="968.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.31%)</title><rect x="965.6" y="1315.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="968.6" y="1326.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.31%)</title><rect x="969.2" y="1363.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.2" y="1374.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseTransform*) const (1 samples, 0.31%)</title><rect x="969.2" y="1347.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.2" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (45 samples, 13.80%)</title><rect x="972.8" y="1363.0" width="162.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.8" y="1374.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.61%)</title><rect x="972.8" y="1347.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (38 samples, 11.66%)</title><rect x="980.1" y="1347.0" width="137.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.1" y="1358.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (36 samples, 11.04%)</title><rect x="987.3" y="1331.0" width="130.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.3" y="1342.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.61%)</title><rect x="990.9" y="1315.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (33 samples, 10.12%)</title><rect x="998.2" y="1315.0" width="119.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="1326.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.84%)</title><rect x="1095.9" y="1299.0" width="21.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.9" y="1310.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.61%)</title><rect x="1117.6" y="1347.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.6" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.31%)</title><rect x="1121.2" y="1331.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.2" y="1342.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.31%)</title><rect x="1121.2" y="1315.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.31%)</title><rect x="1124.8" y="1347.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.61%)</title><rect x="1128.5" y="1347.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.5" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.61%)</title><rect x="1128.5" y="1331.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="1342.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.61%)</title><rect x="1128.5" y="1315.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.31%)</title><rect x="1128.5" y="1299.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.5" y="1310.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.31%)</title><rect x="1128.5" y="1283.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.5" y="1294.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.31%)</title><rect x="1132.1" y="1299.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.53%)</title><rect x="1135.7" y="1363.0" width="18.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.7" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.53%)</title><rect x="1135.7" y="1347.0" width="18.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.7" y="1358.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.31%)</title><rect x="1135.7" y="1331.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="1342.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.31%)</title><rect x="1135.7" y="1315.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.7" y="1326.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.31%)</title><rect x="1135.7" y="1299.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.7" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.31%)</title><rect x="1135.7" y="1283.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.7" y="1294.0"></text>
</g>
<g>
<title>_init (1 samples, 0.31%)</title><rect x="1135.7" y="1267.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1138.7" y="1278.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1139.3" y="1331.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.31%)</title><rect x="1142.9" y="1331.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.9" y="1342.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.61%)</title><rect x="1146.6" y="1331.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.31%)</title><rect x="1146.6" y="1315.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.31%)</title><rect x="1146.6" y="1299.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.6" y="1310.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.31%)</title><rect x="1146.6" y="1283.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.6" y="1294.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.31%)</title><rect x="1150.2" y="1315.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.2" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.31%)</title><rect x="1153.8" y="1363.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="1374.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.31%)</title><rect x="1153.8" y="1347.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.31%)</title><rect x="1153.8" y="1331.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="1342.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.31%)</title><rect x="1153.8" y="1315.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="1326.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.31%)</title><rect x="1153.8" y="1299.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="1310.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.31%)</title><rect x="1153.8" y="1283.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.8" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.84%)</title><rect x="1157.4" y="1379.0" width="21.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.4" y="1390.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.84%)</title><rect x="1157.4" y="1363.0" width="21.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="1374.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.84%)</title><rect x="1157.4" y="1347.0" width="21.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="1358.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.84%)</title><rect x="1157.4" y="1331.0" width="21.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="1342.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.84%)</title><rect x="1157.4" y="1315.0" width="21.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="1326.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.84%)</title><rect x="1157.4" y="1299.0" width="21.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="1310.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.84%)</title><rect x="1157.4" y="1283.0" width="21.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="1294.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.84%)</title><rect x="1157.4" y="1267.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="1278.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.84%)</title><rect x="1157.4" y="1251.0" width="21.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.4" y="1262.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.84%)</title><rect x="1157.4" y="1235.0" width="21.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="1246.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.84%)</title><rect x="1157.4" y="1219.0" width="21.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="1230.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.53%)</title><rect x="1157.4" y="1203.0" width="18.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1157.4" y="1187.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1157.4" y="1171.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1157.4" y="1155.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1157.4" y="1139.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1157.4" y="1123.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1157.4" y="1107.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.4" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1157.4" y="1091.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1157.4" y="1075.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1157.4" y="1059.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1157.4" y="1043.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1157.4" y="1027.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1157.4" y="1011.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1157.4" y="995.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1157.4" y="979.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1157.4" y="963.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1157.4" y="947.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1157.4" y="931.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1157.4" y="915.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1157.4" y="899.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1157.4" y="883.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1157.4" y="867.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1157.4" y="851.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1157.4" y="835.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1157.4" y="819.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.31%)</title><rect x="1157.4" y="803.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.31%)</title><rect x="1157.4" y="787.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.31%)</title><rect x="1157.4" y="771.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.31%)</title><rect x="1157.4" y="755.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.31%)</title><rect x="1157.4" y="739.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1157.4" y="723.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1157.4" y="707.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.31%)</title><rect x="1157.4" y="691.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.31%)</title><rect x="1157.4" y="675.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.31%)</title><rect x="1157.4" y="659.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1157.4" y="643.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1157.4" y="627.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1157.4" y="611.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1157.4" y="595.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1157.4" y="579.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.31%)</title><rect x="1157.4" y="563.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.31%)</title><rect x="1157.4" y="547.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.31%)</title><rect x="1157.4" y="531.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.0" y="803.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.0" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.0" y="787.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.0" y="771.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.0" y="755.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.0" y="739.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1161.0" y="723.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.0" y="707.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.0" y="691.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.0" y="675.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.0" y="659.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.0" y="643.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1161.0" y="627.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1161.0" y="611.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1161.0" y="595.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1161.0" y="579.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1161.0" y="563.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1161.0" y="547.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1161.0" y="531.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.31%)</title><rect x="1161.0" y="515.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.31%)</title><rect x="1161.0" y="499.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.31%)</title><rect x="1161.0" y="483.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="494.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.31%)</title><rect x="1161.0" y="467.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.92%)</title><rect x="1164.7" y="1187.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.92%)</title><rect x="1164.7" y="1171.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.92%)</title><rect x="1164.7" y="1155.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.92%)</title><rect x="1164.7" y="1139.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.92%)</title><rect x="1164.7" y="1123.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.92%)</title><rect x="1164.7" y="1107.0" width="10.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.92%)</title><rect x="1164.7" y="1091.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.92%)</title><rect x="1164.7" y="1075.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.92%)</title><rect x="1164.7" y="1059.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.92%)</title><rect x="1164.7" y="1043.0" width="10.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.92%)</title><rect x="1164.7" y="1027.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.92%)</title><rect x="1164.7" y="1011.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.92%)</title><rect x="1164.7" y="995.0" width="10.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.31%)</title><rect x="1164.7" y="979.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="990.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.31%)</title><rect x="1164.7" y="963.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.31%)</title><rect x="1164.7" y="947.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.31%)</title><rect x="1164.7" y="931.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.31%)</title><rect x="1164.7" y="915.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.7" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1164.7" y="899.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1164.7" y="883.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.31%)</title><rect x="1164.7" y="867.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.7" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.31%)</title><rect x="1164.7" y="851.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.31%)</title><rect x="1164.7" y="835.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.31%)</title><rect x="1164.7" y="819.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.31%)</title><rect x="1164.7" y="803.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.7" y="814.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.31%)</title><rect x="1164.7" y="787.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="798.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.31%)</title><rect x="1164.7" y="771.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.31%)</title><rect x="1164.7" y="755.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.31%)</title><rect x="1164.7" y="739.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="750.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.31%)</title><rect x="1164.7" y="723.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(void const*) (1 samples, 0.31%)</title><rect x="1164.7" y="707.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="979.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="963.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="947.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="931.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="915.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="899.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="883.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="867.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="851.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="835.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="819.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="803.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="787.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="771.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="755.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="739.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="723.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="707.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="691.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="675.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="659.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="643.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="627.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="611.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="595.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="579.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="563.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="547.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="531.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="515.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="499.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="483.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="467.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="451.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="435.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="419.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="403.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.3" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="387.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1168.3" y="371.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1168.3" y="355.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1168.3" y="339.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1168.3" y="323.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1168.3" y="307.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1168.3" y="291.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.31%)</title><rect x="1168.3" y="275.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.31%)</title><rect x="1168.3" y="259.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.31%)</title><rect x="1168.3" y="243.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.31%)</title><rect x="1168.3" y="227.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.31%)</title><rect x="1168.3" y="211.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1168.3" y="195.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1168.3" y="179.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.31%)</title><rect x="1168.3" y="163.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.31%)</title><rect x="1168.3" y="147.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.31%)</title><rect x="1168.3" y="131.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1168.3" y="115.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1168.3" y="99.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1168.3" y="83.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="94.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1168.3" y="67.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="78.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1168.3" y="51.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="62.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.31%)</title><rect x="1168.3" y="35.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1171.9" y="979.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1171.9" y="963.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1171.9" y="947.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1171.9" y="931.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1171.9" y="915.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.31%)</title><rect x="1171.9" y="899.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.9" y="910.0"></text>
</g>
<g>
<title>ReplacedNodes::is_empty() const (1 samples, 0.31%)</title><rect x="1171.9" y="883.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1175.5" y="1203.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="1214.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.31%)</title><rect x="1175.5" y="1187.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1198.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.31%)</title><rect x="1175.5" y="1171.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.31%)</title><rect x="1175.5" y="1155.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.31%)</title><rect x="1175.5" y="1139.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.31%)</title><rect x="1175.5" y="1123.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="1134.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.92%)</title><rect x="1179.1" y="1411.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="1422.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.92%)</title><rect x="1179.1" y="1395.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1406.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.92%)</title><rect x="1179.1" y="1379.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.61%)</title><rect x="1179.1" y="1363.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="1374.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.31%)</title><rect x="1179.1" y="1347.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="1358.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.31%)</title><rect x="1179.1" y="1331.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="1342.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.31%)</title><rect x="1179.1" y="1315.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="1326.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.31%)</title><rect x="1179.1" y="1299.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.31%)</title><rect x="1179.1" y="1283.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.31%)</title><rect x="1179.1" y="1267.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1179.1" y="1251.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1179.1" y="1235.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1179.1" y="1219.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.31%)</title><rect x="1179.1" y="1203.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.31%)</title><rect x="1179.1" y="1187.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1179.1" y="1171.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1179.1" y="1155.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1179.1" y="1139.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.31%)</title><rect x="1179.1" y="1123.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.31%)</title><rect x="1179.1" y="1107.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1179.1" y="1091.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1179.1" y="1075.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.31%)</title><rect x="1179.1" y="1059.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.31%)</title><rect x="1179.1" y="1043.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.31%)</title><rect x="1179.1" y="1027.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1179.1" y="1011.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.31%)</title><rect x="1179.1" y="995.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1179.1" y="979.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1179.1" y="963.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1179.1" y="947.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1179.1" y="931.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="942.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1179.1" y="915.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="926.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.31%)</title><rect x="1179.1" y="899.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="910.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.31%)</title><rect x="1179.1" y="883.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.31%)</title><rect x="1179.1" y="867.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.31%)</title><rect x="1182.8" y="1347.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="1358.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.31%)</title><rect x="1182.8" y="1331.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="1342.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.31%)</title><rect x="1182.8" y="1315.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="1326.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.31%)</title><rect x="1182.8" y="1299.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1310.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.31%)</title><rect x="1182.8" y="1283.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="1294.0"></text>
</g>
<g>
<title>OopMap::set_oop(VMRegImpl*) (1 samples, 0.31%)</title><rect x="1182.8" y="1267.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="1278.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.31%)</title><rect x="1182.8" y="1251.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="1262.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.31%)</title><rect x="1186.4" y="1363.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.4" y="1374.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.31%)</title><rect x="1186.4" y="1347.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.4" y="1358.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.31%)</title><rect x="1186.4" y="1331.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.4" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.31%)</title><rect x="1186.4" y="1315.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.4" y="1326.0"></text>
</g>
</g>
</svg>
