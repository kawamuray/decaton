<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (249 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.40%)</title><rect x="10.0" y="1203.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>Deoptimization::unpack_frames(JavaThread*, int) (1 samples, 0.40%)</title><rect x="10.0" y="1187.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>vframeArray::unpack_to_stack(frame&amp;, int, int) (1 samples, 0.40%)</title><rect x="10.0" y="1171.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>vframeArrayElement::unpack_on_stack(int, int, int, frame*, bool, bool, int) (1 samples, 0.40%)</title><rect x="10.0" y="1155.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 10.04%)</title><rect x="14.7" y="1203.0" width="118.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.7" y="1214.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 10.04%)</title><rect x="14.7" y="1187.0" width="118.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.7" y="1198.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.40%)</title><rect x="14.7" y="1171.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.40%)</title><rect x="14.7" y="1155.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1878845165.accept (1 samples, 0.40%)</title><rect x="14.7" y="1139.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.40%)</title><rect x="14.7" y="1123.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.40%)</title><rect x="14.7" y="1107.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.40%)</title><rect x="14.7" y="1091.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.40%)</title><rect x="19.5" y="1171.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.40%)</title><rect x="19.5" y="1155.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 6.83%)</title><rect x="24.2" y="1171.0" width="80.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.2" y="1182.0">java/lang..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1715329097.accept (17 samples, 6.83%)</title><rect x="24.2" y="1155.0" width="80.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.2" y="1166.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (17 samples, 6.83%)</title><rect x="24.2" y="1139.0" width="80.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.2" y="1150.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (10 samples, 4.02%)</title><rect x="24.2" y="1123.0" width="47.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.2" y="1134.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (10 samples, 4.02%)</title><rect x="24.2" y="1107.0" width="47.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.2" y="1118.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (10 samples, 4.02%)</title><rect x="24.2" y="1091.0" width="47.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.2" y="1102.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (10 samples, 4.02%)</title><rect x="24.2" y="1075.0" width="47.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.2" y="1086.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 4.02%)</title><rect x="24.2" y="1059.0" width="47.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.2" y="1070.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 4.02%)</title><rect x="24.2" y="1043.0" width="47.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.2" y="1054.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 1.61%)</title><rect x="38.4" y="1027.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.40%)</title><rect x="38.4" y="1011.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.40%)</title><rect x="38.4" y="995.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.40%)</title><rect x="38.4" y="979.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.20%)</title><rect x="43.2" y="1011.0" width="14.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.20%)</title><rect x="43.2" y="995.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.20%)</title><rect x="43.2" y="979.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.20%)</title><rect x="43.2" y="963.0" width="14.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.2" y="974.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (3 samples, 1.20%)</title><rect x="43.2" y="947.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.2" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.40%)</title><rect x="43.2" y="931.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="46.2" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.80%)</title><rect x="47.9" y="931.0" width="9.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="50.9" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.80%)</title><rect x="47.9" y="915.0" width="9.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="50.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.40%)</title><rect x="57.4" y="1027.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="60.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.40%)</title><rect x="57.4" y="1011.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.40%)</title><rect x="57.4" y="995.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.4" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.80%)</title><rect x="62.1" y="1027.0" width="9.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="65.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (7 samples, 2.81%)</title><rect x="71.6" y="1123.0" width="33.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="1134.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.81%)</title><rect x="71.6" y="1107.0" width="33.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.6" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.80%)</title><rect x="90.6" y="1091.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.80%)</title><rect x="90.6" y="1075.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.80%)</title><rect x="90.6" y="1059.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.6" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="100.0" y="1091.0" width="4.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="103.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 2.41%)</title><rect x="104.8" y="1171.0" width="28.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.8" y="1182.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 2.41%)</title><rect x="104.8" y="1155.0" width="28.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.8" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 0.80%)</title><rect x="104.8" y="1139.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.80%)</title><rect x="104.8" y="1123.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.80%)</title><rect x="104.8" y="1107.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.80%)</title><rect x="104.8" y="1091.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.80%)</title><rect x="104.8" y="1075.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.40%)</title><rect x="104.8" y="1059.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.40%)</title><rect x="104.8" y="1043.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.40%)</title><rect x="104.8" y="1027.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.40%)</title><rect x="104.8" y="1011.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="107.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.40%)</title><rect x="104.8" y="995.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.40%)</title><rect x="104.8" y="979.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.40%)</title><rect x="104.8" y="963.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="107.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.40%)</title><rect x="104.8" y="947.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.40%)</title><rect x="109.5" y="1059.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.40%)</title><rect x="109.5" y="1043.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.40%)</title><rect x="109.5" y="1027.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="112.5" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.40%)</title><rect x="109.5" y="1011.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.40%)</title><rect x="114.3" y="1139.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.40%)</title><rect x="114.3" y="1123.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.40%)</title><rect x="114.3" y="1107.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.40%)</title><rect x="114.3" y="1091.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.3" y="1102.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.40%)</title><rect x="114.3" y="1075.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="117.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.80%)</title><rect x="119.0" y="1139.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="119.0" y="1123.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="119.0" y="1107.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="122.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="119.0" y="1091.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.40%)</title><rect x="119.0" y="1075.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.40%)</title><rect x="119.0" y="1059.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.40%)</title><rect x="119.0" y="1043.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.40%)</title><rect x="119.0" y="1027.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.40%)</title><rect x="119.0" y="1011.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.40%)</title><rect x="119.0" y="995.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.40%)</title><rect x="119.0" y="979.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.0" y="990.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.40%)</title><rect x="119.0" y="963.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="122.0" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="119.0" y="947.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="122.0" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.40%)</title><rect x="119.0" y="931.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="122.0" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.40%)</title><rect x="119.0" y="915.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="122.0" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.40%)</title><rect x="119.0" y="899.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="122.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate_initialize_regions(unsigned int, unsigned int, unsigned long, unsigned char) (1 samples, 0.40%)</title><rect x="119.0" y="883.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="122.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.40%)</title><rect x="123.7" y="1123.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.40%)</title><rect x="123.7" y="1107.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.40%)</title><rect x="123.7" y="1091.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.40%)</title><rect x="123.7" y="1075.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.40%)</title><rect x="123.7" y="1059.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.40%)</title><rect x="123.7" y="1043.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.40%)</title><rect x="123.7" y="1027.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.40%)</title><rect x="123.7" y="1011.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext (1 samples, 0.40%)</title><rect x="123.7" y="995.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="128.5" y="1139.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="128.5" y="1123.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="131.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.40%)</title><rect x="128.5" y="1107.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.40%)</title><rect x="128.5" y="1091.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.40%)</title><rect x="128.5" y="1075.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.40%)</title><rect x="128.5" y="1059.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.40%)</title><rect x="128.5" y="1043.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (79 samples, 31.73%)</title><rect x="133.2" y="1203.0" width="374.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.2" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (78 samples, 31.33%)</title><rect x="133.2" y="1187.0" width="369.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.2" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (78 samples, 31.33%)</title><rect x="133.2" y="1171.0" width="369.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.2" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1027104144.run (59 samples, 23.69%)</title><rect x="147.4" y="1155.0" width="279.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.4" y="1166.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (59 samples, 23.69%)</title><rect x="147.4" y="1139.0" width="279.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="150.4" y="1150.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (59 samples, 23.69%)</title><rect x="147.4" y="1123.0" width="279.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.4" y="1134.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (58 samples, 23.29%)</title><rect x="147.4" y="1107.0" width="274.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.4" y="1118.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (12 samples, 4.82%)</title><rect x="156.9" y="1091.0" width="56.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.9" y="1102.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (12 samples, 4.82%)</title><rect x="156.9" y="1075.0" width="56.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.9" y="1086.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 4.82%)</title><rect x="156.9" y="1059.0" width="56.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.9" y="1070.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 4.82%)</title><rect x="156.9" y="1043.0" width="56.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.9" y="1054.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 4.82%)</title><rect x="156.9" y="1027.0" width="56.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.9" y="1038.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 4.82%)</title><rect x="156.9" y="1011.0" width="56.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.9" y="1022.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.20%)</title><rect x="156.9" y="995.0" width="14.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.40%)</title><rect x="161.6" y="979.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="164.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.40%)</title><rect x="161.6" y="963.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="164.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.40%)</title><rect x="161.6" y="947.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="161.6" y="931.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.40%)</title><rect x="161.6" y="915.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.6" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="161.6" y="899.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.40%)</title><rect x="166.4" y="979.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.40%)</title><rect x="166.4" y="963.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.4" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.40%)</title><rect x="166.4" y="947.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="169.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 3.61%)</title><rect x="171.1" y="995.0" width="42.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.1" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.40%)</title><rect x="171.1" y="979.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="171.1" y="963.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.40%)</title><rect x="175.9" y="979.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="175.9" y="963.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="175.9" y="947.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.40%)</title><rect x="175.9" y="931.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 2.81%)</title><rect x="180.6" y="979.0" width="33.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.6" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.61%)</title><rect x="180.6" y="963.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.80%)</title><rect x="185.3" y="947.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.40%)</title><rect x="194.8" y="947.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.40%)</title><rect x="194.8" y="931.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="197.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.40%)</title><rect x="199.6" y="963.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.80%)</title><rect x="204.3" y="963.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.80%)</title><rect x="204.3" y="947.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.80%)</title><rect x="204.3" y="931.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.80%)</title><rect x="204.3" y="915.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.40%)</title><rect x="209.0" y="899.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.40%)</title><rect x="209.0" y="883.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.40%)</title><rect x="209.0" y="867.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.40%)</title><rect x="209.0" y="851.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (41 samples, 16.47%)</title><rect x="213.8" y="1091.0" width="194.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.8" y="1102.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (10 samples, 4.02%)</title><rect x="218.5" y="1075.0" width="47.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.5" y="1086.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (10 samples, 4.02%)</title><rect x="218.5" y="1059.0" width="47.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.5" y="1070.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 3.61%)</title><rect x="223.3" y="1043.0" width="42.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.3" y="1054.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.80%)</title><rect x="223.3" y="1027.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.80%)</title><rect x="223.3" y="1011.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.80%)</title><rect x="223.3" y="995.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.80%)</title><rect x="223.3" y="979.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.81%)</title><rect x="232.7" y="1027.0" width="33.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.7" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.20%)</title><rect x="251.7" y="1011.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.20%)</title><rect x="251.7" y="995.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.40%)</title><rect x="261.2" y="979.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="265.9" y="1075.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (20 samples, 8.03%)</title><rect x="270.6" y="1075.0" width="94.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.6" y="1086.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 8.03%)</title><rect x="270.6" y="1059.0" width="94.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.6" y="1070.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.41%)</title><rect x="280.1" y="1043.0" width="28.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.1" y="1054.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.01%)</title><rect x="280.1" y="1027.0" width="23.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.1" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.61%)</title><rect x="284.9" y="1011.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.61%)</title><rect x="284.9" y="995.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.61%)</title><rect x="284.9" y="979.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.9" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.40%)</title><rect x="284.9" y="963.0" width="4.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="287.9" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.20%)</title><rect x="289.6" y="963.0" width="14.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="292.6" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.40%)</title><rect x="303.8" y="1027.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.40%)</title><rect x="308.6" y="1043.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.40%)</title><rect x="308.6" y="1027.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.40%)</title><rect x="308.6" y="1011.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.6" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.80%)</title><rect x="313.3" y="1043.0" width="9.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="316.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.partition (1 samples, 0.40%)</title><rect x="322.8" y="1043.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.8" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.21%)</title><rect x="327.5" y="1043.0" width="37.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.5" y="1054.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.41%)</title><rect x="337.0" y="1027.0" width="28.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="340.0" y="1038.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.40%)</title><rect x="337.0" y="1011.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="337.0" y="995.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="337.0" y="979.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="337.0" y="963.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.01%)</title><rect x="341.7" y="1011.0" width="23.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.7" y="1022.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.40%)</title><rect x="360.7" y="995.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="360.7" y="979.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 2.41%)</title><rect x="365.4" y="1075.0" width="28.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.4" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 2.41%)</title><rect x="365.4" y="1059.0" width="28.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="368.4" y="1070.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1849364414.process (1 samples, 0.40%)</title><rect x="365.4" y="1043.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.40%)</title><rect x="365.4" y="1027.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.80%)</title><rect x="370.2" y="1043.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.80%)</title><rect x="370.2" y="1027.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="373.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.40%)</title><rect x="379.6" y="1043.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.40%)</title><rect x="379.6" y="1027.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1425144873.get$Lambda (1 samples, 0.40%)</title><rect x="379.6" y="1011.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.6" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="379.6" y="995.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="382.6" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="379.6" y="979.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="382.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="384.4" y="1043.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="384.4" y="1027.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.4" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="384.4" y="1011.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="387.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="389.1" y="1043.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="389.1" y="1027.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="392.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.40%)</title><rect x="393.9" y="1075.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.40%)</title><rect x="393.9" y="1059.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.9" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="393.9" y="1043.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="396.9" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="393.9" y="1027.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="396.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.80%)</title><rect x="398.6" y="1075.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.40%)</title><rect x="403.3" y="1059.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.40%)</title><rect x="403.3" y="1043.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/2139727841.accept (1 samples, 0.40%)</title><rect x="403.3" y="1027.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.40%)</title><rect x="403.3" y="1011.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="403.3" y="995.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.40%)</title><rect x="403.3" y="979.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.3" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.40%)</title><rect x="403.3" y="963.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.80%)</title><rect x="408.1" y="1091.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.80%)</title><rect x="408.1" y="1075.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.80%)</title><rect x="408.1" y="1059.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1900959328.accept (2 samples, 0.80%)</title><rect x="408.1" y="1043.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (2 samples, 0.80%)</title><rect x="408.1" y="1027.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/164154347.complete (2 samples, 0.80%)</title><rect x="408.1" y="1011.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 0.80%)</title><rect x="408.1" y="995.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="411.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.80%)</title><rect x="408.1" y="979.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.80%)</title><rect x="408.1" y="963.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.1" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.80%)</title><rect x="408.1" y="947.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.1" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="417.6" y="1091.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="420.6" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="417.6" y="1075.0" width="4.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="420.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.40%)</title><rect x="422.3" y="1107.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.3" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="422.3" y="1091.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="425.3" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="422.3" y="1075.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="425.3" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="422.3" y="1059.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="425.3" y="1070.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.40%)</title><rect x="422.3" y="1043.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="425.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.80%)</title><rect x="427.0" y="1155.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.80%)</title><rect x="427.0" y="1139.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="430.0" y="1150.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.40%)</title><rect x="427.0" y="1123.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="430.0" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.40%)</title><rect x="431.8" y="1123.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="434.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.40%)</title><rect x="436.5" y="1155.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.40%)</title><rect x="436.5" y="1139.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.80%)</title><rect x="441.2" y="1155.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="446.0" y="1139.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.40%)</title><rect x="446.0" y="1123.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 4.42%)</title><rect x="450.7" y="1155.0" width="52.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.7" y="1166.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 4.42%)</title><rect x="450.7" y="1139.0" width="52.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.7" y="1150.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 3.61%)</title><rect x="450.7" y="1123.0" width="42.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.7" y="1134.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.40%)</title><rect x="455.5" y="1107.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="455.5" y="1091.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="455.5" y="1075.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.40%)</title><rect x="455.5" y="1059.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 2.81%)</title><rect x="460.2" y="1107.0" width="33.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.2" y="1118.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (7 samples, 2.81%)</title><rect x="460.2" y="1091.0" width="33.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="463.2" y="1102.0">su..</text>
</g>
<g>
<title>Unsafe_Park (7 samples, 2.81%)</title><rect x="460.2" y="1075.0" width="33.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="463.2" y="1086.0">Un..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.40%)</title><rect x="460.2" y="1059.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="463.2" y="1070.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.40%)</title><rect x="464.9" y="1059.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="467.9" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.40%)</title><rect x="469.7" y="1059.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="472.7" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.80%)</title><rect x="474.4" y="1059.0" width="9.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="477.4" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.40%)</title><rect x="483.9" y="1059.0" width="4.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="486.9" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.40%)</title><rect x="488.6" y="1059.0" width="4.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="491.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.80%)</title><rect x="493.4" y="1123.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.80%)</title><rect x="493.4" y="1107.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.80%)</title><rect x="493.4" y="1091.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.80%)</title><rect x="493.4" y="1075.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.4" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.40%)</title><rect x="502.9" y="1187.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="505.9" y="1198.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.40%)</title><rect x="507.6" y="1203.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="510.6" y="1214.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.40%)</title><rect x="507.6" y="1187.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="510.6" y="1198.0"></text>
</g>
<g>
<title>start_thread (143 samples, 57.43%)</title><rect x="512.3" y="1203.0" width="677.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="515.3" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (143 samples, 57.43%)</title><rect x="512.3" y="1187.0" width="677.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="515.3" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 4.42%)</title><rect x="512.3" y="1171.0" width="52.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="515.3" y="1182.0">GangW..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.20%)</title><rect x="512.3" y="1155.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="515.3" y="1166.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.20%)</title><rect x="512.3" y="1139.0" width="14.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="515.3" y="1150.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 1.20%)</title><rect x="512.3" y="1123.0" width="14.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="515.3" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 3.21%)</title><rect x="526.5" y="1155.0" width="38.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="529.5" y="1166.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.01%)</title><rect x="526.5" y="1139.0" width="23.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="529.5" y="1150.0">G..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.40%)</title><rect x="526.5" y="1123.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="529.5" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.20%)</title><rect x="531.3" y="1123.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="534.3" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.80%)</title><rect x="531.3" y="1107.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="534.3" y="1118.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.40%)</title><rect x="540.8" y="1107.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="543.8" y="1118.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="545.5" y="1123.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="548.5" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.80%)</title><rect x="550.2" y="1139.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="553.2" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.80%)</title><rect x="550.2" y="1123.0" width="9.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="553.2" y="1134.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.80%)</title><rect x="550.2" y="1107.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="553.2" y="1118.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.80%)</title><rect x="550.2" y="1091.0" width="9.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="553.2" y="1102.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.40%)</title><rect x="555.0" y="1075.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="558.0" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="555.0" y="1059.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="558.0" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="559.7" y="1139.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="562.7" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="559.7" y="1123.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="562.7" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="559.7" y="1107.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="562.7" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.40%)</title><rect x="559.7" y="1091.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="562.7" y="1102.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (132 samples, 53.01%)</title><rect x="564.5" y="1171.0" width="625.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="567.5" y="1182.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (132 samples, 53.01%)</title><rect x="564.5" y="1155.0" width="625.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="567.5" y="1166.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (132 samples, 53.01%)</title><rect x="564.5" y="1139.0" width="625.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="567.5" y="1150.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (129 samples, 51.81%)</title><rect x="564.5" y="1123.0" width="611.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="567.5" y="1134.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (129 samples, 51.81%)</title><rect x="564.5" y="1107.0" width="611.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="567.5" y="1118.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (72 samples, 28.92%)</title><rect x="564.5" y="1091.0" width="341.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.5" y="1102.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.40%)</title><rect x="564.5" y="1075.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="567.5" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="564.5" y="1059.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.5" y="1070.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.40%)</title><rect x="564.5" y="1043.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="567.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.01%)</title><rect x="569.2" y="1075.0" width="23.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.2" y="1086.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.01%)</title><rect x="569.2" y="1059.0" width="23.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="572.2" y="1070.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.80%)</title><rect x="578.7" y="1043.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="581.7" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.40%)</title><rect x="588.2" y="1043.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="591.2" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="588.2" y="1027.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="591.2" y="1038.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="588.2" y="1011.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="591.2" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="588.2" y="995.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.2" y="1006.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.40%)</title><rect x="588.2" y="979.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="591.2" y="990.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.40%)</title><rect x="588.2" y="963.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="591.2" y="974.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.40%)</title><rect x="592.9" y="1075.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="595.9" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.40%)</title><rect x="592.9" y="1059.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="595.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.40%)</title><rect x="597.6" y="1075.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="600.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.40%)</title><rect x="597.6" y="1059.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="600.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.40%)</title><rect x="597.6" y="1043.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="600.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.40%)</title><rect x="597.6" y="1027.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="600.6" y="1038.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.40%)</title><rect x="597.6" y="1011.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="600.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (64 samples, 25.70%)</title><rect x="602.4" y="1075.0" width="303.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="605.4" y="1086.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="602.4" y="1059.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="605.4" y="1070.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.40%)</title><rect x="607.1" y="1059.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="610.1" y="1070.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.40%)</title><rect x="611.8" y="1059.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="614.8" y="1070.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.40%)</title><rect x="616.6" y="1059.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="619.6" y="1070.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.80%)</title><rect x="621.3" y="1059.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 2.41%)</title><rect x="630.8" y="1059.0" width="28.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.8" y="1070.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.80%)</title><rect x="645.0" y="1043.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="648.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="654.5" y="1043.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="657.5" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.40%)</title><rect x="654.5" y="1027.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="657.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 2.81%)</title><rect x="659.2" y="1059.0" width="33.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="662.2" y="1070.0">Ph..</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.40%)</title><rect x="678.2" y="1043.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="681.2" y="1054.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.40%)</title><rect x="682.9" y="1043.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="685.9" y="1054.0"></text>
</g>
<g>
<title>loadSNode::rule() const (1 samples, 0.40%)</title><rect x="687.7" y="1043.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="690.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 5.62%)</title><rect x="692.4" y="1059.0" width="66.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="695.4" y="1070.0">PhaseCh..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.80%)</title><rect x="701.9" y="1043.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="704.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 2.41%)</title><rect x="711.4" y="1043.0" width="28.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="714.4" y="1054.0">Ph..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.80%)</title><rect x="730.3" y="1027.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.3" y="1038.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.80%)</title><rect x="739.8" y="1043.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="742.8" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.40%)</title><rect x="749.3" y="1043.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="752.3" y="1054.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.40%)</title><rect x="754.0" y="1043.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="757.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.80%)</title><rect x="758.8" y="1059.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="761.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.80%)</title><rect x="758.8" y="1043.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.8" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="758.8" y="1027.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.8" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="763.5" y="1027.0" width="4.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="766.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (3 samples, 1.20%)</title><rect x="768.2" y="1059.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.2" y="1070.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.80%)</title><rect x="773.0" y="1043.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="776.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 1.61%)</title><rect x="782.4" y="1059.0" width="19.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="785.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.40%)</title><rect x="801.4" y="1059.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 2.01%)</title><rect x="806.1" y="1059.0" width="23.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="809.1" y="1070.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.20%)</title><rect x="815.6" y="1043.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="818.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.61%)</title><rect x="829.8" y="1059.0" width="19.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.8" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.61%)</title><rect x="829.8" y="1043.0" width="19.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.40%)</title><rect x="834.6" y="1027.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="837.6" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.80%)</title><rect x="839.3" y="1027.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="842.3" y="1038.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.40%)</title><rect x="839.3" y="1011.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="842.3" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="839.3" y="995.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="842.3" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.40%)</title><rect x="844.1" y="1011.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="847.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 2.01%)</title><rect x="848.8" y="1059.0" width="23.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="851.8" y="1070.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.20%)</title><rect x="858.3" y="1043.0" width="14.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="861.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.40%)</title><rect x="872.5" y="1059.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.5" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="872.5" y="1043.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.5" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.01%)</title><rect x="877.2" y="1059.0" width="23.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="880.2" y="1070.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.80%)</title><rect x="891.4" y="1043.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.4" y="1054.0"></text>
</g>
<g>
<title>jmpConNode::oper_input_base() const (1 samples, 0.40%)</title><rect x="900.9" y="1059.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="903.9" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (47 samples, 18.88%)</title><rect x="905.7" y="1091.0" width="222.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="908.7" y="1102.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.40%)</title><rect x="905.7" y="1075.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="908.7" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.40%)</title><rect x="905.7" y="1059.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.7" y="1070.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.40%)</title><rect x="905.7" y="1043.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.7" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.40%)</title><rect x="910.4" y="1075.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="913.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.80%)</title><rect x="915.1" y="1075.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.80%)</title><rect x="915.1" y="1059.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="918.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.80%)</title><rect x="915.1" y="1043.0" width="9.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="918.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.80%)</title><rect x="915.1" y="1027.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="1011.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="995.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="979.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="963.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="947.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="931.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="922.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="915.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="899.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="883.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="867.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="851.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="922.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="835.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="819.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="803.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="787.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="771.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="755.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="739.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="723.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="922.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="707.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="922.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="691.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="675.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="659.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="643.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="627.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="611.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="595.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="579.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="563.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="547.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="531.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="515.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.9" y="526.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.40%)</title><rect x="919.9" y="499.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.9" y="510.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.40%)</title><rect x="924.6" y="1075.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="927.6" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="924.6" y="1059.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="927.6" y="1070.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.40%)</title><rect x="924.6" y="1043.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="927.6" y="1054.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.40%)</title><rect x="924.6" y="1027.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="927.6" y="1038.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.40%)</title><rect x="924.6" y="1011.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="927.6" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="924.6" y="995.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.6" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="924.6" y="979.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.6" y="990.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.40%)</title><rect x="924.6" y="963.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.6" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.40%)</title><rect x="929.4" y="1075.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.40%)</title><rect x="929.4" y="1059.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.4" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.40%)</title><rect x="929.4" y="1043.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="932.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 12.45%)</title><rect x="934.1" y="1075.0" width="146.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="937.1" y="1086.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 1.61%)</title><rect x="934.1" y="1059.0" width="19.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.1" y="1070.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="943.6" y="1043.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.6" y="1054.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="943.6" y="1027.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="946.6" y="1038.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.40%)</title><rect x="943.6" y="1011.0" width="4.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="946.6" y="1022.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.40%)</title><rect x="948.3" y="1043.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.20%)</title><rect x="953.1" y="1059.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.40%)</title><rect x="962.5" y="1043.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="965.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 6.02%)</title><rect x="967.3" y="1059.0" width="71.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.3" y="1070.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 4.82%)</title><rect x="981.5" y="1043.0" width="56.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.5" y="1054.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.40%)</title><rect x="981.5" y="1027.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 4.42%)</title><rect x="986.2" y="1027.0" width="52.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.2" y="1038.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.80%)</title><rect x="986.2" y="1011.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.80%)</title><rect x="986.2" y="995.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (9 samples, 3.61%)</title><rect x="995.7" y="1011.0" width="42.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="998.7" y="1022.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.80%)</title><rect x="1038.4" y="1059.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 2.01%)</title><rect x="1047.8" y="1059.0" width="23.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.8" y="1070.0">P..</text>
</g>
<g>
<title>AddINode::Opcode() const (1 samples, 0.40%)</title><rect x="1047.8" y="1043.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.80%)</title><rect x="1052.6" y="1043.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.40%)</title><rect x="1062.0" y="1043.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.40%)</title><rect x="1062.0" y="1027.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.40%)</title><rect x="1062.0" y="1011.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.0" y="1022.0"></text>
</g>
<g>
<title>StorePNode::Opcode() const (1 samples, 0.40%)</title><rect x="1066.8" y="1043.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1071.5" y="1059.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1071.5" y="1043.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.5" y="1054.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1071.5" y="1027.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.5" y="1038.0"></text>
</g>
<g>
<title>IfNode::is_range_check(Node*&amp;, Node*&amp;, int&amp;) [clone .part.132] (1 samples, 0.40%)</title><rect x="1071.5" y="1011.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.5" y="1022.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.40%)</title><rect x="1071.5" y="995.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.5" y="1006.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.40%)</title><rect x="1076.3" y="1059.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.21%)</title><rect x="1081.0" y="1075.0" width="37.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.0" y="1086.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 3.21%)</title><rect x="1081.0" y="1059.0" width="37.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.0" y="1070.0">Pha..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.80%)</title><rect x="1081.0" y="1043.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.0" y="1054.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.80%)</title><rect x="1081.0" y="1027.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.0" y="1038.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.40%)</title><rect x="1085.7" y="1011.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.7" y="1022.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.40%)</title><rect x="1085.7" y="995.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.7" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1085.7" y="979.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.7" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1085.7" y="963.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.7" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.80%)</title><rect x="1090.5" y="1043.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.5" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.80%)</title><rect x="1100.0" y="1043.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="1054.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.40%)</title><rect x="1100.0" y="1027.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.0" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1104.7" y="1027.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.7" y="1038.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1109.4" y="1043.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.4" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.40%)</title><rect x="1109.4" y="1027.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.4" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1109.4" y="1011.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.4" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1109.4" y="995.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.4" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1109.4" y="979.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.4" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1109.4" y="963.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.4" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1109.4" y="947.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.4" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1109.4" y="931.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.4" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1109.4" y="915.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.4" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1109.4" y="899.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.4" y="910.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1114.2" y="1043.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.2" y="1054.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1114.2" y="1027.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.2" y="1038.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.40%)</title><rect x="1114.2" y="1011.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.2" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.40%)</title><rect x="1118.9" y="1075.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1118.9" y="1059.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1118.9" y="1043.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.9" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="1123.7" y="1075.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1126.7" y="1086.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.40%)</title><rect x="1128.4" y="1091.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.4" y="1102.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.40%)</title><rect x="1128.4" y="1075.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1128.4" y="1059.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.4" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1128.4" y="1043.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1128.4" y="1027.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1128.4" y="1011.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.4" y="995.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1128.4" y="979.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1128.4" y="963.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1128.4" y="947.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1128.4" y="931.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1128.4" y="915.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.4" y="899.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1128.4" y="883.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.4" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1128.4" y="867.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.4" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1128.4" y="851.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.21%)</title><rect x="1133.1" y="1091.0" width="37.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.21%)</title><rect x="1133.1" y="1075.0" width="37.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="1086.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.21%)</title><rect x="1133.1" y="1059.0" width="37.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.1" y="1070.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.21%)</title><rect x="1133.1" y="1043.0" width="37.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="1054.0">Par..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.40%)</title><rect x="1133.1" y="1027.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="1038.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.40%)</title><rect x="1133.1" y="1011.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1133.1" y="995.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.1" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1133.1" y="979.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="990.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.40%)</title><rect x="1133.1" y="963.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.81%)</title><rect x="1137.9" y="1027.0" width="33.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.9" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.81%)</title><rect x="1137.9" y="1011.0" width="33.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.9" y="1022.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.81%)</title><rect x="1137.9" y="995.0" width="33.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.9" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.81%)</title><rect x="1137.9" y="979.0" width="33.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.81%)</title><rect x="1137.9" y="963.0" width="33.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="974.0">Pa..</text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.40%)</title><rect x="1137.9" y="947.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.9" y="958.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.40%)</title><rect x="1137.9" y="931.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.41%)</title><rect x="1142.6" y="947.0" width="28.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.6" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.40%)</title><rect x="1142.6" y="931.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="942.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.40%)</title><rect x="1142.6" y="915.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.6" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="899.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.6" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="1142.6" y="883.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.6" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="1142.6" y="867.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1145.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.01%)</title><rect x="1147.3" y="931.0" width="23.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.3" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.01%)</title><rect x="1147.3" y="915.0" width="23.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.3" y="926.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.01%)</title><rect x="1147.3" y="899.0" width="23.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.3" y="910.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.01%)</title><rect x="1147.3" y="883.0" width="23.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.3" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.61%)</title><rect x="1147.3" y="867.0" width="19.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.61%)</title><rect x="1147.3" y="851.0" width="19.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.61%)</title><rect x="1147.3" y="835.0" width="19.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.61%)</title><rect x="1147.3" y="819.0" width="19.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.61%)</title><rect x="1147.3" y="803.0" width="19.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.61%)</title><rect x="1147.3" y="787.0" width="19.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.61%)</title><rect x="1147.3" y="771.0" width="19.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.61%)</title><rect x="1147.3" y="755.0" width="19.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.61%)</title><rect x="1147.3" y="739.0" width="19.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.61%)</title><rect x="1147.3" y="723.0" width="19.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.61%)</title><rect x="1147.3" y="707.0" width="19.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.61%)</title><rect x="1147.3" y="691.0" width="19.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.61%)</title><rect x="1147.3" y="675.0" width="19.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.61%)</title><rect x="1147.3" y="659.0" width="19.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.61%)</title><rect x="1147.3" y="643.0" width="19.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.61%)</title><rect x="1147.3" y="627.0" width="19.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1147.3" y="611.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1147.3" y="595.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1147.3" y="579.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1147.3" y="563.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1147.3" y="547.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1147.3" y="531.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1147.3" y="515.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1147.3" y="499.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1147.3" y="483.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1147.3" y="467.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1147.3" y="451.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1147.3" y="435.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1147.3" y="419.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1147.3" y="403.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1152.1" y="387.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1152.1" y="371.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1152.1" y="355.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1152.1" y="339.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1152.1" y="323.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1152.1" y="307.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.1" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1152.1" y="291.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1152.1" y="275.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1152.1" y="259.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1152.1" y="243.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1152.1" y="227.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1152.1" y="211.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.40%)</title><rect x="1152.1" y="195.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1152.1" y="179.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1152.1" y="163.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1152.1" y="147.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1152.1" y="131.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.1" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.40%)</title><rect x="1152.1" y="115.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.40%)</title><rect x="1152.1" y="99.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.1" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.40%)</title><rect x="1152.1" y="83.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="94.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.40%)</title><rect x="1152.1" y="67.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="78.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.40%)</title><rect x="1152.1" y="51.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.1" y="62.0"></text>
</g>
<g>
<title>UTF8::strrchr(signed char const*, int, signed char) (1 samples, 0.40%)</title><rect x="1152.1" y="35.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1156.8" y="611.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1156.8" y="595.0" width="9.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1156.8" y="579.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1156.8" y="563.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1156.8" y="547.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1156.8" y="531.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1156.8" y="515.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.8" y="499.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.8" y="483.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1156.8" y="467.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1156.8" y="451.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1156.8" y="435.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1156.8" y="419.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.40%)</title><rect x="1156.8" y="403.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="414.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.40%)</title><rect x="1156.8" y="387.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_exception_state(Node*) (1 samples, 0.40%)</title><rect x="1156.8" y="371.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.8" y="382.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.40%)</title><rect x="1156.8" y="355.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="366.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.40%)</title><rect x="1156.8" y="339.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="350.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.40%)</title><rect x="1156.8" y="323.0" width="4.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1159.8" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1161.6" y="499.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.6" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.6" y="483.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.6" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.6" y="467.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.6" y="451.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="462.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.40%)</title><rect x="1166.3" y="867.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.3" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1166.3" y="851.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.3" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1166.3" y="835.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="846.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.40%)</title><rect x="1166.3" y="819.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.3" y="830.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.40%)</title><rect x="1166.3" y="803.0" width="4.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1169.3" y="814.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.40%)</title><rect x="1171.0" y="1091.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="1102.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1171.0" y="1075.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.80%)</title><rect x="1175.8" y="1123.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.80%)</title><rect x="1175.8" y="1107.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.80%)</title><rect x="1175.8" y="1091.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.40%)</title><rect x="1175.8" y="1075.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.8" y="1086.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.40%)</title><rect x="1175.8" y="1059.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.40%)</title><rect x="1175.8" y="1043.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.40%)</title><rect x="1175.8" y="1027.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.40%)</title><rect x="1175.8" y="1011.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="1175.8" y="995.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.40%)</title><rect x="1175.8" y="979.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="990.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.40%)</title><rect x="1180.5" y="1075.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.40%)</title><rect x="1180.5" y="1059.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.40%)</title><rect x="1180.5" y="1043.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.40%)</title><rect x="1180.5" y="1027.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.40%)</title><rect x="1180.5" y="1011.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.40%)</title><rect x="1185.3" y="1123.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.3" y="1134.0"></text>
</g>
</g>
</svg>
