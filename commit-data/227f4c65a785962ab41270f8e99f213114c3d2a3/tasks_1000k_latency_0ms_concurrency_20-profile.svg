<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,373 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (260 samples, 18.94%)</title><rect x="10.9" y="2035.0" width="223.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.9" y="2046.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.15%)</title><rect x="11.7" y="2019.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.7" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="11.7" y="2003.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (1 samples, 0.07%)</title><rect x="11.7" y="1987.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.7" y="1998.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.07%)</title><rect x="11.7" y="1971.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$286/929867295.accept (1 samples, 0.07%)</title><rect x="11.7" y="1955.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$commitOffsets$59 (1 samples, 0.07%)</title><rect x="11.7" y="1939.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.07%)</title><rect x="11.7" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.07%)</title><rect x="11.7" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.7" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="12.6" y="2003.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.6" y="2014.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="12.6" y="1987.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="15.6" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (257 samples, 18.72%)</title><rect x="13.4" y="2019.0" width="220.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="2030.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.15%)</title><rect x="13.4" y="2003.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.4" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.15%)</title><rect x="13.4" y="1987.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.4" y="1998.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="13.4" y="1971.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="16.4" y="1982.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="13.4" y="1955.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="16.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1803073465.accept (1 samples, 0.07%)</title><rect x="14.3" y="1971.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.3" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.07%)</title><rect x="14.3" y="1955.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.3" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.07%)</title><rect x="14.3" y="1939.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.07%)</title><rect x="14.3" y="1923.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.36%)</title><rect x="15.2" y="2003.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.29%)</title><rect x="16.0" y="1987.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.0" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="16.0" y="1971.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.0" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="16.0" y="1955.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="16.0" y="1939.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="16.9" y="1971.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.9" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="16.9" y="1955.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.22%)</title><rect x="16.9" y="1939.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="16.9" y="1923.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="16.9" y="1907.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="16.9" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="16.9" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="16.9" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="16.9" y="1843.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="19.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="17.7" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="18.6" y="1891.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="18.6" y="1875.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="18.6" y="1859.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="18.6" y="1843.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/888015960.get (1 samples, 0.07%)</title><rect x="18.6" y="1827.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (4 samples, 0.29%)</title><rect x="19.5" y="2003.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (4 samples, 0.29%)</title><rect x="19.5" y="1987.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="20.3" y="1971.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="20.3" y="1955.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.22%)</title><rect x="20.3" y="1939.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="20.3" y="1923.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="20.3" y="1907.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.15%)</title><rect x="20.3" y="1891.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.15%)</title><rect x="20.3" y="1875.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.15%)</title><rect x="20.3" y="1859.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/1046762455.test (1 samples, 0.07%)</title><rect x="21.2" y="1843.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="22.0" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.0" y="1902.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="22.0" y="1875.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="25.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 14.28%)</title><rect x="22.9" y="2003.0" width="168.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.9" y="2014.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1760100634.accept (188 samples, 13.69%)</title><rect x="23.8" y="1987.0" width="161.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.8" y="1998.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (187 samples, 13.62%)</title><rect x="24.6" y="1971.0" width="160.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.6" y="1982.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="24.6" y="1955.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (154 samples, 11.22%)</title><rect x="25.5" y="1955.0" width="132.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.5" y="1966.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (154 samples, 11.22%)</title><rect x="25.5" y="1939.0" width="132.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.5" y="1950.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (154 samples, 11.22%)</title><rect x="25.5" y="1923.0" width="132.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.5" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 11.22%)</title><rect x="25.5" y="1907.0" width="132.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.5" y="1918.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 11.22%)</title><rect x="25.5" y="1891.0" width="132.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.5" y="1902.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 11.22%)</title><rect x="25.5" y="1875.0" width="132.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="1886.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (106 samples, 7.72%)</title><rect x="25.5" y="1859.0" width="91.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.5" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.17%)</title><rect x="25.5" y="1843.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.17%)</title><rect x="25.5" y="1827.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.80%)</title><rect x="29.8" y="1811.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (10 samples, 0.73%)</title><rect x="30.6" y="1795.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.29%)</title><rect x="39.2" y="1843.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.29%)</title><rect x="39.2" y="1827.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.15%)</title><rect x="40.1" y="1811.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.1" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.15%)</title><rect x="40.1" y="1795.0" width="1.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="43.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="41.8" y="1811.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (86 samples, 6.26%)</title><rect x="42.7" y="1843.0" width="73.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.7" y="1854.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (86 samples, 6.26%)</title><rect x="42.7" y="1827.0" width="73.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.7" y="1838.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 5.97%)</title><rect x="43.5" y="1811.0" width="70.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.5" y="1822.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 5.97%)</title><rect x="43.5" y="1795.0" width="70.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.5" y="1806.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (82 samples, 5.97%)</title><rect x="43.5" y="1779.0" width="70.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.5" y="1790.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (76 samples, 5.54%)</title><rect x="43.5" y="1763.0" width="65.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="46.5" y="1774.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.36%)</title><rect x="45.2" y="1747.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="48.2" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.29%)</title><rect x="49.5" y="1747.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="52.5" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 3.50%)</title><rect x="53.0" y="1747.0" width="41.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="56.0" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.22%)</title><rect x="94.2" y="1747.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="97.2" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.02%)</title><rect x="96.8" y="1747.0" width="12.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="99.8" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.22%)</title><rect x="108.8" y="1763.0" width="2.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="111.8" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.22%)</title><rect x="111.4" y="1763.0" width="2.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="114.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.22%)</title><rect x="114.0" y="1811.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.36%)</title><rect x="116.6" y="1859.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.36%)</title><rect x="116.6" y="1843.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.36%)</title><rect x="116.6" y="1827.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 3.13%)</title><rect x="120.9" y="1859.0" width="36.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.9" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 3.13%)</title><rect x="120.9" y="1843.0" width="36.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.9" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="120.9" y="1827.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="120.9" y="1811.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (42 samples, 3.06%)</title><rect x="121.7" y="1827.0" width="36.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.7" y="1838.0">jav..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.22%)</title><rect x="152.7" y="1811.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.7" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.22%)</title><rect x="155.2" y="1811.0" width="2.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="158.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.15%)</title><rect x="157.8" y="1955.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.15%)</title><rect x="157.8" y="1939.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="160.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.36%)</title><rect x="159.5" y="1955.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.5" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.36%)</title><rect x="159.5" y="1939.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="162.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.36%)</title><rect x="159.5" y="1923.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="162.5" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (25 samples, 1.82%)</title><rect x="163.8" y="1955.0" width="21.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.8" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.15%)</title><rect x="163.8" y="1939.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="166.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (23 samples, 1.68%)</title><rect x="165.6" y="1939.0" width="19.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 0.95%)</title><rect x="172.4" y="1923.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.73%)</title><rect x="172.4" y="1907.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="175.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.73%)</title><rect x="172.4" y="1891.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.4" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.73%)</title><rect x="172.4" y="1875.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.4" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="177.6" y="1859.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="180.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.22%)</title><rect x="181.0" y="1907.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.0" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="183.6" y="1923.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="186.6" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="185.3" y="1987.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="188.3" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="186.2" y="1987.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.2" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="186.2" y="1971.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.2" y="1982.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="187.0" y="1987.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.0" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.07%)</title><rect x="187.0" y="1971.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.0" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="187.0" y="1955.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.0" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="187.0" y="1939.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="187.0" y="1923.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.22%)</title><rect x="187.9" y="1987.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.22%)</title><rect x="187.9" y="1971.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="187.9" y="1955.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="187.9" y="1939.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.9" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.15%)</title><rect x="188.8" y="1923.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="190.5" y="1987.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.64%)</title><rect x="191.3" y="2003.0" width="43.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.3" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.64%)</title><rect x="191.3" y="1987.0" width="43.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.3" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.18%)</title><rect x="192.2" y="1971.0" width="25.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.2" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="193.1" y="1955.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="193.1" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.1" y="1950.0"></text>
</g>
<g>
<title>monitorenter_nofpu Runtime1 stub (1 samples, 0.07%)</title><rect x="193.1" y="1923.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="196.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (28 samples, 2.04%)</title><rect x="193.9" y="1955.0" width="24.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.9" y="1966.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="193.9" y="1939.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="193.9" y="1923.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="193.9" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 1.97%)</title><rect x="194.8" y="1939.0" width="23.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.8" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 1.60%)</title><rect x="194.8" y="1923.0" width="18.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 1.60%)</title><rect x="194.8" y="1907.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 0.80%)</title><rect x="195.6" y="1891.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.44%)</title><rect x="199.1" y="1875.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.44%)</title><rect x="199.1" y="1859.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.44%)</title><rect x="199.1" y="1843.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.44%)</title><rect x="199.1" y="1827.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.44%)</title><rect x="199.1" y="1811.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.44%)</title><rect x="199.1" y="1795.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.44%)</title><rect x="199.1" y="1779.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.nextOffset (1 samples, 0.07%)</title><rect x="204.2" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.66%)</title><rect x="205.1" y="1891.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.66%)</title><rect x="205.1" y="1875.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.22%)</title><rect x="205.1" y="1859.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.1" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.22%)</title><rect x="205.1" y="1843.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.1" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="206.0" y="1827.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="209.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.44%)</title><rect x="207.7" y="1859.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="210.7" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.36%)</title><rect x="207.7" y="1843.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="210.7" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="211.1" y="1827.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="214.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.asList (1 samples, 0.07%)</title><rect x="212.0" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.0" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="212.0" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="215.0" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="212.0" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="215.0" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="212.0" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="215.0" y="1806.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.07%)</title><rect x="212.0" y="1779.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="215.0" y="1790.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.07%)</title><rect x="212.0" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="215.0" y="1774.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="212.0" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="215.0" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="212.8" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.22%)</title><rect x="213.7" y="1923.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.22%)</title><rect x="213.7" y="1907.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="213.7" y="1891.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="213.7" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="214.5" y="1891.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="214.5" y="1875.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="217.5" y="1886.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="214.5" y="1859.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="217.5" y="1870.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="215.4" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="218.4" y="1870.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="215.4" y="1843.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="218.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="216.3" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="216.3" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.07%)</title><rect x="216.3" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.3" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="216.3" y="1875.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="216.3" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="217.1" y="1923.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.51%)</title><rect x="218.0" y="1971.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.44%)</title><rect x="218.0" y="1955.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.29%)</title><rect x="218.0" y="1939.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="218.0" y="1923.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.0" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="218.0" y="1907.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="218.0" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="218.0" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="218.0" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.0" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="218.0" y="1843.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="221.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="218.8" y="1923.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="218.8" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.8" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="218.8" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="218.8" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="218.8" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="218.8" y="1843.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.8" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="218.8" y="1827.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.15%)</title><rect x="219.7" y="1923.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="219.7" y="1907.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="220.6" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="220.6" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="220.6" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="220.6" y="1843.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="220.6" y="1827.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="220.6" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.6" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="220.6" y="1795.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="220.6" y="1779.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.15%)</title><rect x="221.4" y="1939.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="222.3" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="222.3" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="222.3" y="1891.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="222.3" y="1875.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="222.3" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="222.3" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="222.3" y="1827.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="222.3" y="1811.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.07%)</title><rect x="222.3" y="1795.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="223.1" y="1955.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.44%)</title><rect x="224.0" y="1971.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.29%)</title><rect x="224.0" y="1955.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="224.0" y="1939.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="224.0" y="1923.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="224.0" y="1907.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="224.0" y="1891.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.07%)</title><rect x="224.0" y="1875.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="224.0" y="1859.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="224.0" y="1843.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.07%)</title><rect x="224.0" y="1827.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="224.0" y="1811.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="224.0" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.07%)</title><rect x="224.0" y="1779.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.22%)</title><rect x="224.9" y="1939.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.07%)</title><rect x="224.9" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.entrySet (1 samples, 0.07%)</title><rect x="224.9" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="225.7" y="1923.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.07%)</title><rect x="225.7" y="1907.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="225.7" y="1891.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="225.7" y="1875.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="226.6" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.6" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="226.6" y="1907.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.6" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="226.6" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.6" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="226.6" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.6" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="226.6" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.6" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="226.6" y="1843.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.6" y="1854.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.07%)</title><rect x="226.6" y="1827.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="229.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.15%)</title><rect x="227.4" y="1955.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.15%)</title><rect x="227.4" y="1939.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.15%)</title><rect x="227.4" y="1923.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.15%)</title><rect x="227.4" y="1907.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.15%)</title><rect x="227.4" y="1891.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.15%)</title><rect x="227.4" y="1875.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (2 samples, 0.15%)</title><rect x="227.4" y="1859.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (2 samples, 0.15%)</title><rect x="227.4" y="1843.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (2 samples, 0.15%)</title><rect x="227.4" y="1827.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.validate (1 samples, 0.07%)</title><rect x="227.4" y="1811.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.validate (1 samples, 0.07%)</title><rect x="227.4" y="1795.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="227.4" y="1779.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="227.4" y="1763.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.write (1 samples, 0.07%)</title><rect x="228.3" y="1811.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.3" y="1822.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (1 samples, 0.07%)</title><rect x="228.3" y="1795.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.36%)</title><rect x="229.2" y="1971.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.29%)</title><rect x="229.2" y="1955.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.2" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="229.2" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/671998996.accept (1 samples, 0.07%)</title><rect x="229.2" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="229.2" y="1907.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="229.2" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.07%)</title><rect x="229.2" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="229.2" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="229.2" y="1843.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.22%)</title><rect x="230.0" y="1939.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.15%)</title><rect x="230.0" y="1923.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="230.9" y="1907.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="230.9" y="1891.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.07%)</title><rect x="230.9" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="231.7" y="1923.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.isDebugEnabled (1 samples, 0.07%)</title><rect x="232.6" y="1955.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.rackId (1 samples, 0.07%)</title><rect x="232.6" y="1939.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="233.5" y="1971.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="233.5" y="1955.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.5" y="1966.0"></text>
</g>
<g>
<title>java/lang/Thread.run (687 samples, 50.04%)</title><rect x="234.3" y="2035.0" width="590.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (687 samples, 50.04%)</title><rect x="234.3" y="2019.0" width="590.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (687 samples, 50.04%)</title><rect x="234.3" y="2003.0" width="590.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1377692592.run (471 samples, 34.30%)</title><rect x="236.9" y="1987.0" width="404.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.9" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (471 samples, 34.30%)</title><rect x="236.9" y="1971.0" width="404.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.9" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (471 samples, 34.30%)</title><rect x="236.9" y="1955.0" width="404.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.9" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (466 samples, 33.94%)</title><rect x="236.9" y="1939.0" width="400.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.9" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline...</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.44%)</title><rect x="248.9" y="1923.0" width="5.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="251.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="249.8" y="1907.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="252.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (152 samples, 11.07%)</title><rect x="254.1" y="1923.0" width="130.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.1" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (151 samples, 11.00%)</title><rect x="254.9" y="1907.0" width="129.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.9" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (151 samples, 11.00%)</title><rect x="254.9" y="1891.0" width="129.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.9" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="254.9" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="257.9" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="254.9" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="257.9" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="254.9" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="257.9" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="254.9" y="1827.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="257.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (150 samples, 10.92%)</title><rect x="255.8" y="1875.0" width="128.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.8" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (150 samples, 10.92%)</title><rect x="255.8" y="1859.0" width="128.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (150 samples, 10.92%)</title><rect x="255.8" y="1843.0" width="128.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.8" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 3.20%)</title><rect x="255.8" y="1827.0" width="37.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.8" y="1838.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.58%)</title><rect x="255.8" y="1811.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.58%)</title><rect x="255.8" y="1795.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.58%)</title><rect x="255.8" y="1779.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.58%)</title><rect x="255.8" y="1763.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (36 samples, 2.62%)</title><rect x="262.7" y="1811.0" width="30.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.7" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (36 samples, 2.62%)</title><rect x="262.7" y="1795.0" width="30.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.7" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.73%)</title><rect x="262.7" y="1779.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (10 samples, 0.73%)</title><rect x="262.7" y="1763.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.07%)</title><rect x="269.5" y="1747.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.5" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="270.4" y="1747.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (19 samples, 1.38%)</title><rect x="271.3" y="1779.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (19 samples, 1.38%)</title><rect x="271.3" y="1763.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (4 samples, 0.29%)</title><rect x="278.1" y="1747.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.29%)</title><rect x="281.6" y="1747.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.6" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="284.2" y="1731.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="287.2" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="284.2" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="287.2" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="284.2" y="1699.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="287.2" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="284.2" y="1683.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="287.2" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="284.2" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="287.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="285.0" y="1747.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.0" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="285.0" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="288.0" y="1742.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.15%)</title><rect x="285.9" y="1747.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.51%)</title><rect x="287.6" y="1779.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (5 samples, 0.36%)</title><rect x="287.6" y="1763.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="291.9" y="1763.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="292.8" y="1747.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (97 samples, 7.06%)</title><rect x="293.6" y="1827.0" width="83.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.6" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.15%)</title><rect x="293.6" y="1811.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.15%)</title><rect x="293.6" y="1795.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.15%)</title><rect x="293.6" y="1779.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.15%)</title><rect x="293.6" y="1763.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="294.5" y="1747.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.36%)</title><rect x="295.3" y="1811.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.36%)</title><rect x="295.3" y="1795.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.66%)</title><rect x="299.6" y="1811.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.58%)</title><rect x="300.5" y="1795.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.51%)</title><rect x="301.3" y="1779.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.29%)</title><rect x="303.9" y="1763.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.9" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="305.6" y="1747.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.6" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="305.6" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="308.6" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="305.6" y="1715.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.6" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="305.6" y="1699.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="308.6" y="1710.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="305.6" y="1683.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="308.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="306.5" y="1747.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="309.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.66%)</title><rect x="307.4" y="1811.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.66%)</title><rect x="307.4" y="1795.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (9 samples, 0.66%)</title><rect x="307.4" y="1779.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (9 samples, 0.66%)</title><rect x="307.4" y="1763.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.29%)</title><rect x="309.1" y="1747.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.22%)</title><rect x="312.5" y="1747.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (72 samples, 5.24%)</title><rect x="315.1" y="1811.0" width="61.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.1" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.02%)</title><rect x="315.1" y="1795.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.07%)</title><rect x="316.8" y="1779.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.07%)</title><rect x="316.8" y="1763.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.07%)</title><rect x="316.8" y="1747.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.80%)</title><rect x="317.7" y="1779.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (58 samples, 4.22%)</title><rect x="327.1" y="1795.0" width="49.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.1" y="1806.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (58 samples, 4.22%)</title><rect x="327.1" y="1779.0" width="49.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.1" y="1790.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (57 samples, 4.15%)</title><rect x="328.0" y="1763.0" width="49.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.0" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.38%)</title><rect x="333.1" y="1747.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="334.0" y="1731.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (12 samples, 0.87%)</title><rect x="334.9" y="1731.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (12 samples, 0.87%)</title><rect x="334.9" y="1715.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (12 samples, 0.87%)</title><rect x="334.9" y="1699.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (10 samples, 0.73%)</title><rect x="336.6" y="1683.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.58%)</title><rect x="338.3" y="1667.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="341.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.29%)</title><rect x="341.7" y="1651.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (4 samples, 0.29%)</title><rect x="341.7" y="1635.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.7" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.29%)</title><rect x="345.2" y="1731.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="348.6" y="1731.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="348.6" y="1715.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (16 samples, 1.17%)</title><rect x="349.5" y="1747.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="352.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (15 samples, 1.09%)</title><rect x="350.3" y="1731.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (15 samples, 1.09%)</title><rect x="350.3" y="1715.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (15 samples, 1.09%)</title><rect x="350.3" y="1699.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (15 samples, 1.09%)</title><rect x="350.3" y="1683.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="363.2" y="1747.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (12 samples, 0.87%)</title><rect x="364.1" y="1747.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (12 samples, 0.87%)</title><rect x="364.1" y="1731.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (12 samples, 0.87%)</title><rect x="364.1" y="1715.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (12 samples, 0.87%)</title><rect x="364.1" y="1699.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 0.87%)</title><rect x="364.1" y="1683.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.1" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.51%)</title><rect x="366.7" y="1667.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.7" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor11.newInstance (2 samples, 0.15%)</title><rect x="372.7" y="1667.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="375.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.22%)</title><rect x="374.4" y="1747.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.4" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.22%)</title><rect x="374.4" y="1731.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.4" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.22%)</title><rect x="374.4" y="1715.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="376.1" y="1699.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.66%)</title><rect x="377.0" y="1827.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="380.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.66%)</title><rect x="377.0" y="1811.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="380.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.66%)</title><rect x="377.0" y="1795.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.66%)</title><rect x="377.0" y="1779.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="380.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.66%)</title><rect x="377.0" y="1763.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="380.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.15%)</title><rect x="383.0" y="1747.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="386.0" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (266 samples, 19.37%)</title><rect x="384.7" y="1923.0" width="228.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.7" y="1934.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (41 samples, 2.99%)</title><rect x="386.4" y="1907.0" width="35.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="389.4" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 2.99%)</title><rect x="386.4" y="1891.0" width="35.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="389.4" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 2.91%)</title><rect x="387.3" y="1875.0" width="34.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.3" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.58%)</title><rect x="388.2" y="1859.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.58%)</title><rect x="388.2" y="1843.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.58%)</title><rect x="388.2" y="1827.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.58%)</title><rect x="388.2" y="1811.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.29%)</title><rect x="391.6" y="1795.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.15%)</title><rect x="393.3" y="1779.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (31 samples, 2.26%)</title><rect x="395.0" y="1859.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.0" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (27 samples, 1.97%)</title><rect x="398.5" y="1843.0" width="23.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.5" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.51%)</title><rect x="415.7" y="1827.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="418.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.29%)</title><rect x="421.7" y="1907.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="422.5" y="1891.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.22%)</title><rect x="422.5" y="1875.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (145 samples, 10.56%)</title><rect x="425.1" y="1907.0" width="124.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.1" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (145 samples, 10.56%)</title><rect x="425.1" y="1891.0" width="124.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="428.1" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="425.1" y="1875.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="428.1" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.44%)</title><rect x="426.0" y="1875.0" width="5.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="429.0" y="1886.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.44%)</title><rect x="426.0" y="1859.0" width="5.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="429.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (43 samples, 3.13%)</title><rect x="431.1" y="1875.0" width="37.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="434.1" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.18%)</title><rect x="438.0" y="1859.0" width="25.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.0" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (29 samples, 2.11%)</title><rect x="438.9" y="1843.0" width="24.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="441.9" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 1.17%)</title><rect x="442.3" y="1827.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (16 samples, 1.17%)</title><rect x="442.3" y="1811.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 1.17%)</title><rect x="442.3" y="1795.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.3" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.58%)</title><rect x="444.9" y="1779.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="447.9" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.15%)</title><rect x="444.9" y="1763.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="447.9" y="1774.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.07%)</title><rect x="444.9" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="447.9" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="445.7" y="1747.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.7" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="445.7" y="1731.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="448.7" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="445.7" y="1715.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="448.7" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.44%)</title><rect x="446.6" y="1763.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="449.6" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.22%)</title><rect x="447.5" y="1747.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="450.5" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="447.5" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="450.5" y="1742.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="448.3" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="451.3" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="449.2" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="452.2" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="450.0" y="1747.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.0" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="450.9" y="1747.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="453.9" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.36%)</title><rect x="451.7" y="1779.0" width="4.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="454.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.44%)</title><rect x="456.0" y="1827.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="459.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.15%)</title><rect x="461.2" y="1827.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.2" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="462.9" y="1827.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="465.9" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="463.8" y="1859.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="466.8" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="464.6" y="1859.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="467.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.44%)</title><rect x="468.1" y="1875.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="468.1" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.1" y="1870.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="468.1" y="1843.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="471.1" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="468.1" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="471.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.36%)</title><rect x="468.9" y="1859.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.36%)</title><rect x="468.9" y="1843.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.9" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (89 samples, 6.48%)</title><rect x="473.2" y="1875.0" width="76.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.2" y="1886.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.75%)</title><rect x="481.0" y="1859.0" width="67.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.0" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.17%)</title><rect x="481.0" y="1843.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="484.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (16 samples, 1.17%)</title><rect x="481.0" y="1827.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (16 samples, 1.17%)</title><rect x="481.0" y="1811.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (16 samples, 1.17%)</title><rect x="481.0" y="1795.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="493.9" y="1779.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.9" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="493.9" y="1763.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.9" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (63 samples, 4.59%)</title><rect x="494.7" y="1843.0" width="54.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="497.7" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 4.37%)</title><rect x="497.3" y="1827.0" width="51.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.3" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (29 samples, 2.11%)</title><rect x="523.9" y="1811.0" width="25.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="526.9" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.15%)</title><rect x="538.6" y="1795.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="541.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.58%)</title><rect x="540.3" y="1795.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="543.3" y="1806.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="547.1" y="1795.0" width="1.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="550.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.07%)</title><rect x="548.9" y="1859.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="551.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (55 samples, 4.01%)</title><rect x="549.7" y="1907.0" width="47.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="552.7" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (55 samples, 4.01%)</title><rect x="549.7" y="1891.0" width="47.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="552.7" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/703875274.process (20 samples, 1.46%)</title><rect x="552.3" y="1875.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="555.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.46%)</title><rect x="552.3" y="1859.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.46%)</title><rect x="552.3" y="1843.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.3" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="553.2" y="1827.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="556.2" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="553.2" y="1811.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.2" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.15%)</title><rect x="553.2" y="1795.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.2" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.15%)</title><rect x="553.2" y="1779.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="556.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.15%)</title><rect x="553.2" y="1763.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="556.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="554.0" y="1747.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.0" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.51%)</title><rect x="554.9" y="1827.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="557.9" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.51%)</title><rect x="554.9" y="1811.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="557.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="554.9" y="1795.0" width="6.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="557.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.73%)</title><rect x="560.9" y="1827.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="563.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.29%)</title><rect x="569.5" y="1875.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="572.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.15%)</title><rect x="571.2" y="1859.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="574.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.07%)</title><rect x="572.9" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="575.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.07%)</title><rect x="572.9" y="1859.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="575.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1270459393.get$Lambda (1 samples, 0.07%)</title><rect x="572.9" y="1843.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="575.9" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="572.9" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="575.9" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="572.9" y="1811.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.9" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="572.9" y="1795.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="575.9" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="572.9" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="575.9" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (15 samples, 1.09%)</title><rect x="573.8" y="1875.0" width="12.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="576.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.66%)</title><rect x="578.9" y="1859.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.9" y="1870.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.22%)</title><rect x="578.9" y="1843.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="581.9" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (6 samples, 0.44%)</title><rect x="581.5" y="1843.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="584.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (9 samples, 0.66%)</title><rect x="586.7" y="1875.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="589.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (9 samples, 0.66%)</title><rect x="586.7" y="1859.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="589.7" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.22%)</title><rect x="594.4" y="1875.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="597.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="596.1" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="599.1" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="596.1" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="599.1" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="596.1" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="599.1" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="596.1" y="1811.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.1" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="596.1" y="1795.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="599.1" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="596.1" y="1779.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.1" y="1790.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="596.1" y="1763.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="599.1" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="596.1" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="599.1" y="1758.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.07%)</title><rect x="596.1" y="1731.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="599.1" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.38%)</title><rect x="597.0" y="1907.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="600.0" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.44%)</title><rect x="599.6" y="1891.0" width="5.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="602.6" y="1902.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.44%)</title><rect x="599.6" y="1875.0" width="5.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="602.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.73%)</title><rect x="604.7" y="1891.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="607.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.58%)</title><rect x="606.4" y="1875.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1130210808.accept (7 samples, 0.51%)</title><rect x="606.4" y="1859.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="609.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (7 samples, 0.51%)</title><rect x="606.4" y="1843.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.4" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (7 samples, 0.51%)</title><rect x="606.4" y="1827.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.4" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (7 samples, 0.51%)</title><rect x="606.4" y="1811.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.4" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.36%)</title><rect x="608.2" y="1795.0" width="4.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="611.2" y="1806.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="609.0" y="1779.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="612.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1968042972.accept (1 samples, 0.07%)</title><rect x="612.5" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="612.5" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="615.5" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="612.5" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.60%)</title><rect x="613.3" y="1923.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="614.2" y="1907.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.46%)</title><rect x="615.0" y="1907.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.02%)</title><rect x="618.5" y="1891.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="621.5" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1968042972.accept (14 samples, 1.02%)</title><rect x="618.5" y="1875.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="621.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (14 samples, 1.02%)</title><rect x="618.5" y="1859.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="621.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/741815089.complete (14 samples, 1.02%)</title><rect x="618.5" y="1843.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (14 samples, 1.02%)</title><rect x="618.5" y="1827.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="621.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 1.02%)</title><rect x="618.5" y="1811.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="621.5" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.02%)</title><rect x="618.5" y="1795.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.5" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.02%)</title><rect x="618.5" y="1779.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="621.5" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 1.02%)</title><rect x="618.5" y="1763.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="621.5" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (14 samples, 1.02%)</title><rect x="618.5" y="1747.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.5" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.15%)</title><rect x="630.5" y="1891.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.5" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.44%)</title><rect x="632.2" y="1923.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="635.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.44%)</title><rect x="632.2" y="1907.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="635.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.36%)</title><rect x="637.4" y="1939.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="640.4" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="638.2" y="1923.0" width="2.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="641.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="638.2" y="1907.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="641.2" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="640.8" y="1923.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="643.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.29%)</title><rect x="641.7" y="1987.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.7" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.29%)</title><rect x="641.7" y="1971.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="644.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.29%)</title><rect x="641.7" y="1955.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="644.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.29%)</title><rect x="641.7" y="1939.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="644.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (209 samples, 15.22%)</title><rect x="645.1" y="1987.0" width="179.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="648.1" y="1998.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (209 samples, 15.22%)</title><rect x="645.1" y="1971.0" width="179.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.1" y="1982.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (195 samples, 14.20%)</title><rect x="647.7" y="1955.0" width="167.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.7" y="1966.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.07%)</title><rect x="656.3" y="1939.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.07%)</title><rect x="656.3" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (21 samples, 1.53%)</title><rect x="657.2" y="1939.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.66%)</title><rect x="675.2" y="1939.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.66%)</title><rect x="675.2" y="1923.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.66%)</title><rect x="675.2" y="1907.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="678.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.66%)</title><rect x="675.2" y="1891.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="678.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 11.22%)</title><rect x="682.9" y="1939.0" width="132.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.9" y="1950.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (154 samples, 11.22%)</title><rect x="682.9" y="1923.0" width="132.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="685.9" y="1934.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="684.7" y="1907.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="687.7" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (147 samples, 10.71%)</title><rect x="685.5" y="1907.0" width="126.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="688.5" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="688.1" y="1891.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.1" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="689.8" y="1891.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="692.8" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 1.97%)</title><rect x="690.7" y="1891.0" width="23.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.7" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.66%)</title><rect x="696.7" y="1875.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="699.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.36%)</title><rect x="698.4" y="1859.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="701.4" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.22%)</title><rect x="700.1" y="1843.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.1" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.15%)</title><rect x="702.7" y="1859.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="705.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="704.4" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="707.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (10 samples, 0.73%)</title><rect x="705.3" y="1875.0" width="8.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="708.3" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.15%)</title><rect x="713.9" y="1891.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="716.9" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="715.6" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="718.6" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.51%)</title><rect x="716.5" y="1891.0" width="6.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="719.5" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 1.97%)</title><rect x="722.5" y="1891.0" width="23.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="725.5" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (59 samples, 4.30%)</title><rect x="745.7" y="1891.0" width="50.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="748.7" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.66%)</title><rect x="796.4" y="1891.0" width="7.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="799.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="804.1" y="1891.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="807.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.36%)</title><rect x="805.8" y="1891.0" width="4.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="808.8" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="810.1" y="1891.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="813.1" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="811.0" y="1891.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="814.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.29%)</title><rect x="811.8" y="1907.0" width="3.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="814.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.80%)</title><rect x="815.3" y="1955.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.80%)</title><rect x="815.3" y="1939.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="818.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.80%)</title><rect x="815.3" y="1923.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="818.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.80%)</title><rect x="815.3" y="1907.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.3" y="1918.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.07%)</title><rect x="824.7" y="2035.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="827.7" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="825.6" y="2035.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="828.6" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="825.6" y="2019.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="828.6" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="825.6" y="2003.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="828.6" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="825.6" y="1987.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="828.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="825.6" y="1971.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="828.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="825.6" y="1955.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="828.6" y="1966.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="825.6" y="1939.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="828.6" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="825.6" y="1923.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="828.6" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="825.6" y="1907.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="828.6" y="1918.0"></text>
</g>
<g>
<title>start_thread (423 samples, 30.81%)</title><rect x="826.5" y="2035.0" width="363.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="829.5" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (423 samples, 30.81%)</title><rect x="826.5" y="2019.0" width="363.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="829.5" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.46%)</title><rect x="826.5" y="2003.0" width="17.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="829.5" y="2014.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="826.5" y="1987.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="829.5" y="1998.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="826.5" y="1971.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="829.5" y="1982.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.22%)</title><rect x="827.3" y="1987.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="830.3" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.22%)</title><rect x="827.3" y="1971.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.3" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="827.3" y="1955.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.3" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.15%)</title><rect x="828.2" y="1955.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="831.2" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.09%)</title><rect x="829.9" y="1987.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="832.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.36%)</title><rect x="829.9" y="1971.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.9" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="829.9" y="1955.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="832.9" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.15%)</title><rect x="830.8" y="1955.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.8" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.15%)</title><rect x="832.5" y="1955.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="835.5" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.44%)</title><rect x="834.2" y="1971.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="837.2" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.15%)</title><rect x="834.2" y="1955.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="837.2" y="1966.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.15%)</title><rect x="834.2" y="1939.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="837.2" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.15%)</title><rect x="834.2" y="1923.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="837.2" y="1934.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="834.2" y="1907.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="837.2" y="1918.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.07%)</title><rect x="834.2" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="837.2" y="1902.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.07%)</title><rect x="834.2" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="837.2" y="1886.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="835.1" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="838.1" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.29%)</title><rect x="835.9" y="1955.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="838.9" y="1966.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="835.9" y="1939.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="838.9" y="1950.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.22%)</title><rect x="836.8" y="1939.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.8" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="839.4" y="1971.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="842.4" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.29%)</title><rect x="839.4" y="1955.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="842.4" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.22%)</title><rect x="839.4" y="1939.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="842.4" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.22%)</title><rect x="839.4" y="1923.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="842.4" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.22%)</title><rect x="839.4" y="1907.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="842.4" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.22%)</title><rect x="839.4" y="1891.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="842.4" y="1902.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_obj_dead(oopDesc*, HeapRegion const*) const (1 samples, 0.07%)</title><rect x="840.2" y="1875.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.2" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.07%)</title><rect x="841.1" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="844.1" y="1886.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="841.9" y="1939.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="844.9" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="841.9" y="1923.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="844.9" y="1934.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.07%)</title><rect x="842.8" y="1987.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="845.8" y="1998.0"></text>
</g>
<g>
<title>JavaThread::run() (402 samples, 29.28%)</title><rect x="843.6" y="2003.0" width="345.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="846.6" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (402 samples, 29.28%)</title><rect x="843.6" y="1987.0" width="345.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="846.6" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (402 samples, 29.28%)</title><rect x="843.6" y="1971.0" width="345.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="846.6" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (401 samples, 29.21%)</title><rect x="843.6" y="1955.0" width="344.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="846.6" y="1966.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (401 samples, 29.21%)</title><rect x="843.6" y="1939.0" width="344.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.6" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (401 samples, 29.21%)</title><rect x="843.6" y="1923.0" width="344.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.6" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*..</text>
</g>
<g>
<title>Compile::Code_Gen() (76 samples, 5.54%)</title><rect x="843.6" y="1907.0" width="65.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.6" y="1918.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.07%)</title><rect x="843.6" y="1891.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.6" y="1902.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="843.6" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="846.6" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="843.6" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="846.6" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="843.6" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.6" y="1854.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.51%)</title><rect x="844.5" y="1891.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.5" y="1902.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.07%)</title><rect x="845.4" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="848.4" y="1886.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.07%)</title><rect x="846.2" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.2" y="1886.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="847.1" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="850.1" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="847.1" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="850.1" y="1870.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.07%)</title><rect x="847.1" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="850.1" y="1854.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="847.1" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="850.1" y="1838.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.15%)</title><rect x="847.9" y="1875.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.9" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="847.9" y="1859.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="850.9" y="1870.0"></text>
</g>
<g>
<title>jmpDir_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="849.7" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.7" y="1886.0"></text>
</g>
<g>
<title>Assembler::jmpb(Label&amp;) (1 samples, 0.07%)</title><rect x="849.7" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.7" y="1870.0"></text>
</g>
<g>
<title>Label::add_patch_at(CodeBuffer*, int) (1 samples, 0.07%)</title><rect x="849.7" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.7" y="1854.0"></text>
</g>
<g>
<title>CodeBuffer::create_patch_overflow() (1 samples, 0.07%)</title><rect x="849.7" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="852.7" y="1838.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="850.5" y="1891.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="853.5" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.66%)</title><rect x="851.4" y="1891.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="854.4" y="1902.0"></text>
</g>
<g>
<title>ConNKlassNode::Opcode() const (1 samples, 0.07%)</title><rect x="851.4" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.58%)</title><rect x="852.2" y="1875.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="855.2" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.29%)</title><rect x="853.1" y="1859.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="856.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.22%)</title><rect x="856.5" y="1859.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="859.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="857.4" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="860.4" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="857.4" y="1827.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.4" y="1838.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="858.3" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="861.3" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.29%)</title><rect x="859.1" y="1891.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="862.1" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.29%)</title><rect x="859.1" y="1875.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="862.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="859.1" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.07%)</title><rect x="859.1" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="862.1" y="1854.0"></text>
</g>
<g>
<title>loadRangeNode::pipeline() const (1 samples, 0.07%)</title><rect x="859.1" y="1827.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="862.1" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.15%)</title><rect x="860.0" y="1859.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="863.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="861.7" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="864.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="861.7" y="1843.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (54 samples, 3.93%)</title><rect x="862.6" y="1891.0" width="46.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="865.6" y="1902.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="862.6" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="865.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.15%)</title><rect x="863.4" y="1875.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="866.4" y="1886.0"></text>
</g>
<g>
<title>LiveRangeMap::find_compress(unsigned int) (1 samples, 0.07%)</title><rect x="864.3" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.36%)</title><rect x="865.1" y="1875.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="865.1" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="868.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.22%)</title><rect x="866.0" y="1859.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="866.9" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="869.9" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="867.7" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.7" y="1854.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="868.6" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.07%)</title><rect x="869.4" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="872.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="869.4" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="872.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.51%)</title><rect x="870.3" y="1875.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.3" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="874.6" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="875.4" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="878.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="875.4" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="878.4" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="875.4" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="878.4" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.80%)</title><rect x="876.3" y="1875.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="879.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.44%)</title><rect x="879.7" y="1859.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="883.2" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="886.2" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="884.0" y="1843.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="887.0" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="884.9" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="885.8" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.07%)</title><rect x="886.6" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.36%)</title><rect x="887.5" y="1875.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="890.5" y="1886.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="889.2" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="892.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="890.1" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="893.1" y="1870.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="890.9" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="893.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="891.8" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="891.8" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="892.6" y="1875.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.22%)</title><rect x="893.5" y="1875.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="896.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="895.2" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="895.2" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.2" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.07%)</title><rect x="895.2" y="1827.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.2" y="1838.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.15%)</title><rect x="896.1" y="1875.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="899.1" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="896.1" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="899.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="896.1" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.07%)</title><rect x="896.1" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="899.1" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="896.1" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.1" y="1822.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="896.9" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="899.9" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="896.9" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="899.9" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.07%)</title><rect x="896.9" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="899.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.15%)</title><rect x="897.8" y="1875.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="900.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="898.7" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="901.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.07%)</title><rect x="899.5" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="902.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="899.5" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="902.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="900.4" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="903.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="900.4" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.4" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.51%)</title><rect x="901.2" y="1875.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="904.2" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.29%)</title><rect x="903.8" y="1859.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="906.4" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="909.4" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="907.2" y="1875.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="910.2" y="1886.0"></text>
</g>
<g>
<title>subI_rRegNode::use_cisc_RegMask() (1 samples, 0.07%)</title><rect x="908.1" y="1875.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.1" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (320 samples, 23.31%)</title><rect x="909.0" y="1907.0" width="275.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.0" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="909.0" y="1891.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="909.0" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="912.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="909.0" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="909.0" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="912.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="909.0" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="912.0" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="909.0" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="912.0" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="909.0" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.51%)</title><rect x="909.8" y="1891.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="912.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.51%)</title><rect x="909.8" y="1875.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.8" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="909.8" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="909.8" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (6 samples, 0.44%)</title><rect x="910.7" y="1859.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.29%)</title><rect x="911.5" y="1843.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="914.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="911.5" y="1827.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1795.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="914.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1779.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1763.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1747.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1731.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="914.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1683.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="914.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1667.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1635.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1619.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1603.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="914.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1571.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1555.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="914.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1539.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="914.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1523.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="914.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="911.5" y="1507.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.5" y="1518.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="911.5" y="1491.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="914.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1779.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1747.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="915.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1731.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1715.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1683.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1667.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1651.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1635.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="915.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1619.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1603.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1587.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="915.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1571.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="915.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1555.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1539.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1523.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1507.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1491.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1475.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1459.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1443.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1427.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1411.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1395.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1379.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1363.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1331.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1315.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1299.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1283.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1267.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1251.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1235.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="915.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1219.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1203.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="915.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1187.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1091.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1059.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="915.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="1011.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="912.4" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.4" y="974.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="912.4" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="913.3" y="1827.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="913.3" y="1811.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.3" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="913.3" y="1795.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="913.3" y="1779.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="916.3" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.3" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.3" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1731.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.3" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1715.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.3" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1683.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1667.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.3" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1651.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.3" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1635.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="916.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1619.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1603.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1571.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.3" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.3" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1539.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="916.3" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1523.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="916.3" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1507.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="916.3" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1491.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.3" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="913.3" y="1475.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.3" y="1486.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="913.3" y="1459.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="916.3" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1763.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="917.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1747.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1731.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1699.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1683.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="917.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1667.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1651.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="917.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1635.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="917.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1619.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="917.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1587.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1571.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1555.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1539.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1523.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.1" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="914.1" y="1507.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="917.1" y="1518.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="914.1" y="1491.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.1" y="1502.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="915.0" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.22%)</title><rect x="915.8" y="1891.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.8" y="1902.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="916.7" y="1875.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="919.7" y="1886.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="916.7" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.7" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="917.6" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (286 samples, 20.83%)</title><rect x="918.4" y="1891.0" width="245.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.4" y="1902.0">PhaseIdealLoop::build_and_optimiz..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.4" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.4" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.4" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1827.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.4" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1811.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="921.4" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1795.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="921.4" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.4" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="918.4" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.4" y="1774.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.07%)</title><rect x="918.4" y="1747.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.4" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.29%)</title><rect x="919.3" y="1875.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.3" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.22%)</title><rect x="919.3" y="1859.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.3" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="921.9" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.51%)</title><rect x="922.7" y="1875.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.15%)</title><rect x="925.3" y="1859.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.3" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="927.0" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.0" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="927.9" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="930.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (263 samples, 19.16%)</title><rect x="928.7" y="1875.0" width="226.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.7" y="1886.0">PhaseIdealLoop::build_loop_lat..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (257 samples, 18.72%)</title><rect x="933.9" y="1859.0" width="220.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="936.9" y="1870.0">PhaseIdealLoop::build_loop_la..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.36%)</title><rect x="935.6" y="1843.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="938.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.15%)</title><rect x="939.9" y="1843.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (248 samples, 18.06%)</title><rect x="941.6" y="1843.0" width="213.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.6" y="1854.0">PhaseIdealLoop::get_late_ctr..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1116.9" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.9" y="1838.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1116.9" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.9" y="1822.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1116.9" y="1795.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.9" y="1806.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1116.9" y="1779.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.9" y="1790.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1116.9" y="1763.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.9" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.22%)</title><rect x="1117.8" y="1827.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1118.7" y="1811.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1119.5" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.5" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (39 samples, 2.84%)</title><rect x="1120.4" y="1827.0" width="33.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.4" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1153.9" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1153.9" y="1811.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.15%)</title><rect x="1154.8" y="1875.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.8" y="1886.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.07%)</title><rect x="1155.6" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.36%)</title><rect x="1156.5" y="1875.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1157.3" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.22%)</title><rect x="1158.2" y="1859.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1159.1" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1159.9" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1159.9" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1159.9" y="1811.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.22%)</title><rect x="1160.8" y="1875.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1160.8" y="1859.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.15%)</title><rect x="1161.6" y="1843.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1162.5" y="1827.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.5" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1163.4" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (19 samples, 1.38%)</title><rect x="1164.2" y="1891.0" width="16.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 1.31%)</title><rect x="1165.1" y="1875.0" width="15.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.1" y="1886.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.9" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.9" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1166.8" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1166.8" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="1854.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1166.8" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="1838.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1166.8" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1166.8" y="1795.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1166.8" y="1779.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="1790.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1166.8" y="1763.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="1774.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1167.7" y="1859.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="1870.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1169.4" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.4" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.15%)</title><rect x="1170.2" y="1859.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.2" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1171.1" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.44%)</title><rect x="1172.0" y="1859.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.0" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1173.7" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.22%)</title><rect x="1174.5" y="1843.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1176.2" y="1827.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.2" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1177.1" y="1859.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="1870.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1178.0" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1178.8" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.15%)</title><rect x="1178.8" y="1843.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1180.5" y="1891.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1180.5" y="1875.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1180.5" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1180.5" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.15%)</title><rect x="1181.4" y="1891.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1181.4" y="1875.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="1886.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.4" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1182.3" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="1870.0"></text>
</g>
<g>
<title>URShiftLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="1854.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1183.1" y="1891.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1184.0" y="1907.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1184.0" y="1891.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1184.0" y="1875.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1184.0" y="1859.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1184.0" y="1843.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1184.0" y="1827.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1184.0" y="1811.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1184.0" y="1795.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1184.0" y="1779.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1184.0" y="1763.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1184.0" y="1747.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1184.0" y="1731.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1184.0" y="1715.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1184.0" y="1699.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1184.0" y="1683.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1184.0" y="1667.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1184.0" y="1651.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1184.0" y="1635.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1184.0" y="1619.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1184.0" y="1603.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1184.0" y="1587.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1184.0" y="1571.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1184.0" y="1555.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1184.0" y="1539.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1184.0" y="1523.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1184.0" y="1507.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1184.0" y="1491.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1184.0" y="1475.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1184.0" y="1459.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1184.0" y="1443.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1184.0" y="1427.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1184.0" y="1411.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1184.0" y="1395.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1184.0" y="1379.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1184.0" y="1363.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1184.0" y="1347.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1184.0" y="1331.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1184.0" y="1315.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1184.0" y="1299.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1184.0" y="1283.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1184.0" y="1267.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1184.0" y="1251.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="1262.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.0" y="1235.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="1246.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.07%)</title><rect x="1184.0" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="1230.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1184.0" y="1203.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="1214.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.0" y="1187.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="1198.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1184.0" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="1182.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1184.0" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.8" y="1235.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.8" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.8" y="1203.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="1214.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1184.8" y="1187.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="1198.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.8" y="1171.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.8" y="1182.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.8" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1166.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1184.8" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.7" y="1331.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.7" y="1315.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.7" y="1299.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.7" y="1283.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.7" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.7" y="1251.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.7" y="1235.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.7" y="1219.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.7" y="1203.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="1214.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1185.7" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="1198.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1185.7" y="1171.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1185.7" y="1155.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1185.7" y="1139.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1186.6" y="1523.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1186.6" y="1507.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1186.6" y="1491.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1186.6" y="1475.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1186.6" y="1459.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1186.6" y="1443.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1186.6" y="1427.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1186.6" y="1411.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1186.6" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1186.6" y="1379.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1186.6" y="1363.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1186.6" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1186.6" y="1331.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1186.6" y="1315.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1186.6" y="1299.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1186.6" y="1283.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1186.6" y="1267.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1186.6" y="1251.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1186.6" y="1235.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="1246.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1186.6" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="1230.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.07%)</title><rect x="1186.6" y="1203.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="1214.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1186.6" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="1198.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1186.6" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="1182.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1186.6" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1186.6" y="1139.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1186.6" y="1123.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="1134.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1186.6" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="1118.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1187.4" y="1907.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.4" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1187.4" y="1891.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.4" y="1902.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1188.3" y="1955.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1188.3" y="1939.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1188.3" y="1923.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.3" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1188.3" y="1907.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.07%)</title><rect x="1188.3" y="1891.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.1" y="2003.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.1" y="1987.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.1" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1189.1" y="1971.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="1982.0"></text>
</g>
<g>
<title>TemplateInterpreter::notice_safepoints() (1 samples, 0.07%)</title><rect x="1189.1" y="1955.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="1966.0"></text>
</g>
</g>
</svg>
