<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (37 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 2.70%)</title><rect x="10.0" y="851.0" width="31.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0">[d..</text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 2.70%)</title><rect x="10.0" y="835.0" width="31.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="846.0">De..</text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 2.70%)</title><rect x="10.0" y="819.0" width="31.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="830.0">De..</text>
</g>
<g>
<title>[unknown] (1 samples, 2.70%)</title><rect x="41.9" y="851.0" width="31.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="44.9" y="862.0">[u..</text>
</g>
<g>
<title>__GI__IO_default_xsputn (1 samples, 2.70%)</title><rect x="41.9" y="835.0" width="31.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="44.9" y="846.0">__..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (2 samples, 5.41%)</title><rect x="73.8" y="851.0" width="63.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.8" y="862.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (2 samples, 5.41%)</title><rect x="73.8" y="835.0" width="63.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.8" y="846.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 2.70%)</title><rect x="73.8" y="819.0" width="31.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.8" y="830.0">co..</text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 2.70%)</title><rect x="73.8" y="803.0" width="31.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.8" y="814.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1385534085.accept (1 samples, 2.70%)</title><rect x="73.8" y="787.0" width="31.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.8" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 2.70%)</title><rect x="73.8" y="771.0" width="31.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.8" y="782.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 2.70%)</title><rect x="73.8" y="755.0" width="31.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.8" y="766.0">co..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 2.70%)</title><rect x="105.7" y="819.0" width="31.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.7" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 2.70%)</title><rect x="105.7" y="803.0" width="31.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.7" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 2.70%)</title><rect x="105.7" y="787.0" width="31.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.7" y="798.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 2.70%)</title><rect x="105.7" y="771.0" width="31.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.7" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 2.70%)</title><rect x="105.7" y="755.0" width="31.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.7" y="766.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 2.70%)</title><rect x="105.7" y="739.0" width="31.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.7" y="750.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 2.70%)</title><rect x="105.7" y="723.0" width="31.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="108.7" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 2.70%)</title><rect x="105.7" y="707.0" width="31.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="108.7" y="718.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 2.70%)</title><rect x="105.7" y="691.0" width="31.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.7" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 2.70%)</title><rect x="105.7" y="675.0" width="31.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.7" y="686.0">or..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 2.70%)</title><rect x="105.7" y="659.0" width="31.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.7" y="670.0">I2..</text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 2.70%)</title><rect x="137.6" y="851.0" width="31.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.6" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 2.70%)</title><rect x="137.6" y="835.0" width="31.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.6" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 2.70%)</title><rect x="137.6" y="819.0" width="31.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.6" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 2.70%)</title><rect x="137.6" y="803.0" width="31.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.6" y="814.0">ja..</text>
</g>
<g>
<title>start_thread (32 samples, 86.49%)</title><rect x="169.5" y="851.0" width="1020.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="172.5" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (32 samples, 86.49%)</title><rect x="169.5" y="835.0" width="1020.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="172.5" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (32 samples, 86.49%)</title><rect x="169.5" y="819.0" width="1020.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="172.5" y="830.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (32 samples, 86.49%)</title><rect x="169.5" y="803.0" width="1020.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="172.5" y="814.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (32 samples, 86.49%)</title><rect x="169.5" y="787.0" width="1020.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="172.5" y="798.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (31 samples, 83.78%)</title><rect x="169.5" y="771.0" width="988.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="172.5" y="782.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (31 samples, 83.78%)</title><rect x="169.5" y="755.0" width="988.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="172.5" y="766.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 45.95%)</title><rect x="169.5" y="739.0" width="542.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="172.5" y="750.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 5.41%)</title><rect x="169.5" y="723.0" width="63.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="172.5" y="734.0">Compile..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 2.70%)</title><rect x="169.5" y="707.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="172.5" y="718.0">Co..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 2.70%)</title><rect x="169.5" y="691.0" width="31.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="172.5" y="702.0">No..</text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 2.70%)</title><rect x="201.4" y="707.0" width="31.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="204.4" y="718.0">Co..</text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 2.70%)</title><rect x="201.4" y="691.0" width="31.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="204.4" y="702.0">Co..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 5.41%)</title><rect x="233.2" y="723.0" width="63.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="236.2" y="734.0">Matcher..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 2.70%)</title><rect x="233.2" y="707.0" width="31.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="236.2" y="718.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 2.70%)</title><rect x="265.1" y="707.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="268.1" y="718.0">Ma..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 2.70%)</title><rect x="265.1" y="691.0" width="31.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="268.1" y="702.0">Ma..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 2.70%)</title><rect x="265.1" y="675.0" width="31.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="268.1" y="686.0">Ma..</text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 2.70%)</title><rect x="265.1" y="659.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="268.1" y="670.0">Ma..</text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 2.70%)</title><rect x="265.1" y="643.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="268.1" y="654.0">St..</text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 2.70%)</title><rect x="297.0" y="723.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="300.0" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 2.70%)</title><rect x="297.0" y="707.0" width="31.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="300.0" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 2.70%)</title><rect x="328.9" y="723.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="331.9" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 2.70%)</title><rect x="328.9" y="707.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="331.9" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 2.70%)</title><rect x="328.9" y="691.0" width="31.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="331.9" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 29.73%)</title><rect x="360.8" y="723.0" width="350.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="363.8" y="734.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 2.70%)</title><rect x="360.8" y="707.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="363.8" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 2.70%)</title><rect x="392.7" y="707.0" width="31.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="395.7" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 13.51%)</title><rect x="424.6" y="707.0" width="159.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="427.6" y="718.0">PhaseChaitin::build_..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 2.70%)</title><rect x="424.6" y="691.0" width="31.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="427.6" y="702.0">Ma..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 2.70%)</title><rect x="424.6" y="675.0" width="31.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="427.6" y="686.0">Ma..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 5.41%)</title><rect x="456.5" y="691.0" width="63.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="459.5" y="702.0">PhaseCh..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 2.70%)</title><rect x="488.4" y="675.0" width="31.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="491.4" y="686.0">In..</text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 2.70%)</title><rect x="520.3" y="691.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="523.3" y="702.0">Re..</text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) [clone .isra.134] (1 samples, 2.70%)</title><rect x="552.2" y="691.0" width="31.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="555.2" y="702.0">lo..</text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 5.41%)</title><rect x="584.1" y="707.0" width="63.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="587.1" y="718.0">PhaseCh..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 2.70%)</title><rect x="615.9" y="691.0" width="31.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="618.9" y="702.0">Re..</text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 2.70%)</title><rect x="647.8" y="707.0" width="31.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="650.8" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 2.70%)</title><rect x="679.7" y="707.0" width="31.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="682.7" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 2.70%)</title><rect x="679.7" y="691.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="682.7" y="702.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 2.70%)</title><rect x="679.7" y="675.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="682.7" y="686.0">In..</text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 21.62%)</title><rect x="711.6" y="739.0" width="255.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="714.6" y="750.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 2.70%)</title><rect x="711.6" y="723.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="714.6" y="734.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 2.70%)</title><rect x="711.6" y="707.0" width="31.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="714.6" y="718.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 2.70%)</title><rect x="711.6" y="691.0" width="31.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="714.6" y="702.0">Co..</text>
</g>
<g>
<title>Type::hashcons() (1 samples, 2.70%)</title><rect x="711.6" y="675.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="714.6" y="686.0">Ty..</text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 2.70%)</title><rect x="711.6" y="659.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="714.6" y="670.0">Di..</text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 2.70%)</title><rect x="711.6" y="643.0" width="31.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.6" y="654.0">Ty..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 2.70%)</title><rect x="743.5" y="723.0" width="31.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.5" y="734.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 2.70%)</title><rect x="743.5" y="707.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="746.5" y="718.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 2.70%)</title><rect x="743.5" y="691.0" width="31.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="746.5" y="702.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 2.70%)</title><rect x="743.5" y="675.0" width="31.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="746.5" y="686.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 2.70%)</title><rect x="743.5" y="659.0" width="31.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="746.5" y="670.0">Co..</text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 2.70%)</title><rect x="743.5" y="643.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="746.5" y="654.0">Ty..</text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 2.70%)</title><rect x="743.5" y="627.0" width="31.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="746.5" y="638.0">Ty..</text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 2.70%)</title><rect x="743.5" y="611.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="746.5" y="622.0">Ty..</text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 2.70%)</title><rect x="743.5" y="595.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="746.5" y="606.0">ci..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 13.51%)</title><rect x="775.4" y="723.0" width="159.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.4" y="734.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 2.70%)</title><rect x="775.4" y="707.0" width="31.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="778.4" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 2.70%)</title><rect x="807.3" y="707.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="810.3" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 2.70%)</title><rect x="807.3" y="691.0" width="31.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="810.3" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 2.70%)</title><rect x="807.3" y="675.0" width="31.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.3" y="686.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 2.70%)</title><rect x="807.3" y="659.0" width="31.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="810.3" y="670.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 2.70%)</title><rect x="839.2" y="707.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.2" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 2.70%)</title><rect x="871.1" y="707.0" width="31.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.1" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 2.70%)</title><rect x="871.1" y="691.0" width="31.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.1" y="702.0">Ph..</text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 2.70%)</title><rect x="871.1" y="675.0" width="31.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.1" y="686.0">Re..</text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 2.70%)</title><rect x="871.1" y="659.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.1" y="670.0">Re..</text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 2.70%)</title><rect x="871.1" y="643.0" width="31.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="874.1" y="654.0">Pr..</text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 2.70%)</title><rect x="903.0" y="707.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.0" y="718.0">Re..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 2.70%)</title><rect x="934.9" y="723.0" width="31.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.9" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 2.70%)</title><rect x="934.9" y="707.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.9" y="718.0">Ph..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 16.22%)</title><rect x="966.8" y="739.0" width="191.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.8" y="750.0">ParseGenerator::generate(..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 16.22%)</title><rect x="966.8" y="723.0" width="191.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.8" y="734.0">Parse::Parse(JVMState*, c..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 16.22%)</title><rect x="966.8" y="707.0" width="191.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.8" y="718.0">Parse::do_all_blocks()</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 16.22%)</title><rect x="966.8" y="691.0" width="191.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.8" y="702.0">Parse::do_one_block()</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 16.22%)</title><rect x="966.8" y="675.0" width="191.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.8" y="686.0">Parse::do_one_bytecode()</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 16.22%)</title><rect x="966.8" y="659.0" width="191.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.8" y="670.0">Parse::do_call()</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 2.70%)</title><rect x="966.8" y="643.0" width="31.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.8" y="654.0">Co..</text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 2.70%)</title><rect x="966.8" y="627.0" width="31.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="969.8" y="638.0">In..</text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 2.70%)</title><rect x="966.8" y="611.0" width="31.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.8" y="622.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 2.70%)</title><rect x="966.8" y="595.0" width="31.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.8" y="606.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 2.70%)</title><rect x="966.8" y="579.0" width="31.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="969.8" y="590.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 2.70%)</title><rect x="966.8" y="563.0" width="31.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.8" y="574.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 2.70%)</title><rect x="966.8" y="547.0" width="31.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.8" y="558.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 2.70%)</title><rect x="966.8" y="531.0" width="31.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.8" y="542.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 2.70%)</title><rect x="966.8" y="515.0" width="31.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="969.8" y="526.0">ci..</text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 2.70%)</title><rect x="966.8" y="499.0" width="31.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.8" y="510.0">ci..</text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 2.70%)</title><rect x="966.8" y="483.0" width="31.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="969.8" y="494.0">ci..</text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 2.70%)</title><rect x="966.8" y="467.0" width="31.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="969.8" y="478.0">ci..</text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 2.70%)</title><rect x="966.8" y="451.0" width="31.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="969.8" y="462.0">ci..</text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 2.70%)</title><rect x="966.8" y="435.0" width="31.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.8" y="446.0">ci..</text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 2.70%)</title><rect x="966.8" y="419.0" width="31.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.8" y="430.0">ci..</text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 2.70%)</title><rect x="966.8" y="403.0" width="31.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.8" y="414.0">ci..</text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 2.70%)</title><rect x="966.8" y="387.0" width="31.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.8" y="398.0">Sy..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 8.11%)</title><rect x="998.6" y="643.0" width="95.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.6" y="654.0">ParseGenera..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 8.11%)</title><rect x="998.6" y="627.0" width="95.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.6" y="638.0">Parse::Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 8.11%)</title><rect x="998.6" y="611.0" width="95.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.6" y="622.0">Parse::do_a..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 8.11%)</title><rect x="998.6" y="595.0" width="95.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.6" y="606.0">Parse::do_o..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 8.11%)</title><rect x="998.6" y="579.0" width="95.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.6" y="590.0">Parse::do_o..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 5.41%)</title><rect x="998.6" y="563.0" width="63.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.6" y="574.0">Parse::..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 2.70%)</title><rect x="998.6" y="547.0" width="31.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.6" y="558.0">Co..</text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 2.70%)</title><rect x="998.6" y="531.0" width="31.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.6" y="542.0">In..</text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 2.70%)</title><rect x="998.6" y="515.0" width="31.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.6" y="526.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 2.70%)</title><rect x="998.6" y="499.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.6" y="510.0">ci..</text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 2.70%)</title><rect x="998.6" y="483.0" width="31.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.6" y="494.0">ci..</text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 2.70%)</title><rect x="998.6" y="467.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.6" y="478.0">ci..</text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 2.70%)</title><rect x="998.6" y="451.0" width="31.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.6" y="462.0">ci..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 2.70%)</title><rect x="1030.5" y="547.0" width="31.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.5" y="558.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.70%)</title><rect x="1030.5" y="531.0" width="31.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.5" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 2.70%)</title><rect x="1030.5" y="515.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1033.5" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 2.70%)</title><rect x="1030.5" y="499.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.5" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 2.70%)</title><rect x="1030.5" y="483.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.5" y="494.0">Pa..</text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 2.70%)</title><rect x="1030.5" y="467.0" width="31.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.5" y="478.0">Gr..</text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 2.70%)</title><rect x="1030.5" y="451.0" width="31.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.5" y="462.0">Gr..</text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 2.70%)</title><rect x="1030.5" y="435.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.5" y="446.0">Gr..</text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 2.70%)</title><rect x="1030.5" y="419.0" width="31.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.5" y="430.0">ci..</text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 2.70%)</title><rect x="1030.5" y="403.0" width="31.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.5" y="414.0">Me..</text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 2.70%)</title><rect x="1030.5" y="387.0" width="31.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.5" y="398.0">Me..</text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 2.70%)</title><rect x="1062.4" y="563.0" width="31.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.4" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 2.70%)</title><rect x="1062.4" y="547.0" width="31.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.4" y="558.0">Pa..</text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 2.70%)</title><rect x="1062.4" y="531.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.4" y="542.0">Gr..</text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 2.70%)</title><rect x="1062.4" y="515.0" width="31.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.4" y="526.0">Lo..</text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 2.70%)</title><rect x="1062.4" y="499.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.4" y="510.0">Ty..</text>
</g>
<g>
<title>Type::hashcons() (1 samples, 2.70%)</title><rect x="1062.4" y="483.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.4" y="494.0">Ty..</text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 2.70%)</title><rect x="1062.4" y="467.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.4" y="478.0">Di..</text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 2.70%)</title><rect x="1062.4" y="451.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.4" y="462.0">Ty..</text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 2.70%)</title><rect x="1062.4" y="435.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.4" y="446.0">Ty..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 5.41%)</title><rect x="1094.3" y="643.0" width="63.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.3" y="654.0">Predict..</text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 2.70%)</title><rect x="1094.3" y="627.0" width="31.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.3" y="638.0">Gr..</text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 2.70%)</title><rect x="1094.3" y="611.0" width="31.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.3" y="622.0">Gr..</text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 2.70%)</title><rect x="1094.3" y="595.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.3" y="606.0">Gr..</text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 2.70%)</title><rect x="1094.3" y="579.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.3" y="590.0">Gr..</text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 2.70%)</title><rect x="1094.3" y="563.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.3" y="574.0">Gr..</text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 2.70%)</title><rect x="1094.3" y="547.0" width="31.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.3" y="558.0">ci..</text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 2.70%)</title><rect x="1094.3" y="531.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.3" y="542.0">ci..</text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 2.70%)</title><rect x="1094.3" y="515.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.3" y="526.0">ci..</text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 2.70%)</title><rect x="1094.3" y="499.0" width="31.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.3" y="510.0">ci..</text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 2.70%)</title><rect x="1094.3" y="483.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.3" y="494.0">ci..</text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 2.70%)</title><rect x="1094.3" y="467.0" width="31.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.3" y="478.0">Li..</text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 2.70%)</title><rect x="1094.3" y="451.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.3" y="462.0">Li..</text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 2.70%)</title><rect x="1094.3" y="435.0" width="31.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.3" y="446.0">Li..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 2.70%)</title><rect x="1126.2" y="627.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.2" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.70%)</title><rect x="1126.2" y="611.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="622.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 2.70%)</title><rect x="1126.2" y="595.0" width="31.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.2" y="606.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 2.70%)</title><rect x="1126.2" y="579.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="590.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 2.70%)</title><rect x="1126.2" y="563.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.2" y="574.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 2.70%)</title><rect x="1126.2" y="547.0" width="31.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.2" y="558.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 2.70%)</title><rect x="1126.2" y="531.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.2" y="542.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.70%)</title><rect x="1126.2" y="515.0" width="31.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.2" y="526.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 2.70%)</title><rect x="1126.2" y="499.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="510.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 2.70%)</title><rect x="1126.2" y="483.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="494.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 2.70%)</title><rect x="1126.2" y="467.0" width="31.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.2" y="478.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 2.70%)</title><rect x="1126.2" y="451.0" width="31.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.2" y="462.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 2.70%)</title><rect x="1126.2" y="435.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.2" y="446.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 2.70%)</title><rect x="1126.2" y="419.0" width="31.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.2" y="430.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 2.70%)</title><rect x="1126.2" y="403.0" width="31.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.2" y="414.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 2.70%)</title><rect x="1126.2" y="387.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="398.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 2.70%)</title><rect x="1126.2" y="371.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.2" y="382.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 2.70%)</title><rect x="1126.2" y="355.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.2" y="366.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 2.70%)</title><rect x="1126.2" y="339.0" width="31.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.2" y="350.0">Co..</text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 2.70%)</title><rect x="1126.2" y="323.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.2" y="334.0">In..</text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 2.70%)</title><rect x="1126.2" y="307.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.2" y="318.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 2.70%)</title><rect x="1126.2" y="291.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.2" y="302.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 2.70%)</title><rect x="1126.2" y="275.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.2" y="286.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 2.70%)</title><rect x="1126.2" y="259.0" width="31.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.2" y="270.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 2.70%)</title><rect x="1126.2" y="243.0" width="31.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.2" y="254.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 2.70%)</title><rect x="1126.2" y="227.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.2" y="238.0">ci..</text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 2.70%)</title><rect x="1126.2" y="211.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="222.0">ci..</text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 2.70%)</title><rect x="1126.2" y="195.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="206.0">ci..</text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 2.70%)</title><rect x="1126.2" y="179.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.2" y="190.0">ci..</text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 2.70%)</title><rect x="1126.2" y="163.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="174.0">ci..</text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 2.70%)</title><rect x="1126.2" y="147.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.2" y="158.0">ci..</text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 2.70%)</title><rect x="1126.2" y="131.0" width="31.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.2" y="142.0">ci..</text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 2.70%)</title><rect x="1126.2" y="115.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="126.0">ci..</text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 2.70%)</title><rect x="1126.2" y="99.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.2" y="110.0">ci..</text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 2.70%)</title><rect x="1126.2" y="83.0" width="31.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.2" y="94.0">ci..</text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 2.70%)</title><rect x="1126.2" y="67.0" width="31.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.2" y="78.0">Sy..</text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 2.70%)</title><rect x="1126.2" y="51.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.2" y="62.0">Sy..</text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 2.70%)</title><rect x="1126.2" y="35.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.2" y="46.0">Di..</text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 2.70%)</title><rect x="1158.1" y="771.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="782.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 2.70%)</title><rect x="1158.1" y="755.0" width="31.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.1" y="766.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 2.70%)</title><rect x="1158.1" y="739.0" width="31.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="750.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 2.70%)</title><rect x="1158.1" y="723.0" width="31.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.1" y="734.0">Co..</text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 2.70%)</title><rect x="1158.1" y="707.0" width="31.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.1" y="718.0">Co..</text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 2.70%)</title><rect x="1158.1" y="691.0" width="31.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.1" y="702.0">LI..</text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 2.70%)</title><rect x="1158.1" y="675.0" width="31.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.1" y="686.0">LI..</text>
</g>
<g>
<title>LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*) (1 samples, 2.70%)</title><rect x="1158.1" y="659.0" width="31.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.1" y="670.0">LI..</text>
</g>
</g>
</svg>
