<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (311 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="2035.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="2019.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="2003.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1987.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1971.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1955.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1939.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1923.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1907.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1891.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1875.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1859.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1843.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1827.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1811.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1795.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1779.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1763.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1747.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1731.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1715.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1699.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1683.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1667.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1651.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1635.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1619.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1603.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1587.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1571.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1555.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1539.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1523.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1507.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1491.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1475.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1459.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1443.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1427.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1411.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1395.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1379.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1363.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1347.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1331.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1315.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1299.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1283.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1267.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1251.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1235.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1219.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1203.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1187.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1171.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1155.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1139.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1123.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1107.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1091.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1075.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1059.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1043.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1027.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="1011.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="995.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="979.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="963.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="947.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="931.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="915.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="899.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="883.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="867.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="851.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="835.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="819.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="803.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="787.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="771.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="755.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="739.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="723.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="707.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="691.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="675.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="659.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="643.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="627.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="611.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="595.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="579.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="563.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="547.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="531.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="515.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="499.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="483.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="467.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="451.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="435.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="419.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="403.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="387.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="371.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="355.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="339.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="323.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="307.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="291.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="275.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="259.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="243.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="227.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="211.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="195.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="179.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="163.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="147.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="131.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="115.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="99.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="83.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="67.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="51.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.32%)</title><rect x="10.0" y="35.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.64%)</title><rect x="13.8" y="2035.0" width="7.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="16.8" y="2046.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.32%)</title><rect x="13.8" y="2019.0" width="3.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="16.8" y="2030.0"></text>
</g>
<g>
<title>__GI__IO_default_xsputn (1 samples, 0.32%)</title><rect x="13.8" y="2003.0" width="3.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="16.8" y="2014.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.32%)</title><rect x="17.6" y="2019.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="20.6" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 6.11%)</title><rect x="21.4" y="2035.0" width="72.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.4" y="2046.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.64%)</title><rect x="21.4" y="2019.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.4" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.64%)</title><rect x="21.4" y="2003.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.4" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.64%)</title><rect x="21.4" y="1987.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.64%)</title><rect x="21.4" y="1971.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.4" y="1982.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.32%)</title><rect x="21.4" y="1955.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.4" y="1966.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.32%)</title><rect x="21.4" y="1939.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$275/455558470.get$Lambda (1 samples, 0.32%)</title><rect x="21.4" y="1923.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.32%)</title><rect x="25.2" y="1955.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="25.2" y="1939.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="25.2" y="1923.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="25.2" y="1907.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="25.2" y="1891.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="25.2" y="1875.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.32%)</title><rect x="25.2" y="1859.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.maybeBeginClientReauthentication (1 samples, 0.32%)</title><rect x="25.2" y="1843.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.ready (1 samples, 0.32%)</title><rect x="25.2" y="1827.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (17 samples, 5.47%)</title><rect x="29.0" y="2019.0" width="64.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.0" y="2030.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.64%)</title><rect x="29.0" y="2003.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.32%)</title><rect x="29.0" y="1987.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.0" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.32%)</title><rect x="29.0" y="1971.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.0" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.32%)</title><rect x="29.0" y="1955.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.32%)</title><rect x="29.0" y="1939.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.32%)</title><rect x="29.0" y="1923.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.0" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.32%)</title><rect x="29.0" y="1907.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.32%)</title><rect x="29.0" y="1891.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.32%)</title><rect x="29.0" y="1875.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.32%)</title><rect x="29.0" y="1859.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.32%)</title><rect x="29.0" y="1843.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.0" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="29.0" y="1827.0" width="3.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="32.0" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.32%)</title><rect x="32.8" y="1987.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$284/597697363.accept (1 samples, 0.32%)</title><rect x="32.8" y="1971.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.8" y="1982.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.29%)</title><rect x="36.6" y="2003.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.6" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/608087923.accept (4 samples, 1.29%)</title><rect x="36.6" y="1987.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.6" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (4 samples, 1.29%)</title><rect x="36.6" y="1971.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.6" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.29%)</title><rect x="36.6" y="1955.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.29%)</title><rect x="36.6" y="1939.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.29%)</title><rect x="36.6" y="1923.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.29%)</title><rect x="36.6" y="1907.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.29%)</title><rect x="36.6" y="1891.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.29%)</title><rect x="36.6" y="1875.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.29%)</title><rect x="36.6" y="1859.0" width="15.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.29%)</title><rect x="36.6" y="1843.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 1.29%)</title><rect x="36.6" y="1827.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.54%)</title><rect x="51.7" y="2003.0" width="41.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.7" y="2014.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.54%)</title><rect x="51.7" y="1987.0" width="41.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.7" y="1998.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.32%)</title><rect x="51.7" y="1971.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 2.89%)</title><rect x="55.5" y="1971.0" width="34.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.5" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.61%)</title><rect x="55.5" y="1955.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.61%)</title><rect x="55.5" y="1939.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.96%)</title><rect x="59.3" y="1923.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.completeResponses (1 samples, 0.32%)</title><rect x="59.3" y="1907.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientResponse.onComplete (1 samples, 0.32%)</title><rect x="59.3" y="1891.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.32%)</title><rect x="59.3" y="1875.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.64%)</title><rect x="63.1" y="1907.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.64%)</title><rect x="63.1" y="1891.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.64%)</title><rect x="63.1" y="1875.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.32%)</title><rect x="66.9" y="1859.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.32%)</title><rect x="66.9" y="1843.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.32%)</title><rect x="66.9" y="1827.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.32%)</title><rect x="66.9" y="1811.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.32%)</title><rect x="66.9" y="1795.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.32%)</title><rect x="70.7" y="1923.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.32%)</title><rect x="70.7" y="1907.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.32%)</title><rect x="70.7" y="1891.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="70.7" y="1875.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.32%)</title><rect x="70.7" y="1859.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.32%)</title><rect x="70.7" y="1843.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.29%)</title><rect x="74.5" y="1955.0" width="15.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.29%)</title><rect x="74.5" y="1939.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.96%)</title><rect x="74.5" y="1923.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.96%)</title><rect x="74.5" y="1907.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.5" y="1918.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="74.5" y="1891.0" width="3.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="77.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.64%)</title><rect x="78.3" y="1891.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.32%)</title><rect x="78.3" y="1875.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.32%)</title><rect x="78.3" y="1859.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.32%)</title><rect x="78.3" y="1843.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.32%)</title><rect x="78.3" y="1827.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.32%)</title><rect x="78.3" y="1811.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.32%)</title><rect x="78.3" y="1795.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.32%)</title><rect x="78.3" y="1779.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.32%)</title><rect x="82.1" y="1875.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.32%)</title><rect x="82.1" y="1859.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.32%)</title><rect x="85.9" y="1923.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.32%)</title><rect x="89.7" y="1971.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.32%)</title><rect x="89.7" y="1955.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.32%)</title><rect x="89.7" y="1939.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.32%)</title><rect x="89.7" y="1923.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.32%)</title><rect x="89.7" y="1907.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.32%)</title><rect x="89.7" y="1891.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.32%)</title><rect x="89.7" y="1875.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.32%)</title><rect x="89.7" y="1859.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.32%)</title><rect x="89.7" y="1843.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.32%)</title><rect x="89.7" y="1827.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.32%)</title><rect x="89.7" y="1811.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.7" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.32%)</title><rect x="89.7" y="1795.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/Thread.run (153 samples, 49.20%)</title><rect x="93.5" y="2035.0" width="580.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (153 samples, 49.20%)</title><rect x="93.5" y="2019.0" width="580.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (153 samples, 49.20%)</title><rect x="93.5" y="2003.0" width="580.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/523735788.run (146 samples, 46.95%)</title><rect x="97.3" y="1987.0" width="553.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.3" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/523735788.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (146 samples, 46.95%)</title><rect x="97.3" y="1971.0" width="553.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.3" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (146 samples, 46.95%)</title><rect x="97.3" y="1955.0" width="553.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.3" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (146 samples, 46.95%)</title><rect x="97.3" y="1939.0" width="553.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.3" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.32%)</title><rect x="108.6" y="1923.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (27 samples, 8.68%)</title><rect x="112.4" y="1923.0" width="102.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="115.4" y="1934.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (27 samples, 8.68%)</title><rect x="112.4" y="1907.0" width="102.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="115.4" y="1918.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (27 samples, 8.68%)</title><rect x="112.4" y="1891.0" width="102.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.4" y="1902.0">com/linecorp..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.32%)</title><rect x="112.4" y="1875.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="115.4" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.32%)</title><rect x="112.4" y="1859.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="115.4" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="112.4" y="1843.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="115.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 8.36%)</title><rect x="116.2" y="1875.0" width="98.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.2" y="1886.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 8.36%)</title><rect x="116.2" y="1859.0" width="98.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.2" y="1870.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 8.36%)</title><rect x="116.2" y="1843.0" width="98.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.2" y="1854.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 2.89%)</title><rect x="116.2" y="1827.0" width="34.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.2" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.61%)</title><rect x="116.2" y="1811.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="119.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.61%)</title><rect x="116.2" y="1795.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 1.29%)</title><rect x="116.2" y="1779.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.32%)</title><rect x="131.4" y="1779.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.32%)</title><rect x="131.4" y="1763.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.29%)</title><rect x="135.2" y="1811.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="138.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.29%)</title><rect x="135.2" y="1795.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.32%)</title><rect x="135.2" y="1779.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="138.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.32%)</title><rect x="139.0" y="1779.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.32%)</title><rect x="139.0" y="1763.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.32%)</title><rect x="139.0" y="1747.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.64%)</title><rect x="142.8" y="1779.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.32%)</title><rect x="146.6" y="1763.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 4.82%)</title><rect x="150.4" y="1827.0" width="56.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.4" y="1838.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.32%)</title><rect x="150.4" y="1811.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.32%)</title><rect x="150.4" y="1795.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.32%)</title><rect x="150.4" y="1779.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.32%)</title><rect x="150.4" y="1763.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.96%)</title><rect x="154.2" y="1811.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.96%)</title><rect x="154.2" y="1795.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.32%)</title><rect x="154.2" y="1779.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.32%)</title><rect x="154.2" y="1763.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.64%)</title><rect x="158.0" y="1779.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.64%)</title><rect x="158.0" y="1763.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.32%)</title><rect x="165.6" y="1811.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="165.6" y="1795.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 3.22%)</title><rect x="169.4" y="1811.0" width="37.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.4" y="1822.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="169.4" y="1795.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 2.89%)</title><rect x="173.2" y="1795.0" width="34.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.2" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 2.89%)</title><rect x="173.2" y="1779.0" width="34.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 2.89%)</title><rect x="173.2" y="1763.0" width="34.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.2" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.64%)</title><rect x="173.2" y="1747.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.32%)</title><rect x="173.2" y="1731.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.32%)</title><rect x="173.2" y="1715.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.32%)</title><rect x="173.2" y="1699.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.32%)</title><rect x="173.2" y="1683.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.32%)</title><rect x="173.2" y="1667.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="176.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.32%)</title><rect x="173.2" y="1651.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.2" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.32%)</title><rect x="176.9" y="1731.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.64%)</title><rect x="180.7" y="1747.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.64%)</title><rect x="180.7" y="1731.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.64%)</title><rect x="180.7" y="1715.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.64%)</title><rect x="180.7" y="1699.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.64%)</title><rect x="180.7" y="1683.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.32%)</title><rect x="188.3" y="1747.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.96%)</title><rect x="192.1" y="1747.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.96%)</title><rect x="192.1" y="1731.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.96%)</title><rect x="192.1" y="1715.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.96%)</title><rect x="192.1" y="1699.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.96%)</title><rect x="192.1" y="1683.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.1" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.64%)</title><rect x="195.9" y="1667.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.9" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.32%)</title><rect x="199.7" y="1651.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.32%)</title><rect x="203.5" y="1747.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.5" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="203.5" y="1731.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.5" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="203.5" y="1715.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.64%)</title><rect x="207.3" y="1827.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.3" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.64%)</title><rect x="207.3" y="1811.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.64%)</title><rect x="207.3" y="1795.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.64%)</title><rect x="207.3" y="1779.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.32%)</title><rect x="211.1" y="1763.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (107 samples, 34.41%)</title><rect x="214.9" y="1923.0" width="406.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.9" y="1934.0">com/linecorp/decaton/processor/runtime/ProcessPipeline...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (15 samples, 4.82%)</title><rect x="214.9" y="1907.0" width="56.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.9" y="1918.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 4.18%)</title><rect x="222.5" y="1891.0" width="49.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.5" y="1902.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 2.89%)</title><rect x="237.7" y="1875.0" width="34.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.7" y="1886.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 2.89%)</title><rect x="237.7" y="1859.0" width="34.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.7" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.57%)</title><rect x="241.4" y="1843.0" width="30.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.4" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.96%)</title><rect x="260.4" y="1827.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 6.75%)</title><rect x="271.8" y="1907.0" width="79.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.8" y="1918.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 6.75%)</title><rect x="271.8" y="1891.0" width="79.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.8" y="1902.0">com/linec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="275.6" y="1875.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="278.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="275.6" y="1859.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="278.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="275.6" y="1843.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="278.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="275.6" y="1827.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="278.6" y="1838.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.32%)</title><rect x="275.6" y="1811.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="278.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 1.93%)</title><rect x="279.4" y="1875.0" width="22.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.4" y="1886.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.93%)</title><rect x="279.4" y="1859.0" width="22.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.4" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.61%)</title><rect x="283.2" y="1843.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.96%)</title><rect x="283.2" y="1827.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.96%)</title><rect x="283.2" y="1811.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.96%)</title><rect x="283.2" y="1795.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.64%)</title><rect x="283.2" y="1779.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="286.2" y="1790.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.32%)</title><rect x="283.2" y="1763.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="286.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="283.2" y="1747.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="286.2" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.32%)</title><rect x="287.0" y="1763.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="290.0" y="1774.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="290.8" y="1779.0" width="3.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="293.8" y="1790.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="294.6" y="1827.0" width="3.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="297.6" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="298.4" y="1827.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="301.4" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 4.18%)</title><rect x="302.2" y="1875.0" width="49.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="305.2" y="1886.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 4.18%)</title><rect x="302.2" y="1859.0" width="49.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.2" y="1870.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 4.18%)</title><rect x="302.2" y="1843.0" width="49.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.2" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 4.18%)</title><rect x="302.2" y="1827.0" width="49.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.2" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.57%)</title><rect x="321.1" y="1811.0" width="30.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="324.1" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.32%)</title><rect x="328.7" y="1795.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.29%)</title><rect x="332.5" y="1795.0" width="15.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.5" y="1806.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.32%)</title><rect x="347.7" y="1795.0" width="3.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="350.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (65 samples, 20.90%)</title><rect x="351.5" y="1907.0" width="246.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.5" y="1918.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (65 samples, 20.90%)</title><rect x="351.5" y="1891.0" width="246.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.5" y="1902.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="351.5" y="1875.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="354.5" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="351.5" y="1859.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="354.5" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="351.5" y="1843.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="354.5" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="351.5" y="1827.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="354.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/334307265.process (56 samples, 18.01%)</title><rect x="355.3" y="1875.0" width="212.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.3" y="1886.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (54 samples, 17.36%)</title><rect x="362.9" y="1859.0" width="204.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.9" y="1870.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (52 samples, 16.72%)</title><rect x="366.7" y="1843.0" width="197.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.7" y="1854.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (52 samples, 16.72%)</title><rect x="366.7" y="1827.0" width="197.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.7" y="1838.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (50 samples, 16.08%)</title><rect x="366.7" y="1811.0" width="189.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.7" y="1822.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (46 samples, 14.79%)</title><rect x="381.8" y="1795.0" width="174.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="384.8" y="1806.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.61%)</title><rect x="397.0" y="1779.0" width="19.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="400.0" y="1790.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.64%)</title><rect x="416.0" y="1779.0" width="7.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="419.0" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.29%)</title><rect x="423.6" y="1779.0" width="15.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="426.6" y="1790.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.96%)</title><rect x="427.4" y="1763.0" width="11.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="430.4" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.32%)</title><rect x="438.7" y="1779.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="441.7" y="1790.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.32%)</title><rect x="442.5" y="1779.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="445.5" y="1790.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 9.32%)</title><rect x="446.3" y="1779.0" width="110.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="449.3" y="1790.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.64%)</title><rect x="457.7" y="1763.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="460.7" y="1774.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.32%)</title><rect x="461.5" y="1747.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="464.5" y="1758.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="465.3" y="1763.0" width="3.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="468.3" y="1774.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.32%)</title><rect x="469.1" y="1763.0" width="3.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="472.1" y="1774.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 4.18%)</title><rect x="472.9" y="1763.0" width="49.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="475.9" y="1774.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="522.2" y="1763.0" width="3.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="525.2" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.32%)</title><rect x="526.0" y="1763.0" width="3.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="529.0" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.32%)</title><rect x="529.8" y="1763.0" width="3.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="532.8" y="1774.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.96%)</title><rect x="533.6" y="1763.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="536.6" y="1774.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.64%)</title><rect x="545.0" y="1763.0" width="7.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="548.0" y="1774.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="552.6" y="1763.0" width="3.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="555.6" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.64%)</title><rect x="556.4" y="1811.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="559.4" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.64%)</title><rect x="556.4" y="1795.0" width="7.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="559.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.32%)</title><rect x="564.0" y="1843.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="564.0" y="1827.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="567.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="564.0" y="1811.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="567.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="564.0" y="1795.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="567.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.96%)</title><rect x="567.7" y="1875.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="570.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.96%)</title><rect x="567.7" y="1859.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="570.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="575.3" y="1843.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="578.3" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.32%)</title><rect x="575.3" y="1827.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="578.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (2 samples, 0.64%)</title><rect x="579.1" y="1875.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (2 samples, 0.64%)</title><rect x="579.1" y="1859.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/2090071516.get$Lambda (2 samples, 0.64%)</title><rect x="579.1" y="1843.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="582.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$265/2090071516.&lt;init&gt; (2 samples, 0.64%)</title><rect x="579.1" y="1827.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.64%)</title><rect x="586.7" y="1875.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="589.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="590.5" y="1859.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.5" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="590.5" y="1843.0" width="3.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="593.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.32%)</title><rect x="594.3" y="1875.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="597.3" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.93%)</title><rect x="598.1" y="1907.0" width="22.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="601.1" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.64%)</title><rect x="613.3" y="1891.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="616.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.64%)</title><rect x="613.3" y="1875.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/1631839169.accept (2 samples, 0.64%)</title><rect x="613.3" y="1859.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.64%)</title><rect x="613.3" y="1843.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.3" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.64%)</title><rect x="613.3" y="1827.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="616.3" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.64%)</title><rect x="613.3" y="1811.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.25%)</title><rect x="620.9" y="1923.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.9" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.25%)</title><rect x="620.9" y="1907.0" width="26.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="623.9" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.25%)</title><rect x="620.9" y="1891.0" width="26.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.9" y="1902.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/608268685.accept (7 samples, 2.25%)</title><rect x="620.9" y="1875.0" width="26.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.9" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (7 samples, 2.25%)</title><rect x="620.9" y="1859.0" width="26.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="623.9" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/943700043.complete (7 samples, 2.25%)</title><rect x="620.9" y="1843.0" width="26.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.9" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (7 samples, 2.25%)</title><rect x="620.9" y="1827.0" width="26.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.9" y="1838.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 2.25%)</title><rect x="620.9" y="1811.0" width="26.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.9" y="1822.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.25%)</title><rect x="620.9" y="1795.0" width="26.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.9" y="1806.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.25%)</title><rect x="620.9" y="1779.0" width="26.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.9" y="1790.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 2.25%)</title><rect x="620.9" y="1763.0" width="26.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.9" y="1774.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 2.25%)</title><rect x="620.9" y="1747.0" width="26.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.9" y="1758.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.32%)</title><rect x="647.4" y="1923.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="650.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="647.4" y="1907.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="650.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.93%)</title><rect x="651.2" y="1987.0" width="22.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.2" y="1998.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.29%)</title><rect x="658.8" y="1971.0" width="15.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="661.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.64%)</title><rect x="674.0" y="2035.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.0" y="2046.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.32%)</title><rect x="674.0" y="2019.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="677.0" y="2030.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.32%)</title><rect x="674.0" y="2003.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="677.0" y="2014.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.32%)</title><rect x="674.0" y="1987.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="677.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.32%)</title><rect x="677.8" y="2019.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="680.8" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="677.8" y="2003.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="680.8" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.32%)</title><rect x="677.8" y="1987.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="680.8" y="1998.0"></text>
</g>
<g>
<title>start_thread (134 samples, 43.09%)</title><rect x="681.6" y="2035.0" width="508.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="684.6" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (134 samples, 43.09%)</title><rect x="681.6" y="2019.0" width="508.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="684.6" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 1.93%)</title><rect x="681.6" y="2003.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="684.6" y="2014.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 1.93%)</title><rect x="681.6" y="1987.0" width="22.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="684.6" y="1998.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.96%)</title><rect x="681.6" y="1971.0" width="11.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="684.6" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 0.96%)</title><rect x="681.6" y="1955.0" width="11.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="684.6" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.32%)</title><rect x="689.2" y="1939.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="692.2" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.32%)</title><rect x="689.2" y="1923.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="692.2" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.64%)</title><rect x="693.0" y="1971.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="696.0" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.64%)</title><rect x="693.0" y="1955.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="696.0" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.64%)</title><rect x="693.0" y="1939.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="696.0" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="700.5" y="1971.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="703.5" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="700.5" y="1955.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="703.5" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="700.5" y="1939.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.5" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.32%)</title><rect x="700.5" y="1923.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="703.5" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.32%)</title><rect x="700.5" y="1907.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="703.5" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.32%)</title><rect x="700.5" y="1891.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="703.5" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.32%)</title><rect x="700.5" y="1875.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="703.5" y="1886.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.32%)</title><rect x="700.5" y="1859.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.5" y="1870.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.32%)</title><rect x="700.5" y="1843.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="703.5" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (128 samples, 41.16%)</title><rect x="704.3" y="2003.0" width="485.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="707.3" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (128 samples, 41.16%)</title><rect x="704.3" y="1987.0" width="485.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="707.3" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (128 samples, 41.16%)</title><rect x="704.3" y="1971.0" width="485.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="707.3" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (128 samples, 41.16%)</title><rect x="704.3" y="1955.0" width="485.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="707.3" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (124 samples, 39.87%)</title><rect x="704.3" y="1939.0" width="470.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="707.3" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (124 samples, 39.87%)</title><rect x="704.3" y="1923.0" width="470.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="707.3" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 16.40%)</title><rect x="704.3" y="1907.0" width="193.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="707.3" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.32%)</title><rect x="704.3" y="1891.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="707.3" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.32%)</title><rect x="704.3" y="1875.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="707.3" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.64%)</title><rect x="708.1" y="1891.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="711.1" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.64%)</title><rect x="708.1" y="1875.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="711.1" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.32%)</title><rect x="708.1" y="1859.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="711.1" y="1870.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.32%)</title><rect x="708.1" y="1843.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="711.1" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.32%)</title><rect x="711.9" y="1859.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="714.9" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.32%)</title><rect x="711.9" y="1843.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="714.9" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.61%)</title><rect x="715.7" y="1891.0" width="19.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="718.7" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.61%)</title><rect x="715.7" y="1875.0" width="19.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="718.7" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.32%)</title><rect x="715.7" y="1859.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="718.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.96%)</title><rect x="719.5" y="1859.0" width="11.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="722.5" y="1870.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.32%)</title><rect x="730.9" y="1859.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="733.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.64%)</title><rect x="734.7" y="1891.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="737.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.64%)</title><rect x="734.7" y="1875.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.32%)</title><rect x="734.7" y="1859.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.32%)</title><rect x="738.5" y="1859.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="741.5" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.32%)</title><rect x="738.5" y="1843.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 13.18%)</title><rect x="742.3" y="1891.0" width="155.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.3" y="1902.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.32%)</title><rect x="742.3" y="1875.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="745.3" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.32%)</title><rect x="746.1" y="1875.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="749.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.96%)</title><rect x="749.9" y="1875.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="752.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="753.7" y="1859.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="756.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.32%)</title><rect x="757.5" y="1859.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="760.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.96%)</title><rect x="761.3" y="1875.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="764.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.32%)</title><rect x="768.8" y="1859.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="771.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="768.8" y="1843.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.29%)</title><rect x="772.6" y="1875.0" width="15.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="775.6" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.32%)</title><rect x="776.4" y="1859.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.4" y="1870.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.32%)</title><rect x="776.4" y="1843.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="779.4" y="1854.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.32%)</title><rect x="780.2" y="1859.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.2" y="1870.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.32%)</title><rect x="784.0" y="1859.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="787.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.25%)</title><rect x="787.8" y="1875.0" width="26.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="790.8" y="1886.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.64%)</title><rect x="803.0" y="1859.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="806.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="806.8" y="1843.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="809.8" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.32%)</title><rect x="810.6" y="1859.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="813.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.96%)</title><rect x="814.4" y="1875.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="817.4" y="1886.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (2 samples, 0.64%)</title><rect x="818.2" y="1859.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="821.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.64%)</title><rect x="825.8" y="1875.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="828.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.64%)</title><rect x="833.3" y="1875.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="836.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.32%)</title><rect x="837.1" y="1859.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="840.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.32%)</title><rect x="840.9" y="1875.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="843.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.57%)</title><rect x="844.7" y="1875.0" width="30.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.7" y="1886.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 2.57%)</title><rect x="844.7" y="1859.0" width="30.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="847.7" y="1870.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 2.57%)</title><rect x="844.7" y="1843.0" width="30.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.7" y="1854.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.64%)</title><rect x="844.7" y="1827.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.7" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.29%)</title><rect x="852.3" y="1827.0" width="15.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="855.3" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="863.7" y="1811.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.64%)</title><rect x="867.5" y="1827.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.32%)</title><rect x="875.1" y="1875.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="878.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.64%)</title><rect x="878.9" y="1875.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.9" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.96%)</title><rect x="886.5" y="1875.0" width="11.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.5" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (68 samples, 21.86%)</title><rect x="897.8" y="1907.0" width="258.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.8" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.32%)</title><rect x="897.8" y="1891.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="900.8" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.32%)</title><rect x="897.8" y="1875.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="900.8" y="1886.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.32%)</title><rect x="897.8" y="1859.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.8" y="1870.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.32%)</title><rect x="897.8" y="1843.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.8" y="1854.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.32%)</title><rect x="897.8" y="1827.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="900.8" y="1838.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.32%)</title><rect x="901.6" y="1891.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.32%)</title><rect x="901.6" y="1875.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="904.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (60 samples, 19.29%)</title><rect x="905.4" y="1891.0" width="227.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.4" y="1902.0">PhaseIdealLoop::build_and_opti..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.64%)</title><rect x="905.4" y="1875.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.64%)</title><rect x="905.4" y="1859.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="908.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (56 samples, 18.01%)</title><rect x="913.0" y="1875.0" width="212.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="916.0" y="1886.0">PhaseIdealLoop::build_loop_l..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (54 samples, 17.36%)</title><rect x="920.6" y="1859.0" width="204.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.6" y="1870.0">PhaseIdealLoop::build_loop_..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (53 samples, 17.04%)</title><rect x="924.4" y="1843.0" width="201.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.4" y="1854.0">PhaseIdealLoop::get_late_c..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.64%)</title><rect x="1087.6" y="1827.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="1091.4" y="1811.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 2.25%)</title><rect x="1095.1" y="1827.0" width="26.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.1" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="1121.7" y="1827.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.64%)</title><rect x="1125.5" y="1875.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.32%)</title><rect x="1129.3" y="1859.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 1.93%)</title><rect x="1133.1" y="1891.0" width="22.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.1" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.93%)</title><rect x="1133.1" y="1875.0" width="22.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="1886.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1133.1" y="1859.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.1" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.32%)</title><rect x="1136.9" y="1859.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.9" y="1870.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.32%)</title><rect x="1136.9" y="1843.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.64%)</title><rect x="1140.7" y="1859.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.7" y="1870.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1148.3" y="1859.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1148.3" y="1843.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.3" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1152.1" y="1859.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1152.1" y="1843.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="1854.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.32%)</title><rect x="1152.1" y="1827.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.32%)</title><rect x="1152.1" y="1811.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="1822.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.32%)</title><rect x="1152.1" y="1795.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.32%)</title><rect x="1152.1" y="1779.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="1790.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1152.1" y="1763.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="1774.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.29%)</title><rect x="1155.9" y="1907.0" width="15.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.9" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.29%)</title><rect x="1155.9" y="1891.0" width="15.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.9" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.29%)</title><rect x="1155.9" y="1875.0" width="15.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.9" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.29%)</title><rect x="1155.9" y="1859.0" width="15.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.9" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.29%)</title><rect x="1155.9" y="1843.0" width="15.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.9" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.29%)</title><rect x="1155.9" y="1827.0" width="15.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.9" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.29%)</title><rect x="1155.9" y="1811.0" width="15.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.9" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.29%)</title><rect x="1155.9" y="1795.0" width="15.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.9" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.29%)</title><rect x="1155.9" y="1779.0" width="15.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.9" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.29%)</title><rect x="1155.9" y="1763.0" width="15.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.9" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.29%)</title><rect x="1155.9" y="1747.0" width="15.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.9" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.29%)</title><rect x="1155.9" y="1731.0" width="15.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.9" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1155.9" y="1715.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.9" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1155.9" y="1699.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.9" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1155.9" y="1683.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1155.9" y="1667.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1155.9" y="1651.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1155.9" y="1635.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.9" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1155.9" y="1619.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.9" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1155.9" y="1603.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.9" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1155.9" y="1587.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1155.9" y="1571.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1155.9" y="1555.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1155.9" y="1539.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.9" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1155.9" y="1523.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.9" y="1534.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1155.9" y="1507.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="1518.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.32%)</title><rect x="1155.9" y="1491.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.9" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.32%)</title><rect x="1155.9" y="1475.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.9" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.32%)</title><rect x="1155.9" y="1459.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.9" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1155.9" y="1443.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.9" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1155.9" y="1427.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.9" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1155.9" y="1411.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.9" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1155.9" y="1395.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.9" y="1406.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.32%)</title><rect x="1155.9" y="1379.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.9" y="1390.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.32%)</title><rect x="1155.9" y="1363.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.9" y="1374.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="1155.9" y="1347.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.32%)</title><rect x="1155.9" y="1331.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.9" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.32%)</title><rect x="1155.9" y="1315.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.9" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1159.6" y="1523.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.6" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1159.6" y="1507.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.6" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1159.6" y="1491.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1159.6" y="1475.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1159.6" y="1459.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1159.6" y="1443.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1159.6" y="1427.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1159.6" y="1411.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1159.6" y="1395.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1159.6" y="1379.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1159.6" y="1363.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1159.6" y="1347.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1159.6" y="1331.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1159.6" y="1315.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1159.6" y="1299.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1159.6" y="1283.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1159.6" y="1267.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1159.6" y="1251.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1159.6" y="1235.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1159.6" y="1219.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1159.6" y="1203.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1159.6" y="1187.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1159.6" y="1171.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1159.6" y="1155.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.6" y="1166.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1159.6" y="1139.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="1150.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1159.6" y="1123.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.6" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.32%)</title><rect x="1159.6" y="1107.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.32%)</title><rect x="1159.6" y="1091.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.32%)</title><rect x="1159.6" y="1075.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1159.6" y="1059.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1159.6" y="1043.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1159.6" y="1027.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.32%)</title><rect x="1159.6" y="1011.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="1022.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.32%)</title><rect x="1159.6" y="995.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.6" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1159.6" y="979.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1159.6" y="963.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.32%)</title><rect x="1159.6" y="947.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.32%)</title><rect x="1159.6" y="931.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="942.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1159.6" y="915.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="926.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.32%)</title><rect x="1159.6" y="899.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="910.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.32%)</title><rect x="1159.6" y="883.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.4" y="1715.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.4" y="1699.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.4" y="1683.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.4" y="1667.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.4" y="1651.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.4" y="1635.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.4" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.4" y="1619.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.4" y="1603.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.4" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.4" y="1587.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.4" y="1571.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.4" y="1555.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.4" y="1539.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.4" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.4" y="1523.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.4" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.4" y="1507.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.4" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.4" y="1491.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.4" y="1475.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.4" y="1459.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.4" y="1443.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.4" y="1427.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.4" y="1411.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.4" y="1395.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.4" y="1379.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.4" y="1363.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.4" y="1347.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.4" y="1331.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.4" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.4" y="1315.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.4" y="1299.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.4" y="1283.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.4" y="1267.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.4" y="1251.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.4" y="1235.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.4" y="1219.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.4" y="1203.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.4" y="1187.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.4" y="1171.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.4" y="1155.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.4" y="1139.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.4" y="1123.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.4" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.4" y="1107.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.4" y="1091.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.4" y="1075.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.4" y="1059.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.4" y="1043.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.4" y="1027.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.4" y="1011.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.4" y="995.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.4" y="979.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.4" y="963.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.4" y="947.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.4" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.4" y="931.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.4" y="915.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.4" y="899.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.4" y="883.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.4" y="867.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.4" y="851.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.32%)</title><rect x="1163.4" y="835.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.4" y="846.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.32%)</title><rect x="1163.4" y="819.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.4" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="1163.4" y="803.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.32%)</title><rect x="1163.4" y="787.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.32%)</title><rect x="1163.4" y="771.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.32%)</title><rect x="1167.2" y="1331.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.2" y="1342.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.32%)</title><rect x="1167.2" y="1315.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.2" y="1326.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.32%)</title><rect x="1167.2" y="1299.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="1310.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1167.2" y="1283.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.2" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.32%)</title><rect x="1167.2" y="1267.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.2" y="1278.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.32%)</title><rect x="1167.2" y="1251.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.2" y="1262.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.32%)</title><rect x="1171.0" y="1907.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="1918.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.32%)</title><rect x="1171.0" y="1891.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="1902.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.32%)</title><rect x="1171.0" y="1875.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="1886.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.29%)</title><rect x="1174.8" y="1939.0" width="15.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.29%)</title><rect x="1174.8" y="1923.0" width="15.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.8" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.29%)</title><rect x="1174.8" y="1907.0" width="15.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.96%)</title><rect x="1174.8" y="1891.0" width="11.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.64%)</title><rect x="1174.8" y="1875.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.8" y="1886.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.64%)</title><rect x="1174.8" y="1859.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="1870.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op0(LIR_Op0*) (1 samples, 0.32%)</title><rect x="1174.8" y="1843.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="1854.0"></text>
</g>
<g>
<title>LIR_Assembler::check_icache() (1 samples, 0.32%)</title><rect x="1174.8" y="1827.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="1838.0"></text>
</g>
<g>
<title>C1_MacroAssembler::inline_cache_check(RegisterImpl*, RegisterImpl*) (1 samples, 0.32%)</title><rect x="1174.8" y="1811.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="1822.0"></text>
</g>
<g>
<title>MacroAssembler::jump_cc(Assembler::Condition, AddressLiteral) (1 samples, 0.32%)</title><rect x="1174.8" y="1795.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="1806.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.32%)</title><rect x="1174.8" y="1779.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="1790.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.32%)</title><rect x="1178.6" y="1843.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="1854.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.32%)</title><rect x="1178.6" y="1827.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="1838.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.32%)</title><rect x="1178.6" y="1811.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="1822.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.32%)</title><rect x="1178.6" y="1795.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="1806.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.32%)</title><rect x="1182.4" y="1875.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.32%)</title><rect x="1182.4" y="1859.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="1870.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.32%)</title><rect x="1182.4" y="1843.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="1854.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.32%)</title><rect x="1182.4" y="1827.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.4" y="1838.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.32%)</title><rect x="1182.4" y="1811.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.4" y="1822.0"></text>
</g>
<g>
<title>Compilation::initialize() (1 samples, 0.32%)</title><rect x="1186.2" y="1891.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::DebugInformationRecorder(OopRecorder*) (1 samples, 0.32%)</title><rect x="1186.2" y="1875.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="1886.0"></text>
</g>
</g>
</svg>
