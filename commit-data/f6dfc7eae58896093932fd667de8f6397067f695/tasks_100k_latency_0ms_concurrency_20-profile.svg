<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (191 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.52%)</title><rect x="10.0" y="915.0" width="6.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.52%)</title><rect x="10.0" y="899.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.222.b10-1.el7_7.x86_64/jre/lib/amd64/server/libjvm.so (1 samples, 0.52%)</title><rect x="10.0" y="883.0" width="6.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.52%)</title><rect x="10.0" y="867.0" width="6.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.52%)</title><rect x="10.0" y="851.0" width="6.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (37 samples, 19.37%)</title><rect x="16.2" y="915.0" width="228.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.2" y="926.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (37 samples, 19.37%)</title><rect x="16.2" y="899.0" width="228.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.2" y="910.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.52%)</title><rect x="16.2" y="883.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.52%)</title><rect x="16.2" y="867.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1899230472.accept (1 samples, 0.52%)</title><rect x="16.2" y="851.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.52%)</title><rect x="16.2" y="835.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.52%)</title><rect x="16.2" y="819.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.52%)</title><rect x="16.2" y="803.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 1.05%)</title><rect x="22.4" y="883.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 1.05%)</title><rect x="22.4" y="867.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.52%)</title><rect x="22.4" y="851.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.52%)</title><rect x="28.5" y="851.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.52%)</title><rect x="28.5" y="835.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 9.95%)</title><rect x="34.7" y="883.0" width="117.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.7" y="894.0">java/lang/Iter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/95320709.accept (19 samples, 9.95%)</title><rect x="34.7" y="867.0" width="117.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.7" y="878.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 9.95%)</title><rect x="34.7" y="851.0" width="117.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.7" y="862.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (11 samples, 5.76%)</title><rect x="34.7" y="835.0" width="68.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.7" y="846.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (11 samples, 5.76%)</title><rect x="34.7" y="819.0" width="68.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.7" y="830.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (11 samples, 5.76%)</title><rect x="34.7" y="803.0" width="68.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.7" y="814.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (11 samples, 5.76%)</title><rect x="34.7" y="787.0" width="68.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.7" y="798.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (8 samples, 4.19%)</title><rect x="53.2" y="771.0" width="49.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.2" y="782.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (8 samples, 4.19%)</title><rect x="53.2" y="755.0" width="49.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.2" y="766.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (6 samples, 3.14%)</title><rect x="65.6" y="739.0" width="37.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.6" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.52%)</title><rect x="65.6" y="723.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.52%)</title><rect x="65.6" y="707.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.52%)</title><rect x="65.6" y="691.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.62%)</title><rect x="71.8" y="723.0" width="30.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.8" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.62%)</title><rect x="71.8" y="707.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.8" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.62%)</title><rect x="71.8" y="691.0" width="30.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.8" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.62%)</title><rect x="71.8" y="675.0" width="30.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.8" y="686.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (5 samples, 2.62%)</title><rect x="71.8" y="659.0" width="30.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.8" y="670.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 2.09%)</title><rect x="71.8" y="643.0" width="24.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="74.8" y="654.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.57%)</title><rect x="71.8" y="627.0" width="18.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="74.8" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.52%)</title><rect x="90.3" y="627.0" width="6.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="93.3" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.52%)</title><rect x="96.5" y="643.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="99.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.52%)</title><rect x="102.7" y="835.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.52%)</title><rect x="102.7" y="819.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (7 samples, 3.66%)</title><rect x="108.8" y="835.0" width="43.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.8" y="846.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 3.66%)</title><rect x="108.8" y="819.0" width="43.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.8" y="830.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 3.14%)</title><rect x="108.8" y="803.0" width="37.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="111.8" y="814.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 2.09%)</title><rect x="115.0" y="787.0" width="24.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.0" y="798.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 2.09%)</title><rect x="115.0" y="771.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.0" y="782.0">j..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.05%)</title><rect x="127.4" y="755.0" width="12.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="130.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.52%)</title><rect x="139.7" y="787.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.7" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="145.9" y="803.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="148.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 7.33%)</title><rect x="152.1" y="883.0" width="86.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.1" y="894.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 7.33%)</title><rect x="152.1" y="867.0" width="86.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.1" y="878.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 3.14%)</title><rect x="152.1" y="851.0" width="37.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.1" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.52%)</title><rect x="152.1" y="835.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.52%)</title><rect x="152.1" y="819.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.52%)</title><rect x="152.1" y="803.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.52%)</title><rect x="152.1" y="787.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="155.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.52%)</title><rect x="152.1" y="771.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.52%)</title><rect x="152.1" y="755.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.52%)</title><rect x="152.1" y="739.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.52%)</title><rect x="152.1" y="723.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="152.1" y="707.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="152.1" y="691.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="155.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="152.1" y="675.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.52%)</title><rect x="152.1" y="659.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.62%)</title><rect x="158.3" y="835.0" width="30.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="161.3" y="846.0">or..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.52%)</title><rect x="158.3" y="819.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1500 (1 samples, 0.52%)</title><rect x="164.5" y="819.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.57%)</title><rect x="170.6" y="819.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.05%)</title><rect x="170.6" y="803.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.05%)</title><rect x="170.6" y="787.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.05%)</title><rect x="170.6" y="771.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.52%)</title><rect x="176.8" y="755.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.52%)</title><rect x="176.8" y="739.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.52%)</title><rect x="176.8" y="723.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.52%)</title><rect x="176.8" y="707.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.52%)</title><rect x="176.8" y="691.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.52%)</title><rect x="176.8" y="675.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.52%)</title><rect x="176.8" y="659.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.52%)</title><rect x="183.0" y="803.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.52%)</title><rect x="183.0" y="787.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.52%)</title><rect x="183.0" y="771.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.52%)</title><rect x="183.0" y="755.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 2.62%)</title><rect x="189.2" y="851.0" width="30.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.2" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 1.57%)</title><rect x="189.2" y="835.0" width="18.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.52%)</title><rect x="189.2" y="819.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.52%)</title><rect x="189.2" y="803.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.52%)</title><rect x="189.2" y="787.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.52%)</title><rect x="189.2" y="771.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.52%)</title><rect x="189.2" y="755.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.52%)</title><rect x="189.2" y="739.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.52%)</title><rect x="189.2" y="723.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.52%)</title><rect x="189.2" y="707.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.52%)</title><rect x="189.2" y="691.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.2" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="189.2" y="675.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="192.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 1.05%)</title><rect x="195.3" y="819.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.52%)</title><rect x="195.3" y="803.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.52%)</title><rect x="195.3" y="787.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.52%)</title><rect x="195.3" y="771.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.52%)</title><rect x="195.3" y="755.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.52%)</title><rect x="195.3" y="739.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.52%)</title><rect x="195.3" y="723.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.52%)</title><rect x="195.3" y="707.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.52%)</title><rect x="195.3" y="691.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.52%)</title><rect x="195.3" y="675.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.52%)</title><rect x="201.5" y="803.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.52%)</title><rect x="201.5" y="787.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="204.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.52%)</title><rect x="201.5" y="771.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.52%)</title><rect x="201.5" y="755.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.5" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="201.5" y="739.0" width="6.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="204.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 1.05%)</title><rect x="207.7" y="835.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (2 samples, 1.05%)</title><rect x="207.7" y="819.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.7" y="830.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.52%)</title><rect x="207.7" y="803.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="210.7" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.52%)</title><rect x="207.7" y="787.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="210.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.52%)</title><rect x="213.9" y="803.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.9" y="814.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.52%)</title><rect x="213.9" y="787.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="216.9" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.52%)</title><rect x="213.9" y="771.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="216.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.05%)</title><rect x="220.1" y="851.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.52%)</title><rect x="220.1" y="835.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.52%)</title><rect x="220.1" y="819.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="220.1" y="803.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="220.1" y="787.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.52%)</title><rect x="220.1" y="771.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.1" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="220.1" y="755.0" width="6.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="223.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.52%)</title><rect x="226.2" y="835.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.52%)</title><rect x="226.2" y="819.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="226.2" y="803.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="226.2" y="787.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.52%)</title><rect x="226.2" y="771.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.52%)</title><rect x="226.2" y="755.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.52%)</title><rect x="226.2" y="739.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.52%)</title><rect x="226.2" y="723.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.52%)</title><rect x="226.2" y="707.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.52%)</title><rect x="226.2" y="691.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.52%)</title><rect x="226.2" y="675.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.52%)</title><rect x="226.2" y="659.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.52%)</title><rect x="226.2" y="643.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.validate (1 samples, 0.52%)</title><rect x="226.2" y="627.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.validate (1 samples, 0.52%)</title><rect x="226.2" y="611.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.52%)</title><rect x="232.4" y="851.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.52%)</title><rect x="232.4" y="835.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.52%)</title><rect x="232.4" y="819.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.52%)</title><rect x="232.4" y="803.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.4" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.52%)</title><rect x="238.6" y="883.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="241.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (72 samples, 37.70%)</title><rect x="244.8" y="915.0" width="444.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.8" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (72 samples, 37.70%)</title><rect x="244.8" y="899.0" width="444.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.8" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (72 samples, 37.70%)</title><rect x="244.8" y="883.0" width="444.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.8" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1121035579.run (53 samples, 27.75%)</title><rect x="244.8" y="867.0" width="327.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.8" y="878.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (53 samples, 27.75%)</title><rect x="244.8" y="851.0" width="327.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.8" y="862.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (53 samples, 27.75%)</title><rect x="244.8" y="835.0" width="327.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.8" y="846.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (53 samples, 27.75%)</title><rect x="244.8" y="819.0" width="327.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.8" y="830.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (18 samples, 9.42%)</title><rect x="250.9" y="803.0" width="111.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.9" y="814.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (18 samples, 9.42%)</title><rect x="250.9" y="787.0" width="111.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.9" y="798.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (18 samples, 9.42%)</title><rect x="250.9" y="771.0" width="111.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.9" y="782.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (18 samples, 9.42%)</title><rect x="250.9" y="755.0" width="111.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.9" y="766.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (18 samples, 9.42%)</title><rect x="250.9" y="739.0" width="111.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.9" y="750.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (18 samples, 9.42%)</title><rect x="250.9" y="723.0" width="111.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.9" y="734.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 3.66%)</title><rect x="250.9" y="707.0" width="43.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.9" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 3.14%)</title><rect x="250.9" y="691.0" width="37.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.9" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 3.14%)</title><rect x="250.9" y="675.0" width="37.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.9" y="686.0">com..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="269.5" y="659.0" width="6.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="272.5" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="275.7" y="659.0" width="6.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="278.7" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="275.7" y="643.0" width="6.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="278.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.52%)</title><rect x="281.8" y="659.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="281.8" y="643.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.52%)</title><rect x="281.8" y="627.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.52%)</title><rect x="281.8" y="611.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.52%)</title><rect x="288.0" y="691.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.52%)</title><rect x="288.0" y="675.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.52%)</title><rect x="288.0" y="659.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.52%)</title><rect x="288.0" y="643.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.52%)</title><rect x="288.0" y="627.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 4.71%)</title><rect x="294.2" y="707.0" width="55.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.2" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.52%)</title><rect x="294.2" y="691.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.52%)</title><rect x="294.2" y="675.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.52%)</title><rect x="294.2" y="659.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.52%)</title><rect x="294.2" y="643.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="297.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 1.05%)</title><rect x="300.4" y="691.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.05%)</title><rect x="300.4" y="675.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.4" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="300.4" y="659.0" width="6.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="303.4" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="300.4" y="643.0" width="6.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="303.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.52%)</title><rect x="306.5" y="659.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.52%)</title><rect x="312.7" y="691.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.52%)</title><rect x="312.7" y="675.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.52%)</title><rect x="312.7" y="659.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.52%)</title><rect x="312.7" y="643.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.52%)</title><rect x="312.7" y="627.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.62%)</title><rect x="318.9" y="691.0" width="30.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.9" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.05%)</title><rect x="318.9" y="675.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.52%)</title><rect x="318.9" y="659.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.52%)</title><rect x="318.9" y="643.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.52%)</title><rect x="318.9" y="627.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.52%)</title><rect x="325.1" y="659.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.57%)</title><rect x="331.3" y="675.0" width="18.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.57%)</title><rect x="331.3" y="659.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.57%)</title><rect x="331.3" y="643.0" width="18.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.52%)</title><rect x="337.4" y="627.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.52%)</title><rect x="343.6" y="627.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.52%)</title><rect x="343.6" y="611.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="346.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.52%)</title><rect x="343.6" y="595.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="346.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.52%)</title><rect x="343.6" y="579.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.6" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.52%)</title><rect x="343.6" y="563.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.05%)</title><rect x="349.8" y="707.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="352.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.05%)</title><rect x="349.8" y="691.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.05%)</title><rect x="349.8" y="675.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.05%)</title><rect x="349.8" y="659.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.05%)</title><rect x="349.8" y="643.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (34 samples, 17.80%)</title><rect x="362.1" y="803.0" width="210.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.1" y="814.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (7 samples, 3.66%)</title><rect x="362.1" y="787.0" width="43.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.1" y="798.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 3.14%)</title><rect x="368.3" y="771.0" width="37.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.3" y="782.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.09%)</title><rect x="380.7" y="755.0" width="24.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.7" y="766.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.52%)</title><rect x="380.7" y="739.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.52%)</title><rect x="380.7" y="723.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="383.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.52%)</title><rect x="380.7" y="707.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="380.7" y="691.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.52%)</title><rect x="380.7" y="675.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.52%)</title><rect x="380.7" y="659.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="383.7" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.57%)</title><rect x="386.9" y="739.0" width="18.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.05%)</title><rect x="393.0" y="723.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.05%)</title><rect x="393.0" y="707.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 7.85%)</title><rect x="405.4" y="787.0" width="92.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.4" y="798.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 7.85%)</title><rect x="405.4" y="771.0" width="92.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="408.4" y="782.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.62%)</title><rect x="411.6" y="755.0" width="30.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.6" y="766.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.62%)</title><rect x="411.6" y="739.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.6" y="750.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.57%)</title><rect x="423.9" y="723.0" width="18.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="426.9" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.57%)</title><rect x="423.9" y="707.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.9" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.05%)</title><rect x="430.1" y="691.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.1" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.05%)</title><rect x="430.1" y="675.0" width="12.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="433.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.recordOffset (1 samples, 0.52%)</title><rect x="442.5" y="755.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.topicPartition (1 samples, 0.52%)</title><rect x="448.6" y="755.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="451.6" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 3.66%)</title><rect x="454.8" y="755.0" width="43.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.8" y="766.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 3.66%)</title><rect x="454.8" y="739.0" width="43.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.8" y="750.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.66%)</title><rect x="454.8" y="723.0" width="43.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.8" y="734.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 3.66%)</title><rect x="454.8" y="707.0" width="43.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.8" y="718.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.57%)</title><rect x="479.5" y="691.0" width="18.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.52%)</title><rect x="479.5" y="675.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.5" y="686.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 1.05%)</title><rect x="485.7" y="675.0" width="12.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="488.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (8 samples, 4.19%)</title><rect x="498.1" y="787.0" width="49.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="501.1" y="798.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (8 samples, 4.19%)</title><rect x="498.1" y="771.0" width="49.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.1" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1465052209.process (4 samples, 2.09%)</title><rect x="504.2" y="755.0" width="24.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.2" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.57%)</title><rect x="510.4" y="739.0" width="18.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.05%)</title><rect x="510.4" y="723.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.4" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.52%)</title><rect x="510.4" y="707.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="516.6" y="707.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.52%)</title><rect x="516.6" y="691.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.52%)</title><rect x="516.6" y="675.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="516.6" y="659.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.52%)</title><rect x="516.6" y="643.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.6" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.52%)</title><rect x="516.6" y="627.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.6" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="516.6" y="611.0" width="6.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="519.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.getId (1 samples, 0.52%)</title><rect x="522.8" y="723.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$273/583973464.complete (1 samples, 0.52%)</title><rect x="529.0" y="755.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.0" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.52%)</title><rect x="535.1" y="755.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="538.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.52%)</title><rect x="535.1" y="739.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.1" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="535.1" y="723.0" width="6.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="538.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.52%)</title><rect x="541.3" y="755.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.3" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.52%)</title><rect x="541.3" y="739.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.3" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.52%)</title><rect x="541.3" y="723.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.52%)</title><rect x="547.5" y="787.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="550.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.52%)</title><rect x="547.5" y="771.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="550.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2127755935.linkToTargetMethod (1 samples, 0.52%)</title><rect x="553.7" y="787.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="556.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.52%)</title><rect x="553.7" y="771.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/981414350.get$Lambda (1 samples, 0.52%)</title><rect x="553.7" y="755.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.05%)</title><rect x="559.8" y="787.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.05%)</title><rect x="559.8" y="771.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.05%)</title><rect x="559.8" y="755.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/981414350.accept (2 samples, 1.05%)</title><rect x="559.8" y="739.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 1.05%)</title><rect x="559.8" y="723.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="562.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 1.05%)</title><rect x="559.8" y="707.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.8" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.05%)</title><rect x="559.8" y="691.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.8" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 1.05%)</title><rect x="559.8" y="675.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.52%)</title><rect x="566.0" y="659.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="569.0" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::oop_extra_words() (1 samples, 0.52%)</title><rect x="566.0" y="643.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="569.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.52%)</title><rect x="572.2" y="867.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="572.2" y="851.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="575.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.52%)</title><rect x="572.2" y="835.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.52%)</title><rect x="572.2" y="819.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="575.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 9.42%)</title><rect x="578.4" y="867.0" width="111.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="581.4" y="878.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 9.42%)</title><rect x="578.4" y="851.0" width="111.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.4" y="862.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 8.38%)</title><rect x="578.4" y="835.0" width="98.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.4" y="846.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.52%)</title><rect x="578.4" y="819.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="581.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.52%)</title><rect x="584.6" y="819.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="584.6" y="803.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="587.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.52%)</title><rect x="584.6" y="787.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="587.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.52%)</title><rect x="584.6" y="771.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="587.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 7.33%)</title><rect x="590.7" y="819.0" width="86.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.7" y="830.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (14 samples, 7.33%)</title><rect x="590.7" y="803.0" width="86.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.7" y="814.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Park (14 samples, 7.33%)</title><rect x="590.7" y="787.0" width="86.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="593.7" y="798.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.52%)</title><rect x="596.9" y="771.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="599.9" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.09%)</title><rect x="603.1" y="771.0" width="24.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="606.1" y="782.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (6 samples, 3.14%)</title><rect x="627.8" y="771.0" width="37.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="630.8" y="782.0">__p..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.52%)</title><rect x="664.9" y="771.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="667.9" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.52%)</title><rect x="671.0" y="771.0" width="6.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="674.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 1.05%)</title><rect x="677.2" y="835.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="680.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 1.05%)</title><rect x="677.2" y="819.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="680.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.52%)</title><rect x="677.2" y="803.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.52%)</title><rect x="683.4" y="803.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="686.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.52%)</title><rect x="683.4" y="787.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.52%)</title><rect x="683.4" y="771.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.4" y="782.0"></text>
</g>
<g>
<title>start_thread (81 samples, 42.41%)</title><rect x="689.6" y="915.0" width="500.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="692.6" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (81 samples, 42.41%)</title><rect x="689.6" y="899.0" width="500.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="692.6" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 4.71%)</title><rect x="689.6" y="883.0" width="55.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="692.6" y="894.0">GangW..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.52%)</title><rect x="689.6" y="867.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="692.6" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.52%)</title><rect x="689.6" y="851.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.6" y="862.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.52%)</title><rect x="689.6" y="835.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="692.6" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (8 samples, 4.19%)</title><rect x="695.8" y="867.0" width="49.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="698.8" y="878.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.66%)</title><rect x="695.8" y="851.0" width="43.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="698.8" y="862.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.57%)</title><rect x="701.9" y="835.0" width="18.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="704.9" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.05%)</title><rect x="708.1" y="819.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="711.1" y="830.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.57%)</title><rect x="720.5" y="835.0" width="18.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="723.5" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="739.0" y="851.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="742.0" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="739.0" y="835.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.0" y="846.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.52%)</title><rect x="739.0" y="819.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="742.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.52%)</title><rect x="739.0" y="803.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.0" y="814.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.52%)</title><rect x="739.0" y="787.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.0" y="798.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.52%)</title><rect x="739.0" y="771.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="742.0" y="782.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.52%)</title><rect x="739.0" y="755.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.0" y="766.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.52%)</title><rect x="739.0" y="739.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="742.0" y="750.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.52%)</title><rect x="739.0" y="723.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (72 samples, 37.70%)</title><rect x="745.2" y="883.0" width="444.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="748.2" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (72 samples, 37.70%)</title><rect x="745.2" y="867.0" width="444.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="748.2" y="878.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (72 samples, 37.70%)</title><rect x="745.2" y="851.0" width="444.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="748.2" y="862.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (69 samples, 36.13%)</title><rect x="745.2" y="835.0" width="426.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="748.2" y="846.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (69 samples, 36.13%)</title><rect x="745.2" y="819.0" width="426.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="748.2" y="830.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 20.42%)</title><rect x="745.2" y="803.0" width="240.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="748.2" y="814.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.52%)</title><rect x="745.2" y="787.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="748.2" y="798.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.52%)</title><rect x="745.2" y="771.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="748.2" y="782.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (2 samples, 1.05%)</title><rect x="751.4" y="787.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="754.4" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.05%)</title><rect x="763.7" y="787.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="766.7" y="798.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.52%)</title><rect x="763.7" y="771.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="766.7" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.52%)</title><rect x="769.9" y="771.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="772.9" y="782.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.52%)</title><rect x="769.9" y="755.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="772.9" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.52%)</title><rect x="769.9" y="739.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="772.9" y="750.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.52%)</title><rect x="769.9" y="723.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="772.9" y="734.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.52%)</title><rect x="769.9" y="707.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="772.9" y="718.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.52%)</title><rect x="776.1" y="787.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="779.1" y="798.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.52%)</title><rect x="776.1" y="771.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="779.1" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.05%)</title><rect x="782.3" y="787.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.05%)</title><rect x="782.3" y="771.0" width="12.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="785.3" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.52%)</title><rect x="788.4" y="755.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="791.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 16.23%)</title><rect x="794.6" y="787.0" width="191.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="797.6" y="798.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.05%)</title><rect x="794.6" y="771.0" width="12.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="797.6" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.05%)</title><rect x="794.6" y="755.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.6" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.05%)</title><rect x="794.6" y="739.0" width="12.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="797.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.05%)</title><rect x="807.0" y="771.0" width="12.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="810.0" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.05%)</title><rect x="807.0" y="755.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="810.0" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="813.1" y="739.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="816.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.05%)</title><rect x="819.3" y="771.0" width="12.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="822.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 3.66%)</title><rect x="831.7" y="771.0" width="43.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.7" y="782.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.52%)</title><rect x="844.0" y="755.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="847.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.57%)</title><rect x="850.2" y="755.0" width="18.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="853.2" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.05%)</title><rect x="856.4" y="739.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.4" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="868.7" y="755.0" width="6.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="871.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 1.05%)</title><rect x="874.9" y="771.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.9" y="782.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.52%)</title><rect x="881.1" y="755.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="884.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (3 samples, 1.57%)</title><rect x="887.3" y="771.0" width="18.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="890.3" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 1.05%)</title><rect x="893.5" y="755.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.09%)</title><rect x="905.8" y="771.0" width="24.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="908.8" y="782.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.52%)</title><rect x="924.3" y="755.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.3" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.05%)</title><rect x="930.5" y="771.0" width="12.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.5" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="936.7" y="755.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.7" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.52%)</title><rect x="942.9" y="771.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.9" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.52%)</title><rect x="942.9" y="755.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="945.9" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.62%)</title><rect x="949.1" y="771.0" width="30.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.1" y="782.0">Ph..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.52%)</title><rect x="973.8" y="755.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.8" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="979.9" y="771.0" width="6.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="982.9" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 10.47%)</title><rect x="986.1" y="803.0" width="123.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.1" y="814.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.52%)</title><rect x="986.1" y="787.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="989.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 2.09%)</title><rect x="992.3" y="787.0" width="24.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.3" y="798.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 2.09%)</title><rect x="992.3" y="771.0" width="24.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.3" y="782.0">C..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.52%)</title><rect x="992.3" y="755.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.52%)</title><rect x="992.3" y="739.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="995.3" y="750.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray() (1 samples, 0.52%)</title><rect x="992.3" y="723.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 1.57%)</title><rect x="998.5" y="755.0" width="18.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 1.57%)</title><rect x="998.5" y="739.0" width="18.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="723.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="707.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="691.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="675.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="659.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="643.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="627.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="611.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="595.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="579.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="563.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="547.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="531.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="515.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="499.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="483.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="467.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="451.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="435.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="419.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1001.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="403.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="387.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="371.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="355.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.5" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="339.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="323.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.5" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="307.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.5" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="291.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="275.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.5" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="259.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.5" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="243.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.5" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="227.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.5" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="211.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.5" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="195.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.5" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="179.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.5" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="163.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.5" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="147.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.5" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="131.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.5" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="115.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.5" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="99.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.5" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="83.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.5" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="998.5" y="67.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.5" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.52%)</title><rect x="998.5" y="51.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.5" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.52%)</title><rect x="998.5" y="35.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.5" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.05%)</title><rect x="1004.7" y="723.0" width="12.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.05%)</title><rect x="1004.7" y="707.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.05%)</title><rect x="1004.7" y="691.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 1.05%)</title><rect x="1004.7" y="675.0" width="12.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1007.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1004.7" y="659.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1004.7" y="643.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1004.7" y="627.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1004.7" y="611.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1004.7" y="595.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1004.7" y="579.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.7" y="590.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.52%)</title><rect x="1004.7" y="563.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="659.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="643.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="627.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="611.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="595.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="579.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="563.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="547.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1013.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="531.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="515.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="499.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="483.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="467.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1013.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="451.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="435.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="419.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="403.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="387.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1013.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="371.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="355.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="339.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="323.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="307.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="291.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="275.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1013.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="259.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="243.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="227.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="211.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="195.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="179.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="163.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="147.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="131.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="115.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="99.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1013.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="83.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.52%)</title><rect x="1010.8" y="67.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.8" y="78.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.52%)</title><rect x="1010.8" y="51.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.8" y="62.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 1.05%)</title><rect x="1017.0" y="787.0" width="12.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.0" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.52%)</title><rect x="1017.0" y="771.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.0" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.52%)</title><rect x="1023.2" y="771.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 4.19%)</title><rect x="1029.4" y="787.0" width="49.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.4" y="798.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.05%)</title><rect x="1029.4" y="771.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.57%)</title><rect x="1041.7" y="771.0" width="18.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.52%)</title><rect x="1047.9" y="755.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.9" y="766.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.52%)</title><rect x="1054.1" y="755.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.05%)</title><rect x="1060.3" y="771.0" width="12.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.05%)</title><rect x="1060.3" y="755.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.3" y="766.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.52%)</title><rect x="1066.4" y="739.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.4" y="750.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.52%)</title><rect x="1072.6" y="771.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.6" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.52%)</title><rect x="1078.8" y="787.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.8" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) [clone .constprop.238] (1 samples, 0.52%)</title><rect x="1078.8" y="771.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.8" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.57%)</title><rect x="1085.0" y="787.0" width="18.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.0" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.05%)</title><rect x="1091.2" y="771.0" width="12.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.2" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1097.3" y="755.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.3" y="766.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.52%)</title><rect x="1097.3" y="739.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.3" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.52%)</title><rect x="1103.5" y="787.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.5" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.52%)</title><rect x="1103.5" y="771.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.5" y="782.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1103.5" y="755.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.66%)</title><rect x="1109.7" y="803.0" width="43.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.7" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.66%)</title><rect x="1109.7" y="787.0" width="43.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.7" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.66%)</title><rect x="1109.7" y="771.0" width="43.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.7" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.66%)</title><rect x="1109.7" y="755.0" width="43.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.7" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.66%)</title><rect x="1109.7" y="739.0" width="43.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.7" y="750.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.62%)</title><rect x="1109.7" y="723.0" width="30.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.7" y="734.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.09%)</title><rect x="1109.7" y="707.0" width="24.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.7" y="718.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.09%)</title><rect x="1109.7" y="691.0" width="24.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.7" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.09%)</title><rect x="1109.7" y="675.0" width="24.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.7" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.09%)</title><rect x="1109.7" y="659.0" width="24.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.7" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.09%)</title><rect x="1109.7" y="643.0" width="24.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.7" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.09%)</title><rect x="1109.7" y="627.0" width="24.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.7" y="638.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.57%)</title><rect x="1109.7" y="611.0" width="18.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.57%)</title><rect x="1109.7" y="595.0" width="18.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.7" y="606.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.52%)</title><rect x="1109.7" y="579.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.7" y="590.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.52%)</title><rect x="1109.7" y="563.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.7" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.52%)</title><rect x="1109.7" y="547.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.7" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.52%)</title><rect x="1109.7" y="531.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.7" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.52%)</title><rect x="1109.7" y="515.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.7" y="526.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.52%)</title><rect x="1109.7" y="499.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.7" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="1109.7" y="483.0" width="6.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1112.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.05%)</title><rect x="1115.9" y="579.0" width="12.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.05%)</title><rect x="1115.9" y="563.0" width="12.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.05%)</title><rect x="1115.9" y="547.0" width="12.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.05%)</title><rect x="1115.9" y="531.0" width="12.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.05%)</title><rect x="1115.9" y="515.0" width="12.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.05%)</title><rect x="1115.9" y="499.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.05%)</title><rect x="1115.9" y="483.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.05%)</title><rect x="1115.9" y="467.0" width="12.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.05%)</title><rect x="1115.9" y="451.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.05%)</title><rect x="1115.9" y="435.0" width="12.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.05%)</title><rect x="1115.9" y="419.0" width="12.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.05%)</title><rect x="1115.9" y="403.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.05%)</title><rect x="1115.9" y="387.0" width="12.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.05%)</title><rect x="1115.9" y="371.0" width="12.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.05%)</title><rect x="1115.9" y="355.0" width="12.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1115.9" y="339.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1115.9" y="323.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1115.9" y="307.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1115.9" y="291.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1115.9" y="275.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1115.9" y="259.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1115.9" y="243.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.52%)</title><rect x="1115.9" y="227.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.9" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::vm_symbol_at(int) (1 samples, 0.52%)</title><rect x="1115.9" y="211.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1122.0" y="339.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.52%)</title><rect x="1122.0" y="323.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.0" y="334.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.52%)</title><rect x="1122.0" y="307.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.0" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1122.0" y="291.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.0" y="302.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1122.0" y="275.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.0" y="286.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.52%)</title><rect x="1122.0" y="259.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.0" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="243.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.0" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="227.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.0" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="211.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.0" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="195.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.0" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="179.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.0" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="163.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.0" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="147.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.0" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="131.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.0" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="115.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.0" y="126.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.52%)</title><rect x="1122.0" y="99.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.0" y="110.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1122.0" y="83.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.0" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1128.2" y="611.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.52%)</title><rect x="1128.2" y="595.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.52%)</title><rect x="1128.2" y="579.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.2" y="590.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.52%)</title><rect x="1128.2" y="563.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.2" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1128.2" y="547.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.2" y="558.0"></text>
</g>
<g>
<title>TypeNarrowKlass::make(TypePtr const*) (1 samples, 0.52%)</title><rect x="1128.2" y="531.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.2" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1134.4" y="707.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.4" y="718.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1134.4" y="691.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.4" y="702.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.52%)</title><rect x="1134.4" y="675.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.4" y="686.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.52%)</title><rect x="1134.4" y="659.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.4" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1134.4" y="643.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.4" y="654.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.52%)</title><rect x="1134.4" y="627.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 1.05%)</title><rect x="1140.6" y="723.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 1.05%)</title><rect x="1140.6" y="707.0" width="12.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.6" y="718.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (2 samples, 1.05%)</title><rect x="1140.6" y="691.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.6" y="702.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.52%)</title><rect x="1140.6" y="675.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.6" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1140.6" y="659.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.6" y="670.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1140.6" y="643.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.6" y="654.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.52%)</title><rect x="1140.6" y="627.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.6" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.52%)</title><rect x="1140.6" y="611.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.6" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.52%)</title><rect x="1140.6" y="595.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.6" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.52%)</title><rect x="1140.6" y="579.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.6" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1146.8" y="675.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.8" y="686.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1146.8" y="659.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.8" y="670.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1146.8" y="643.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.8" y="654.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 1.05%)</title><rect x="1152.9" y="803.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.9" y="814.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1152.9" y="787.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.9" y="798.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.52%)</title><rect x="1159.1" y="787.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="798.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.52%)</title><rect x="1165.3" y="803.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.3" y="814.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.52%)</title><rect x="1165.3" y="787.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="798.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.52%)</title><rect x="1165.3" y="771.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.57%)</title><rect x="1171.5" y="835.0" width="18.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.57%)</title><rect x="1171.5" y="819.0" width="18.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.5" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.57%)</title><rect x="1171.5" y="803.0" width="18.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.5" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.57%)</title><rect x="1171.5" y="787.0" width="18.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="798.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.52%)</title><rect x="1171.5" y="771.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.5" y="782.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.52%)</title><rect x="1171.5" y="755.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.5" y="766.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.52%)</title><rect x="1171.5" y="739.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.52%)</title><rect x="1171.5" y="723.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1171.5" y="707.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1171.5" y="691.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.52%)</title><rect x="1171.5" y="675.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.5" y="686.0"></text>
</g>
<g>
<title>If::visit(InstructionVisitor*) (1 samples, 0.52%)</title><rect x="1171.5" y="659.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.05%)</title><rect x="1177.6" y="771.0" width="12.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="782.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.05%)</title><rect x="1177.6" y="755.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 1.05%)</title><rect x="1177.6" y="739.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="750.0"></text>
</g>
<g>
<title>LinearScan::add_def(int, int, IntervalUseKind, BasicType) (1 samples, 0.52%)</title><rect x="1183.8" y="723.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
</g>
</svg>
