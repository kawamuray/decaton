<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (956 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (267 samples, 27.93%)</title><rect x="10.0" y="643.0" width="329.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="654.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (266 samples, 27.82%)</title><rect x="11.2" y="627.0" width="328.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="638.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="11.2" y="611.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.2" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="11.2" y="595.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.31%)</title><rect x="12.5" y="611.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.31%)</title><rect x="12.5" y="595.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/2051548139.accept (3 samples, 0.31%)</title><rect x="12.5" y="579.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.31%)</title><rect x="12.5" y="563.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.31%)</title><rect x="12.5" y="547.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.5" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.31%)</title><rect x="12.5" y="531.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.31%)</title><rect x="16.2" y="611.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.31%)</title><rect x="16.2" y="595.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.31%)</title><rect x="16.2" y="579.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.31%)</title><rect x="16.2" y="563.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="16.2" y="547.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.21%)</title><rect x="17.4" y="547.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="17.4" y="531.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="17.4" y="515.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.21%)</title><rect x="17.4" y="499.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.21%)</title><rect x="17.4" y="483.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.21%)</title><rect x="17.4" y="467.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.4" y="478.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.21%)</title><rect x="17.4" y="451.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="20.4" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.10%)</title><rect x="19.9" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="19.9" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.9" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (197 samples, 20.61%)</title><rect x="21.1" y="611.0" width="243.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.1" y="622.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/220865203.accept (188 samples, 19.67%)</title><rect x="21.1" y="595.0" width="232.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.1" y="606.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (188 samples, 19.67%)</title><rect x="21.1" y="579.0" width="232.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.1" y="590.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (159 samples, 16.63%)</title><rect x="21.1" y="563.0" width="196.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.1" y="574.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (159 samples, 16.63%)</title><rect x="21.1" y="547.0" width="196.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.1" y="558.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (159 samples, 16.63%)</title><rect x="21.1" y="531.0" width="196.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="542.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (159 samples, 16.63%)</title><rect x="21.1" y="515.0" width="196.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.1" y="526.0">java/util/concurrent/Execu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (159 samples, 16.63%)</title><rect x="21.1" y="499.0" width="196.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.1" y="510.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 16.63%)</title><rect x="21.1" y="483.0" width="196.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.1" y="494.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="71.7" y="467.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 10.88%)</title><rect x="72.9" y="467.0" width="128.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.9" y="478.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.88%)</title><rect x="72.9" y="451.0" width="22.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.9" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.88%)</title><rect x="72.9" y="435.0" width="22.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.9" y="446.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.88%)</title><rect x="72.9" y="419.0" width="22.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.9" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.31%)</title><rect x="95.2" y="451.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 0.31%)</title><rect x="95.2" y="435.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="95.2" y="419.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.2" y="430.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="95.2" y="403.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="98.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.21%)</title><rect x="96.4" y="419.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 8.68%)</title><rect x="98.9" y="451.0" width="102.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.9" y="462.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 8.68%)</title><rect x="98.9" y="435.0" width="102.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.9" y="446.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 8.58%)</title><rect x="98.9" y="419.0" width="101.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.9" y="430.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 8.58%)</title><rect x="98.9" y="403.0" width="101.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.9" y="414.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (81 samples, 8.47%)</title><rect x="100.1" y="387.0" width="100.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.1" y="398.0">sun/misc/Uns..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="100.1" y="371.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="103.1" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 7.64%)</title><rect x="101.3" y="371.0" width="90.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="104.3" y="382.0">Unsafe_Unp..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="106.3" y="355.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.3" y="366.0"></text>
</g>
<g>
<title>__pthread_cond_signal (51 samples, 5.33%)</title><rect x="107.5" y="355.0" width="63.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="110.5" y="366.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.42%)</title><rect x="170.5" y="355.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="173.5" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.36%)</title><rect x="175.4" y="355.0" width="16.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="178.4" y="366.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.63%)</title><rect x="191.4" y="371.0" width="7.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="194.4" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="198.8" y="371.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="201.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="200.1" y="419.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="203.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.84%)</title><rect x="201.3" y="467.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (8 samples, 0.84%)</title><rect x="201.3" y="451.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.84%)</title><rect x="201.3" y="435.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.3" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.21%)</title><rect x="207.5" y="419.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="210.5" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="207.5" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="210.5" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="208.7" y="403.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="211.7" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="208.7" y="387.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="211.7" y="398.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.10%)</title><rect x="208.7" y="371.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="211.7" y="382.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.10%)</title><rect x="208.7" y="355.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="211.7" y="366.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.10%)</title><rect x="208.7" y="339.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="211.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="210.0" y="419.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.31%)</title><rect x="211.2" y="467.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.31%)</title><rect x="211.2" y="451.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.31%)</title><rect x="211.2" y="435.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.21%)</title><rect x="212.4" y="419.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.4" y="430.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.21%)</title><rect x="214.9" y="467.0" width="2.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="217.9" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.10%)</title><rect x="217.4" y="563.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.10%)</title><rect x="217.4" y="547.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.42%)</title><rect x="218.6" y="563.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.42%)</title><rect x="218.6" y="547.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.42%)</title><rect x="218.6" y="531.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 2.51%)</title><rect x="223.5" y="563.0" width="29.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.5" y="574.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 2.51%)</title><rect x="223.5" y="547.0" width="29.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.5" y="558.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.84%)</title><rect x="239.6" y="531.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.6" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.52%)</title><rect x="239.6" y="515.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.6" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.52%)</title><rect x="239.6" y="499.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.6" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.52%)</title><rect x="239.6" y="483.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.6" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="243.3" y="467.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="246.3" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="243.3" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="246.3" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="243.3" y="435.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="246.3" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="244.5" y="467.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="247.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="245.8" y="515.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.8" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.21%)</title><rect x="247.0" y="515.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.0" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.31%)</title><rect x="249.5" y="531.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="252.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="253.2" y="595.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.10%)</title><rect x="253.2" y="579.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="253.2" y="563.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.10%)</title><rect x="253.2" y="547.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="253.2" y="531.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="253.2" y="515.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.73%)</title><rect x="254.4" y="595.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.73%)</title><rect x="254.4" y="579.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.73%)</title><rect x="254.4" y="563.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.73%)</title><rect x="254.4" y="547.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (7 samples, 0.73%)</title><rect x="254.4" y="531.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (7 samples, 0.73%)</title><rect x="254.4" y="515.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="263.0" y="595.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="263.0" y="579.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 6.38%)</title><rect x="264.3" y="611.0" width="75.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.3" y="622.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 6.38%)</title><rect x="264.3" y="595.0" width="75.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.3" y="606.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 4.18%)</title><rect x="264.3" y="579.0" width="49.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.3" y="590.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="264.3" y="563.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="264.3" y="547.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.10%)</title><rect x="264.3" y="531.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="264.3" y="515.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (39 samples, 4.08%)</title><rect x="265.5" y="563.0" width="48.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.5" y="574.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 4.08%)</title><rect x="265.5" y="547.0" width="48.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.5" y="558.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 3.45%)</title><rect x="265.5" y="531.0" width="40.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.5" y="542.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (33 samples, 3.45%)</title><rect x="265.5" y="515.0" width="40.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.5" y="526.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.67%)</title><rect x="265.5" y="499.0" width="19.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="268.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.84%)</title><rect x="275.4" y="483.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.84%)</title><rect x="275.4" y="467.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.84%)</title><rect x="275.4" y="451.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.84%)</title><rect x="275.4" y="435.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.84%)</title><rect x="275.4" y="419.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.84%)</title><rect x="275.4" y="403.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.84%)</title><rect x="275.4" y="387.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (17 samples, 1.78%)</title><rect x="285.3" y="499.0" width="20.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (17 samples, 1.78%)</title><rect x="285.3" y="483.0" width="20.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (16 samples, 1.67%)</title><rect x="285.3" y="467.0" width="19.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.3" y="478.0"></text>
</g>
<g>
<title>java/util/Optional.of (16 samples, 1.67%)</title><rect x="285.3" y="451.0" width="19.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.3" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.42%)</title><rect x="300.1" y="435.0" width="4.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="303.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.10%)</title><rect x="305.0" y="467.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.0" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.10%)</title><rect x="305.0" y="451.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.42%)</title><rect x="306.2" y="531.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.31%)</title><rect x="307.5" y="515.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.10%)</title><rect x="307.5" y="499.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="307.5" y="483.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.5" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="307.5" y="467.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.21%)</title><rect x="308.7" y="499.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.21%)</title><rect x="308.7" y="483.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="311.2" y="531.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="311.2" y="515.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="311.2" y="499.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="311.2" y="483.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="311.2" y="467.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.10%)</title><rect x="312.4" y="531.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.73%)</title><rect x="313.6" y="579.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.52%)</title><rect x="313.6" y="563.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.52%)</title><rect x="313.6" y="547.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="313.6" y="531.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="314.9" y="531.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="314.9" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.9" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="314.9" y="499.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="314.9" y="483.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.9" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="314.9" y="467.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="317.9" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="314.9" y="451.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="316.1" y="531.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="316.1" y="515.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="316.1" y="499.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.1" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="316.1" y="483.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="316.1" y="467.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="316.1" y="451.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="316.1" y="435.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="317.3" y="531.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="320.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="317.3" y="515.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="317.3" y="499.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="317.3" y="483.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="317.3" y="467.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="320.3" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.10%)</title><rect x="317.3" y="451.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="318.6" y="531.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="318.6" y="515.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="321.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="318.6" y="499.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="318.6" y="483.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="318.6" y="467.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="318.6" y="451.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.6" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="318.6" y="435.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.6" y="446.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="318.6" y="419.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.21%)</title><rect x="319.8" y="563.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.10%)</title><rect x="321.0" y="547.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="324.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.10%)</title><rect x="321.0" y="531.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="322.3" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.52%)</title><rect x="323.5" y="579.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.42%)</title><rect x="323.5" y="563.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="326.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.10%)</title><rect x="323.5" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.10%)</title><rect x="323.5" y="531.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.10%)</title><rect x="323.5" y="515.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="323.5" y="499.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.10%)</title><rect x="323.5" y="483.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="323.5" y="467.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="323.5" y="451.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.10%)</title><rect x="323.5" y="435.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="323.5" y="419.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="323.5" y="403.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.31%)</title><rect x="324.7" y="547.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="324.7" y="531.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="324.7" y="515.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="327.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.21%)</title><rect x="326.0" y="531.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.10%)</title><rect x="326.0" y="515.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.10%)</title><rect x="326.0" y="499.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.10%)</title><rect x="326.0" y="483.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="327.2" y="515.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="327.2" y="499.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="327.2" y="483.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="327.2" y="467.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="327.2" y="451.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="327.2" y="435.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="328.5" y="563.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="328.5" y="547.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="328.5" y="531.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="328.5" y="515.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="328.5" y="499.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="328.5" y="483.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.10%)</title><rect x="328.5" y="467.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.5" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="328.5" y="451.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.73%)</title><rect x="329.7" y="579.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.73%)</title><rect x="329.7" y="563.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="329.7" y="547.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/608137160.accept (1 samples, 0.10%)</title><rect x="329.7" y="531.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.10%)</title><rect x="329.7" y="515.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.10%)</title><rect x="329.7" y="499.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="329.7" y="483.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.52%)</title><rect x="330.9" y="547.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.10%)</title><rect x="332.2" y="531.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.10%)</title><rect x="332.2" y="515.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="335.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.31%)</title><rect x="333.4" y="531.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="335.9" y="515.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.9" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="335.9" y="499.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="338.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="335.9" y="483.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="337.1" y="547.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="340.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="337.1" y="531.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="337.1" y="515.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.1" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="337.1" y="499.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="340.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="337.1" y="483.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="340.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="338.3" y="579.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="338.3" y="563.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="341.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="338.3" y="547.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="338.3" y="531.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="338.3" y="515.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.10%)</title><rect x="338.3" y="499.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.10%)</title><rect x="338.3" y="483.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.3" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.run (644 samples, 67.36%)</title><rect x="339.6" y="643.0" width="794.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.6" y="654.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (644 samples, 67.36%)</title><rect x="339.6" y="627.0" width="794.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.6" y="638.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (644 samples, 67.36%)</title><rect x="339.6" y="611.0" width="794.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="342.6" y="622.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="339.6" y="595.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="342.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1013499421.run (435 samples, 45.50%)</title><rect x="340.8" y="595.0" width="536.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.8" y="606.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/101349942..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (435 samples, 45.50%)</title><rect x="340.8" y="579.0" width="536.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.8" y="590.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (435 samples, 45.50%)</title><rect x="340.8" y="563.0" width="536.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.8" y="574.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="343.3" y="547.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="346.3" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.73%)</title><rect x="344.5" y="547.0" width="8.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="347.5" y="558.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.63%)</title><rect x="345.7" y="531.0" width="7.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="348.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (420 samples, 43.93%)</title><rect x="353.1" y="547.0" width="518.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.1" y="558.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (140 samples, 14.64%)</title><rect x="361.8" y="531.0" width="172.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.8" y="542.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (140 samples, 14.64%)</title><rect x="361.8" y="515.0" width="172.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.8" y="526.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (140 samples, 14.64%)</title><rect x="361.8" y="499.0" width="172.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.8" y="510.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (140 samples, 14.64%)</title><rect x="361.8" y="483.0" width="172.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.8" y="494.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (140 samples, 14.64%)</title><rect x="361.8" y="467.0" width="172.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.8" y="478.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (140 samples, 14.64%)</title><rect x="361.8" y="451.0" width="172.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.8" y="462.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (45 samples, 4.71%)</title><rect x="361.8" y="435.0" width="55.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.8" y="446.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (17 samples, 1.78%)</title><rect x="361.8" y="419.0" width="21.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (17 samples, 1.78%)</title><rect x="361.8" y="403.0" width="21.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="364.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (12 samples, 1.26%)</title><rect x="361.8" y="387.0" width="14.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.52%)</title><rect x="376.6" y="387.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.10%)</title><rect x="377.8" y="371.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.31%)</title><rect x="379.1" y="371.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.1" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.21%)</title><rect x="380.3" y="355.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.3" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.21%)</title><rect x="380.3" y="339.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="383.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 2.93%)</title><rect x="382.8" y="419.0" width="34.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.8" y="430.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (28 samples, 2.93%)</title><rect x="382.8" y="403.0" width="34.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.8" y="414.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.10%)</title><rect x="382.8" y="387.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.10%)</title><rect x="382.8" y="371.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (12 samples, 1.26%)</title><rect x="384.0" y="387.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (4 samples, 0.42%)</title><rect x="391.4" y="371.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.10%)</title><rect x="396.3" y="371.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.3" y="382.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.10%)</title><rect x="397.6" y="371.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.73%)</title><rect x="398.8" y="387.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.8" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="401.3" y="371.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="404.3" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="401.3" y="355.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="404.3" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="401.3" y="339.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="404.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="401.3" y="323.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="404.3" y="334.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="401.3" y="307.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="404.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.42%)</title><rect x="402.5" y="371.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="405.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.10%)</title><rect x="402.5" y="355.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="405.5" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="402.5" y="339.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="405.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.21%)</title><rect x="403.7" y="355.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="406.2" y="355.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.2" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="406.2" y="339.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="409.2" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="406.2" y="323.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="409.2" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="406.2" y="307.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="409.2" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="406.2" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="409.2" y="302.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="406.2" y="275.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="409.2" y="286.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="406.2" y="259.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="409.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (8 samples, 0.84%)</title><rect x="407.4" y="387.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.10%)</title><rect x="414.9" y="371.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="416.1" y="371.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (83 samples, 8.68%)</title><rect x="417.3" y="435.0" width="102.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="420.3" y="446.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.84%)</title><rect x="417.3" y="419.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.84%)</title><rect x="417.3" y="403.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.10%)</title><rect x="426.0" y="387.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 1.15%)</title><rect x="427.2" y="419.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.05%)</title><rect x="428.4" y="403.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.52%)</title><rect x="429.7" y="387.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="432.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.52%)</title><rect x="429.7" y="371.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.7" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="433.4" y="355.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="436.4" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="433.4" y="339.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="436.4" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="433.4" y="323.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="436.4" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="433.4" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="436.4" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="433.4" y="291.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="436.4" y="302.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="433.4" y="275.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="436.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="434.6" y="355.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.42%)</title><rect x="435.8" y="387.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="438.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.42%)</title><rect x="435.8" y="371.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.52%)</title><rect x="440.8" y="419.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="443.2" y="403.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.21%)</title><rect x="444.5" y="403.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 6.17%)</title><rect x="446.9" y="419.0" width="72.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="449.9" y="430.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.99%)</title><rect x="446.9" y="403.0" width="23.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.9" y="414.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.42%)</title><rect x="456.8" y="387.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.42%)</title><rect x="456.8" y="371.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.42%)</title><rect x="456.8" y="355.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.63%)</title><rect x="461.8" y="387.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="469.2" y="387.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="472.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="469.2" y="371.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (40 samples, 4.18%)</title><rect x="470.4" y="403.0" width="49.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.4" y="414.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (40 samples, 4.18%)</title><rect x="470.4" y="387.0" width="49.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="473.4" y="398.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (40 samples, 4.18%)</title><rect x="470.4" y="371.0" width="49.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="473.4" y="382.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.57%)</title><rect x="477.8" y="355.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.73%)</title><rect x="484.0" y="339.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.73%)</title><rect x="484.0" y="323.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="487.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.73%)</title><rect x="484.0" y="307.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="487.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.42%)</title><rect x="487.7" y="291.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="492.6" y="339.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.21%)</title><rect x="493.8" y="339.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.8" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.21%)</title><rect x="493.8" y="323.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.42%)</title><rect x="496.3" y="355.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="499.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.31%)</title><rect x="497.6" y="339.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.31%)</title><rect x="497.6" y="323.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.31%)</title><rect x="497.6" y="307.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.31%)</title><rect x="497.6" y="291.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.52%)</title><rect x="501.3" y="355.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.52%)</title><rect x="501.3" y="339.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="504.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.52%)</title><rect x="501.3" y="323.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (10 samples, 1.05%)</title><rect x="507.4" y="355.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (10 samples, 1.05%)</title><rect x="507.4" y="339.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="510.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 1.05%)</title><rect x="519.8" y="435.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 1.05%)</title><rect x="519.8" y="419.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="522.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 1.05%)</title><rect x="519.8" y="403.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 1.05%)</title><rect x="519.8" y="387.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="522.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.21%)</title><rect x="525.9" y="371.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.31%)</title><rect x="528.4" y="371.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.21%)</title><rect x="532.1" y="435.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="535.1" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (258 samples, 26.99%)</title><rect x="534.6" y="531.0" width="318.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="537.6" y="542.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (57 samples, 5.96%)</title><rect x="535.8" y="515.0" width="70.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="538.8" y="526.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="535.8" y="499.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.8" y="510.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 5.86%)</title><rect x="537.1" y="499.0" width="69.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.1" y="510.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (54 samples, 5.65%)</title><rect x="539.5" y="483.0" width="66.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="542.5" y="494.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.63%)</title><rect x="542.0" y="467.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="545.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.63%)</title><rect x="542.0" y="451.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="545.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.63%)</title><rect x="542.0" y="435.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="545.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.63%)</title><rect x="542.0" y="419.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.0" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="548.2" y="403.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="551.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.10%)</title><rect x="548.2" y="387.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (46 samples, 4.81%)</title><rect x="549.4" y="467.0" width="56.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="552.4" y="478.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.46%)</title><rect x="588.9" y="451.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="591.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="588.9" y="435.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="588.9" y="419.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="591.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (13 samples, 1.36%)</title><rect x="590.1" y="435.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="593.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="603.7" y="419.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.7" y="430.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="604.9" y="419.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="607.9" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.73%)</title><rect x="606.2" y="515.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.63%)</title><rect x="607.4" y="499.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="610.4" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.63%)</title><rect x="607.4" y="483.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (129 samples, 13.49%)</title><rect x="614.8" y="515.0" width="159.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.8" y="526.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="616.0" y="499.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="619.0" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="616.0" y="483.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="619.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="616.0" y="467.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="619.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="616.0" y="451.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.0" y="462.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="616.0" y="435.0" width="1.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="619.0" y="446.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.42%)</title><rect x="617.3" y="499.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="620.3" y="510.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.42%)</title><rect x="617.3" y="483.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="620.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (123 samples, 12.87%)</title><rect x="622.2" y="499.0" width="151.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="625.2" y="510.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (51 samples, 5.33%)</title><rect x="625.9" y="483.0" width="63.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.9" y="494.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (47 samples, 4.92%)</title><rect x="629.6" y="467.0" width="58.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="632.6" y="478.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 3.66%)</title><rect x="637.0" y="451.0" width="43.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.0" y="462.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.88%)</title><rect x="650.6" y="435.0" width="22.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.6" y="446.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.88%)</title><rect x="650.6" y="419.0" width="22.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.6" y="430.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.88%)</title><rect x="650.6" y="403.0" width="22.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="653.6" y="414.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 1.15%)</title><rect x="658.0" y="387.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="661.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.31%)</title><rect x="659.2" y="371.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="662.2" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.31%)</title><rect x="659.2" y="355.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="662.2" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.73%)</title><rect x="662.9" y="371.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="665.9" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.52%)</title><rect x="665.4" y="355.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="668.4" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (3 samples, 0.31%)</title><rect x="665.4" y="339.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="668.4" y="350.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="669.1" y="339.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="672.1" y="350.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="670.4" y="339.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="673.4" y="350.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="671.6" y="387.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="674.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.31%)</title><rect x="672.8" y="435.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.8" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="676.5" y="435.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="679.5" y="446.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="677.8" y="435.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="680.8" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="679.0" y="435.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="682.0" y="446.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="680.2" y="451.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="683.2" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.52%)</title><rect x="681.5" y="451.0" width="6.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="684.5" y="462.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="687.6" y="467.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="690.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.63%)</title><rect x="688.9" y="483.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.9" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.63%)</title><rect x="688.9" y="467.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.9" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.63%)</title><rect x="688.9" y="451.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="691.9" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="695.0" y="435.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="698.0" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="695.0" y="419.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="698.0" y="430.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (63 samples, 6.59%)</title><rect x="696.3" y="483.0" width="77.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.3" y="494.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (62 samples, 6.49%)</title><rect x="697.5" y="467.0" width="76.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.5" y="478.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.42%)</title><rect x="697.5" y="451.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.5" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.42%)</title><rect x="697.5" y="435.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.5" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.42%)</title><rect x="697.5" y="419.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="700.5" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.42%)</title><rect x="697.5" y="403.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="700.5" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.10%)</title><rect x="701.2" y="387.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (58 samples, 6.07%)</title><rect x="702.4" y="451.0" width="71.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.4" y="462.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (53 samples, 5.54%)</title><rect x="708.6" y="435.0" width="65.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.6" y="446.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 3.35%)</title><rect x="734.5" y="419.0" width="39.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.5" y="430.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.21%)</title><rect x="755.5" y="403.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.84%)</title><rect x="758.0" y="403.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="761.0" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.31%)</title><rect x="764.2" y="387.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.2" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="765.4" y="371.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="768.4" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="765.4" y="355.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="768.4" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="766.6" y="371.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="769.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="766.6" y="355.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="769.6" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="766.6" y="339.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="769.6" y="350.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="766.6" y="323.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="769.6" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="766.6" y="307.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="769.6" y="318.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.52%)</title><rect x="767.9" y="403.0" width="6.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="770.9" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (44 samples, 4.60%)</title><rect x="774.0" y="515.0" width="54.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="777.0" y="526.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (42 samples, 4.39%)</title><rect x="776.5" y="499.0" width="51.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.5" y="510.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/5868726.process (23 samples, 2.41%)</title><rect x="776.5" y="483.0" width="28.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="779.5" y="494.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (23 samples, 2.41%)</title><rect x="776.5" y="467.0" width="28.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="779.5" y="478.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.67%)</title><rect x="777.7" y="451.0" width="19.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.7" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="777.7" y="435.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.7" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="777.7" y="419.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.7" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="777.7" y="403.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.7" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="777.7" y="387.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.52%)</title><rect x="779.0" y="435.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.0" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.42%)</title><rect x="780.2" y="419.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="783.2" y="430.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.42%)</title><rect x="780.2" y="403.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="783.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 1.05%)</title><rect x="785.1" y="435.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.1" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.63%)</title><rect x="797.5" y="451.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="800.5" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.52%)</title><rect x="797.5" y="435.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="800.5" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.52%)</title><rect x="797.5" y="419.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.5" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.52%)</title><rect x="797.5" y="403.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="800.5" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.21%)</title><rect x="801.2" y="387.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="804.2" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/333683827.linkToTargetMethod (1 samples, 0.10%)</title><rect x="803.7" y="435.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.7" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1472682156.invokeStatic_LJ_L (1 samples, 0.10%)</title><rect x="803.7" y="419.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.7" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="803.7" y="403.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="806.7" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="803.7" y="387.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.7" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="803.7" y="371.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="806.7" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.21%)</title><rect x="804.9" y="483.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.9" y="494.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.21%)</title><rect x="804.9" y="467.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.9" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="806.1" y="451.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="809.1" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="806.1" y="435.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="809.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="806.1" y="419.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="806.1" y="403.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="809.1" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.94%)</title><rect x="807.4" y="483.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="810.4" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.52%)</title><rect x="812.3" y="467.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.3" y="478.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.31%)</title><rect x="812.3" y="451.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="815.3" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.21%)</title><rect x="816.0" y="451.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="819.0" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.52%)</title><rect x="818.5" y="483.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.5" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.52%)</title><rect x="818.5" y="467.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.5" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.31%)</title><rect x="824.6" y="483.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="827.6" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.31%)</title><rect x="824.6" y="467.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.6" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="827.1" y="451.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="830.1" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="827.1" y="435.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="830.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="827.1" y="419.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="827.1" y="403.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="830.1" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="828.3" y="515.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.3" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="828.3" y="499.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.3" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="828.3" y="483.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.3" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="828.3" y="467.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.3" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="828.3" y="451.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="831.3" y="462.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.10%)</title><rect x="828.3" y="435.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="831.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.99%)</title><rect x="829.6" y="515.0" width="23.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="832.6" y="526.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.42%)</title><rect x="833.3" y="499.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="836.3" y="510.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.31%)</title><rect x="834.5" y="483.0" width="3.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="837.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.15%)</title><rect x="838.2" y="499.0" width="13.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="841.2" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.52%)</title><rect x="843.2" y="483.0" width="6.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="846.2" y="494.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.52%)</title><rect x="843.2" y="467.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="846.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="849.3" y="483.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1109145946.accept (1 samples, 0.10%)</title><rect x="849.3" y="467.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (1 samples, 0.10%)</title><rect x="849.3" y="451.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1646616090.complete (1 samples, 0.10%)</title><rect x="849.3" y="435.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (1 samples, 0.10%)</title><rect x="849.3" y="419.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="852.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.10%)</title><rect x="849.3" y="403.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="852.3" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.10%)</title><rect x="849.3" y="387.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.3" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.10%)</title><rect x="849.3" y="371.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.3" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="849.3" y="355.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.3" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="849.3" y="339.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.3" y="350.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="850.6" y="483.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="853.6" y="494.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="851.8" y="499.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="854.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.26%)</title><rect x="853.0" y="531.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="856.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.26%)</title><rect x="853.0" y="515.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.26%)</title><rect x="853.0" y="499.0" width="14.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1109145946.accept (12 samples, 1.26%)</title><rect x="853.0" y="483.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="856.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (12 samples, 1.26%)</title><rect x="853.0" y="467.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1646616090.complete (12 samples, 1.26%)</title><rect x="853.0" y="451.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (12 samples, 1.26%)</title><rect x="853.0" y="435.0" width="14.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="856.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 1.26%)</title><rect x="853.0" y="419.0" width="14.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="856.0" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.26%)</title><rect x="853.0" y="403.0" width="14.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="856.0" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.26%)</title><rect x="853.0" y="387.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="856.0" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 1.26%)</title><rect x="853.0" y="371.0" width="14.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="856.0" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (12 samples, 1.26%)</title><rect x="853.0" y="355.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.0" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.31%)</title><rect x="867.8" y="531.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="870.8" y="542.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.31%)</title><rect x="867.8" y="515.0" width="3.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="870.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.52%)</title><rect x="871.5" y="547.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="874.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.21%)</title><rect x="875.3" y="531.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="878.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (14 samples, 1.46%)</title><rect x="877.7" y="595.0" width="17.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="880.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.46%)</title><rect x="877.7" y="579.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="880.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.46%)</title><rect x="877.7" y="563.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="880.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.46%)</title><rect x="877.7" y="547.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="880.7" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="885.1" y="531.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="888.1" y="542.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="885.1" y="515.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.1" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="886.4" y="531.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="889.4" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.42%)</title><rect x="887.6" y="531.0" width="4.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="890.6" y="542.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.42%)</title><rect x="887.6" y="515.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="890.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (2 samples, 0.21%)</title><rect x="892.5" y="531.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="895.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (194 samples, 20.29%)</title><rect x="895.0" y="595.0" width="239.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="898.0" y="606.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (193 samples, 20.19%)</title><rect x="896.2" y="579.0" width="238.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.2" y="590.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (160 samples, 16.74%)</title><rect x="927.1" y="563.0" width="197.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="930.1" y="574.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 1.05%)</title><rect x="934.5" y="547.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 1.05%)</title><rect x="934.5" y="531.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="937.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 1.05%)</title><rect x="934.5" y="515.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="937.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 1.05%)</title><rect x="934.5" y="499.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="937.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.73%)</title><rect x="946.8" y="547.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="949.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.73%)</title><rect x="946.8" y="531.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (137 samples, 14.33%)</title><rect x="955.5" y="547.0" width="169.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="958.5" y="558.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (137 samples, 14.33%)</title><rect x="955.5" y="531.0" width="169.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.5" y="542.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="962.9" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.9" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.31%)</title><rect x="964.1" y="515.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.1" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park (124 samples, 12.97%)</title><rect x="967.8" y="515.0" width="153.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="970.8" y="526.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.52%)</title><rect x="971.5" y="499.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="974.5" y="510.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.10%)</title><rect x="977.7" y="499.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.7" y="510.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="978.9" y="499.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.9" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.99%)</title><rect x="980.2" y="499.0" width="23.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.2" y="510.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.52%)</title><rect x="988.8" y="483.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="991.8" y="494.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.31%)</title><rect x="990.0" y="467.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.0" y="478.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.31%)</title><rect x="990.0" y="451.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="993.0" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="993.7" y="467.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="996.7" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.73%)</title><rect x="995.0" y="483.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.0" y="494.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1003.6" y="499.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1006.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.42%)</title><rect x="1004.9" y="499.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.9" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="1009.8" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.8" y="510.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 1.15%)</title><rect x="1011.0" y="499.0" width="13.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1014.0" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.72%)</title><rect x="1024.6" y="499.0" width="32.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1027.6" y="510.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (38 samples, 3.97%)</title><rect x="1056.7" y="499.0" width="46.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1059.7" y="510.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.31%)</title><rect x="1103.6" y="499.0" width="3.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1106.6" y="510.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.21%)</title><rect x="1107.3" y="499.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1110.3" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1109.8" y="499.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1112.8" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.42%)</title><rect x="1111.0" y="499.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1114.0" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.21%)</title><rect x="1115.9" y="499.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1118.9" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1118.4" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.4" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1119.6" y="499.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1122.6" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.21%)</title><rect x="1120.9" y="515.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1123.9" y="526.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1123.3" y="515.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.84%)</title><rect x="1124.6" y="563.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.84%)</title><rect x="1124.6" y="547.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1127.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.84%)</title><rect x="1124.6" y="531.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1127.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.84%)</title><rect x="1124.6" y="515.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1127.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1134.5" y="643.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1137.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1134.5" y="627.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1137.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1134.5" y="611.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1137.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="1134.5" y="595.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1137.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="1134.5" y="579.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1137.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="1134.5" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1137.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="1134.5" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1137.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="1134.5" y="531.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1137.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="1134.5" y="515.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1137.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.10%)</title><rect x="1134.5" y="499.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1137.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="1134.5" y="483.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1137.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="1134.5" y="467.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1137.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.10%)</title><rect x="1134.5" y="451.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1137.5" y="462.0"></text>
</g>
<g>
<title>start_thread (44 samples, 4.60%)</title><rect x="1135.7" y="643.0" width="54.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1138.7" y="654.0">start..</text>
</g>
<g>
<title>java_start(Thread*) (44 samples, 4.60%)</title><rect x="1135.7" y="627.0" width="54.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1138.7" y="638.0">java_..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.20%)</title><rect x="1135.7" y="611.0" width="25.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.7" y="622.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.31%)</title><rect x="1135.7" y="595.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="606.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.31%)</title><rect x="1135.7" y="579.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.7" y="590.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.31%)</title><rect x="1135.7" y="563.0" width="3.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1138.7" y="574.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.88%)</title><rect x="1139.4" y="595.0" width="22.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.4" y="606.0">G..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (11 samples, 1.15%)</title><rect x="1139.4" y="579.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.4" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="1139.4" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.4" y="574.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1139.4" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.4" y="558.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1139.4" y="531.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.4" y="542.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1139.4" y="515.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="526.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1139.4" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.4" y="510.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1139.4" y="483.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.4" y="494.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.10%)</title><rect x="1139.4" y="467.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.4" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.10%)</title><rect x="1139.4" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.4" y="462.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (10 samples, 1.05%)</title><rect x="1140.6" y="563.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.6" y="574.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (10 samples, 1.05%)</title><rect x="1140.6" y="547.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.6" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.73%)</title><rect x="1153.0" y="579.0" width="8.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="590.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.73%)</title><rect x="1153.0" y="563.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.52%)</title><rect x="1153.0" y="547.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.0" y="558.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.52%)</title><rect x="1153.0" y="531.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.0" y="542.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.52%)</title><rect x="1153.0" y="515.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="526.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.52%)</title><rect x="1153.0" y="499.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.0" y="510.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.10%)</title><rect x="1156.7" y="483.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="1156.7" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.7" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.10%)</title><rect x="1157.9" y="483.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.9" y="494.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.21%)</title><rect x="1159.1" y="547.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.1" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.21%)</title><rect x="1159.1" y="531.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.1" y="542.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.10%)</title><rect x="1159.1" y="515.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.1" y="526.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.10%)</title><rect x="1160.4" y="515.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="1160.4" y="499.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="510.0"></text>
</g>
<g>
<title>JavaThread::run() (20 samples, 2.09%)</title><rect x="1161.6" y="611.0" width="24.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="622.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (20 samples, 2.09%)</title><rect x="1161.6" y="595.0" width="24.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.6" y="606.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (20 samples, 2.09%)</title><rect x="1161.6" y="579.0" width="24.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="590.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (20 samples, 2.09%)</title><rect x="1161.6" y="563.0" width="24.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="574.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (20 samples, 2.09%)</title><rect x="1161.6" y="547.0" width="24.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="558.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (20 samples, 2.09%)</title><rect x="1161.6" y="531.0" width="24.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="542.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (11 samples, 1.15%)</title><rect x="1161.6" y="515.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="526.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.21%)</title><rect x="1161.6" y="499.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.6" y="510.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.10%)</title><rect x="1162.8" y="483.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.8" y="494.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.10%)</title><rect x="1164.1" y="499.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.1" y="510.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.10%)</title><rect x="1164.1" y="483.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.1" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1165.3" y="499.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.3" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1165.3" y="483.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.3" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1165.3" y="467.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.10%)</title><rect x="1165.3" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.3" y="462.0"></text>
</g>
<g>
<title>RetNode::ideal_Opcode() const (1 samples, 0.10%)</title><rect x="1165.3" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 0.73%)</title><rect x="1166.5" y="499.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.21%)</title><rect x="1166.5" y="483.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.5" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.21%)</title><rect x="1169.0" y="483.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1170.3" y="467.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.3" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.21%)</title><rect x="1171.5" y="483.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="494.0"></text>
</g>
<g>
<title>loadConL0Node::bottom_type() const (1 samples, 0.10%)</title><rect x="1172.7" y="467.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.7" y="478.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1172.7" y="451.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="462.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1172.7" y="435.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.7" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.10%)</title><rect x="1174.0" y="483.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.0" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 0.84%)</title><rect x="1175.2" y="515.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="526.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1175.2" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="510.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1175.2" y="483.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1176.4" y="499.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.10%)</title><rect x="1176.4" y="483.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 0.21%)</title><rect x="1177.7" y="499.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1177.7" y="483.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1178.9" y="483.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1180.1" y="499.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1180.1" y="483.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.21%)</title><rect x="1181.4" y="499.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.21%)</title><rect x="1181.4" y="483.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="494.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.10%)</title><rect x="1181.4" y="467.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.10%)</title><rect x="1181.4" y="451.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.10%)</title><rect x="1182.6" y="467.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="478.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1183.8" y="499.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.1" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.1" y="499.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1185.1" y="483.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1185.1" y="467.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1185.1" y="451.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1185.1" y="435.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.1" y="419.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.1" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1185.1" y="387.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1185.1" y="371.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1185.1" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1185.1" y="339.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.1" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.1" y="307.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1185.1" y="291.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1185.1" y="275.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1185.1" y="259.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1185.1" y="243.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.1" y="227.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.1" y="211.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1185.1" y="195.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1185.1" y="179.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1185.1" y="163.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1185.1" y="147.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.1" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.1" y="131.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.1" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.1" y="115.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.1" y="126.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.10%)</title><rect x="1185.1" y="99.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="110.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1185.1" y="83.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="67.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1185.1" y="51.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="62.0"></text>
</g>
<g>
<title>AbstractInterpreter::bytecode_should_reexecute(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.1" y="35.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="46.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.31%)</title><rect x="1186.3" y="611.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="622.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.31%)</title><rect x="1186.3" y="595.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="606.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1186.3" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="590.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.21%)</title><rect x="1187.5" y="579.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.5" y="590.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.21%)</title><rect x="1187.5" y="563.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.5" y="574.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.21%)</title><rect x="1187.5" y="547.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.5" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.21%)</title><rect x="1187.5" y="531.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.5" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (2 samples, 0.21%)</title><rect x="1187.5" y="515.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.5" y="526.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::clear(bool) (2 samples, 0.21%)</title><rect x="1187.5" y="499.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="510.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::zero_bottom_entry_raw() (2 samples, 0.21%)</title><rect x="1187.5" y="483.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.5" y="494.0"></text>
</g>
</g>
</svg>
