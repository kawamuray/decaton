<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="629"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="629"> </text>
<g id="frames">
<g>
<title>all (204 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="606.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.49%)</title><rect x="10.0" y="579.0" width="5.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.49%)</title><rect x="10.0" y="563.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 10.78%)</title><rect x="15.8" y="579.0" width="127.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.8" y="590.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.49%)</title><rect x="15.8" y="563.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.49%)</title><rect x="15.8" y="547.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.49%)</title><rect x="15.8" y="531.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.49%)</title><rect x="15.8" y="515.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.49%)</title><rect x="15.8" y="499.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.49%)</title><rect x="15.8" y="483.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.49%)</title><rect x="15.8" y="467.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.49%)</title><rect x="15.8" y="451.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.49%)</title><rect x="15.8" y="435.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.49%)</title><rect x="15.8" y="419.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.&lt;init&gt; (1 samples, 0.49%)</title><rect x="15.8" y="403.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.49%)</title><rect x="15.8" y="387.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.fromStruct (1 samples, 0.49%)</title><rect x="15.8" y="371.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.8" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (1 samples, 0.49%)</title><rect x="15.8" y="355.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.8" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.fromStruct (1 samples, 0.49%)</title><rect x="15.8" y="339.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponsePartition.&lt;init&gt; (1 samples, 0.49%)</title><rect x="15.8" y="323.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponsePartition.fromStruct (1 samples, 0.49%)</title><rect x="15.8" y="307.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.8" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 10.29%)</title><rect x="21.6" y="563.0" width="121.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.6" y="574.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.49%)</title><rect x="21.6" y="547.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.49%)</title><rect x="21.6" y="531.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="542.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.49%)</title><rect x="21.6" y="515.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.49%)</title><rect x="21.6" y="499.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.6" y="510.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 3.43%)</title><rect x="27.4" y="547.0" width="40.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.4" y="558.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1585564599.accept (7 samples, 3.43%)</title><rect x="27.4" y="531.0" width="40.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.4" y="542.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (7 samples, 3.43%)</title><rect x="27.4" y="515.0" width="40.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.4" y="526.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.98%)</title><rect x="27.4" y="499.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.98%)</title><rect x="27.4" y="483.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.98%)</title><rect x="27.4" y="467.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.98%)</title><rect x="27.4" y="451.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.98%)</title><rect x="27.4" y="435.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.49%)</title><rect x="27.4" y="419.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.49%)</title><rect x="27.4" y="403.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.49%)</title><rect x="27.4" y="387.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.49%)</title><rect x="27.4" y="371.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.49%)</title><rect x="27.4" y="355.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.4" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.49%)</title><rect x="33.1" y="419.0" width="5.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="36.1" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 2.45%)</title><rect x="38.9" y="499.0" width="28.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.9" y="510.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.49%)</title><rect x="38.9" y="483.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.9" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.96%)</title><rect x="44.7" y="483.0" width="23.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.7" y="494.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.98%)</title><rect x="56.3" y="467.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.3" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.98%)</title><rect x="56.3" y="451.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.3" y="462.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.98%)</title><rect x="56.3" y="435.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.3" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.98%)</title><rect x="56.3" y="419.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.3" y="430.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.49%)</title><rect x="62.1" y="403.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="65.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 6.37%)</title><rect x="67.8" y="547.0" width="75.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.8" y="558.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 6.37%)</title><rect x="67.8" y="531.0" width="75.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.8" y="542.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 4.41%)</title><rect x="67.8" y="515.0" width="52.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.8" y="526.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.96%)</title><rect x="67.8" y="499.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.8" y="510.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.96%)</title><rect x="67.8" y="483.0" width="23.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.8" y="494.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.49%)</title><rect x="67.8" y="467.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.49%)</title><rect x="67.8" y="451.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="67.8" y="435.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="67.8" y="419.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/2055980013.shouldBlock (1 samples, 0.49%)</title><rect x="73.6" y="467.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.49%)</title><rect x="73.6" y="451.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.49%)</title><rect x="73.6" y="435.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.49%)</title><rect x="73.6" y="419.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.6" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="73.6" y="403.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.49%)</title><rect x="73.6" y="387.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.6" y="398.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.49%)</title><rect x="73.6" y="371.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="73.6" y="355.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.6" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="73.6" y="339.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.6" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.49%)</title><rect x="73.6" y="323.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.6" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.49%)</title><rect x="73.6" y="307.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.6" y="318.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.49%)</title><rect x="73.6" y="291.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.49%)</title><rect x="73.6" y="275.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.6" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.49%)</title><rect x="79.4" y="467.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.49%)</title><rect x="79.4" y="451.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.49%)</title><rect x="85.2" y="467.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.49%)</title><rect x="85.2" y="451.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.49%)</title><rect x="85.2" y="435.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.2" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.49%)</title><rect x="85.2" y="419.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.49%)</title><rect x="85.2" y="403.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.45%)</title><rect x="91.0" y="499.0" width="28.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.0" y="510.0">or..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.49%)</title><rect x="91.0" y="483.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.96%)</title><rect x="96.8" y="483.0" width="23.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.8" y="494.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.96%)</title><rect x="96.8" y="467.0" width="23.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.8" y="478.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.96%)</title><rect x="96.8" y="451.0" width="23.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.8" y="462.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.49%)</title><rect x="96.8" y="435.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.47%)</title><rect x="102.5" y="435.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.47%)</title><rect x="102.5" y="419.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.98%)</title><rect x="102.5" y="403.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.5" y="414.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.98%)</title><rect x="102.5" y="387.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.49%)</title><rect x="114.1" y="403.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.1" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.49%)</title><rect x="114.1" y="387.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.98%)</title><rect x="119.9" y="515.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.98%)</title><rect x="119.9" y="499.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.98%)</title><rect x="119.9" y="483.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.9" y="494.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.98%)</title><rect x="119.9" y="467.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.9" y="478.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.49%)</title><rect x="119.9" y="451.0" width="5.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="122.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/363597685.accept (1 samples, 0.49%)</title><rect x="125.7" y="451.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.49%)</title><rect x="125.7" y="435.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.49%)</title><rect x="125.7" y="419.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.49%)</title><rect x="125.7" y="403.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.49%)</title><rect x="125.7" y="387.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.7" y="398.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.49%)</title><rect x="125.7" y="371.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.7" y="382.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.49%)</title><rect x="125.7" y="355.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.98%)</title><rect x="131.5" y="515.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.49%)</title><rect x="131.5" y="499.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.49%)</title><rect x="131.5" y="483.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="131.5" y="467.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="131.5" y="451.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.49%)</title><rect x="131.5" y="435.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.49%)</title><rect x="137.3" y="499.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.49%)</title><rect x="137.3" y="483.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="140.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.49%)</title><rect x="137.3" y="467.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.49%)</title><rect x="137.3" y="451.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.49%)</title><rect x="137.3" y="435.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.49%)</title><rect x="137.3" y="419.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (138 samples, 67.65%)</title><rect x="143.0" y="579.0" width="798.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.0" y="590.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (138 samples, 67.65%)</title><rect x="143.0" y="563.0" width="798.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="146.0" y="574.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (138 samples, 67.65%)</title><rect x="143.0" y="547.0" width="798.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.0" y="558.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1203098470.run (133 samples, 65.20%)</title><rect x="154.6" y="531.0" width="769.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.6" y="542.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1203098470.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (133 samples, 65.20%)</title><rect x="154.6" y="515.0" width="769.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.6" y="526.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (133 samples, 65.20%)</title><rect x="154.6" y="499.0" width="769.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.6" y="510.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (133 samples, 65.20%)</title><rect x="154.6" y="483.0" width="769.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.6" y="494.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.49%)</title><rect x="166.2" y="467.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="169.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 17.65%)</title><rect x="172.0" y="467.0" width="208.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.0" y="478.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (36 samples, 17.65%)</title><rect x="172.0" y="451.0" width="208.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.0" y="462.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (36 samples, 17.65%)</title><rect x="172.0" y="435.0" width="208.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.0" y="446.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 17.65%)</title><rect x="172.0" y="419.0" width="208.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.0" y="430.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 17.65%)</title><rect x="172.0" y="403.0" width="208.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.0" y="414.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 17.65%)</title><rect x="172.0" y="387.0" width="208.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.0" y="398.0">com/fasterxml/jackson/datab..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 6.37%)</title><rect x="172.0" y="371.0" width="75.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.0" y="382.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.45%)</title><rect x="218.2" y="355.0" width="29.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="366.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.45%)</title><rect x="218.2" y="339.0" width="29.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.2" y="350.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 2.45%)</title><rect x="218.2" y="323.0" width="29.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.2" y="334.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="218.2" y="307.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="221.2" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.49%)</title><rect x="218.2" y="291.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="221.2" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.49%)</title><rect x="218.2" y="275.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="221.2" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.96%)</title><rect x="224.0" y="307.0" width="23.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.0" y="318.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 1.96%)</title><rect x="224.0" y="291.0" width="23.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.0" y="302.0">j..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 10.78%)</title><rect x="247.2" y="371.0" width="127.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.2" y="382.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.96%)</title><rect x="252.9" y="355.0" width="23.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.9" y="366.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.96%)</title><rect x="252.9" y="339.0" width="23.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.9" y="350.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.98%)</title><rect x="264.5" y="323.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.49%)</title><rect x="270.3" y="307.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.49%)</title><rect x="276.1" y="355.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.49%)</title><rect x="276.1" y="339.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 7.35%)</title><rect x="281.9" y="355.0" width="86.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.9" y="366.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 2.45%)</title><rect x="281.9" y="339.0" width="28.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.9" y="350.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.49%)</title><rect x="281.9" y="323.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.49%)</title><rect x="281.9" y="307.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.49%)</title><rect x="281.9" y="291.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.96%)</title><rect x="287.6" y="323.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.6" y="334.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 4.90%)</title><rect x="310.8" y="339.0" width="57.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.8" y="350.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 4.90%)</title><rect x="310.8" y="323.0" width="57.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.8" y="334.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 4.90%)</title><rect x="310.8" y="307.0" width="57.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.8" y="318.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.96%)</title><rect x="310.8" y="291.0" width="23.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.8" y="302.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.47%)</title><rect x="310.8" y="275.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.47%)</title><rect x="310.8" y="259.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.47%)</title><rect x="310.8" y="243.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 1.47%)</title><rect x="310.8" y="227.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.49%)</title><rect x="328.1" y="275.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.98%)</title><rect x="333.9" y="291.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.98%)</title><rect x="333.9" y="275.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.98%)</title><rect x="333.9" y="259.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.9" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.98%)</title><rect x="333.9" y="243.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.9" y="254.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.98%)</title><rect x="333.9" y="227.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 1.47%)</title><rect x="345.5" y="291.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.5" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 1.47%)</title><rect x="345.5" y="275.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.5" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 1.47%)</title><rect x="345.5" y="259.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.5" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 1.47%)</title><rect x="345.5" y="243.0" width="17.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.5" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 1.47%)</title><rect x="345.5" y="227.0" width="17.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.5" y="238.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.47%)</title><rect x="345.5" y="211.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.5" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.49%)</title><rect x="362.8" y="291.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="365.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.49%)</title><rect x="362.8" y="275.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.8" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.49%)</title><rect x="362.8" y="259.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.49%)</title><rect x="368.6" y="355.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.49%)</title><rect x="374.4" y="371.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.49%)</title><rect x="374.4" y="355.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.49%)</title><rect x="374.4" y="339.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.49%)</title><rect x="374.4" y="323.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.49%)</title><rect x="374.4" y="307.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="377.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (89 samples, 43.63%)</title><rect x="380.2" y="467.0" width="514.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.2" y="478.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 6.86%)</title><rect x="380.2" y="451.0" width="81.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.2" y="462.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 6.86%)</title><rect x="380.2" y="435.0" width="81.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.2" y="446.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 4.90%)</title><rect x="403.3" y="419.0" width="57.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="406.3" y="430.0">ch/qos..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 3.92%)</title><rect x="414.9" y="403.0" width="46.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.9" y="414.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.96%)</title><rect x="438.0" y="387.0" width="23.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.0" y="398.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.49%)</title><rect x="438.0" y="371.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.49%)</title><rect x="438.0" y="355.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="441.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.47%)</title><rect x="443.8" y="371.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="446.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.49%)</title><rect x="455.4" y="355.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="458.4" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.47%)</title><rect x="461.2" y="451.0" width="17.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.47%)</title><rect x="461.2" y="435.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.2" y="446.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.47%)</title><rect x="461.2" y="419.0" width="17.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.2" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="472.7" y="403.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="475.7" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.49%)</title><rect x="472.7" y="387.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="475.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 10.29%)</title><rect x="478.5" y="451.0" width="121.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.5" y="462.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 10.29%)</title><rect x="478.5" y="435.0" width="121.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="481.5" y="446.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 4.90%)</title><rect x="478.5" y="419.0" width="57.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.5" y="430.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.94%)</title><rect x="484.3" y="403.0" width="34.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.3" y="414.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.94%)</title><rect x="484.3" y="387.0" width="34.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.3" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 2.94%)</title><rect x="484.3" y="371.0" width="34.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.3" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 2.94%)</title><rect x="484.3" y="355.0" width="34.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.3" y="366.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 2.94%)</title><rect x="484.3" y="339.0" width="34.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="487.3" y="350.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.47%)</title><rect x="484.3" y="323.0" width="17.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="487.3" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (2 samples, 0.98%)</title><rect x="484.3" y="307.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="487.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (2 samples, 0.98%)</title><rect x="484.3" y="291.0" width="11.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="487.3" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.49%)</title><rect x="495.9" y="307.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="498.9" y="318.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.49%)</title><rect x="495.9" y="291.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="498.9" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.47%)</title><rect x="501.7" y="323.0" width="17.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="504.7" y="334.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.49%)</title><rect x="519.0" y="403.0" width="5.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="522.0" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.98%)</title><rect x="524.8" y="403.0" width="11.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="527.8" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="536.4" y="419.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="539.4" y="430.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.49%)</title><rect x="542.2" y="419.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.2" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.49%)</title><rect x="542.2" y="403.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.49%)</title><rect x="542.2" y="387.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.2" y="398.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 4.41%)</title><rect x="547.9" y="419.0" width="52.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="550.9" y="430.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.92%)</title><rect x="553.7" y="403.0" width="46.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="556.7" y="414.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.49%)</title><rect x="553.7" y="387.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="556.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.49%)</title><rect x="553.7" y="371.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="556.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.49%)</title><rect x="553.7" y="355.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.7" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.43%)</title><rect x="559.5" y="387.0" width="40.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.5" y="398.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.94%)</title><rect x="565.3" y="371.0" width="34.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.3" y="382.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.45%)</title><rect x="571.1" y="355.0" width="28.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="574.1" y="366.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.49%)</title><rect x="594.2" y="339.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.2" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (43 samples, 21.08%)</title><rect x="600.0" y="451.0" width="248.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.0" y="462.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (43 samples, 21.08%)</title><rect x="600.0" y="435.0" width="248.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="603.0" y="446.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1900515838.process (38 samples, 18.63%)</title><rect x="605.8" y="419.0" width="219.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.8" y="430.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (38 samples, 18.63%)</title><rect x="605.8" y="403.0" width="219.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="608.8" y="414.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (38 samples, 18.63%)</title><rect x="605.8" y="387.0" width="219.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.8" y="398.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (37 samples, 18.14%)</title><rect x="611.6" y="371.0" width="214.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.6" y="382.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (36 samples, 17.65%)</title><rect x="611.6" y="355.0" width="208.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="614.6" y="366.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (32 samples, 15.69%)</title><rect x="623.1" y="339.0" width="185.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="626.1" y="350.0">JVM_Sleep</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.47%)</title><rect x="634.7" y="323.0" width="17.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="637.7" y="334.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.47%)</title><rect x="634.7" y="307.0" width="17.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="637.7" y="318.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (27 samples, 13.24%)</title><rect x="652.1" y="323.0" width="156.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="655.1" y="334.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.98%)</title><rect x="681.0" y="307.0" width="11.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="684.0" y="318.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.49%)</title><rect x="686.8" y="291.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="689.8" y="302.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.49%)</title><rect x="692.5" y="307.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="695.5" y="318.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.49%)</title><rect x="698.3" y="307.0" width="5.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="701.3" y="318.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="698.3" y="291.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="701.3" y="302.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.98%)</title><rect x="704.1" y="307.0" width="11.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="707.1" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.49%)</title><rect x="715.7" y="307.0" width="5.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="718.7" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 4.90%)</title><rect x="721.5" y="307.0" width="57.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="724.5" y="318.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.49%)</title><rect x="779.3" y="307.0" width="5.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="782.3" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.98%)</title><rect x="785.1" y="307.0" width="11.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.1" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.98%)</title><rect x="796.7" y="307.0" width="11.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="799.7" y="318.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.49%)</title><rect x="808.2" y="339.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.2" y="350.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.49%)</title><rect x="814.0" y="339.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="817.0" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.49%)</title><rect x="819.8" y="355.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.8" y="366.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="819.8" y="339.0" width="5.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="822.8" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.49%)</title><rect x="825.6" y="419.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="828.6" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.49%)</title><rect x="825.6" y="403.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/357517125.get$Lambda (1 samples, 0.49%)</title><rect x="825.6" y="387.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/357517125.&lt;init&gt; (1 samples, 0.49%)</title><rect x="825.6" y="371.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="828.6" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.49%)</title><rect x="831.4" y="419.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="834.4" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.49%)</title><rect x="831.4" y="403.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="834.4" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.49%)</title><rect x="831.4" y="387.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.49%)</title><rect x="831.4" y="371.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.49%)</title><rect x="831.4" y="355.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.4" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.49%)</title><rect x="831.4" y="339.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.4" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.49%)</title><rect x="831.4" y="323.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="834.4" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.49%)</title><rect x="831.4" y="307.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.4" y="318.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.49%)</title><rect x="831.4" y="291.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.4" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.49%)</title><rect x="831.4" y="275.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.4" y="286.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.49%)</title><rect x="831.4" y="259.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="834.4" y="270.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.49%)</title><rect x="831.4" y="243.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.98%)</title><rect x="837.2" y="419.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="840.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.92%)</title><rect x="848.7" y="451.0" width="46.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="851.7" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 3.92%)</title><rect x="848.7" y="435.0" width="46.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.7" y="446.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.49%)</title><rect x="871.9" y="419.0" width="5.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="874.9" y="430.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="871.9" y="403.0" width="5.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="874.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.47%)</title><rect x="877.6" y="419.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="880.6" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/924898435.accept (3 samples, 1.47%)</title><rect x="877.6" y="403.0" width="17.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="880.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 1.47%)</title><rect x="877.6" y="387.0" width="17.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="880.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.47%)</title><rect x="877.6" y="371.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="880.6" y="382.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.47%)</title><rect x="877.6" y="355.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="880.6" y="366.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.47%)</title><rect x="877.6" y="339.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="880.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.45%)</title><rect x="895.0" y="467.0" width="28.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.0" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 2.45%)</title><rect x="895.0" y="451.0" width="28.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="898.0" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 2.45%)</title><rect x="895.0" y="435.0" width="28.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.0" y="446.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$267/924898435.accept (5 samples, 2.45%)</title><rect x="895.0" y="419.0" width="28.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.0" y="430.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (5 samples, 2.45%)</title><rect x="895.0" y="403.0" width="28.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.0" y="414.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 2.45%)</title><rect x="895.0" y="387.0" width="28.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="898.0" y="398.0">co..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 2.45%)</title><rect x="895.0" y="371.0" width="28.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.0" y="382.0">ja..</text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 2.45%)</title><rect x="895.0" y="355.0" width="28.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="898.0" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.49%)</title><rect x="923.9" y="531.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="926.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.49%)</title><rect x="923.9" y="515.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.49%)</title><rect x="923.9" y="499.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.49%)</title><rect x="923.9" y="483.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.49%)</title><rect x="923.9" y="467.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.98%)</title><rect x="929.7" y="531.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="932.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.98%)</title><rect x="929.7" y="515.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.49%)</title><rect x="935.5" y="499.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.49%)</title><rect x="935.5" y="483.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.49%)</title><rect x="935.5" y="467.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="938.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.49%)</title><rect x="935.5" y="451.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="938.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.98%)</title><rect x="941.3" y="579.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="944.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.98%)</title><rect x="941.3" y="563.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.98%)</title><rect x="941.3" y="547.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.49%)</title><rect x="941.3" y="531.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="944.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.49%)</title><rect x="941.3" y="515.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="944.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="941.3" y="499.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="944.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="941.3" y="483.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.49%)</title><rect x="941.3" y="467.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.49%)</title><rect x="941.3" y="451.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.49%)</title><rect x="941.3" y="435.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="944.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.49%)</title><rect x="947.1" y="531.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="950.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.49%)</title><rect x="947.1" y="515.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.1" y="526.0"></text>
</g>
<g>
<title>start_thread (41 samples, 20.10%)</title><rect x="952.8" y="579.0" width="237.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="955.8" y="590.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (41 samples, 20.10%)</title><rect x="952.8" y="563.0" width="237.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="955.8" y="574.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 4.90%)</title><rect x="952.8" y="547.0" width="57.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.8" y="558.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 4.90%)</title><rect x="952.8" y="531.0" width="57.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.8" y="542.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 4.41%)</title><rect x="952.8" y="515.0" width="52.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="955.8" y="526.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 3.92%)</title><rect x="952.8" y="499.0" width="46.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.8" y="510.0">G1Pa..</text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 1.47%)</title><rect x="981.8" y="483.0" width="17.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="984.8" y="494.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.49%)</title><rect x="999.1" y="499.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.1" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.49%)</title><rect x="1004.9" y="515.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.9" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.49%)</title><rect x="1004.9" y="499.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.9" y="510.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.49%)</title><rect x="1004.9" y="483.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1007.9" y="494.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.49%)</title><rect x="1004.9" y="467.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1007.9" y="478.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.49%)</title><rect x="1004.9" y="451.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.9" y="462.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 15.20%)</title><rect x="1010.7" y="547.0" width="179.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.7" y="558.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 15.20%)</title><rect x="1010.7" y="531.0" width="179.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.7" y="542.0">JavaThread::thread_main..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 15.20%)</title><rect x="1010.7" y="515.0" width="179.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.7" y="526.0">CompileBroker::compiler..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 15.20%)</title><rect x="1010.7" y="499.0" width="179.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.7" y="510.0">CompileBroker::invoke_c..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (28 samples, 13.73%)</title><rect x="1010.7" y="483.0" width="161.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.7" y="494.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (28 samples, 13.73%)</title><rect x="1010.7" y="467.0" width="161.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.7" y="478.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (15 samples, 7.35%)</title><rect x="1010.7" y="451.0" width="86.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1013.7" y="462.0">Compile::C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.98%)</title><rect x="1010.7" y="435.0" width="11.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.7" y="446.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.49%)</title><rect x="1010.7" y="419.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1013.7" y="430.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.49%)</title><rect x="1016.5" y="419.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.5" y="430.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.49%)</title><rect x="1016.5" y="403.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1019.5" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.49%)</title><rect x="1022.3" y="435.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.3" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.49%)</title><rect x="1022.3" y="419.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.3" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1022.3" y="403.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1025.3" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 5.88%)</title><rect x="1028.0" y="435.0" width="69.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.0" y="446.0">PhaseCh..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.49%)</title><rect x="1028.0" y="419.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.0" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.47%)</title><rect x="1033.8" y="419.0" width="17.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.8" y="430.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.49%)</title><rect x="1033.8" y="403.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.8" y="414.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.49%)</title><rect x="1039.6" y="403.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.6" y="414.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.49%)</title><rect x="1045.4" y="403.0" width="5.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1048.4" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.49%)</title><rect x="1051.2" y="419.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1054.2" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.49%)</title><rect x="1051.2" y="403.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.2" y="414.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.98%)</title><rect x="1057.0" y="419.0" width="11.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.0" y="430.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="1062.7" y="403.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.7" y="414.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 1.47%)</title><rect x="1068.5" y="419.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.5" y="430.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.49%)</title><rect x="1074.3" y="403.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.3" y="414.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="1080.1" y="403.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.1" y="414.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.49%)</title><rect x="1085.9" y="419.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1088.9" y="430.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.49%)</title><rect x="1085.9" y="403.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.9" y="414.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.49%)</title><rect x="1091.7" y="419.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.7" y="430.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 4.90%)</title><rect x="1097.5" y="451.0" width="57.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.5" y="462.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 4.90%)</title><rect x="1097.5" y="435.0" width="57.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.5" y="446.0">PhaseI..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.49%)</title><rect x="1097.5" y="419.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.5" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.49%)</title><rect x="1103.2" y="419.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.2" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.49%)</title><rect x="1109.0" y="419.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.0" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 2.94%)</title><rect x="1114.8" y="419.0" width="34.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.8" y="430.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.45%)</title><rect x="1120.6" y="403.0" width="28.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.6" y="414.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.45%)</title><rect x="1120.6" y="387.0" width="28.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.6" y="398.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.49%)</title><rect x="1149.5" y="419.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.49%)</title><rect x="1149.5" y="403.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.5" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.49%)</title><rect x="1149.5" y="387.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.98%)</title><rect x="1155.3" y="451.0" width="11.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.98%)</title><rect x="1155.3" y="435.0" width="11.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.98%)</title><rect x="1155.3" y="419.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.98%)</title><rect x="1155.3" y="403.0" width="11.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.98%)</title><rect x="1155.3" y="387.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.98%)</title><rect x="1155.3" y="371.0" width="11.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="355.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="339.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="323.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="307.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="291.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="275.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.3" y="259.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.3" y="243.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.3" y="227.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.3" y="211.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.3" y="195.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.3" y="179.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.3" y="190.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.49%)</title><rect x="1155.3" y="163.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.3" y="174.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.49%)</title><rect x="1155.3" y="147.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.3" y="158.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.49%)</title><rect x="1155.3" y="131.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="142.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1155.3" y="115.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.3" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.49%)</title><rect x="1155.3" y="99.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.3" y="110.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.49%)</title><rect x="1155.3" y="83.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.3" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1161.1" y="355.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1161.1" y="339.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1161.1" y="323.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1161.1" y="307.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1161.1" y="291.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1161.1" y="275.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1161.1" y="259.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1161.1" y="243.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1161.1" y="227.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1161.1" y="211.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1161.1" y="195.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1161.1" y="179.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.49%)</title><rect x="1161.1" y="163.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.49%)</title><rect x="1161.1" y="147.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1161.1" y="131.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="142.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.49%)</title><rect x="1161.1" y="115.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.1" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.49%)</title><rect x="1161.1" y="99.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.1" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.49%)</title><rect x="1161.1" y="83.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.1" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.49%)</title><rect x="1161.1" y="67.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.1" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.49%)</title><rect x="1161.1" y="51.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.49%)</title><rect x="1161.1" y="35.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.49%)</title><rect x="1166.9" y="451.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.9" y="462.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.49%)</title><rect x="1166.9" y="435.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.98%)</title><rect x="1172.6" y="483.0" width="11.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="494.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.98%)</title><rect x="1172.6" y="467.0" width="11.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="478.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.98%)</title><rect x="1172.6" y="451.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="462.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.98%)</title><rect x="1172.6" y="435.0" width="11.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="446.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.98%)</title><rect x="1172.6" y="419.0" width="11.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="430.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.98%)</title><rect x="1172.6" y="403.0" width="11.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="414.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.98%)</title><rect x="1172.6" y="387.0" width="11.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="398.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.98%)</title><rect x="1172.6" y="371.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="382.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.98%)</title><rect x="1172.6" y="355.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="366.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (2 samples, 0.98%)</title><rect x="1172.6" y="339.0" width="11.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="350.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.49%)</title><rect x="1178.4" y="323.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>Interval::split(int) (1 samples, 0.49%)</title><rect x="1178.4" y="307.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.49%)</title><rect x="1184.2" y="483.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.49%)</title><rect x="1184.2" y="467.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.2" y="478.0"></text>
</g>
</g>
</svg>
