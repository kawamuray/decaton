<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (192 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.52%)</title><rect x="10.0" y="851.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.52%)</title><rect x="10.0" y="835.0" width="6.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.52%)</title><rect x="10.0" y="819.0" width="6.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 17.19%)</title><rect x="16.1" y="851.0" width="202.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="862.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (33 samples, 17.19%)</title><rect x="16.1" y="835.0" width="202.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.1" y="846.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.52%)</title><rect x="16.1" y="819.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.52%)</title><rect x="16.1" y="803.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.52%)</title><rect x="16.1" y="787.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.52%)</title><rect x="16.1" y="771.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 11.46%)</title><rect x="22.3" y="819.0" width="135.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.3" y="830.0">java/lang/Iterabl..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1299152360.accept (22 samples, 11.46%)</title><rect x="22.3" y="803.0" width="135.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.3" y="814.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (22 samples, 11.46%)</title><rect x="22.3" y="787.0" width="135.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.3" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (18 samples, 9.38%)</title><rect x="22.3" y="771.0" width="110.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.3" y="782.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (18 samples, 9.38%)</title><rect x="22.3" y="755.0" width="110.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.3" y="766.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (18 samples, 9.38%)</title><rect x="22.3" y="739.0" width="110.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.3" y="750.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (18 samples, 9.38%)</title><rect x="22.3" y="723.0" width="110.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.3" y="734.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (18 samples, 9.38%)</title><rect x="22.3" y="707.0" width="110.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.3" y="718.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (14 samples, 7.29%)</title><rect x="46.9" y="691.0" width="86.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.9" y="702.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 4.17%)</title><rect x="46.9" y="675.0" width="49.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.9" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.52%)</title><rect x="46.9" y="659.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.52%)</title><rect x="46.9" y="643.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.52%)</title><rect x="46.9" y="627.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.52%)</title><rect x="46.9" y="611.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 3.65%)</title><rect x="53.0" y="659.0" width="43.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.0" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 3.65%)</title><rect x="53.0" y="643.0" width="43.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.0" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 3.65%)</title><rect x="53.0" y="627.0" width="43.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.0" y="638.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 3.65%)</title><rect x="53.0" y="611.0" width="43.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.0" y="622.0">java..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 3.65%)</title><rect x="53.0" y="595.0" width="43.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.0" y="606.0">sun/..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.52%)</title><rect x="53.0" y="579.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="56.0" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.60%)</title><rect x="59.2" y="579.0" width="30.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="62.2" y="590.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 2.08%)</title><rect x="59.2" y="563.0" width="24.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="62.2" y="574.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.52%)</title><rect x="83.8" y="563.0" width="6.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="86.8" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.52%)</title><rect x="89.9" y="579.0" width="6.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="92.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 3.12%)</title><rect x="96.0" y="675.0" width="36.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.0" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 3.12%)</title><rect x="96.0" y="659.0" width="36.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.0" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 1.04%)</title><rect x="96.0" y="643.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.56%)</title><rect x="108.3" y="643.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.52%)</title><rect x="108.3" y="627.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.52%)</title><rect x="108.3" y="611.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 1.04%)</title><rect x="114.5" y="627.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 1.04%)</title><rect x="114.5" y="611.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.52%)</title><rect x="126.8" y="643.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 1.56%)</title><rect x="132.9" y="771.0" width="18.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.56%)</title><rect x="132.9" y="755.0" width="18.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.56%)</title><rect x="132.9" y="739.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="135.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.52%)</title><rect x="151.4" y="771.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.52%)</title><rect x="151.4" y="755.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.4" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.52%)</title><rect x="151.4" y="739.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.4" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.52%)</title><rect x="151.4" y="723.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="154.4" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.52%)</title><rect x="151.4" y="707.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.21%)</title><rect x="157.5" y="819.0" width="61.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.5" y="830.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.21%)</title><rect x="157.5" y="803.0" width="61.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.5" y="814.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 3.12%)</title><rect x="157.5" y="787.0" width="36.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 3.12%)</title><rect x="157.5" y="771.0" width="36.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.5" y="782.0">org..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.52%)</title><rect x="157.5" y="755.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="160.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.60%)</title><rect x="163.6" y="755.0" width="30.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.6" y="766.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.04%)</title><rect x="163.6" y="739.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.04%)</title><rect x="163.6" y="723.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.04%)</title><rect x="163.6" y="707.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.52%)</title><rect x="163.6" y="691.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.52%)</title><rect x="163.6" y="675.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.52%)</title><rect x="163.6" y="659.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.52%)</title><rect x="163.6" y="643.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.52%)</title><rect x="163.6" y="627.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.52%)</title><rect x="163.6" y="611.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.52%)</title><rect x="163.6" y="595.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.52%)</title><rect x="169.8" y="691.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.52%)</title><rect x="169.8" y="675.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.52%)</title><rect x="169.8" y="659.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.52%)</title><rect x="169.8" y="643.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.52%)</title><rect x="175.9" y="739.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.52%)</title><rect x="182.1" y="739.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.52%)</title><rect x="182.1" y="723.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="182.1" y="707.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="182.1" y="691.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="182.1" y="675.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.52%)</title><rect x="182.1" y="659.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.52%)</title><rect x="182.1" y="643.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.52%)</title><rect x="182.1" y="627.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.52%)</title><rect x="188.2" y="739.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.52%)</title><rect x="194.4" y="787.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.52%)</title><rect x="194.4" y="771.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.52%)</title><rect x="194.4" y="755.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.52%)</title><rect x="194.4" y="739.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.52%)</title><rect x="194.4" y="723.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.52%)</title><rect x="194.4" y="707.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.52%)</title><rect x="194.4" y="691.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.52%)</title><rect x="194.4" y="675.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.52%)</title><rect x="194.4" y="659.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.52%)</title><rect x="194.4" y="643.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.52%)</title><rect x="194.4" y="627.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.56%)</title><rect x="200.5" y="787.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.04%)</title><rect x="200.5" y="771.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.04%)</title><rect x="200.5" y="755.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.04%)</title><rect x="200.5" y="739.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.52%)</title><rect x="200.5" y="723.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.52%)</title><rect x="200.5" y="707.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.52%)</title><rect x="206.7" y="723.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.52%)</title><rect x="206.7" y="707.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.52%)</title><rect x="206.7" y="691.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.52%)</title><rect x="206.7" y="675.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hashCode (1 samples, 0.52%)</title><rect x="206.7" y="659.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.52%)</title><rect x="212.8" y="771.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.52%)</title><rect x="212.8" y="755.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="212.8" y="739.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="212.8" y="723.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.52%)</title><rect x="212.8" y="707.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.52%)</title><rect x="212.8" y="691.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.52%)</title><rect x="212.8" y="675.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.52%)</title><rect x="212.8" y="659.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.52%)</title><rect x="212.8" y="643.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.validateField (1 samples, 0.52%)</title><rect x="212.8" y="627.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.8" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (64 samples, 33.33%)</title><rect x="219.0" y="851.0" width="393.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.0" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (64 samples, 33.33%)</title><rect x="219.0" y="835.0" width="393.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.0" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (64 samples, 33.33%)</title><rect x="219.0" y="819.0" width="393.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.0" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/523396890.run (43 samples, 22.40%)</title><rect x="225.1" y="803.0" width="264.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.1" y="814.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (43 samples, 22.40%)</title><rect x="225.1" y="787.0" width="264.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.1" y="798.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (43 samples, 22.40%)</title><rect x="225.1" y="771.0" width="264.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.1" y="782.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (43 samples, 22.40%)</title><rect x="225.1" y="755.0" width="264.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.1" y="766.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (8 samples, 4.17%)</title><rect x="231.3" y="739.0" width="49.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.3" y="750.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (8 samples, 4.17%)</title><rect x="231.3" y="723.0" width="49.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.3" y="734.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 4.17%)</title><rect x="231.3" y="707.0" width="49.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.3" y="718.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.17%)</title><rect x="231.3" y="691.0" width="49.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.3" y="702.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.17%)</title><rect x="231.3" y="675.0" width="49.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.3" y="686.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 4.17%)</title><rect x="231.3" y="659.0" width="49.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.3" y="670.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.56%)</title><rect x="231.3" y="643.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.56%)</title><rect x="231.3" y="627.0" width="18.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.52%)</title><rect x="243.5" y="611.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.52%)</title><rect x="243.5" y="595.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.52%)</title><rect x="243.5" y="579.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.60%)</title><rect x="249.7" y="643.0" width="30.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.7" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.52%)</title><rect x="249.7" y="627.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.52%)</title><rect x="249.7" y="611.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.56%)</title><rect x="255.8" y="627.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.56%)</title><rect x="255.8" y="611.0" width="18.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.56%)</title><rect x="255.8" y="595.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.56%)</title><rect x="255.8" y="579.0" width="18.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.56%)</title><rect x="255.8" y="563.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 1.04%)</title><rect x="262.0" y="547.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.04%)</title><rect x="262.0" y="531.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.04%)</title><rect x="262.0" y="515.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 1.04%)</title><rect x="262.0" y="499.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.52%)</title><rect x="274.3" y="627.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (34 samples, 17.71%)</title><rect x="280.4" y="739.0" width="209.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.4" y="750.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (4 samples, 2.08%)</title><rect x="286.6" y="723.0" width="24.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.6" y="734.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.08%)</title><rect x="286.6" y="707.0" width="24.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.6" y="718.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.08%)</title><rect x="286.6" y="691.0" width="24.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.6" y="702.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.52%)</title><rect x="286.6" y="675.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.52%)</title><rect x="286.6" y="659.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.52%)</title><rect x="286.6" y="643.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="286.6" y="627.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.52%)</title><rect x="286.6" y="611.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.6" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.56%)</title><rect x="292.7" y="675.0" width="18.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.04%)</title><rect x="298.9" y="659.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.04%)</title><rect x="298.9" y="643.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 7.29%)</title><rect x="311.1" y="723.0" width="86.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.1" y="734.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 7.29%)</title><rect x="311.1" y="707.0" width="86.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.1" y="718.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 4.17%)</title><rect x="317.3" y="691.0" width="49.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.3" y="702.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 4.17%)</title><rect x="317.3" y="675.0" width="49.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.3" y="686.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.60%)</title><rect x="323.4" y="659.0" width="30.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.4" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.56%)</title><rect x="335.7" y="643.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.56%)</title><rect x="335.7" y="627.0" width="18.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="338.7" y="638.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.52%)</title><rect x="354.2" y="659.0" width="6.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="357.2" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="360.3" y="659.0" width="6.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="363.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.52%)</title><rect x="366.5" y="691.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.5" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.52%)</title><rect x="366.5" y="675.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.5" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.08%)</title><rect x="372.6" y="691.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="375.6" y="702.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.08%)</title><rect x="372.6" y="675.0" width="24.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="375.6" y="686.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.08%)</title><rect x="372.6" y="659.0" width="24.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="375.6" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.08%)</title><rect x="372.6" y="643.0" width="24.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="375.6" y="654.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.04%)</title><rect x="384.9" y="627.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.52%)</title><rect x="391.0" y="611.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="394.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (10 samples, 5.21%)</title><rect x="397.2" y="723.0" width="61.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.2" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (10 samples, 5.21%)</title><rect x="397.2" y="707.0" width="61.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.2" y="718.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/556787342.process (1 samples, 0.52%)</title><rect x="403.3" y="691.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.52%)</title><rect x="403.3" y="675.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.52%)</title><rect x="403.3" y="659.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="406.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="403.3" y="643.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.52%)</title><rect x="403.3" y="627.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.52%)</title><rect x="403.3" y="611.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="406.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="403.3" y="595.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="406.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.52%)</title><rect x="409.5" y="691.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.52%)</title><rect x="415.6" y="691.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.52%)</title><rect x="415.6" y="675.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.6" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.52%)</title><rect x="421.8" y="691.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.52%)</title><rect x="421.8" y="675.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.8" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="421.8" y="659.0" width="6.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="424.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 2.08%)</title><rect x="427.9" y="691.0" width="24.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.9" y="702.0">j..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 2.08%)</title><rect x="427.9" y="675.0" width="24.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.9" y="686.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.get (4 samples, 2.08%)</title><rect x="427.9" y="659.0" width="24.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.9" y="670.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (4 samples, 2.08%)</title><rect x="427.9" y="643.0" width="24.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="430.9" y="654.0">j..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.56%)</title><rect x="434.1" y="627.0" width="18.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="437.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.04%)</title><rect x="440.2" y="611.0" width="12.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="443.2" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.52%)</title><rect x="452.5" y="691.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.5" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.52%)</title><rect x="452.5" y="675.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.52%)</title><rect x="458.6" y="723.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.6" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1194722047.linkToTargetMethod (1 samples, 0.52%)</title><rect x="464.8" y="723.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.52%)</title><rect x="464.8" y="707.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/671487190.get$Lambda (1 samples, 0.52%)</title><rect x="464.8" y="691.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.56%)</title><rect x="470.9" y="723.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.56%)</title><rect x="470.9" y="707.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.56%)</title><rect x="470.9" y="691.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="473.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$270/671487190.accept (3 samples, 1.56%)</title><rect x="470.9" y="675.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (3 samples, 1.56%)</title><rect x="470.9" y="659.0" width="18.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.9" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.56%)</title><rect x="470.9" y="643.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.9" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.56%)</title><rect x="470.9" y="627.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.04%)</title><rect x="489.4" y="803.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/523396890.run (1 samples, 0.52%)</title><rect x="495.5" y="787.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="498.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 9.38%)</title><rect x="501.7" y="803.0" width="110.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="504.7" y="814.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 9.38%)</title><rect x="501.7" y="787.0" width="110.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.7" y="798.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (18 samples, 9.38%)</title><rect x="501.7" y="771.0" width="110.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.7" y="782.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (18 samples, 9.38%)</title><rect x="501.7" y="755.0" width="110.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="504.7" y="766.0">java/util/con..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (18 samples, 9.38%)</title><rect x="501.7" y="739.0" width="110.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.7" y="750.0">sun/misc/Unsa..</text>
</g>
<g>
<title>Unsafe_Park (18 samples, 9.38%)</title><rect x="501.7" y="723.0" width="110.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="504.7" y="734.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.52%)</title><rect x="507.8" y="707.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="510.8" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.52%)</title><rect x="514.0" y="707.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="517.0" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.08%)</title><rect x="520.1" y="707.0" width="24.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="523.1" y="718.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (7 samples, 3.65%)</title><rect x="544.7" y="707.0" width="43.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="547.7" y="718.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.52%)</title><rect x="587.7" y="707.0" width="6.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="590.7" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.52%)</title><rect x="593.9" y="707.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="596.9" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.52%)</title><rect x="600.0" y="707.0" width="6.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="603.0" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.52%)</title><rect x="606.1" y="707.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="609.1" y="718.0"></text>
</g>
<g>
<title>start_thread (94 samples, 48.96%)</title><rect x="612.3" y="851.0" width="577.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="615.3" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (94 samples, 48.96%)</title><rect x="612.3" y="835.0" width="577.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="615.3" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 6.25%)</title><rect x="612.3" y="819.0" width="73.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="615.3" y="830.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (12 samples, 6.25%)</title><rect x="612.3" y="803.0" width="73.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="615.3" y="814.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.17%)</title><rect x="612.3" y="787.0" width="49.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="615.3" y="798.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.08%)</title><rect x="612.3" y="771.0" width="24.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="615.3" y="782.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.04%)</title><rect x="624.6" y="755.0" width="12.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="627.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.52%)</title><rect x="624.6" y="739.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="627.6" y="750.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.52%)</title><rect x="624.6" y="723.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="627.6" y="734.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.52%)</title><rect x="630.7" y="739.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="633.7" y="750.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.04%)</title><rect x="636.9" y="771.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="639.9" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.52%)</title><rect x="649.2" y="771.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="652.2" y="782.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.52%)</title><rect x="655.3" y="771.0" width="6.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="658.3" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 1.04%)</title><rect x="661.5" y="787.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="664.5" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 1.04%)</title><rect x="661.5" y="771.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="664.5" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 1.04%)</title><rect x="661.5" y="755.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="664.5" y="766.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.52%)</title><rect x="661.5" y="739.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="664.5" y="750.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.52%)</title><rect x="667.6" y="739.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="670.6" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.52%)</title><rect x="667.6" y="723.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="670.6" y="734.0"></text>
</g>
<g>
<title>objArrayOopDesc::object_size(int) (1 samples, 0.52%)</title><rect x="667.6" y="707.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="670.6" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 1.04%)</title><rect x="673.7" y="787.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="676.7" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.04%)</title><rect x="673.7" y="771.0" width="12.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="676.7" y="782.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 1.04%)</title><rect x="673.7" y="755.0" width="12.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="676.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 1.04%)</title><rect x="673.7" y="739.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="676.7" y="750.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.52%)</title><rect x="673.7" y="723.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="676.7" y="734.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.52%)</title><rect x="679.9" y="723.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="682.9" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.52%)</title><rect x="679.9" y="707.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="682.9" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (82 samples, 42.71%)</title><rect x="686.0" y="819.0" width="504.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.0" y="830.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 42.19%)</title><rect x="686.0" y="803.0" width="497.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.0" y="814.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 42.19%)</title><rect x="686.0" y="787.0" width="497.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="689.0" y="798.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 40.62%)</title><rect x="686.0" y="771.0" width="479.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="689.0" y="782.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 40.62%)</title><rect x="686.0" y="755.0" width="479.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="689.0" y="766.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 25.00%)</title><rect x="686.0" y="739.0" width="295.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="689.0" y="750.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.56%)</title><rect x="686.0" y="723.0" width="18.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="689.0" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 1.56%)</title><rect x="686.0" y="707.0" width="18.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="689.0" y="718.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.52%)</title><rect x="686.0" y="691.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="689.0" y="702.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.52%)</title><rect x="686.0" y="675.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="689.0" y="686.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.52%)</title><rect x="686.0" y="659.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="689.0" y="670.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.52%)</title><rect x="686.0" y="643.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.0" y="654.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.52%)</title><rect x="686.0" y="627.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.0" y="638.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.52%)</title><rect x="692.2" y="691.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="695.2" y="702.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.52%)</title><rect x="692.2" y="675.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="695.2" y="686.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.52%)</title><rect x="692.2" y="659.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="695.2" y="670.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.52%)</title><rect x="692.2" y="643.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="695.2" y="654.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.52%)</title><rect x="692.2" y="627.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="695.2" y="638.0"></text>
</g>
<g>
<title>MachNode::size(PhaseRegAlloc*) const (1 samples, 0.52%)</title><rect x="698.3" y="691.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="701.3" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.04%)</title><rect x="704.5" y="723.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="707.5" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.52%)</title><rect x="704.5" y="707.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="707.5" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.52%)</title><rect x="704.5" y="691.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="707.5" y="702.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.52%)</title><rect x="710.6" y="707.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="713.6" y="718.0"></text>
</g>
<g>
<title>MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.52%)</title><rect x="710.6" y="691.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="713.6" y="702.0"></text>
</g>
<g>
<title>Assembler::orq(RegisterImpl*, Address) (1 samples, 0.52%)</title><rect x="710.6" y="675.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="713.6" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.04%)</title><rect x="716.8" y="723.0" width="12.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="719.8" y="734.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.52%)</title><rect x="716.8" y="707.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="719.8" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.52%)</title><rect x="722.9" y="707.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="725.9" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.52%)</title><rect x="722.9" y="691.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.9" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 2.60%)</title><rect x="729.1" y="723.0" width="30.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="732.1" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 2.60%)</title><rect x="729.1" y="707.0" width="30.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="732.1" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.52%)</title><rect x="729.1" y="691.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="732.1" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.52%)</title><rect x="729.1" y="675.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="732.1" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.56%)</title><rect x="735.2" y="691.0" width="18.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.2" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.52%)</title><rect x="741.4" y="675.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="744.4" y="686.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.52%)</title><rect x="741.4" y="659.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="744.4" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.52%)</title><rect x="747.5" y="675.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="750.5" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.52%)</title><rect x="753.6" y="691.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.6" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.52%)</title><rect x="759.8" y="723.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="762.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 18.23%)</title><rect x="765.9" y="723.0" width="215.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="768.9" y="734.0">PhaseChaitin::Register_Alloc..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.52%)</title><rect x="765.9" y="707.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="768.9" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 1.56%)</title><rect x="772.1" y="707.0" width="18.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="775.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.04%)</title><rect x="790.5" y="707.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="793.5" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.52%)</title><rect x="790.5" y="691.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="793.5" y="702.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.52%)</title><rect x="796.7" y="691.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="799.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 2.08%)</title><rect x="802.8" y="707.0" width="24.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="805.8" y="718.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="802.8" y="691.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="805.8" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 1.56%)</title><rect x="809.0" y="691.0" width="18.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.0" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.52%)</title><rect x="815.1" y="675.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="818.1" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="821.2" y="675.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="824.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.56%)</title><rect x="827.4" y="707.0" width="18.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="830.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.52%)</title><rect x="839.7" y="691.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="842.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.52%)</title><rect x="839.7" y="675.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="842.7" y="686.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.52%)</title><rect x="839.7" y="659.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="842.7" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 3.65%)</title><rect x="845.8" y="707.0" width="43.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.8" y="718.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.56%)</title><rect x="864.3" y="691.0" width="18.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.3" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="876.6" y="675.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="879.6" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.52%)</title><rect x="882.7" y="691.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.52%)</title><rect x="888.9" y="707.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.52%)</title><rect x="888.9" y="691.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="888.9" y="675.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.04%)</title><rect x="895.0" y="707.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.0" y="718.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.52%)</title><rect x="901.1" y="691.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.52%)</title><rect x="907.3" y="707.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="910.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.56%)</title><rect x="913.4" y="707.0" width="18.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.04%)</title><rect x="919.6" y="691.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.52%)</title><rect x="931.9" y="707.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="934.9" y="718.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.52%)</title><rect x="931.9" y="691.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.9" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.52%)</title><rect x="938.0" y="707.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.0" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.52%)</title><rect x="938.0" y="691.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.0" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.52%)</title><rect x="938.0" y="675.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.0" y="686.0"></text>
</g>
<g>
<title>IndexSet::swap(IndexSet*) (1 samples, 0.52%)</title><rect x="938.0" y="659.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.04%)</title><rect x="944.2" y="707.0" width="12.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="950.3" y="691.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.3" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.08%)</title><rect x="956.5" y="707.0" width="24.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.5" y="718.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.52%)</title><rect x="968.8" y="691.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.8" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.52%)</title><rect x="968.8" y="675.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.8" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="974.9" y="691.0" width="6.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="977.9" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 10.42%)</title><rect x="981.0" y="739.0" width="123.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.0" y="750.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.52%)</title><rect x="981.0" y="723.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.0" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.52%)</title><rect x="981.0" y="707.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.04%)</title><rect x="987.2" y="723.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.04%)</title><rect x="987.2" y="707.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.52%)</title><rect x="987.2" y="691.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.2" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="987.2" y="675.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="990.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.52%)</title><rect x="993.3" y="691.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.3" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.52%)</title><rect x="993.3" y="675.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.3" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.52%)</title><rect x="999.5" y="723.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.5" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.52%)</title><rect x="999.5" y="707.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.5" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.52%)</title><rect x="999.5" y="691.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1002.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 6.25%)</title><rect x="1005.6" y="723.0" width="73.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.6" y="734.0">PhaseIde..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 1.04%)</title><rect x="1005.6" y="707.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.6" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="691.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1008.6" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="675.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.6" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="659.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1008.6" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="643.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1008.6" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="627.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.6" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="611.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.6" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="595.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.6" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1005.6" y="579.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.52%)</title><rect x="1005.6" y="563.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1008.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.52%)</title><rect x="1005.6" y="547.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.6" y="558.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.52%)</title><rect x="1005.6" y="531.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1011.8" y="691.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1014.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1011.8" y="675.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1014.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.52%)</title><rect x="1011.8" y="659.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.60%)</title><rect x="1017.9" y="707.0" width="30.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1020.9" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.60%)</title><rect x="1017.9" y="691.0" width="30.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.9" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 2.08%)</title><rect x="1024.1" y="675.0" width="24.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.1" y="686.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.04%)</title><rect x="1036.4" y="659.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 2.08%)</title><rect x="1048.6" y="707.0" width="24.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1051.6" y="718.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 1.04%)</title><rect x="1048.6" y="691.0" width="12.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.52%)</title><rect x="1054.8" y="675.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.8" y="686.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.52%)</title><rect x="1054.8" y="659.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.8" y="670.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.52%)</title><rect x="1054.8" y="643.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.04%)</title><rect x="1060.9" y="691.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.52%)</title><rect x="1060.9" y="675.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.52%)</title><rect x="1067.1" y="675.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.1" y="686.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.52%)</title><rect x="1067.1" y="659.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.1" y="670.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1067.1" y="643.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.1" y="654.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.52%)</title><rect x="1067.1" y="627.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.1" y="638.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.52%)</title><rect x="1067.1" y="611.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.1" y="622.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.52%)</title><rect x="1067.1" y="595.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.1" y="606.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="1073.2" y="707.0" width="6.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1076.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.04%)</title><rect x="1079.4" y="723.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.04%)</title><rect x="1079.4" y="707.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.4" y="718.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.52%)</title><rect x="1079.4" y="691.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.4" y="702.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1085.5" y="691.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.5" y="702.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1085.5" y="675.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.5" y="686.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.52%)</title><rect x="1091.7" y="723.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.7" y="734.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.52%)</title><rect x="1091.7" y="707.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.7" y="718.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1091.7" y="691.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.7" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="1097.8" y="723.0" width="6.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1100.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 4.69%)</title><rect x="1104.0" y="739.0" width="55.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.0" y="750.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 4.69%)</title><rect x="1104.0" y="723.0" width="55.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.0" y="734.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 4.69%)</title><rect x="1104.0" y="707.0" width="55.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.0" y="718.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 4.69%)</title><rect x="1104.0" y="691.0" width="55.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.0" y="702.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 4.69%)</title><rect x="1104.0" y="675.0" width="55.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.0" y="686.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 4.17%)</title><rect x="1104.0" y="659.0" width="49.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.0" y="670.0">Parse..</text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.52%)</title><rect x="1104.0" y="643.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.65%)</title><rect x="1110.1" y="643.0" width="43.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.1" y="654.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.65%)</title><rect x="1110.1" y="627.0" width="43.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.1" y="638.0">Pars..</text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.52%)</title><rect x="1110.1" y="611.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.52%)</title><rect x="1110.1" y="595.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.1" y="606.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.52%)</title><rect x="1110.1" y="579.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.12%)</title><rect x="1116.2" y="611.0" width="36.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.2" y="622.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.12%)</title><rect x="1116.2" y="595.0" width="36.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.2" y="606.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.12%)</title><rect x="1116.2" y="579.0" width="36.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.2" y="590.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.12%)</title><rect x="1116.2" y="563.0" width="36.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.2" y="574.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1116.2" y="547.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.2" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.52%)</title><rect x="1116.2" y="531.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.2" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.52%)</title><rect x="1116.2" y="515.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.52%)</title><rect x="1116.2" y="499.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.52%)</title><rect x="1116.2" y="483.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1116.2" y="467.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.2" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1116.2" y="451.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.2" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.52%)</title><rect x="1116.2" y="435.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.2" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.52%)</title><rect x="1116.2" y="419.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.2" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.52%)</title><rect x="1116.2" y="403.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.2" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1116.2" y="387.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.2" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1116.2" y="371.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.2" y="382.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.52%)</title><rect x="1116.2" y="355.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.08%)</title><rect x="1122.4" y="547.0" width="24.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.4" y="558.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.08%)</title><rect x="1122.4" y="531.0" width="24.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.4" y="542.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.08%)</title><rect x="1122.4" y="515.0" width="24.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.4" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.08%)</title><rect x="1122.4" y="499.0" width="24.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.4" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.08%)</title><rect x="1122.4" y="483.0" width="24.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.4" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.08%)</title><rect x="1122.4" y="467.0" width="24.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.4" y="478.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.56%)</title><rect x="1122.4" y="451.0" width="18.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.56%)</title><rect x="1122.4" y="435.0" width="18.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.56%)</title><rect x="1122.4" y="419.0" width="18.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.56%)</title><rect x="1122.4" y="403.0" width="18.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.56%)</title><rect x="1122.4" y="387.0" width="18.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.56%)</title><rect x="1122.4" y="371.0" width="18.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.52%)</title><rect x="1122.4" y="355.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.4" y="366.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.52%)</title><rect x="1122.4" y="339.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.4" y="350.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.52%)</title><rect x="1122.4" y="323.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.4" y="334.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="1122.4" y="307.0" width="6.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1125.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1128.5" y="355.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1128.5" y="339.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1128.5" y="323.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1128.5" y="307.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1128.5" y="291.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1128.5" y="275.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1128.5" y="259.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1128.5" y="243.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1128.5" y="227.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1128.5" y="211.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1128.5" y="195.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1128.5" y="179.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1128.5" y="163.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.5" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1128.5" y="147.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="158.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.52%)</title><rect x="1128.5" y="131.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="142.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.52%)</title><rect x="1128.5" y="115.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.5" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.52%)</title><rect x="1128.5" y="99.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.5" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.52%)</title><rect x="1128.5" y="83.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.5" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.52%)</title><rect x="1128.5" y="67.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="78.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.52%)</title><rect x="1128.5" y="51.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.5" y="62.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.52%)</title><rect x="1128.5" y="35.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1131.5" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.52%)</title><rect x="1134.7" y="355.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1134.7" y="339.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1134.7" y="323.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="334.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1134.7" y="307.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.7" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.52%)</title><rect x="1134.7" y="291.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.7" y="302.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.52%)</title><rect x="1134.7" y="275.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.7" y="286.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.52%)</title><rect x="1134.7" y="259.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.7" y="270.0"></text>
</g>
<g>
<title>methodHandle::remove() (1 samples, 0.52%)</title><rect x="1134.7" y="243.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.7" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1140.8" y="451.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1140.8" y="435.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1140.8" y="419.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1140.8" y="403.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1140.8" y="387.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1140.8" y="371.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1140.8" y="355.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1140.8" y="339.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1140.8" y="323.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.8" y="334.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.52%)</title><rect x="1140.8" y="307.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.8" y="318.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.52%)</title><rect x="1140.8" y="291.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.8" y="302.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.52%)</title><rect x="1140.8" y="275.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="286.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.52%)</title><rect x="1140.8" y="259.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="270.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.52%)</title><rect x="1140.8" y="243.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.8" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.0" y="547.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.0" y="531.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.0" y="515.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.0" y="499.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.0" y="483.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.0" y="467.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.0" y="451.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.0" y="435.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.0" y="419.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.0" y="403.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.0" y="387.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.0" y="371.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.0" y="355.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.0" y="339.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.0" y="323.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="334.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.52%)</title><rect x="1147.0" y="307.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.0" y="318.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.52%)</title><rect x="1147.0" y="291.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.0" y="302.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.52%)</title><rect x="1147.0" y="275.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1147.0" y="259.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.0" y="270.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.52%)</title><rect x="1147.0" y="243.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.52%)</title><rect x="1153.1" y="659.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.1" y="670.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.52%)</title><rect x="1153.1" y="643.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="654.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.52%)</title><rect x="1153.1" y="627.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="638.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.52%)</title><rect x="1153.1" y="611.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="622.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.52%)</title><rect x="1153.1" y="595.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="606.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.52%)</title><rect x="1153.1" y="579.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.52%)</title><rect x="1159.3" y="739.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.3" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1159.3" y="723.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.3" y="734.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.04%)</title><rect x="1165.4" y="771.0" width="12.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.04%)</title><rect x="1165.4" y="755.0" width="12.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.04%)</title><rect x="1165.4" y="739.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.04%)</title><rect x="1165.4" y="723.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.52%)</title><rect x="1165.4" y="707.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.4" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.52%)</title><rect x="1165.4" y="691.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.4" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.52%)</title><rect x="1165.4" y="675.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.52%)</title><rect x="1165.4" y="659.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1165.4" y="643.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1165.4" y="627.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1165.4" y="611.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1165.4" y="595.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1165.4" y="579.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1165.4" y="563.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1165.4" y="547.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1165.4" y="531.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.4" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1165.4" y="515.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1165.4" y="499.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.4" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1165.4" y="483.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1165.4" y="467.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1165.4" y="451.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="462.0"></text>
</g>
<g>
<title>NullCheck::visit(InstructionVisitor*) (1 samples, 0.52%)</title><rect x="1165.4" y="435.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="446.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.52%)</title><rect x="1171.6" y="707.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.6" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.52%)</title><rect x="1171.6" y="691.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.6" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.52%)</title><rect x="1171.6" y="675.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="686.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.52%)</title><rect x="1171.6" y="659.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="670.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.52%)</title><rect x="1171.6" y="643.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="654.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.52%)</title><rect x="1171.6" y="627.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="638.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.52%)</title><rect x="1171.6" y="611.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.6" y="622.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.52%)</title><rect x="1171.6" y="595.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="606.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.52%)</title><rect x="1177.7" y="771.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="782.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.52%)</title><rect x="1177.7" y="755.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.52%)</title><rect x="1183.9" y="803.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.9" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.52%)</title><rect x="1183.9" y="787.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.9" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.52%)</title><rect x="1183.9" y="771.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="782.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.52%)</title><rect x="1183.9" y="755.0" width="6.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1186.9" y="766.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.52%)</title><rect x="1183.9" y="739.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.9" y="750.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.52%)</title><rect x="1183.9" y="723.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="734.0"></text>
</g>
</g>
</svg>
