<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (1,043 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (294 samples, 28.19%)</title><rect x="10.0" y="1011.0" width="332.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="10.0" y="995.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (293 samples, 28.09%)</title><rect x="11.1" y="995.0" width="331.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1006.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (9 samples, 0.86%)</title><rect x="11.1" y="979.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (9 samples, 0.86%)</title><rect x="11.1" y="963.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1231602494.accept (8 samples, 0.77%)</title><rect x="12.3" y="947.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (8 samples, 0.77%)</title><rect x="12.3" y="931.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (8 samples, 0.77%)</title><rect x="12.3" y="915.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.3" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.58%)</title><rect x="13.4" y="899.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="20.2" y="899.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.2" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="20.2" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.2" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="20.2" y="867.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.2" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="20.2" y="851.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.38%)</title><rect x="21.3" y="979.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.38%)</title><rect x="21.3" y="963.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.38%)</title><rect x="21.3" y="947.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.38%)</title><rect x="21.3" y="931.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="21.3" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="21.3" y="899.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="21.3" y="883.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="21.3" y="867.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="21.3" y="851.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.29%)</title><rect x="22.4" y="915.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.29%)</title><rect x="22.4" y="899.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.29%)</title><rect x="22.4" y="883.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.4" y="894.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="22.4" y="867.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.4" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="22.4" y="851.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="25.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="23.6" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="23.6" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="23.6" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="24.7" y="867.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="24.7" y="851.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="24.7" y="835.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.10%)</title><rect x="24.7" y="819.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (229 samples, 21.96%)</title><rect x="25.8" y="979.0" width="259.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="990.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/425729114.accept (222 samples, 21.28%)</title><rect x="28.1" y="963.0" width="251.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.1" y="974.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (222 samples, 21.28%)</title><rect x="28.1" y="947.0" width="251.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.1" y="958.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (164 samples, 15.72%)</title><rect x="42.8" y="931.0" width="185.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.8" y="942.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (164 samples, 15.72%)</title><rect x="42.8" y="915.0" width="185.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.8" y="926.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (164 samples, 15.72%)</title><rect x="42.8" y="899.0" width="185.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.8" y="910.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (164 samples, 15.72%)</title><rect x="42.8" y="883.0" width="185.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.8" y="894.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 15.72%)</title><rect x="42.8" y="867.0" width="185.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.8" y="878.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (164 samples, 15.72%)</title><rect x="42.8" y="851.0" width="185.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.8" y="862.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 10.64%)</title><rect x="42.8" y="835.0" width="125.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.8" y="846.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 2.11%)</title><rect x="42.8" y="819.0" width="24.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.8" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 2.11%)</title><rect x="42.8" y="803.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.8" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.82%)</title><rect x="46.2" y="787.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (19 samples, 1.82%)</title><rect x="46.2" y="771.0" width="21.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.2" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 1.05%)</title><rect x="67.7" y="819.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 1.05%)</title><rect x="67.7" y="803.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.19%)</title><rect x="71.1" y="787.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.1" y="798.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.19%)</title><rect x="71.1" y="771.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="74.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.58%)</title><rect x="73.4" y="787.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 7.48%)</title><rect x="80.1" y="819.0" width="88.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.1" y="830.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 7.48%)</title><rect x="80.1" y="803.0" width="88.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.1" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 7.19%)</title><rect x="82.4" y="787.0" width="84.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.4" y="798.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 7.19%)</title><rect x="82.4" y="771.0" width="84.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.4" y="782.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 7.19%)</title><rect x="82.4" y="755.0" width="84.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.4" y="766.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 6.71%)</title><rect x="82.4" y="739.0" width="79.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="85.4" y="750.0">Unsafe_Un..</text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.38%)</title><rect x="84.7" y="723.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="87.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="89.2" y="723.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="92.2" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 4.03%)</title><rect x="90.3" y="723.0" width="47.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="93.3" y="734.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.29%)</title><rect x="137.8" y="723.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="140.8" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.73%)</title><rect x="141.2" y="723.0" width="20.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="144.2" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.19%)</title><rect x="161.6" y="739.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="164.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.29%)</title><rect x="163.9" y="739.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="166.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="167.3" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.19%)</title><rect x="168.4" y="835.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.19%)</title><rect x="168.4" y="819.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.19%)</title><rect x="168.4" y="803.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (51 samples, 4.89%)</title><rect x="170.7" y="835.0" width="57.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.7" y="846.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (51 samples, 4.89%)</title><rect x="170.7" y="819.0" width="57.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.7" y="830.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (51 samples, 4.89%)</title><rect x="170.7" y="803.0" width="57.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.7" y="814.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.10%)</title><rect x="227.2" y="787.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (6 samples, 0.58%)</title><rect x="228.4" y="931.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (6 samples, 0.58%)</title><rect x="228.4" y="915.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.38%)</title><rect x="235.1" y="931.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.38%)</title><rect x="235.1" y="915.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.38%)</title><rect x="235.1" y="899.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (35 samples, 3.36%)</title><rect x="239.7" y="931.0" width="39.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.7" y="942.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 2.40%)</title><rect x="246.5" y="915.0" width="28.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.5" y="926.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 1.05%)</title><rect x="255.5" y="899.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.5" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.19%)</title><rect x="258.9" y="883.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.9" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.19%)</title><rect x="258.9" y="867.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.9" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.19%)</title><rect x="258.9" y="851.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.9" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.29%)</title><rect x="261.2" y="883.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.2" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="264.6" y="883.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="267.6" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.58%)</title><rect x="267.9" y="899.0" width="6.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="270.9" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.38%)</title><rect x="274.7" y="915.0" width="4.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="277.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.48%)</title><rect x="279.3" y="963.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.48%)</title><rect x="279.3" y="947.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.48%)</title><rect x="279.3" y="931.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.48%)</title><rect x="279.3" y="915.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.3" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.38%)</title><rect x="280.4" y="899.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.89%)</title><rect x="284.9" y="979.0" width="57.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.9" y="990.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.89%)</title><rect x="284.9" y="963.0" width="57.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.9" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 3.26%)</title><rect x="284.9" y="947.0" width="38.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.9" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 3.26%)</title><rect x="284.9" y="931.0" width="38.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.9" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 3.26%)</title><rect x="284.9" y="915.0" width="38.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.9" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.78%)</title><rect x="284.9" y="899.0" width="32.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.9" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.78%)</title><rect x="284.9" y="883.0" width="32.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.9" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.15%)</title><rect x="288.3" y="867.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.58%)</title><rect x="292.8" y="851.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.58%)</title><rect x="292.8" y="835.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.58%)</title><rect x="292.8" y="819.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.58%)</title><rect x="292.8" y="803.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.58%)</title><rect x="292.8" y="787.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="295.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.58%)</title><rect x="292.8" y="771.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.58%)</title><rect x="292.8" y="755.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.10%)</title><rect x="299.6" y="851.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.10%)</title><rect x="299.6" y="835.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.10%)</title><rect x="299.6" y="819.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.10%)</title><rect x="299.6" y="803.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.10%)</title><rect x="299.6" y="787.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="299.6" y="771.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="302.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="299.6" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="302.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.10%)</title><rect x="300.8" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="300.8" y="835.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.10%)</title><rect x="300.8" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.34%)</title><rect x="301.9" y="867.0" width="15.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.25%)</title><rect x="303.0" y="851.0" width="14.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (13 samples, 1.25%)</title><rect x="303.0" y="835.0" width="14.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.0" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (13 samples, 1.25%)</title><rect x="303.0" y="819.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.0" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.58%)</title><rect x="309.8" y="803.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (6 samples, 0.58%)</title><rect x="309.8" y="787.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (6 samples, 0.58%)</title><rect x="309.8" y="771.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.58%)</title><rect x="309.8" y="755.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.8" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="316.6" y="803.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="319.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.19%)</title><rect x="317.7" y="899.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="320.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.19%)</title><rect x="317.7" y="883.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.10%)</title><rect x="317.7" y="867.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.7" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="317.7" y="851.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.10%)</title><rect x="317.7" y="835.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.10%)</title><rect x="317.7" y="819.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="318.9" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="321.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="318.9" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="318.9" y="835.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="318.9" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="320.0" y="899.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="320.0" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="320.0" y="867.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="323.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="320.0" y="851.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="320.0" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="320.0" y="819.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.0" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="320.0" y="803.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="323.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.10%)</title><rect x="321.1" y="899.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="324.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.10%)</title><rect x="321.1" y="883.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="321.1" y="867.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="321.1" y="851.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="322.3" y="899.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.86%)</title><rect x="323.4" y="947.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.67%)</title><rect x="323.4" y="931.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.67%)</title><rect x="323.4" y="915.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.4" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="323.4" y="899.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="323.4" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.10%)</title><rect x="323.4" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="323.4" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="323.4" y="835.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="324.5" y="899.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.48%)</title><rect x="325.6" y="899.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (5 samples, 0.48%)</title><rect x="325.6" y="883.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.29%)</title><rect x="327.9" y="867.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="330.9" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="327.9" y="851.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="327.9" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="327.9" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="327.9" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="329.0" y="851.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="329.0" y="835.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="329.0" y="819.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="332.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="329.0" y="803.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.0" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="329.0" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="330.2" y="787.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.19%)</title><rect x="331.3" y="931.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.10%)</title><rect x="332.4" y="915.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.10%)</title><rect x="332.4" y="899.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.19%)</title><rect x="333.6" y="947.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.19%)</title><rect x="333.6" y="931.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="336.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.19%)</title><rect x="333.6" y="915.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.19%)</title><rect x="333.6" y="899.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.19%)</title><rect x="333.6" y="883.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.19%)</title><rect x="333.6" y="867.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="336.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.10%)</title><rect x="333.6" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.10%)</title><rect x="333.6" y="835.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.6" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.10%)</title><rect x="333.6" y="819.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.6" y="830.0"></text>
</g>
<g>
<title>java/nio/Bits.putInt (1 samples, 0.10%)</title><rect x="333.6" y="803.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.6" y="814.0"></text>
</g>
<g>
<title>java/nio/Bits.putIntB (1 samples, 0.10%)</title><rect x="333.6" y="787.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.10%)</title><rect x="334.7" y="851.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.10%)</title><rect x="334.7" y="835.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.10%)</title><rect x="334.7" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.10%)</title><rect x="334.7" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.7" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="334.7" y="787.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="337.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.38%)</title><rect x="335.8" y="947.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.38%)</title><rect x="335.8" y="931.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="335.8" y="915.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="338.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1225435910.accept (2 samples, 0.19%)</title><rect x="335.8" y="899.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.19%)</title><rect x="335.8" y="883.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.19%)</title><rect x="335.8" y="867.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.10%)</title><rect x="337.0" y="851.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="340.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="337.0" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="337.0" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="340.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.19%)</title><rect x="338.1" y="915.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.19%)</title><rect x="338.1" y="899.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="338.1" y="883.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="338.1" y="867.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="338.1" y="851.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="338.1" y="835.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="338.1" y="819.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.1" y="830.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="338.1" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.1" y="814.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="338.1" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="338.1" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="338.1" y="755.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="338.1" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$243/1124162545.apply (1 samples, 0.10%)</title><rect x="338.1" y="723.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="339.2" y="803.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="339.2" y="787.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="339.2" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.10%)</title><rect x="340.4" y="947.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="340.4" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="341.5" y="947.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="341.5" y="931.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.10%)</title><rect x="341.5" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.recordLevel (1 samples, 0.10%)</title><rect x="341.5" y="899.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (695 samples, 66.63%)</title><rect x="342.6" y="1011.0" width="786.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.6" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (695 samples, 66.63%)</title><rect x="342.6" y="995.0" width="786.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.6" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (695 samples, 66.63%)</title><rect x="342.6" y="979.0" width="786.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="345.6" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/235062141.run (454 samples, 43.53%)</title><rect x="350.5" y="963.0" width="513.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.5" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/235062..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (451 samples, 43.24%)</title><rect x="353.9" y="947.0" width="510.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.9" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (451 samples, 43.24%)</title><rect x="353.9" y="931.0" width="510.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.9" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (445 samples, 42.67%)</title><rect x="353.9" y="915.0" width="503.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.9" y="926.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="366.4" y="899.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="369.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.19%)</title><rect x="367.5" y="899.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (167 samples, 16.01%)</title><rect x="369.8" y="899.0" width="188.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.8" y="910.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (167 samples, 16.01%)</title><rect x="369.8" y="883.0" width="188.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.8" y="894.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (167 samples, 16.01%)</title><rect x="369.8" y="867.0" width="188.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.8" y="878.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 16.01%)</title><rect x="369.8" y="851.0" width="188.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.8" y="862.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 16.01%)</title><rect x="369.8" y="835.0" width="188.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.8" y="846.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 16.01%)</title><rect x="369.8" y="819.0" width="188.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.8" y="830.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="369.8" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="372.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (38 samples, 3.64%)</title><rect x="370.9" y="803.0" width="43.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="373.9" y="814.0">com/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="384.5" y="787.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="387.5" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="384.5" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="387.5" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="385.6" y="787.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="388.6" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="386.7" y="787.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="389.7" y="798.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="387.9" y="771.0" width="4.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="390.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.29%)</title><rect x="392.4" y="787.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.29%)</title><rect x="392.4" y="771.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.29%)</title><rect x="392.4" y="755.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.29%)</title><rect x="392.4" y="739.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="392.4" y="723.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.29%)</title><rect x="392.4" y="707.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.4" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="394.7" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="394.7" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="397.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="394.7" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="397.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 1.34%)</title><rect x="395.8" y="787.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.38%)</title><rect x="407.1" y="771.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="407.1" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="410.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="407.1" y="739.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="410.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="407.1" y="723.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="410.1" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="407.1" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="410.1" y="718.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="407.1" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="410.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="407.1" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="410.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.29%)</title><rect x="408.2" y="755.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.29%)</title><rect x="408.2" y="739.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.2" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.19%)</title><rect x="411.6" y="787.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="414.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (113 samples, 10.83%)</title><rect x="413.9" y="803.0" width="127.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.9" y="814.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.48%)</title><rect x="416.2" y="787.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (3 samples, 0.29%)</title><rect x="421.8" y="787.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="424.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.96%)</title><rect x="425.2" y="787.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.86%)</title><rect x="426.3" y="771.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="429.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.25%)</title><rect x="436.5" y="787.0" width="14.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.25%)</title><rect x="436.5" y="771.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.86%)</title><rect x="439.9" y="755.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.77%)</title><rect x="441.0" y="739.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.38%)</title><rect x="445.6" y="723.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="450.1" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="453.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="450.1" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.29%)</title><rect x="451.2" y="787.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.19%)</title><rect x="452.4" y="771.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (76 samples, 7.29%)</title><rect x="454.6" y="787.0" width="86.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.6" y="798.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 2.01%)</title><rect x="455.8" y="771.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="458.8" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.48%)</title><rect x="455.8" y="755.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.48%)</title><rect x="455.8" y="739.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.48%)</title><rect x="455.8" y="723.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.48%)</title><rect x="455.8" y="707.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.48%)</title><rect x="455.8" y="691.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (14 samples, 1.34%)</title><rect x="461.4" y="755.0" width="15.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (10 samples, 0.96%)</title><rect x="461.4" y="739.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (5 samples, 0.48%)</title><rect x="467.1" y="723.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.38%)</title><rect x="472.7" y="739.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.38%)</title><rect x="472.7" y="723.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.38%)</title><rect x="472.7" y="707.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.38%)</title><rect x="472.7" y="691.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="477.2" y="755.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="477.2" y="739.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="480.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="479.5" y="771.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 5.08%)</title><rect x="480.6" y="771.0" width="60.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.6" y="782.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 5.08%)</title><rect x="480.6" y="755.0" width="60.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.6" y="766.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="480.6" y="739.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.99%)</title><rect x="481.8" y="739.0" width="58.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.8" y="750.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.92%)</title><rect x="482.9" y="723.0" width="22.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="485.9" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (12 samples, 1.15%)</title><rect x="487.4" y="707.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (12 samples, 1.15%)</title><rect x="487.4" y="691.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (12 samples, 1.15%)</title><rect x="487.4" y="675.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.29%)</title><rect x="487.4" y="659.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (9 samples, 0.86%)</title><rect x="490.8" y="659.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.67%)</title><rect x="493.1" y="643.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.38%)</title><rect x="496.5" y="627.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (4 samples, 0.38%)</title><rect x="496.5" y="611.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="499.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="501.0" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.10%)</title><rect x="501.0" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.10%)</title><rect x="501.0" y="675.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.29%)</title><rect x="502.1" y="707.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.29%)</title><rect x="502.1" y="691.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="503.3" y="675.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="506.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.77%)</title><rect x="505.5" y="723.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.67%)</title><rect x="506.7" y="707.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="509.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.67%)</title><rect x="506.7" y="691.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.67%)</title><rect x="506.7" y="675.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="509.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.67%)</title><rect x="506.7" y="659.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.38%)</title><rect x="514.6" y="723.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.38%)</title><rect x="519.1" y="723.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.38%)</title><rect x="519.1" y="707.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.38%)</title><rect x="519.1" y="691.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.38%)</title><rect x="519.1" y="675.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.1" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.38%)</title><rect x="519.1" y="659.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.1" y="670.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.29%)</title><rect x="519.1" y="643.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="522.1" y="654.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (2 samples, 0.19%)</title><rect x="520.2" y="627.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.2" y="638.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.10%)</title><rect x="522.5" y="643.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="525.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.86%)</title><rect x="523.6" y="723.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.86%)</title><rect x="523.6" y="707.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.86%)</title><rect x="523.6" y="691.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.19%)</title><rect x="531.6" y="675.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.58%)</title><rect x="533.8" y="723.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="536.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="539.5" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="542.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="539.5" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="542.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.10%)</title><rect x="539.5" y="675.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="542.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.10%)</title><rect x="540.6" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.44%)</title><rect x="541.7" y="803.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.10%)</title><rect x="542.9" y="787.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.25%)</title><rect x="544.0" y="787.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.25%)</title><rect x="544.0" y="771.0" width="14.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.25%)</title><rect x="544.0" y="755.0" width="14.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 1.25%)</title><rect x="544.0" y="739.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="547.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (243 samples, 23.30%)</title><rect x="558.7" y="899.0" width="274.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.7" y="910.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (50 samples, 4.79%)</title><rect x="558.7" y="883.0" width="56.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.7" y="894.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 4.79%)</title><rect x="558.7" y="867.0" width="56.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.7" y="878.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 4.60%)</title><rect x="559.8" y="851.0" width="54.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.8" y="862.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.53%)</title><rect x="563.2" y="835.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="566.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.29%)</title><rect x="564.4" y="819.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="567.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="565.5" y="803.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="565.5" y="787.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="568.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.15%)</title><rect x="567.8" y="819.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 1.05%)</title><rect x="567.8" y="803.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="570.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 1.05%)</title><rect x="567.8" y="787.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (11 samples, 1.05%)</title><rect x="567.8" y="771.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.10%)</title><rect x="580.2" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.2" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (3 samples, 0.29%)</title><rect x="581.3" y="835.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="584.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.19%)</title><rect x="582.5" y="819.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.38%)</title><rect x="584.7" y="835.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="587.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="585.9" y="819.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="588.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.29%)</title><rect x="585.9" y="803.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (22 samples, 2.11%)</title><rect x="589.3" y="835.0" width="24.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="592.3" y="846.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.77%)</title><rect x="604.0" y="819.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.67%)</title><rect x="605.1" y="803.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="608.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.10%)</title><rect x="613.0" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="614.1" y="851.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="617.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.48%)</title><rect x="615.3" y="883.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="618.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.48%)</title><rect x="615.3" y="867.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="618.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="615.3" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="618.3" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="615.3" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="618.3" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="615.3" y="819.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="618.3" y="830.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.10%)</title><rect x="615.3" y="803.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="618.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.38%)</title><rect x="616.4" y="851.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="619.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (126 samples, 12.08%)</title><rect x="620.9" y="883.0" width="142.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.9" y="894.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (126 samples, 12.08%)</title><rect x="620.9" y="867.0" width="142.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.9" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="626.6" y="851.0" width="4.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="629.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="627.7" y="835.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="630.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 4.31%)</title><rect x="631.1" y="851.0" width="50.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.1" y="862.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 2.30%)</title><rect x="643.6" y="835.0" width="27.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.6" y="846.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22 samples, 2.11%)</title><rect x="645.8" y="819.0" width="24.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.8" y="830.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.67%)</title><rect x="652.6" y="803.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.6" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.67%)</title><rect x="652.6" y="787.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.6" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.67%)</title><rect x="652.6" y="771.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="655.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.58%)</title><rect x="652.6" y="755.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="655.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="652.6" y="739.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="652.6" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="655.6" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.29%)</title><rect x="653.7" y="739.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="656.7" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="654.9" y="723.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="657.9" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="654.9" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="657.9" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="656.0" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="659.0" y="734.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="656.0" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="659.0" y="718.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="656.0" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="659.0" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="657.1" y="739.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="660.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="657.1" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="660.1" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.10%)</title><rect x="657.1" y="707.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="660.1" y="718.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="658.3" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="661.3" y="750.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="659.4" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="662.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.77%)</title><rect x="660.5" y="803.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.5" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="669.6" y="803.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="672.6" y="814.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.19%)</title><rect x="670.7" y="835.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="673.7" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.77%)</title><rect x="673.0" y="835.0" width="9.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="676.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.29%)</title><rect x="682.0" y="851.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="685.0" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="682.0" y="835.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="682.0" y="819.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="685.0" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="682.0" y="803.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="685.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="682.0" y="787.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="685.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.19%)</title><rect x="683.2" y="835.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="683.2" y="819.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.2" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (69 samples, 6.62%)</title><rect x="685.4" y="851.0" width="78.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.4" y="862.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (68 samples, 6.52%)</title><rect x="686.5" y="835.0" width="77.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.5" y="846.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 2.11%)</title><rect x="686.5" y="819.0" width="24.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="689.5" y="830.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (22 samples, 2.11%)</title><rect x="686.5" y="803.0" width="24.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.5" y="814.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.96%)</title><rect x="700.1" y="787.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="703.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.96%)</title><rect x="700.1" y="771.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (10 samples, 0.96%)</title><rect x="700.1" y="755.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.1" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="711.4" y="819.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="711.4" y="803.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.4" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="711.4" y="787.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="714.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="711.4" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.4" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (45 samples, 4.31%)</title><rect x="712.6" y="819.0" width="50.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="715.6" y="830.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (38 samples, 3.64%)</title><rect x="720.5" y="803.0" width="43.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.5" y="814.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.29%)</title><rect x="722.8" y="787.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.29%)</title><rect x="722.8" y="771.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="725.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 3.16%)</title><rect x="726.1" y="787.0" width="37.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.1" y="798.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.19%)</title><rect x="746.5" y="771.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.86%)</title><rect x="748.8" y="771.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.29%)</title><rect x="755.6" y="755.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="758.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="755.6" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="758.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="755.6" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="758.6" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="756.7" y="739.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="759.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="756.7" y="723.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="759.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="756.7" y="707.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="756.7" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="759.7" y="702.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="757.8" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="760.8" y="702.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.38%)</title><rect x="759.0" y="771.0" width="4.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="762.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (39 samples, 3.74%)</title><rect x="763.5" y="883.0" width="44.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="766.5" y="894.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (38 samples, 3.64%)</title><rect x="764.6" y="867.0" width="43.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.6" y="878.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="768.0" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="768.0" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="771.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="768.0" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="771.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/770306532.process (15 samples, 1.44%)</title><rect x="769.1" y="851.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (14 samples, 1.34%)</title><rect x="770.3" y="835.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="773.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 1.15%)</title><rect x="771.4" y="819.0" width="13.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="774.4" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="778.2" y="803.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="781.2" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="778.2" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="778.2" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.2" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="778.2" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="781.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.29%)</title><rect x="779.3" y="803.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="782.3" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.29%)</title><rect x="779.3" y="787.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="782.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="779.3" y="771.0" width="3.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="782.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="782.7" y="803.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="785.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="782.7" y="787.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="782.7" y="771.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.10%)</title><rect x="783.8" y="803.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="785.0" y="819.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="785.0" y="803.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="785.0" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="785.0" y="771.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.29%)</title><rect x="786.1" y="851.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.1" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.29%)</title><rect x="786.1" y="835.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (3 samples, 0.29%)</title><rect x="789.5" y="851.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.5" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (3 samples, 0.29%)</title><rect x="789.5" y="835.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="792.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/84840156.get$Lambda (3 samples, 0.29%)</title><rect x="789.5" y="819.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="792.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$268/84840156.&lt;init&gt; (3 samples, 0.29%)</title><rect x="789.5" y="803.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="792.9" y="851.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.9" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.48%)</title><rect x="794.0" y="851.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.0" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.38%)</title><rect x="795.2" y="835.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="798.2" y="846.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.38%)</title><rect x="795.2" y="819.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="798.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="799.7" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.7" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.58%)</title><rect x="800.8" y="851.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.29%)</title><rect x="804.2" y="835.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 2.21%)</title><rect x="807.6" y="883.0" width="26.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.6" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 2.21%)</title><rect x="807.6" y="867.0" width="26.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.6" y="878.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="814.4" y="851.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="814.4" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="817.4" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="814.4" y="819.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="817.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="814.4" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="817.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="814.4" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="817.4" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.29%)</title><rect x="815.5" y="851.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="818.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="815.5" y="835.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="818.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.25%)</title><rect x="818.9" y="851.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/258033858.accept (13 samples, 1.25%)</title><rect x="818.9" y="835.0" width="14.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (13 samples, 1.25%)</title><rect x="818.9" y="819.0" width="14.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 1.25%)</title><rect x="818.9" y="803.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="821.9" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 1.25%)</title><rect x="818.9" y="787.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="821.9" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 1.25%)</title><rect x="818.9" y="771.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="826.8" y="755.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="829.8" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="828.0" y="755.0" width="5.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="831.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.48%)</title><rect x="828.0" y="739.0" width="5.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="831.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.10%)</title><rect x="833.6" y="899.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.6" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.10%)</title><rect x="833.6" y="883.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/1363303218.get$Lambda (1 samples, 0.10%)</title><rect x="833.6" y="867.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.6" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="833.6" y="851.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="833.6" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="836.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="833.6" y="819.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="836.6" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="833.6" y="803.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.6" y="814.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="833.6" y="787.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.25%)</title><rect x="834.8" y="899.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.25%)</title><rect x="834.8" y="883.0" width="14.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="837.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.05%)</title><rect x="837.0" y="867.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="840.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/258033858.accept (11 samples, 1.05%)</title><rect x="837.0" y="851.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="840.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (11 samples, 1.05%)</title><rect x="837.0" y="835.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="840.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (11 samples, 1.05%)</title><rect x="837.0" y="819.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.0" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 1.05%)</title><rect x="837.0" y="803.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="840.0" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 1.05%)</title><rect x="837.0" y="787.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="840.0" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.67%)</title><rect x="849.5" y="899.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="852.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.67%)</title><rect x="849.5" y="883.0" width="7.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="852.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="857.4" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="860.4" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.10%)</title><rect x="857.4" y="899.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="860.4" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.10%)</title><rect x="857.4" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="860.4" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="857.4" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="860.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="857.4" y="851.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="860.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.48%)</title><rect x="858.5" y="915.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.5" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="859.6" y="899.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="862.6" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.29%)</title><rect x="860.8" y="899.0" width="3.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="863.8" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="861.9" y="883.0" width="2.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="864.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.19%)</title><rect x="864.2" y="963.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="864.2" y="947.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="864.2" y="931.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="867.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.19%)</title><rect x="864.2" y="915.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (232 samples, 22.24%)</title><rect x="866.4" y="963.0" width="262.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="869.4" y="974.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (231 samples, 22.15%)</title><rect x="867.6" y="947.0" width="261.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="870.6" y="958.0">java/util/concurrent/LinkedBlocking..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.10%)</title><rect x="877.7" y="931.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="880.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.10%)</title><rect x="877.7" y="915.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="880.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (4 samples, 0.38%)</title><rect x="878.9" y="931.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="881.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (206 samples, 19.75%)</title><rect x="883.4" y="931.0" width="233.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="886.4" y="942.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (24 samples, 2.30%)</title><rect x="892.5" y="915.0" width="27.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.5" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.86%)</title><rect x="919.6" y="915.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.86%)</title><rect x="919.6" y="899.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.86%)</title><rect x="919.6" y="883.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="922.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.86%)</title><rect x="919.6" y="867.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (164 samples, 15.72%)</title><rect x="929.8" y="915.0" width="185.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.8" y="926.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 15.63%)</title><rect x="930.9" y="899.0" width="184.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="933.9" y="910.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="936.6" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.6" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 14.48%)</title><rect x="937.7" y="883.0" width="170.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="940.7" y="894.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.38%)</title><rect x="938.8" y="867.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.8" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.92%)</title><rect x="943.4" y="867.0" width="22.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.4" y="878.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.67%)</title><rect x="951.3" y="851.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="954.3" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.29%)</title><rect x="952.4" y="835.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="955.4" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="954.7" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.7" y="830.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="955.8" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="958.8" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.19%)</title><rect x="956.9" y="835.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="959.9" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="959.2" y="851.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.2" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="960.3" y="851.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.3" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.38%)</title><rect x="961.5" y="851.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.5" y="862.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="966.0" y="867.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.0" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.10%)</title><rect x="967.1" y="867.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="970.1" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="968.3" y="867.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.3" y="878.0"></text>
</g>
<g>
<title>__lll_lock_wait (14 samples, 1.34%)</title><rect x="970.5" y="867.0" width="15.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="973.5" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 3.16%)</title><rect x="986.4" y="867.0" width="37.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="989.4" y="878.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 5.27%)</title><rect x="1023.7" y="867.0" width="62.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1026.7" y="878.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.48%)</title><rect x="1085.9" y="867.0" width="5.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1088.9" y="878.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.19%)</title><rect x="1091.6" y="867.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1094.6" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1093.8" y="867.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1096.8" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1095.0" y="867.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1098.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.38%)</title><rect x="1097.2" y="867.0" width="4.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1100.2" y="878.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1101.8" y="867.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1104.8" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1102.9" y="867.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.9" y="878.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1105.1" y="867.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.1" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.19%)</title><rect x="1106.3" y="867.0" width="2.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1109.3" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.38%)</title><rect x="1108.5" y="883.0" width="4.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1111.5" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1113.1" y="883.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.1" y="894.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1115.3" y="915.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1118.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 1.05%)</title><rect x="1116.5" y="931.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 1.05%)</title><rect x="1116.5" y="915.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1119.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.96%)</title><rect x="1116.5" y="899.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.10%)</title><rect x="1127.8" y="899.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1130.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.10%)</title><rect x="1127.8" y="883.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1130.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.10%)</title><rect x="1127.8" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1130.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1128.9" y="1011.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1131.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1128.9" y="995.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1131.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1128.9" y="979.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1131.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1128.9" y="963.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1131.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1128.9" y="947.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1131.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1128.9" y="931.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1131.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="1128.9" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1131.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1128.9" y="899.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1131.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1128.9" y="883.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1131.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1128.9" y="867.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1131.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1128.9" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1131.9" y="862.0"></text>
</g>
<g>
<title>start_thread (53 samples, 5.08%)</title><rect x="1130.0" y="1011.0" width="60.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1133.0" y="1022.0">start_..</text>
</g>
<g>
<title>java_start(Thread*) (53 samples, 5.08%)</title><rect x="1130.0" y="995.0" width="60.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1133.0" y="1006.0">java_s..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.82%)</title><rect x="1130.0" y="979.0" width="21.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.0" y="990.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.29%)</title><rect x="1130.0" y="963.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.0" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.29%)</title><rect x="1130.0" y="947.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.0" y="958.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.29%)</title><rect x="1130.0" y="931.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1133.0" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.53%)</title><rect x="1133.4" y="963.0" width="18.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.4" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.19%)</title><rect x="1133.4" y="947.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.4" y="958.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.19%)</title><rect x="1133.4" y="931.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1136.4" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.77%)</title><rect x="1135.7" y="947.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="958.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1135.7" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.7" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1135.7" y="915.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.38%)</title><rect x="1136.8" y="931.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.8" y="942.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (4 samples, 0.38%)</title><rect x="1136.8" y="915.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.8" y="926.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (4 samples, 0.38%)</title><rect x="1136.8" y="899.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.8" y="910.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.29%)</title><rect x="1138.0" y="883.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.0" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.29%)</title><rect x="1141.4" y="931.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.4" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.29%)</title><rect x="1141.4" y="915.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.4" y="926.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1143.6" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.6" y="910.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1143.6" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.6" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.58%)</title><rect x="1144.7" y="947.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.7" y="958.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.58%)</title><rect x="1144.7" y="931.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.58%)</title><rect x="1144.7" y="915.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.7" y="926.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.58%)</title><rect x="1144.7" y="899.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.7" y="910.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.58%)</title><rect x="1144.7" y="883.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.7" y="894.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.58%)</title><rect x="1144.7" y="867.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.7" y="878.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.38%)</title><rect x="1147.0" y="851.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="862.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.19%)</title><rect x="1148.1" y="835.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.1" y="846.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1149.3" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1150.4" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="846.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1150.4" y="819.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="830.0"></text>
</g>
<g>
<title>G1InvokeIfNotTriggeredClosure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1150.4" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 2.97%)</title><rect x="1151.5" y="979.0" width="35.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.5" y="990.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 2.97%)</title><rect x="1151.5" y="963.0" width="35.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.5" y="974.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 2.97%)</title><rect x="1151.5" y="947.0" width="35.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.5" y="958.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (28 samples, 2.68%)</title><rect x="1151.5" y="931.0" width="31.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="942.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (28 samples, 2.68%)</title><rect x="1151.5" y="915.0" width="31.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="926.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (28 samples, 2.68%)</title><rect x="1151.5" y="899.0" width="31.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="910.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 1.53%)</title><rect x="1151.5" y="883.0" width="18.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1151.5" y="867.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.5" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1151.5" y="851.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1151.5" y="835.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.5" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.29%)</title><rect x="1152.7" y="867.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.7" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.29%)</title><rect x="1152.7" y="851.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.7" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1154.9" y="835.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.9" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1154.9" y="819.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="830.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1154.9" y="803.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.9" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1156.1" y="867.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.1" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1156.1" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.1" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1156.1" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.10%)</title><rect x="1157.2" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 0.96%)</title><rect x="1158.3" y="867.0" width="11.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1158.3" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1159.5" y="851.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.5" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1159.5" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1159.5" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.19%)</title><rect x="1160.6" y="851.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1162.8" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.10%)</title><rect x="1162.8" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="846.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.10%)</title><rect x="1162.8" y="819.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1164.0" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.0" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1164.0" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.10%)</title><rect x="1164.0" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.0" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.10%)</title><rect x="1164.0" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1165.1" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.1" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.29%)</title><rect x="1166.2" y="851.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.2" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1168.5" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.5" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="1168.5" y="819.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1171.5" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 0.48%)</title><rect x="1169.6" y="883.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.10%)</title><rect x="1169.6" y="867.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.6" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.10%)</title><rect x="1169.6" y="851.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.10%)</title><rect x="1169.6" y="835.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1169.6" y="819.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 0.38%)</title><rect x="1170.8" y="867.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.29%)</title><rect x="1170.8" y="851.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1174.2" y="851.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="862.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1174.2" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.67%)</title><rect x="1175.3" y="883.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.67%)</title><rect x="1175.3" y="867.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.67%)</title><rect x="1175.3" y="851.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.67%)</title><rect x="1175.3" y="835.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.67%)</title><rect x="1175.3" y="819.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.67%)</title><rect x="1175.3" y="803.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.10%)</title><rect x="1175.3" y="787.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>TypeOopPtr::make(TypePtr::PTR, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1175.3" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1175.3" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.38%)</title><rect x="1176.4" y="787.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.38%)</title><rect x="1176.4" y="771.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.38%)</title><rect x="1176.4" y="755.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.38%)</title><rect x="1176.4" y="739.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.38%)</title><rect x="1176.4" y="723.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.38%)</title><rect x="1176.4" y="707.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1176.4" y="691.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1176.4" y="675.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1176.4" y="659.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1176.4" y="643.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1176.4" y="627.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1176.4" y="611.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1176.4" y="595.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1176.4" y="579.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1176.4" y="563.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1176.4" y="547.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1176.4" y="531.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1176.4" y="515.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.4" y="499.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1176.4" y="483.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1176.4" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1176.4" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1176.4" y="435.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1176.4" y="419.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="430.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.10%)</title><rect x="1176.4" y="403.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="414.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.10%)</title><rect x="1176.4" y="387.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1176.4" y="371.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.10%)</title><rect x="1177.6" y="563.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>ReplacedNodes::apply(Node*) (1 samples, 0.10%)</title><rect x="1177.6" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1177.6" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="595.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.7" y="563.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.7" y="547.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.7" y="531.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.7" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.7" y="499.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.7" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.7" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.7" y="435.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.7" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.7" y="403.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.7" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.7" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.7" y="339.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.7" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.7" y="307.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.7" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.7" y="259.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.7" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.7" y="227.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.7" y="211.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="195.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.7" y="179.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.7" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.7" y="147.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.7" y="131.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.7" y="115.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.7" y="99.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.7" y="83.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.7" y="67.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1178.7" y="51.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="62.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1178.7" y="35.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.8" y="691.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.8" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.8" y="659.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.8" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.8" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.8" y="611.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.8" y="595.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.8" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.8" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.8" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.8" y="531.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.8" y="515.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.8" y="499.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.8" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.8" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.8" y="451.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.8" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.8" y="419.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1179.8" y="403.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1179.8" y="387.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1179.8" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1179.8" y="355.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.10%)</title><rect x="1179.8" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.10%)</title><rect x="1179.8" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="334.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1179.8" y="307.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="787.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1180.9" y="771.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1180.9" y="755.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1180.9" y="739.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1180.9" y="723.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1180.9" y="707.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1180.9" y="691.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.9" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.9" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.9" y="643.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.9" y="627.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.9" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.9" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.9" y="579.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.9" y="563.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.9" y="547.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.9" y="531.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.9" y="515.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.9" y="499.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="483.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1180.9" y="467.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1180.9" y="451.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1180.9" y="435.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1180.9" y="419.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1180.9" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1180.9" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1180.9" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="355.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1180.9" y="339.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1180.9" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1180.9" y="307.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1180.9" y="291.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1180.9" y="275.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1180.9" y="259.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.10%)</title><rect x="1180.9" y="243.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.10%)</title><rect x="1180.9" y="227.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="563.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="547.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="531.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="515.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1182.1" y="483.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1182.1" y="467.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="478.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.10%)</title><rect x="1182.1" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1182.1" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1182.1" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1182.1" y="403.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="414.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.10%)</title><rect x="1182.1" y="387.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="398.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.10%)</title><rect x="1182.1" y="371.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="382.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.10%)</title><rect x="1182.1" y="355.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>FieldType::basic_type(Symbol*) (1 samples, 0.10%)</title><rect x="1182.1" y="339.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 0.29%)</title><rect x="1183.2" y="931.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (3 samples, 0.29%)</title><rect x="1183.2" y="915.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (3 samples, 0.29%)</title><rect x="1183.2" y="899.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (3 samples, 0.29%)</title><rect x="1183.2" y="883.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (2 samples, 0.19%)</title><rect x="1184.3" y="867.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.29%)</title><rect x="1186.6" y="979.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.29%)</title><rect x="1186.6" y="963.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.19%)</title><rect x="1186.6" y="947.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.10%)</title><rect x="1187.7" y="931.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.10%)</title><rect x="1187.7" y="915.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="926.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1187.7" y="899.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1187.7" y="883.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1187.7" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.9" y="947.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.9" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="942.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.9" y="915.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.9" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.9" y="883.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="894.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.10%)</title><rect x="1188.9" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.10%)</title><rect x="1188.9" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>PtrQueueSet::enqueue_complete_buffer(void**, unsigned long) (1 samples, 0.10%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="1188.9" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="1188.9" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
</g>
</svg>
