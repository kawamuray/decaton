<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (239 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.42%)</title><rect x="10.0" y="995.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>monitorexit_nofpu Runtime1 stub (1 samples, 0.42%)</title><rect x="10.0" y="979.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (32 samples, 13.39%)</title><rect x="14.9" y="995.0" width="158.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (31 samples, 12.97%)</title><rect x="14.9" y="979.0" width="153.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.42%)</title><rect x="14.9" y="963.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.84%)</title><rect x="19.9" y="963.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.84%)</title><rect x="19.9" y="947.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.42%)</title><rect x="24.8" y="931.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.42%)</title><rect x="24.8" y="915.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.42%)</title><rect x="24.8" y="899.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.42%)</title><rect x="24.8" y="883.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.42%)</title><rect x="24.8" y="867.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.8" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.42%)</title><rect x="24.8" y="851.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.42%)</title><rect x="24.8" y="835.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 7.95%)</title><rect x="29.7" y="963.0" width="93.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.7" y="974.0">java/lang/I..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/598853106.accept (19 samples, 7.95%)</title><rect x="29.7" y="947.0" width="93.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.7" y="958.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 7.95%)</title><rect x="29.7" y="931.0" width="93.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.7" y="942.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (17 samples, 7.11%)</title><rect x="29.7" y="915.0" width="84.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.7" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (17 samples, 7.11%)</title><rect x="29.7" y="899.0" width="84.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.7" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (17 samples, 7.11%)</title><rect x="29.7" y="883.0" width="84.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.7" y="894.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (17 samples, 7.11%)</title><rect x="29.7" y="867.0" width="84.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.7" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (17 samples, 7.11%)</title><rect x="29.7" y="851.0" width="84.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.7" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (17 samples, 7.11%)</title><rect x="29.7" y="835.0" width="84.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.7" y="846.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 3.77%)</title><rect x="29.7" y="819.0" width="44.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.7" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.42%)</title><rect x="29.7" y="803.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.42%)</title><rect x="29.7" y="787.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 3.35%)</title><rect x="34.7" y="803.0" width="39.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 3.35%)</title><rect x="34.7" y="787.0" width="39.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 3.35%)</title><rect x="34.7" y="771.0" width="39.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.7" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 3.35%)</title><rect x="34.7" y="755.0" width="39.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.7" y="766.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 2.93%)</title><rect x="39.6" y="739.0" width="34.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.6" y="750.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 2.93%)</title><rect x="39.6" y="723.0" width="34.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="42.6" y="734.0">Un..</text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 2.51%)</title><rect x="39.6" y="707.0" width="29.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="42.6" y="718.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.42%)</title><rect x="69.2" y="707.0" width="5.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="72.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 2.09%)</title><rect x="74.2" y="819.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.2" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 2.09%)</title><rect x="74.2" y="803.0" width="24.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.2" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 2.09%)</title><rect x="74.2" y="787.0" width="24.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.2" y="798.0">j..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="93.9" y="771.0" width="5.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="96.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 1.26%)</title><rect x="98.9" y="819.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.42%)</title><rect x="98.9" y="803.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.42%)</title><rect x="98.9" y="787.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.84%)</title><rect x="103.8" y="803.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.84%)</title><rect x="103.8" y="787.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.8" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="108.7" y="771.0" width="5.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="111.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.84%)</title><rect x="113.7" y="915.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.84%)</title><rect x="113.7" y="899.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.84%)</title><rect x="113.7" y="883.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.77%)</title><rect x="123.6" y="963.0" width="44.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.6" y="974.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.77%)</title><rect x="123.6" y="947.0" width="44.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.6" y="958.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.93%)</title><rect x="123.6" y="931.0" width="34.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.6" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 2.93%)</title><rect x="123.6" y="915.0" width="34.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.6" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 2.93%)</title><rect x="123.6" y="899.0" width="34.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.6" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 2.51%)</title><rect x="123.6" y="883.0" width="29.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.6" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 2.51%)</title><rect x="123.6" y="867.0" width="29.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.6" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 1.67%)</title><rect x="123.6" y="851.0" width="19.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.42%)</title><rect x="138.4" y="835.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.42%)</title><rect x="138.4" y="819.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.42%)</title><rect x="138.4" y="803.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.42%)</title><rect x="138.4" y="787.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.42%)</title><rect x="138.4" y="771.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.42%)</title><rect x="138.4" y="755.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.42%)</title><rect x="138.4" y="739.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.84%)</title><rect x="143.3" y="851.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.84%)</title><rect x="143.3" y="835.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.84%)</title><rect x="143.3" y="819.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.3" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.84%)</title><rect x="143.3" y="803.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.3" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="148.2" y="787.0" width="5.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="151.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.42%)</title><rect x="153.2" y="883.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$FetchStates$2.hasValidPosition (1 samples, 0.42%)</title><rect x="153.2" y="867.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.42%)</title><rect x="158.1" y="931.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.42%)</title><rect x="158.1" y="915.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.42%)</title><rect x="158.1" y="899.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.42%)</title><rect x="158.1" y="883.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.42%)</title><rect x="158.1" y="867.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.42%)</title><rect x="158.1" y="851.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.42%)</title><rect x="158.1" y="835.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.42%)</title><rect x="158.1" y="819.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.42%)</title><rect x="158.1" y="803.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.42%)</title><rect x="158.1" y="787.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.42%)</title><rect x="158.1" y="771.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.42%)</title><rect x="163.1" y="931.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.42%)</title><rect x="163.1" y="915.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.42%)</title><rect x="163.1" y="899.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.42%)</title><rect x="163.1" y="883.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.42%)</title><rect x="163.1" y="867.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="166.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.42%)</title><rect x="163.1" y="851.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.42%)</title><rect x="163.1" y="835.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.42%)</title><rect x="163.1" y="819.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.42%)</title><rect x="163.1" y="803.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.42%)</title><rect x="163.1" y="787.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="166.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.42%)</title><rect x="163.1" y="771.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.1" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.42%)</title><rect x="163.1" y="755.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.1" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.42%)</title><rect x="163.1" y="739.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.1" y="750.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.42%)</title><rect x="163.1" y="723.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.1" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.42%)</title><rect x="163.1" y="707.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.1" y="718.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.42%)</title><rect x="163.1" y="691.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="166.1" y="702.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.42%)</title><rect x="168.0" y="979.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.0" y="990.0"></text>
</g>
<g>
<title>JVM_CurrentTimeMillis (1 samples, 0.42%)</title><rect x="168.0" y="963.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="171.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.run (59 samples, 24.69%)</title><rect x="172.9" y="995.0" width="291.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.9" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (59 samples, 24.69%)</title><rect x="172.9" y="979.0" width="291.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.9" y="990.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (59 samples, 24.69%)</title><rect x="172.9" y="963.0" width="291.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.9" y="974.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.42%)</title><rect x="177.9" y="947.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/952734339.run (39 samples, 16.32%)</title><rect x="182.8" y="947.0" width="192.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.8" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (39 samples, 16.32%)</title><rect x="182.8" y="931.0" width="192.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.8" y="942.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (39 samples, 16.32%)</title><rect x="182.8" y="915.0" width="192.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.8" y="926.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.26%)</title><rect x="182.8" y="899.0" width="14.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="185.8" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.84%)</title><rect x="187.7" y="883.0" width="9.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="190.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 15.06%)</title><rect x="197.6" y="899.0" width="177.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.6" y="910.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 4.18%)</title><rect x="202.6" y="883.0" width="49.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.6" y="894.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 4.18%)</title><rect x="202.6" y="867.0" width="49.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.6" y="878.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 4.18%)</title><rect x="202.6" y="851.0" width="49.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.6" y="862.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.18%)</title><rect x="202.6" y="835.0" width="49.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.6" y="846.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.18%)</title><rect x="202.6" y="819.0" width="49.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.6" y="830.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 4.18%)</title><rect x="202.6" y="803.0" width="49.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.6" y="814.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.42%)</title><rect x="202.6" y="787.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.42%)</title><rect x="202.6" y="771.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.42%)</title><rect x="202.6" y="755.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.42%)</title><rect x="202.6" y="739.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.42%)</title><rect x="202.6" y="723.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 3.35%)</title><rect x="207.5" y="787.0" width="39.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.5" y="798.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.84%)</title><rect x="207.5" y="771.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.84%)</title><rect x="207.5" y="755.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.42%)</title><rect x="212.4" y="739.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.42%)</title><rect x="217.4" y="771.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.09%)</title><rect x="222.3" y="771.0" width="24.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.3" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.09%)</title><rect x="222.3" y="755.0" width="24.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.3" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.09%)</title><rect x="222.3" y="739.0" width="24.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.3" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.09%)</title><rect x="222.3" y="723.0" width="24.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.3" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.26%)</title><rect x="222.3" y="707.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.42%)</title><rect x="222.3" y="691.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.84%)</title><rect x="227.2" y="691.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.84%)</title><rect x="227.2" y="675.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.84%)</title><rect x="227.2" y="659.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.84%)</title><rect x="227.2" y="643.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.42%)</title><rect x="237.1" y="707.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.42%)</title><rect x="237.1" y="691.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.42%)</title><rect x="237.1" y="675.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.42%)</title><rect x="237.1" y="659.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.1" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.42%)</title><rect x="237.1" y="643.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.42%)</title><rect x="242.1" y="707.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.42%)</title><rect x="247.0" y="787.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.42%)</title><rect x="247.0" y="771.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.42%)</title><rect x="247.0" y="755.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.42%)</title><rect x="247.0" y="739.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.42%)</title><rect x="247.0" y="723.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (23 samples, 9.62%)</title><rect x="251.9" y="883.0" width="113.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.9" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.09%)</title><rect x="251.9" y="867.0" width="24.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.9" y="878.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.09%)</title><rect x="251.9" y="851.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.9" y="862.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.09%)</title><rect x="251.9" y="835.0" width="24.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.9" y="846.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.84%)</title><rect x="251.9" y="819.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.84%)</title><rect x="251.9" y="803.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.84%)</title><rect x="251.9" y="787.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.84%)</title><rect x="251.9" y="771.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.42%)</title><rect x="256.9" y="755.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.42%)</title><rect x="256.9" y="739.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.26%)</title><rect x="261.8" y="819.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.84%)</title><rect x="266.7" y="803.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.42%)</title><rect x="271.7" y="787.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (14 samples, 5.86%)</title><rect x="276.6" y="867.0" width="69.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.6" y="878.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 5.86%)</title><rect x="276.6" y="851.0" width="69.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.6" y="862.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.51%)</title><rect x="286.5" y="835.0" width="29.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.5" y="846.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.51%)</title><rect x="286.5" y="819.0" width="29.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.5" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.51%)</title><rect x="286.5" y="803.0" width="29.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.5" y="814.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.26%)</title><rect x="291.4" y="787.0" width="14.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.4" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.26%)</title><rect x="291.4" y="771.0" width="14.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.4" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.42%)</title><rect x="296.4" y="755.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="299.4" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.42%)</title><rect x="296.4" y="739.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="299.4" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.42%)</title><rect x="296.4" y="723.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="299.4" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.42%)</title><rect x="296.4" y="707.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="299.4" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.42%)</title><rect x="301.3" y="755.0" width="4.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="304.3" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.84%)</title><rect x="306.2" y="787.0" width="9.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="309.2" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.51%)</title><rect x="316.1" y="835.0" width="29.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.1" y="846.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.09%)</title><rect x="321.0" y="819.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.0" y="830.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.09%)</title><rect x="321.0" y="803.0" width="24.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.0" y="814.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.84%)</title><rect x="335.9" y="787.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.84%)</title><rect x="335.9" y="771.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="338.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.84%)</title><rect x="335.9" y="755.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.84%)</title><rect x="335.9" y="739.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (2 samples, 0.84%)</title><rect x="345.7" y="867.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.84%)</title><rect x="345.7" y="851.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/701735847.process (1 samples, 0.42%)</title><rect x="345.7" y="835.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (1 samples, 0.42%)</title><rect x="345.7" y="819.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.42%)</title><rect x="345.7" y="803.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.42%)</title><rect x="345.7" y="787.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.42%)</title><rect x="345.7" y="771.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.42%)</title><rect x="345.7" y="755.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="350.7" y="835.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.42%)</title><rect x="350.7" y="819.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.7" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.42%)</title><rect x="350.7" y="803.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="353.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.84%)</title><rect x="355.6" y="867.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="358.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.84%)</title><rect x="355.6" y="851.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.42%)</title><rect x="360.5" y="835.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$269/2021872988.accept (1 samples, 0.42%)</title><rect x="360.5" y="819.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.42%)</title><rect x="360.5" y="803.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.5" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.42%)</title><rect x="360.5" y="787.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.5" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.42%)</title><rect x="360.5" y="771.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.5" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.42%)</title><rect x="360.5" y="755.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="363.5" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.84%)</title><rect x="365.5" y="883.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="368.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.84%)</title><rect x="365.5" y="867.0" width="9.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="368.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.42%)</title><rect x="375.4" y="947.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 1.26%)</title><rect x="380.3" y="947.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.26%)</title><rect x="380.3" y="931.0" width="14.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.84%)</title><rect x="380.3" y="915.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="383.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.42%)</title><rect x="390.2" y="915.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 5.86%)</title><rect x="395.1" y="947.0" width="69.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.1" y="958.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 5.86%)</title><rect x="395.1" y="931.0" width="69.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.1" y="942.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 4.60%)</title><rect x="405.0" y="915.0" width="54.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.0" y="926.0">java/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.84%)</title><rect x="409.9" y="899.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.42%)</title><rect x="419.8" y="899.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.42%)</title><rect x="419.8" y="883.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.42%)</title><rect x="419.8" y="867.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.42%)</title><rect x="419.8" y="851.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 2.93%)</title><rect x="424.7" y="899.0" width="34.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.7" y="910.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (7 samples, 2.93%)</title><rect x="424.7" y="883.0" width="34.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.7" y="894.0">su..</text>
</g>
<g>
<title>Unsafe_Park (7 samples, 2.93%)</title><rect x="424.7" y="867.0" width="34.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="427.7" y="878.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.42%)</title><rect x="424.7" y="851.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="427.7" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.42%)</title><rect x="424.7" y="835.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="427.7" y="846.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.42%)</title><rect x="429.7" y="851.0" width="4.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="432.7" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.42%)</title><rect x="434.6" y="851.0" width="4.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="437.6" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.84%)</title><rect x="439.5" y="851.0" width="9.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="442.5" y="862.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.42%)</title><rect x="449.4" y="851.0" width="5.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="452.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.42%)</title><rect x="454.4" y="851.0" width="4.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="457.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.42%)</title><rect x="459.3" y="915.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="462.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.42%)</title><rect x="459.3" y="899.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="462.3" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.42%)</title><rect x="459.3" y="883.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="462.3" y="894.0"></text>
</g>
<g>
<title>start_thread (147 samples, 61.51%)</title><rect x="464.2" y="995.0" width="725.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="467.2" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (147 samples, 61.51%)</title><rect x="464.2" y="979.0" width="725.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="467.2" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 4.60%)</title><rect x="464.2" y="963.0" width="54.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="467.2" y="974.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 4.18%)</title><rect x="464.2" y="947.0" width="49.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.2" y="958.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.93%)</title><rect x="464.2" y="931.0" width="34.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="467.2" y="942.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.67%)</title><rect x="464.2" y="915.0" width="19.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="467.2" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.42%)</title><rect x="474.1" y="899.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="477.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.42%)</title><rect x="479.0" y="899.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="482.0" y="910.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.26%)</title><rect x="484.0" y="915.0" width="14.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="487.0" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.26%)</title><rect x="498.8" y="931.0" width="14.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="501.8" y="942.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.42%)</title><rect x="498.8" y="915.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="501.8" y="926.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.84%)</title><rect x="503.7" y="915.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="506.7" y="926.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.42%)</title><rect x="508.7" y="899.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="511.7" y="910.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.42%)</title><rect x="508.7" y="883.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="511.7" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.42%)</title><rect x="508.7" y="867.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="511.7" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.42%)</title><rect x="513.6" y="947.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.6" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.42%)</title><rect x="513.6" y="931.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.6" y="942.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.42%)</title><rect x="513.6" y="915.0" width="4.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="516.6" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (135 samples, 56.49%)</title><rect x="518.5" y="963.0" width="666.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="521.5" y="974.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (134 samples, 56.07%)</title><rect x="518.5" y="947.0" width="661.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="521.5" y="958.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (133 samples, 55.65%)</title><rect x="518.5" y="931.0" width="656.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="521.5" y="942.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (130 samples, 54.39%)</title><rect x="518.5" y="915.0" width="641.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="521.5" y="926.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (130 samples, 54.39%)</title><rect x="518.5" y="899.0" width="641.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="521.5" y="910.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (68 samples, 28.45%)</title><rect x="518.5" y="883.0" width="335.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.5" y="894.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.84%)</title><rect x="518.5" y="867.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="521.5" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.84%)</title><rect x="518.5" y="851.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="521.5" y="862.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.84%)</title><rect x="518.5" y="835.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="521.5" y="846.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.84%)</title><rect x="518.5" y="819.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="521.5" y="830.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.42%)</title><rect x="523.5" y="803.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="526.5" y="814.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.42%)</title><rect x="523.5" y="787.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="526.5" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.42%)</title><rect x="528.4" y="867.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="531.4" y="878.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.42%)</title><rect x="528.4" y="851.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="531.4" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.42%)</title><rect x="528.4" y="835.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="531.4" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.51%)</title><rect x="533.3" y="867.0" width="29.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="536.3" y="878.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 2.51%)</title><rect x="533.3" y="851.0" width="29.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="536.3" y="862.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.84%)</title><rect x="533.3" y="835.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="536.3" y="846.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.26%)</title><rect x="543.2" y="835.0" width="14.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="546.2" y="846.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.42%)</title><rect x="543.2" y="819.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="546.2" y="830.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.42%)</title><rect x="543.2" y="803.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="546.2" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.42%)</title><rect x="548.2" y="819.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="551.2" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.42%)</title><rect x="548.2" y="803.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="551.2" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.42%)</title><rect x="548.2" y="787.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="551.2" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.42%)</title><rect x="553.1" y="819.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="556.1" y="830.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.42%)</title><rect x="558.0" y="835.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="561.0" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.42%)</title><rect x="563.0" y="867.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="566.0" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.42%)</title><rect x="563.0" y="851.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="566.0" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.26%)</title><rect x="567.9" y="867.0" width="14.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.9" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.26%)</title><rect x="567.9" y="851.0" width="14.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.9" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.84%)</title><rect x="567.9" y="835.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="570.9" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.42%)</title><rect x="567.9" y="819.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="570.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.42%)</title><rect x="572.8" y="819.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="575.8" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.42%)</title><rect x="572.8" y="803.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="575.8" y="814.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.42%)</title><rect x="572.8" y="787.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="575.8" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="572.8" y="771.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="575.8" y="782.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="572.8" y="755.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="575.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.42%)</title><rect x="577.8" y="835.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="580.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (55 samples, 23.01%)</title><rect x="582.7" y="867.0" width="271.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="585.7" y="878.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.42%)</title><rect x="587.7" y="851.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="590.7" y="862.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.42%)</title><rect x="592.6" y="851.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.6" y="862.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.42%)</title><rect x="597.5" y="851.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.26%)</title><rect x="602.5" y="851.0" width="14.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="605.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.42%)</title><rect x="602.5" y="835.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="605.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="607.4" y="835.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="610.4" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.42%)</title><rect x="612.3" y="835.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.3" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="612.3" y="819.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="615.3" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.26%)</title><rect x="617.3" y="851.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="620.3" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="617.3" y="835.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="620.3" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.84%)</title><rect x="622.2" y="835.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="625.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 2.93%)</title><rect x="632.1" y="851.0" width="34.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="635.1" y="862.0">Ph..</text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.42%)</title><rect x="661.7" y="835.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="664.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 5.44%)</title><rect x="666.7" y="851.0" width="64.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="669.7" y="862.0">PhaseCh..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="691.3" y="835.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="694.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 2.51%)</title><rect x="696.3" y="835.0" width="29.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="699.3" y="846.0">Ph..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.42%)</title><rect x="701.2" y="819.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="704.2" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 1.67%)</title><rect x="706.2" y="819.0" width="19.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="709.2" y="830.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.42%)</title><rect x="725.9" y="835.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="728.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.42%)</title><rect x="730.8" y="851.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="733.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.42%)</title><rect x="730.8" y="835.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="733.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.42%)</title><rect x="735.8" y="851.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="738.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (6 samples, 2.51%)</title><rect x="740.7" y="851.0" width="29.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="743.7" y="862.0">Ph..</text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.42%)</title><rect x="760.5" y="835.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="763.5" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.42%)</title><rect x="765.4" y="835.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="768.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.67%)</title><rect x="770.3" y="851.0" width="19.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="773.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.42%)</title><rect x="785.1" y="835.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.1" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.26%)</title><rect x="790.1" y="851.0" width="14.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="793.1" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.26%)</title><rect x="790.1" y="835.0" width="14.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="793.1" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 1.26%)</title><rect x="790.1" y="819.0" width="14.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.1" y="830.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.42%)</title><rect x="790.1" y="803.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="793.1" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.84%)</title><rect x="795.0" y="803.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.0" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.42%)</title><rect x="800.0" y="787.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.0" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.26%)</title><rect x="804.9" y="851.0" width="14.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.26%)</title><rect x="804.9" y="835.0" width="14.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="807.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.42%)</title><rect x="819.7" y="851.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.7" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.42%)</title><rect x="824.6" y="851.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="827.6" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.26%)</title><rect x="829.6" y="851.0" width="14.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="832.6" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.42%)</title><rect x="839.5" y="835.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="842.5" y="846.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.42%)</title><rect x="844.4" y="851.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.4" y="862.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::oper_input_base() const (1 samples, 0.42%)</title><rect x="849.3" y="851.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="852.3" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (53 samples, 22.18%)</title><rect x="854.3" y="883.0" width="261.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.3" y="894.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.42%)</title><rect x="854.3" y="867.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="857.3" y="878.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.42%)</title><rect x="854.3" y="851.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="857.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.84%)</title><rect x="859.2" y="867.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="862.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.84%)</title><rect x="859.2" y="851.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.84%)</title><rect x="859.2" y="835.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.84%)</title><rect x="859.2" y="819.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="803.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="787.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="867.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="771.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="755.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="739.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="867.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="723.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="867.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="707.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="691.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="675.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="867.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="659.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="643.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="867.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="627.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="867.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="611.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="595.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="867.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="579.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="867.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="563.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="867.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="547.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="867.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="531.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="867.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="515.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="867.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="499.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="483.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="867.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="467.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="451.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="867.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="435.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="419.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="403.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="867.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="387.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="371.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="867.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="355.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="867.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="339.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="323.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="867.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.42%)</title><rect x="864.1" y="307.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.1" y="318.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.42%)</title><rect x="864.1" y="291.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="867.1" y="302.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.42%)</title><rect x="869.1" y="867.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 14.23%)</title><rect x="874.0" y="867.0" width="167.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.0" y="878.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.42%)</title><rect x="874.0" y="851.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="877.0" y="862.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.42%)</title><rect x="879.0" y="851.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="882.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.42%)</title><rect x="883.9" y="851.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="886.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 9.21%)</title><rect x="888.8" y="851.0" width="108.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.8" y="862.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 8.37%)</title><rect x="893.8" y="835.0" width="98.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="896.8" y="846.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 7.95%)</title><rect x="898.7" y="819.0" width="93.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.7" y="830.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.42%)</title><rect x="908.6" y="803.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="911.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.42%)</title><rect x="908.6" y="787.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (16 samples, 6.69%)</title><rect x="913.5" y="803.0" width="79.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.5" y="814.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.42%)</title><rect x="992.5" y="835.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.42%)</title><rect x="997.4" y="851.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.42%)</title><rect x="1002.4" y="851.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 2.09%)</title><rect x="1007.3" y="851.0" width="24.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1010.3" y="862.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 1.67%)</title><rect x="1012.3" y="835.0" width="19.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1015.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.42%)</title><rect x="1012.3" y="819.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1015.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 1.26%)</title><rect x="1017.2" y="819.0" width="14.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.2" y="830.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1017.2" y="803.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1020.2" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.42%)</title><rect x="1017.2" y="787.0" width="4.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1020.2" y="798.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.42%)</title><rect x="1022.1" y="803.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1025.1" y="814.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.42%)</title><rect x="1022.1" y="787.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.1" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.42%)</title><rect x="1027.1" y="803.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.42%)</title><rect x="1032.0" y="851.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1035.0" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.42%)</title><rect x="1032.0" y="835.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1035.0" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1032.0" y="819.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.0" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1032.0" y="803.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.0" y="814.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.42%)</title><rect x="1036.9" y="851.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 5.02%)</title><rect x="1041.9" y="867.0" width="59.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.9" y="878.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 5.02%)</title><rect x="1041.9" y="851.0" width="59.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.9" y="862.0">PhaseI..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1041.9" y="835.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.9" y="846.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1041.9" y="819.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.9" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1041.9" y="803.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.9" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1041.9" y="787.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.9" y="798.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.42%)</title><rect x="1046.8" y="835.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.42%)</title><rect x="1046.8" y="819.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.8" y="830.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.42%)</title><rect x="1046.8" y="803.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.8" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 1.26%)</title><rect x="1051.8" y="835.0" width="14.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.8" y="846.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.42%)</title><rect x="1061.6" y="819.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.6" y="830.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.42%)</title><rect x="1061.6" y="803.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.6" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.84%)</title><rect x="1066.6" y="835.0" width="9.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.6" y="846.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1076.4" y="835.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="846.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.42%)</title><rect x="1076.4" y="819.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.4" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 1.67%)</title><rect x="1081.4" y="835.0" width="19.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.4" y="846.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.42%)</title><rect x="1081.4" y="819.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.4" y="830.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.42%)</title><rect x="1081.4" y="803.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.4" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.42%)</title><rect x="1081.4" y="787.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.4" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.42%)</title><rect x="1081.4" y="771.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 1.26%)</title><rect x="1086.3" y="819.0" width="14.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.3" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.26%)</title><rect x="1086.3" y="803.0" width="14.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.3" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.26%)</title><rect x="1086.3" y="787.0" width="14.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.3" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.26%)</title><rect x="1086.3" y="771.0" width="14.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.3" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 1.26%)</title><rect x="1086.3" y="755.0" width="14.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.3" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="739.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.3" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="723.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.3" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="707.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.3" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="691.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.3" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="675.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.3" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="659.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="643.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.3" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="627.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.3" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="611.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.3" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="595.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.3" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="579.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.3" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="563.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.3" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="547.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.3" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.84%)</title><rect x="1086.3" y="531.0" width="9.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.3" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.42%)</title><rect x="1086.3" y="515.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.3" y="526.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1086.3" y="499.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.3" y="510.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1086.3" y="483.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.3" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1091.3" y="515.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.3" y="526.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1091.3" y="499.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.3" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.42%)</title><rect x="1096.2" y="739.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.2" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.42%)</title><rect x="1096.2" y="723.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.2" y="734.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.42%)</title><rect x="1101.1" y="867.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.1" y="878.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.42%)</title><rect x="1106.1" y="867.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.1" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.42%)</title><rect x="1111.0" y="867.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1114.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.35%)</title><rect x="1115.9" y="883.0" width="39.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.9" y="894.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.35%)</title><rect x="1115.9" y="867.0" width="39.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.9" y="878.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.35%)</title><rect x="1115.9" y="851.0" width="39.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.9" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.35%)</title><rect x="1115.9" y="835.0" width="39.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.9" y="846.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.35%)</title><rect x="1115.9" y="819.0" width="39.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.9" y="830.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.35%)</title><rect x="1115.9" y="803.0" width="39.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.9" y="814.0">Par..</text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1115.9" y="787.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.9" y="798.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.42%)</title><rect x="1115.9" y="771.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.9" y="782.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_time_funcs(unsigned char*, char const*) (1 samples, 0.42%)</title><rect x="1115.9" y="755.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.9" y="766.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.42%)</title><rect x="1115.9" y="739.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.9" y="750.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.42%)</title><rect x="1115.9" y="723.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.9" y="734.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.42%)</title><rect x="1115.9" y="707.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.9" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.42%)</title><rect x="1115.9" y="691.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.9" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.42%)</title><rect x="1115.9" y="675.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.9" y="686.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.42%)</title><rect x="1115.9" y="659.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.51%)</title><rect x="1120.9" y="787.0" width="29.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.9" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.51%)</title><rect x="1120.9" y="771.0" width="29.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.9" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.51%)</title><rect x="1120.9" y="755.0" width="29.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.9" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.51%)</title><rect x="1120.9" y="739.0" width="29.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.9" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.51%)</title><rect x="1120.9" y="723.0" width="29.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.9" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.09%)</title><rect x="1120.9" y="707.0" width="24.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.9" y="718.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.09%)</title><rect x="1120.9" y="691.0" width="24.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.9" y="702.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.09%)</title><rect x="1120.9" y="675.0" width="24.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.9" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.09%)</title><rect x="1120.9" y="659.0" width="24.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.9" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.09%)</title><rect x="1120.9" y="643.0" width="24.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.9" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.09%)</title><rect x="1120.9" y="627.0" width="24.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.9" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.09%)</title><rect x="1120.9" y="611.0" width="24.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.9" y="622.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.67%)</title><rect x="1120.9" y="595.0" width="19.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.67%)</title><rect x="1120.9" y="579.0" width="19.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.67%)</title><rect x="1120.9" y="563.0" width="19.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.67%)</title><rect x="1120.9" y="547.0" width="19.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.26%)</title><rect x="1125.8" y="531.0" width="14.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.26%)</title><rect x="1125.8" y="515.0" width="14.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.26%)</title><rect x="1125.8" y="499.0" width="14.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.26%)</title><rect x="1125.8" y="483.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.84%)</title><rect x="1130.8" y="467.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.84%)</title><rect x="1130.8" y="451.0" width="9.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.84%)</title><rect x="1130.8" y="435.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.84%)</title><rect x="1130.8" y="419.0" width="9.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.84%)</title><rect x="1130.8" y="403.0" width="9.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.84%)</title><rect x="1130.8" y="387.0" width="9.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.84%)</title><rect x="1130.8" y="371.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.84%)</title><rect x="1130.8" y="355.0" width="9.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.84%)</title><rect x="1130.8" y="339.0" width="9.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1130.8" y="323.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.8" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1130.8" y="307.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1130.8" y="291.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.8" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.42%)</title><rect x="1130.8" y="275.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.42%)</title><rect x="1130.8" y="259.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.42%)</title><rect x="1130.8" y="243.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1130.8" y="227.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.42%)</title><rect x="1130.8" y="211.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.42%)</title><rect x="1130.8" y="195.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.8" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.42%)</title><rect x="1130.8" y="179.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.42%)</title><rect x="1130.8" y="163.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.42%)</title><rect x="1130.8" y="147.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.8" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.42%)</title><rect x="1130.8" y="131.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="142.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.42%)</title><rect x="1130.8" y="115.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.8" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1130.8" y="99.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.8" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1130.8" y="83.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.42%)</title><rect x="1130.8" y="67.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.8" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.42%)</title><rect x="1130.8" y="51.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.8" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.42%)</title><rect x="1130.8" y="35.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.42%)</title><rect x="1135.7" y="323.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="334.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.42%)</title><rect x="1135.7" y="307.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.7" y="318.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.42%)</title><rect x="1135.7" y="291.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="302.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.42%)</title><rect x="1135.7" y="275.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.7" y="286.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.42%)</title><rect x="1140.6" y="595.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.6" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1140.6" y="579.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.6" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.42%)</title><rect x="1140.6" y="563.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.6" y="574.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.42%)</title><rect x="1140.6" y="547.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.6" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.42%)</title><rect x="1140.6" y="531.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.6" y="542.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.42%)</title><rect x="1140.6" y="515.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.6" y="526.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.42%)</title><rect x="1140.6" y="499.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.6" y="510.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.42%)</title><rect x="1140.6" y="483.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.42%)</title><rect x="1145.6" y="707.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.42%)</title><rect x="1145.6" y="691.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.6" y="702.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.42%)</title><rect x="1145.6" y="675.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="686.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.42%)</title><rect x="1145.6" y="659.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.6" y="670.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.42%)</title><rect x="1145.6" y="643.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="654.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.42%)</title><rect x="1145.6" y="627.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.6" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.42%)</title><rect x="1145.6" y="611.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.6" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.5" y="787.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.42%)</title><rect x="1150.5" y="771.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.42%)</title><rect x="1150.5" y="755.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.42%)</title><rect x="1150.5" y="739.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.42%)</title><rect x="1150.5" y="723.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.42%)</title><rect x="1150.5" y="707.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.42%)</title><rect x="1150.5" y="691.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.5" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1150.5" y="675.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.5" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.42%)</title><rect x="1150.5" y="659.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.42%)</title><rect x="1150.5" y="643.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.5" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.42%)</title><rect x="1150.5" y="627.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::map_blocks() (1 samples, 0.42%)</title><rect x="1150.5" y="611.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.5" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.42%)</title><rect x="1155.4" y="883.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.4" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.42%)</title><rect x="1155.4" y="867.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.4" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.26%)</title><rect x="1160.4" y="915.0" width="14.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.26%)</title><rect x="1160.4" y="899.0" width="14.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.26%)</title><rect x="1160.4" y="883.0" width="14.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.26%)</title><rect x="1160.4" y="867.0" width="14.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.42%)</title><rect x="1160.4" y="851.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.42%)</title><rect x="1160.4" y="835.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.42%)</title><rect x="1160.4" y="819.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.4" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.42%)</title><rect x="1160.4" y="803.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.42%)</title><rect x="1160.4" y="787.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.4" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.42%)</title><rect x="1160.4" y="771.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.4" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.42%)</title><rect x="1160.4" y="755.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="766.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.42%)</title><rect x="1160.4" y="739.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="750.0"></text>
</g>
<g>
<title>IntConstant::as_IntConstant() (1 samples, 0.42%)</title><rect x="1160.4" y="723.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.42%)</title><rect x="1165.3" y="851.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="862.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.42%)</title><rect x="1165.3" y="835.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.3" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.42%)</title><rect x="1165.3" y="819.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.3" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::reg2stack(LIR_OprDesc*, LIR_OprDesc*, BasicType, bool) (1 samples, 0.42%)</title><rect x="1165.3" y="803.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.3" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.42%)</title><rect x="1170.3" y="851.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.42%)</title><rect x="1170.3" y="835.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.42%)</title><rect x="1170.3" y="819.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="830.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.42%)</title><rect x="1175.2" y="931.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.42%)</title><rect x="1175.2" y="915.0" width="4.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1178.2" y="926.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.42%)</title><rect x="1180.1" y="947.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="958.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.42%)</title><rect x="1180.1" y="931.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="942.0"></text>
</g>
<g>
<title>CodeCache::remove(void const*, _jmethodID*) (1 samples, 0.42%)</title><rect x="1180.1" y="915.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="926.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.42%)</title><rect x="1185.1" y="963.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.42%)</title><rect x="1185.1" y="947.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.42%)</title><rect x="1185.1" y="931.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="942.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.42%)</title><rect x="1185.1" y="915.0" width="4.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.1" y="926.0"></text>
</g>
</g>
</svg>
