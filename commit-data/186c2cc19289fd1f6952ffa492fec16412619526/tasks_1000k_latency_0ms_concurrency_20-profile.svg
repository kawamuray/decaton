<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,434 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="2035.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="2019.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="2003.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1987.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1971.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1955.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1939.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1923.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1907.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1891.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1875.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1859.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1843.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1827.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="10.0" y="1811.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1795.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1779.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1747.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1731.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1699.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1683.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1667.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1651.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1635.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1619.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1603.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1571.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1555.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1539.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1523.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1507.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1475.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1459.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1443.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1427.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1411.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1395.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1379.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1363.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1347.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1331.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1315.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1299.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1283.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1267.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1251.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1203.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1155.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1123.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1075.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1043.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="963.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="931.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="883.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="835.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="819.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="803.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="787.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="771.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="739.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="723.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="707.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="675.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="643.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="627.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="611.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="595.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="579.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="563.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="547.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="531.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="515.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="499.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="483.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="467.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="451.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="435.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="419.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="403.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="387.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="371.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="355.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="339.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="307.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="291.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="275.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="259.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="243.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="227.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="211.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="195.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="179.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="163.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="147.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="131.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="115.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="99.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="83.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="67.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="51.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="35.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="46.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.07%)</title><rect x="11.6" y="2035.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="14.6" y="2046.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*) (1 samples, 0.07%)</title><rect x="11.6" y="2019.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.6" y="2030.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*) (1 samples, 0.07%)</title><rect x="11.6" y="2003.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.6" y="2014.0"></text>
</g>
<g>
<title>TemplateInterpreter::deopt_entry(TosState, int) (1 samples, 0.07%)</title><rect x="11.6" y="1987.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.6" y="1998.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.07%)</title><rect x="12.5" y="2035.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.5" y="2046.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="13.3" y="2035.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="16.3" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="13.3" y="2019.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="16.3" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (253 samples, 17.64%)</title><rect x="14.1" y="2035.0" width="208.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.1" y="2046.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/StaticProperty.value (1 samples, 0.07%)</title><rect x="14.9" y="2019.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.9" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (251 samples, 17.50%)</title><rect x="15.8" y="2019.0" width="206.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.8" y="2030.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.28%)</title><rect x="15.8" y="2003.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.8" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.28%)</title><rect x="15.8" y="1987.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1787602502.accept (4 samples, 0.28%)</title><rect x="15.8" y="1971.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.8" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.28%)</title><rect x="15.8" y="1955.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.07%)</title><rect x="15.8" y="1939.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.21%)</title><rect x="16.6" y="1939.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.6" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.21%)</title><rect x="16.6" y="1923.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.14%)</title><rect x="19.1" y="2003.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.14%)</title><rect x="19.1" y="1987.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.1" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="19.1" y="1971.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.1" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="19.1" y="1955.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.1" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="19.1" y="1939.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="19.1" y="1923.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.14%)</title><rect x="19.1" y="1907.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="19.9" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="19.9" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="19.9" y="1859.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="20.7" y="2003.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="20.7" y="1987.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.7" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="20.7" y="1971.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="20.7" y="1955.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="20.7" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="20.7" y="1923.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="20.7" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="20.7" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="20.7" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.7" y="1886.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="20.7" y="1859.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="23.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (183 samples, 12.76%)</title><rect x="21.5" y="2003.0" width="150.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.5" y="2014.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/312979220.accept (172 samples, 11.99%)</title><rect x="23.2" y="1987.0" width="141.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.2" y="1998.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (172 samples, 11.99%)</title><rect x="23.2" y="1971.0" width="141.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.2" y="1982.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="23.2" y="1955.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="26.2" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (130 samples, 9.07%)</title><rect x="24.0" y="1955.0" width="107.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.0" y="1966.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (130 samples, 9.07%)</title><rect x="24.0" y="1939.0" width="107.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.0" y="1950.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (130 samples, 9.07%)</title><rect x="24.0" y="1923.0" width="107.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.0" y="1934.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (130 samples, 9.07%)</title><rect x="24.0" y="1907.0" width="107.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.0" y="1918.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (130 samples, 9.07%)</title><rect x="24.0" y="1891.0" width="107.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.0" y="1902.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (130 samples, 9.07%)</title><rect x="24.0" y="1875.0" width="107.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.0" y="1886.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (89 samples, 6.21%)</title><rect x="24.0" y="1859.0" width="73.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.0" y="1870.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.26%)</title><rect x="24.0" y="1843.0" width="14.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.26%)</title><rect x="24.0" y="1827.0" width="14.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 0.91%)</title><rect x="28.1" y="1811.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (13 samples, 0.91%)</title><rect x="28.1" y="1795.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.35%)</title><rect x="38.8" y="1843.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.35%)</title><rect x="38.8" y="1827.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.35%)</title><rect x="38.8" y="1811.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (66 samples, 4.60%)</title><rect x="42.9" y="1843.0" width="54.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.9" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (66 samples, 4.60%)</title><rect x="42.9" y="1827.0" width="54.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.9" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 4.53%)</title><rect x="43.7" y="1811.0" width="53.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.7" y="1822.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 4.53%)</title><rect x="43.7" y="1795.0" width="53.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.7" y="1806.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (64 samples, 4.46%)</title><rect x="44.6" y="1779.0" width="52.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.6" y="1790.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (54 samples, 3.77%)</title><rect x="44.6" y="1763.0" width="44.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="47.6" y="1774.0">Unsa..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.28%)</title><rect x="45.4" y="1747.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="48.4" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="48.7" y="1747.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="51.7" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="49.5" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="52.5" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (36 samples, 2.51%)</title><rect x="50.3" y="1747.0" width="29.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="53.3" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="79.9" y="1747.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="82.9" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.70%)</title><rect x="80.8" y="1747.0" width="8.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="83.8" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.28%)</title><rect x="89.0" y="1763.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="92.0" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.35%)</title><rect x="92.3" y="1763.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="95.3" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="96.4" y="1763.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="99.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 2.86%)</title><rect x="97.2" y="1859.0" width="33.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.2" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 2.86%)</title><rect x="97.2" y="1843.0" width="33.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.2" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (41 samples, 2.86%)</title><rect x="97.2" y="1827.0" width="33.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.2" y="1838.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="130.1" y="1811.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="133.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (6 samples, 0.42%)</title><rect x="131.0" y="1955.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (6 samples, 0.42%)</title><rect x="131.0" y="1939.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.21%)</title><rect x="135.9" y="1955.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.9" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.21%)</title><rect x="135.9" y="1939.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="138.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.21%)</title><rect x="135.9" y="1923.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 2.23%)</title><rect x="138.4" y="1955.0" width="26.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.4" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 0.56%)</title><rect x="154.0" y="1939.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="157.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.56%)</title><rect x="154.0" y="1923.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.0" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.35%)</title><rect x="154.0" y="1907.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.35%)</title><rect x="154.0" y="1891.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="157.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.35%)</title><rect x="154.0" y="1875.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="158.1" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="158.9" y="1907.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.9" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.35%)</title><rect x="160.6" y="1939.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="163.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.14%)</title><rect x="164.7" y="1987.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.7" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.07%)</title><rect x="164.7" y="1971.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="165.5" y="1971.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="165.5" y="1955.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.5" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="165.5" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.28%)</title><rect x="166.3" y="1987.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="169.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.28%)</title><rect x="166.3" y="1971.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="166.3" y="1955.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="166.3" y="1939.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.3" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.21%)</title><rect x="167.2" y="1923.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="170.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (3 samples, 0.21%)</title><rect x="169.6" y="1987.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="172.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.21%)</title><rect x="169.6" y="1971.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="171.3" y="1955.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="171.3" y="1939.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="174.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="171.3" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.25%)</title><rect x="172.1" y="2003.0" width="50.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.1" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.25%)</title><rect x="172.1" y="1987.0" width="50.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.1" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.07%)</title><rect x="172.1" y="1971.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.07%)</title><rect x="172.1" y="1955.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.37%)</title><rect x="172.9" y="1971.0" width="28.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="175.9" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="172.9" y="1955.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="172.9" y="1939.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="172.9" y="1923.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="175.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.07%)</title><rect x="172.9" y="1907.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.30%)</title><rect x="173.8" y="1955.0" width="27.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.8" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 2.23%)</title><rect x="174.6" y="1939.0" width="26.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.6" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (27 samples, 1.88%)</title><rect x="174.6" y="1923.0" width="22.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.6" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 1.88%)</title><rect x="174.6" y="1907.0" width="22.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.6" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 0.91%)</title><rect x="176.2" y="1891.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.42%)</title><rect x="182.0" y="1875.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.42%)</title><rect x="182.0" y="1859.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.42%)</title><rect x="182.0" y="1843.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="185.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.42%)</title><rect x="182.0" y="1827.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.42%)</title><rect x="182.0" y="1811.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.42%)</title><rect x="182.0" y="1795.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="185.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.42%)</title><rect x="182.0" y="1779.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="185.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.84%)</title><rect x="186.9" y="1891.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.84%)</title><rect x="186.9" y="1875.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.42%)</title><rect x="186.9" y="1859.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.9" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.42%)</title><rect x="186.9" y="1843.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.9" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="191.0" y="1827.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="194.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.42%)</title><rect x="191.9" y="1859.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.9" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.42%)</title><rect x="191.9" y="1843.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.9" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="196.0" y="1827.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="199.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.21%)</title><rect x="196.8" y="1923.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.21%)</title><rect x="196.8" y="1907.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.21%)</title><rect x="196.8" y="1891.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.21%)</title><rect x="196.8" y="1875.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.21%)</title><rect x="196.8" y="1859.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="196.8" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.14%)</title><rect x="197.6" y="1843.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (2 samples, 0.14%)</title><rect x="197.6" y="1827.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (2 samples, 0.14%)</title><rect x="197.6" y="1811.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="199.3" y="1923.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="200.1" y="1923.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.84%)</title><rect x="200.9" y="1971.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.70%)</title><rect x="200.9" y="1955.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.63%)</title><rect x="200.9" y="1939.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="202.6" y="1923.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="202.6" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.07%)</title><rect x="202.6" y="1891.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="202.6" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.6" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="202.6" y="1859.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="203.4" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="203.4" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="203.4" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.14%)</title><rect x="204.2" y="1923.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.14%)</title><rect x="204.2" y="1907.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="205.0" y="1891.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="205.0" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="205.0" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="205.0" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="205.0" y="1827.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.0" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="205.0" y="1811.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.0" y="1822.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="205.0" y="1795.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="208.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="205.8" y="1923.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="205.8" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.8" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="205.8" y="1891.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="205.8" y="1875.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="205.8" y="1859.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="206.7" y="1923.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="206.7" y="1907.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="206.7" y="1891.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="206.7" y="1875.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="206.7" y="1859.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="206.7" y="1843.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="206.7" y="1827.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.14%)</title><rect x="206.7" y="1811.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.7" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="207.5" y="1795.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="207.5" y="1779.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.5" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="207.5" y="1763.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.5" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/435863124.get (1 samples, 0.07%)</title><rect x="207.5" y="1747.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="208.3" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="208.3" y="1923.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="208.3" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="208.3" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="208.3" y="1875.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="208.3" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="208.3" y="1843.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="208.3" y="1827.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="208.3" y="1811.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.07%)</title><rect x="208.3" y="1795.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.14%)</title><rect x="209.1" y="1955.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.14%)</title><rect x="209.1" y="1939.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.14%)</title><rect x="209.1" y="1923.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (2 samples, 0.14%)</title><rect x="209.1" y="1907.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (2 samples, 0.14%)</title><rect x="209.1" y="1891.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (2 samples, 0.14%)</title><rect x="209.1" y="1875.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.14%)</title><rect x="209.1" y="1859.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="209.1" y="1843.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="210.8" y="1971.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="210.8" y="1955.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="210.8" y="1939.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="210.8" y="1923.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="210.8" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.56%)</title><rect x="211.6" y="1971.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.35%)</title><rect x="211.6" y="1955.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleInitiateApiVersionRequests (1 samples, 0.07%)</title><rect x="211.6" y="1939.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.07%)</title><rect x="211.6" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="211.6" y="1907.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="211.6" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.28%)</title><rect x="212.4" y="1939.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.07%)</title><rect x="212.4" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="213.2" y="1923.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="213.2" y="1907.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="213.2" y="1891.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="216.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="213.2" y="1875.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="213.2" y="1859.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.2" y="1870.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="213.2" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.2" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="213.2" y="1827.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.2" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="213.2" y="1811.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.2" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.07%)</title><rect x="213.2" y="1795.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.2" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.07%)</title><rect x="213.2" y="1779.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.2" y="1790.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_writev0 (1 samples, 0.07%)</title><rect x="213.2" y="1763.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="216.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="214.1" y="1907.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="214.1" y="1891.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="214.1" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="214.1" y="1859.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="214.1" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.1" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="214.1" y="1827.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="217.1" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="214.1" y="1811.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="217.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="214.9" y="1923.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="217.9" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="214.9" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.9" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="214.9" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.9" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="214.9" y="1875.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.9" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="214.9" y="1859.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (3 samples, 0.21%)</title><rect x="215.7" y="1955.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.14%)</title><rect x="215.7" y="1939.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="215.7" y="1923.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="215.7" y="1907.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.14%)</title><rect x="215.7" y="1891.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.14%)</title><rect x="215.7" y="1875.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="215.7" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.07%)</title><rect x="215.7" y="1843.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.07%)</title><rect x="215.7" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type.isArray (1 samples, 0.07%)</title><rect x="215.7" y="1811.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.arrayElementType (1 samples, 0.07%)</title><rect x="215.7" y="1795.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.7" y="1806.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.07%)</title><rect x="215.7" y="1779.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.7" y="1790.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.07%)</title><rect x="215.7" y="1763.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.7" y="1774.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.07%)</title><rect x="215.7" y="1747.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="216.5" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="216.5" y="1843.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="216.5" y="1827.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.07%)</title><rect x="216.5" y="1811.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="216.5" y="1795.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.5" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.07%)</title><rect x="216.5" y="1779.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="216.5" y="1763.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.write (1 samples, 0.07%)</title><rect x="216.5" y="1747.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.07%)</title><rect x="217.4" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.07%)</title><rect x="217.4" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.07%)</title><rect x="217.4" y="1907.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.07%)</title><rect x="217.4" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.07%)</title><rect x="217.4" y="1875.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.28%)</title><rect x="218.2" y="1971.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.21%)</title><rect x="219.0" y="1955.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.0" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="219.0" y="1939.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/275374105.accept (1 samples, 0.07%)</title><rect x="219.0" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="219.0" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="219.0" y="1891.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.07%)</title><rect x="219.0" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="219.0" y="1859.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="219.0" y="1843.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="219.8" y="1939.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="219.8" y="1923.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="219.8" y="1907.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="219.8" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="219.8" y="1875.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="219.8" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="219.8" y="1843.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.8" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="219.8" y="1827.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="219.8" y="1811.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="219.8" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.8" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="219.8" y="1779.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/786916829.test (1 samples, 0.07%)</title><rect x="219.8" y="1763.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.07%)</title><rect x="219.8" y="1747.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/839761865.test (1 samples, 0.07%)</title><rect x="219.8" y="1731.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.8" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.07%)</title><rect x="219.8" y="1715.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.8" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="219.8" y="1699.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.8" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="219.8" y="1683.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.8" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="219.8" y="1667.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.8" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="219.8" y="1651.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.8" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="220.7" y="1939.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="220.7" y="1923.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="220.7" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.7" y="1918.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="220.7" y="1891.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="220.7" y="1875.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="221.5" y="1971.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="221.5" y="1955.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.5" y="1966.0"></text>
</g>
<g>
<title>java/lang/Thread.run (732 samples, 51.05%)</title><rect x="222.3" y="2035.0" width="602.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (732 samples, 51.05%)</title><rect x="222.3" y="2019.0" width="602.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (732 samples, 51.05%)</title><rect x="222.3" y="2003.0" width="602.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/189481560.run (508 samples, 35.43%)</title><rect x="225.6" y="1987.0" width="418.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.6" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (508 samples, 35.43%)</title><rect x="225.6" y="1971.0" width="418.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.6" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (508 samples, 35.43%)</title><rect x="225.6" y="1955.0" width="418.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.6" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (502 samples, 35.01%)</title><rect x="225.6" y="1939.0" width="413.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.6" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sc..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.21%)</title><rect x="233.0" y="1923.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (157 samples, 10.95%)</title><rect x="235.5" y="1923.0" width="129.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.5" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (157 samples, 10.95%)</title><rect x="235.5" y="1907.0" width="129.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.5" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (157 samples, 10.95%)</title><rect x="235.5" y="1891.0" width="129.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.5" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="235.5" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="238.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="235.5" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="238.5" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="235.5" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="238.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (156 samples, 10.88%)</title><rect x="236.3" y="1875.0" width="128.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.3" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (156 samples, 10.88%)</title><rect x="236.3" y="1859.0" width="128.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.3" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (156 samples, 10.88%)</title><rect x="236.3" y="1843.0" width="128.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.3" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (56 samples, 3.91%)</title><rect x="236.3" y="1827.0" width="46.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.3" y="1838.0">com/..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="252.7" y="1811.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="255.7" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="255.2" y="1811.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="258.2" y="1822.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="256.0" y="1795.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="259.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 0.91%)</title><rect x="259.3" y="1811.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 0.91%)</title><rect x="259.3" y="1795.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 0.91%)</title><rect x="259.3" y="1779.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 0.91%)</title><rect x="259.3" y="1763.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (12 samples, 0.84%)</title><rect x="259.3" y="1747.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.3" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (12 samples, 0.84%)</title><rect x="259.3" y="1731.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="262.3" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.07%)</title><rect x="269.2" y="1747.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.2" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="269.2" y="1731.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="272.2" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="269.2" y="1715.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.2" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.07%)</title><rect x="269.2" y="1699.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="269.2" y="1683.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.2" y="1694.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="269.2" y="1667.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.2" y="1678.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="269.2" y="1651.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.2" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="269.2" y="1635.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="272.2" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="269.2" y="1619.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="272.2" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="269.2" y="1603.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="272.2" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="269.2" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="272.2" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="269.2" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="272.2" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="269.2" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="272.2" y="1566.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.07%)</title><rect x="269.2" y="1539.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="272.2" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (15 samples, 1.05%)</title><rect x="270.0" y="1811.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.14%)</title><rect x="280.7" y="1795.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.07%)</title><rect x="280.7" y="1779.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="280.7" y="1763.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="281.5" y="1779.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="281.5" y="1763.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="281.5" y="1747.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.5" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="281.5" y="1731.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="284.5" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="281.5" y="1715.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="284.5" y="1726.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="281.5" y="1699.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="284.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (93 samples, 6.49%)</title><rect x="282.4" y="1827.0" width="76.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.4" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.28%)</title><rect x="283.2" y="1811.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.14%)</title><rect x="286.5" y="1811.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.49%)</title><rect x="288.1" y="1811.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.42%)</title><rect x="289.0" y="1795.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (1 samples, 0.07%)</title><rect x="293.1" y="1779.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.84%)</title><rect x="293.9" y="1811.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.77%)</title><rect x="294.7" y="1795.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.63%)</title><rect x="295.5" y="1779.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (9 samples, 0.63%)</title><rect x="295.5" y="1763.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="301.3" y="1747.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="302.9" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="305.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.35%)</title><rect x="303.8" y="1811.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.28%)</title><rect x="304.6" y="1795.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (62 samples, 4.32%)</title><rect x="307.9" y="1811.0" width="51.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.9" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.19%)</title><rect x="307.9" y="1795.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.49%)</title><rect x="307.9" y="1779.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="310.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.49%)</title><rect x="307.9" y="1763.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.49%)</title><rect x="307.9" y="1747.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.49%)</title><rect x="313.6" y="1779.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.21%)</title><rect x="319.4" y="1779.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.21%)</title><rect x="319.4" y="1763.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="322.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="321.9" y="1795.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (44 samples, 3.07%)</title><rect x="322.7" y="1795.0" width="36.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.7" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (44 samples, 3.07%)</title><rect x="322.7" y="1779.0" width="36.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.7" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (44 samples, 3.07%)</title><rect x="322.7" y="1763.0" width="36.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.7" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.19%)</title><rect x="328.5" y="1747.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="332.6" y="1731.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.42%)</title><rect x="333.4" y="1731.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.42%)</title><rect x="333.4" y="1715.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="336.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.42%)</title><rect x="333.4" y="1699.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.28%)</title><rect x="335.0" y="1683.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.0" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.35%)</title><rect x="338.3" y="1731.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.35%)</title><rect x="338.3" y="1715.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="341.6" y="1699.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.42%)</title><rect x="342.4" y="1747.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.21%)</title><rect x="344.9" y="1731.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.21%)</title><rect x="344.9" y="1715.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.21%)</title><rect x="344.9" y="1699.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.21%)</title><rect x="344.9" y="1683.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="347.4" y="1747.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.42%)</title><rect x="348.2" y="1747.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.42%)</title><rect x="348.2" y="1731.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.42%)</title><rect x="348.2" y="1715.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.42%)</title><rect x="348.2" y="1699.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.42%)</title><rect x="348.2" y="1683.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="351.2" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.35%)</title><rect x="349.0" y="1667.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.0" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor19.newInstance (3 samples, 0.21%)</title><rect x="350.7" y="1651.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.49%)</title><rect x="353.1" y="1747.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.1" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.49%)</title><rect x="353.1" y="1731.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.1" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.49%)</title><rect x="353.1" y="1715.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.49%)</title><rect x="358.9" y="1827.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.9" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.42%)</title><rect x="359.7" y="1811.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.42%)</title><rect x="359.7" y="1795.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.42%)</title><rect x="359.7" y="1779.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.42%)</title><rect x="359.7" y="1763.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (307 samples, 21.41%)</title><rect x="364.7" y="1923.0" width="252.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.7" y="1934.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (57 samples, 3.97%)</title><rect x="365.5" y="1907.0" width="46.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.5" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.14%)</title><rect x="365.5" y="1891.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.5" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (55 samples, 3.84%)</title><rect x="367.1" y="1891.0" width="45.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.1" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 3.84%)</title><rect x="367.1" y="1875.0" width="45.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.1" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.56%)</title><rect x="367.1" y="1859.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.56%)</title><rect x="367.1" y="1843.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.56%)</title><rect x="367.1" y="1827.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="370.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.56%)</title><rect x="367.1" y="1811.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.1" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (47 samples, 3.28%)</title><rect x="373.7" y="1859.0" width="38.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.7" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 0.84%)</title><rect x="402.5" y="1843.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="405.5" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.21%)</title><rect x="402.5" y="1827.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="404.2" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.63%)</title><rect x="405.0" y="1827.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.28%)</title><rect x="409.1" y="1811.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.42%)</title><rect x="412.4" y="1907.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="414.0" y="1891.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="417.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.28%)</title><rect x="414.0" y="1875.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (164 samples, 11.44%)</title><rect x="417.3" y="1907.0" width="135.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.3" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.49%)</title><rect x="417.3" y="1891.0" width="5.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="420.3" y="1902.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="418.1" y="1875.0" width="5.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="421.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (153 samples, 10.67%)</title><rect x="423.1" y="1891.0" width="125.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.1" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 3.14%)</title><rect x="423.1" y="1875.0" width="37.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.1" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (45 samples, 3.14%)</title><rect x="423.1" y="1859.0" width="37.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.1" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (28 samples, 1.95%)</title><rect x="429.7" y="1843.0" width="23.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.7" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22 samples, 1.53%)</title><rect x="429.7" y="1827.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="432.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (22 samples, 1.53%)</title><rect x="429.7" y="1811.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 1.53%)</title><rect x="429.7" y="1795.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.7" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.70%)</title><rect x="433.8" y="1779.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="436.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.35%)</title><rect x="433.8" y="1763.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="436.8" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.07%)</title><rect x="434.6" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="437.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.21%)</title><rect x="435.4" y="1747.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="438.4" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.21%)</title><rect x="435.4" y="1731.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="438.4" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="435.4" y="1715.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="438.4" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="435.4" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="438.4" y="1710.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.14%)</title><rect x="436.2" y="1715.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="439.2" y="1726.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="437.1" y="1699.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="440.1" y="1710.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.14%)</title><rect x="437.9" y="1763.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="440.9" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="439.5" y="1763.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="442.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="440.4" y="1747.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="443.4" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="440.4" y="1731.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="443.4" y="1742.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.07%)</title><rect x="441.2" y="1763.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="444.2" y="1774.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.07%)</title><rect x="442.0" y="1779.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="445.0" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.42%)</title><rect x="442.8" y="1779.0" width="5.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="445.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.42%)</title><rect x="447.8" y="1827.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="450.8" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="452.7" y="1843.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="455.7" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.49%)</title><rect x="454.4" y="1843.0" width="5.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="457.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (17 samples, 1.19%)</title><rect x="460.1" y="1875.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (12 samples, 0.84%)</title><rect x="460.1" y="1859.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (12 samples, 0.84%)</title><rect x="460.1" y="1843.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.35%)</title><rect x="470.0" y="1859.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.0" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="470.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="473.0" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="470.0" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="473.0" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="470.0" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="473.0" y="1822.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="470.0" y="1795.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="473.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="470.8" y="1843.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="473.8" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (91 samples, 6.35%)</title><rect x="474.1" y="1875.0" width="74.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.1" y="1886.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.51%)</title><rect x="483.2" y="1859.0" width="65.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.2" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.42%)</title><rect x="484.0" y="1843.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="487.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.42%)</title><rect x="484.0" y="1827.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.42%)</title><rect x="484.0" y="1811.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="487.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.42%)</title><rect x="484.0" y="1795.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.0" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (72 samples, 5.02%)</title><rect x="488.9" y="1843.0" width="59.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="491.9" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (69 samples, 4.81%)</title><rect x="491.4" y="1827.0" width="56.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="494.4" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 2.37%)</title><rect x="520.2" y="1811.0" width="28.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="523.2" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.21%)</title><rect x="533.3" y="1795.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="536.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.77%)</title><rect x="535.8" y="1795.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="538.8" y="1806.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.28%)</title><rect x="544.9" y="1795.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="547.9" y="1806.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="548.2" y="1859.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="551.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="549.0" y="1891.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="552.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (61 samples, 4.25%)</title><rect x="552.3" y="1907.0" width="50.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.3" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 4.25%)</title><rect x="552.3" y="1891.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.3" y="1902.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/234677850.process (39 samples, 2.72%)</title><rect x="555.6" y="1875.0" width="32.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="558.6" y="1886.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (39 samples, 2.72%)</title><rect x="555.6" y="1859.0" width="32.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="558.6" y="1870.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (32 samples, 2.23%)</title><rect x="558.0" y="1843.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="561.0" y="1854.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.35%)</title><rect x="559.7" y="1827.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.7" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.35%)</title><rect x="559.7" y="1811.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="562.7" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.35%)</title><rect x="559.7" y="1795.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="562.7" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.28%)</title><rect x="560.5" y="1779.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="563.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.21%)</title><rect x="561.3" y="1763.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="564.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="563.0" y="1747.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="566.0" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.70%)</title><rect x="563.8" y="1827.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.8" y="1838.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="567.1" y="1811.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="570.1" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.28%)</title><rect x="568.7" y="1811.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="571.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="568.7" y="1795.0" width="3.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="571.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (15 samples, 1.05%)</title><rect x="572.0" y="1827.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.28%)</title><rect x="584.4" y="1843.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="585.2" y="1827.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="586.0" y="1811.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="589.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="586.0" y="1795.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.21%)</title><rect x="587.7" y="1875.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="590.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.21%)</title><rect x="587.7" y="1859.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="590.7" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="590.1" y="1875.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="590.1" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.1" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.70%)</title><rect x="590.9" y="1875.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.35%)</title><rect x="595.1" y="1859.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="598.1" y="1870.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.35%)</title><rect x="595.1" y="1843.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="598.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="599.2" y="1875.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="602.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="599.2" y="1859.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="602.2" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="600.8" y="1875.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="601.6" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="604.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.26%)</title><rect x="602.5" y="1907.0" width="14.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.5" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="608.2" y="1891.0" width="4.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="611.2" y="1902.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="609.1" y="1875.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="612.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.28%)</title><rect x="612.3" y="1891.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="615.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.21%)</title><rect x="613.2" y="1875.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$279/733107934.accept (3 samples, 0.21%)</title><rect x="613.2" y="1859.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (3 samples, 0.21%)</title><rect x="613.2" y="1843.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.2" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.21%)</title><rect x="613.2" y="1827.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="616.2" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.21%)</title><rect x="613.2" y="1811.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.2" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="614.8" y="1795.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="617.8" y="1806.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="614.8" y="1779.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="617.8" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.14%)</title><rect x="615.6" y="1891.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.53%)</title><rect x="617.3" y="1923.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.46%)</title><rect x="618.1" y="1907.0" width="17.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="621.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.12%)</title><rect x="622.2" y="1891.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$279/733107934.accept (1 samples, 0.07%)</title><rect x="622.2" y="1875.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="625.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.07%)</title><rect x="622.2" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="625.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="622.2" y="1843.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="625.2" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="622.2" y="1827.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.2" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="622.2" y="1811.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.2" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="622.2" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="625.2" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="622.2" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.2" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="622.2" y="1763.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="625.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="622.2" y="1747.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="625.2" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="622.2" y="1731.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="625.2" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/467737228.accept (15 samples, 1.05%)</title><rect x="623.0" y="1875.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (15 samples, 1.05%)</title><rect x="623.0" y="1859.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/1617829707.complete (15 samples, 1.05%)</title><rect x="623.0" y="1843.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (15 samples, 1.05%)</title><rect x="623.0" y="1827.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (15 samples, 1.05%)</title><rect x="623.0" y="1811.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.05%)</title><rect x="623.0" y="1795.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.05%)</title><rect x="623.0" y="1779.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.0" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (15 samples, 1.05%)</title><rect x="623.0" y="1763.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="626.0" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (15 samples, 1.05%)</title><rect x="623.0" y="1747.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.0" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.28%)</title><rect x="635.4" y="1923.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="638.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="635.4" y="1907.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="638.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.14%)</title><rect x="638.7" y="1939.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.7" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.14%)</title><rect x="638.7" y="1923.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="641.7" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.14%)</title><rect x="638.7" y="1907.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="641.7" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="638.7" y="1891.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="641.7" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="639.5" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="642.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="639.5" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="642.5" y="1870.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="639.5" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="642.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.28%)</title><rect x="640.3" y="1939.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="643.3" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="640.3" y="1923.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="643.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="640.3" y="1907.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="643.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="642.8" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="643.6" y="1987.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="646.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.63%)</title><rect x="644.4" y="1987.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.63%)</title><rect x="644.4" y="1971.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.4" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.63%)</title><rect x="644.4" y="1955.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.63%)</title><rect x="644.4" y="1939.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (210 samples, 14.64%)</title><rect x="651.8" y="1987.0" width="172.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="654.8" y="1998.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (210 samples, 14.64%)</title><rect x="651.8" y="1971.0" width="172.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="654.8" y="1982.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (178 samples, 12.41%)</title><rect x="656.0" y="1955.0" width="146.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.0" y="1966.0">java/util/concurre..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.21%)</title><rect x="665.8" y="1939.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.21%)</title><rect x="665.8" y="1923.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.05%)</title><rect x="668.3" y="1939.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.42%)</title><rect x="680.6" y="1939.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="683.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.42%)</title><rect x="680.6" y="1923.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.42%)</title><rect x="680.6" y="1907.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="683.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.42%)</title><rect x="680.6" y="1891.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="683.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (142 samples, 9.90%)</title><rect x="685.6" y="1939.0" width="116.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.6" y="1950.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (142 samples, 9.90%)</title><rect x="685.6" y="1923.0" width="116.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="688.6" y="1934.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.14%)</title><rect x="688.9" y="1907.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="691.9" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="690.5" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="693.5" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (129 samples, 9.00%)</title><rect x="691.3" y="1907.0" width="106.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="694.3" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.28%)</title><rect x="693.0" y="1891.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="696.0" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.67%)</title><rect x="696.3" y="1891.0" width="19.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="699.3" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.63%)</title><rect x="698.7" y="1875.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="701.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.28%)</title><rect x="701.2" y="1859.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="704.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.14%)</title><rect x="702.9" y="1843.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="705.9" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="704.5" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="707.5" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="705.3" y="1859.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="708.3" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.14%)</title><rect x="706.2" y="1875.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="709.2" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="707.8" y="1875.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="710.8" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.56%)</title><rect x="709.4" y="1875.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="712.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="716.0" y="1891.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="719.0" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="716.8" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.8" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.56%)</title><rect x="717.7" y="1891.0" width="6.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="720.7" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 1.81%)</title><rect x="724.3" y="1891.0" width="21.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="727.3" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (43 samples, 3.00%)</title><rect x="745.6" y="1891.0" width="35.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="748.6" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.21%)</title><rect x="781.0" y="1891.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="784.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="783.5" y="1891.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="786.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.14%)</title><rect x="784.3" y="1891.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="787.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="786.0" y="1891.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="789.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.21%)</title><rect x="787.6" y="1891.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="790.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="790.1" y="1891.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="793.1" y="1902.0"></text>
</g>
<g>
<title>_init (2 samples, 0.14%)</title><rect x="790.9" y="1891.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="793.9" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="792.6" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="795.6" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="793.4" y="1891.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="796.4" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.21%)</title><rect x="795.0" y="1891.0" width="2.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="798.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.28%)</title><rect x="797.5" y="1907.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="800.5" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="800.8" y="1907.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="803.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 1.88%)</title><rect x="802.4" y="1955.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.4" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 1.88%)</title><rect x="802.4" y="1939.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="805.4" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 1.88%)</title><rect x="802.4" y="1923.0" width="22.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="805.4" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 1.88%)</title><rect x="802.4" y="1907.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.4" y="1918.0">j..</text>
</g>
<g>
<title>start_thread (444 samples, 30.96%)</title><rect x="824.6" y="2035.0" width="365.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="827.6" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (444 samples, 30.96%)</title><rect x="824.6" y="2019.0" width="365.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="827.6" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>FlexibleWorkGang::needs_more_workers() const (1 samples, 0.07%)</title><rect x="824.6" y="2003.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="827.6" y="2014.0"></text>
</g>
<g>
<title>GangWorker::loop() (39 samples, 2.72%)</title><rect x="825.5" y="2003.0" width="32.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="828.5" y="2014.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (20 samples, 1.39%)</title><rect x="826.3" y="1987.0" width="16.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.3" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (20 samples, 1.39%)</title><rect x="826.3" y="1971.0" width="16.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.3" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (7 samples, 0.49%)</title><rect x="826.3" y="1955.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="829.3" y="1966.0"></text>
</g>
<g>
<title>SpinPause (13 samples, 0.91%)</title><rect x="832.1" y="1955.0" width="10.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="835.1" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.26%)</title><rect x="842.7" y="1987.0" width="14.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="845.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.42%)</title><rect x="842.7" y="1971.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="845.7" y="1982.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.07%)</title><rect x="842.7" y="1955.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="845.7" y="1966.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.35%)</title><rect x="843.6" y="1955.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="846.6" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.56%)</title><rect x="847.7" y="1971.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="850.7" y="1982.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="847.7" y="1955.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="850.7" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="848.5" y="1955.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="851.5" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.14%)</title><rect x="848.5" y="1939.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="851.5" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.14%)</title><rect x="848.5" y="1923.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="851.5" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.14%)</title><rect x="848.5" y="1907.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="851.5" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.35%)</title><rect x="850.2" y="1955.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="853.2" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.28%)</title><rect x="850.2" y="1939.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="853.2" y="1950.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="853.4" y="1939.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="856.4" y="1950.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="853.4" y="1923.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="856.4" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.28%)</title><rect x="854.3" y="1971.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="857.3" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.28%)</title><rect x="854.3" y="1955.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.3" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.28%)</title><rect x="854.3" y="1939.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.3" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.28%)</title><rect x="854.3" y="1923.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="857.3" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.28%)</title><rect x="854.3" y="1907.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="857.3" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.28%)</title><rect x="854.3" y="1891.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.3" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.21%)</title><rect x="855.1" y="1875.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="858.1" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="855.1" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.1" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.07%)</title><rect x="855.9" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="858.9" y="1870.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="856.7" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="859.7" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="856.7" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="859.7" y="1854.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="856.7" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="859.7" y="1838.0"></text>
</g>
<g>
<title>JavaThread::run() (401 samples, 27.96%)</title><rect x="857.6" y="2003.0" width="329.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="860.6" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (401 samples, 27.96%)</title><rect x="857.6" y="1987.0" width="329.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="860.6" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (400 samples, 27.89%)</title><rect x="857.6" y="1971.0" width="329.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.6" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (400 samples, 27.89%)</title><rect x="857.6" y="1955.0" width="329.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="860.6" y="1966.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (399 samples, 27.82%)</title><rect x="857.6" y="1939.0" width="328.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="860.6" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (399 samples, 27.82%)</title><rect x="857.6" y="1923.0" width="328.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="860.6" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (118 samples, 8.23%)</title><rect x="857.6" y="1907.0" width="97.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="860.6" y="1918.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.35%)</title><rect x="857.6" y="1891.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.6" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="857.6" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.6" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 0.28%)</title><rect x="858.4" y="1875.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.4" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (4 samples, 0.28%)</title><rect x="858.4" y="1859.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="861.4" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="860.9" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="863.9" y="1854.0"></text>
</g>
<g>
<title>ciObject::constant_encoding() (1 samples, 0.07%)</title><rect x="860.9" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.9" y="1838.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.35%)</title><rect x="861.7" y="1891.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.21%)</title><rect x="861.7" y="1875.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="864.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (3 samples, 0.21%)</title><rect x="861.7" y="1859.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="864.7" y="1870.0"></text>
</g>
<g>
<title>ConstantIntValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="861.7" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="864.7" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="862.5" y="1843.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="865.5" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="864.1" y="1875.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.1" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="865.0" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.0" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="865.8" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="868.8" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.63%)</title><rect x="866.6" y="1891.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.6" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="866.6" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.6" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.56%)</title><rect x="867.4" y="1875.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="870.4" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.42%)</title><rect x="868.3" y="1859.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="871.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="873.2" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="873.2" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.2" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="873.2" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="876.2" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.42%)</title><rect x="874.0" y="1891.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.42%)</title><rect x="874.0" y="1875.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.0" y="1886.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="874.0" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="874.8" y="1859.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="877.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="876.5" y="1859.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="879.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="877.3" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.3" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.07%)</title><rect x="878.1" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="881.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.14%)</title><rect x="879.0" y="1891.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="882.0" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (89 samples, 6.21%)</title><rect x="880.6" y="1891.0" width="73.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="883.6" y="1902.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="880.6" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="883.6" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="881.4" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="884.4" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.28%)</title><rect x="882.2" y="1875.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="885.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.56%)</title><rect x="885.5" y="1875.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="887.2" y="1859.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="890.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.28%)</title><rect x="888.8" y="1859.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="891.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="889.7" y="1843.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.21%)</title><rect x="892.1" y="1875.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="895.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.14%)</title><rect x="892.9" y="1859.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="895.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="893.8" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (12 samples, 0.84%)</title><rect x="894.6" y="1875.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.6" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="902.8" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.8" y="1870.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="902.8" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.8" y="1854.0"></text>
</g>
<g>
<title>rRegNOper::type() const (1 samples, 0.07%)</title><rect x="902.8" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="905.8" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="903.6" y="1859.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.6" y="1870.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.07%)</title><rect x="903.6" y="1843.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="906.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 0.98%)</title><rect x="904.5" y="1875.0" width="11.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.5" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.14%)</title><rect x="906.1" y="1859.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="907.8" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="910.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.56%)</title><rect x="908.6" y="1859.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="911.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="913.5" y="1843.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="916.5" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="915.2" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.14%)</title><rect x="916.0" y="1875.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="916.8" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="916.8" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="919.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.49%)</title><rect x="917.6" y="1875.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="920.6" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="921.7" y="1859.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="924.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="923.4" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.42%)</title><rect x="924.2" y="1875.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="927.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.42%)</title><rect x="924.2" y="1859.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="927.5" y="1843.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.5" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="928.3" y="1827.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="931.3" y="1838.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (13 samples, 0.91%)</title><rect x="929.1" y="1875.0" width="10.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.1" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (13 samples, 0.91%)</title><rect x="929.1" y="1859.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="932.1" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 0.91%)</title><rect x="929.1" y="1843.0" width="10.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="932.1" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="932.1" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="929.1" y="1811.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="932.1" y="1822.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.07%)</title><rect x="930.0" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="933.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (10 samples, 0.70%)</title><rect x="930.8" y="1827.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.8" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="938.2" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="939.0" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.21%)</title><rect x="939.8" y="1875.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="941.5" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="944.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.14%)</title><rect x="942.3" y="1875.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="943.1" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="944.0" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="944.0" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 0.70%)</title><rect x="944.8" y="1875.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.8" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.49%)</title><rect x="947.3" y="1859.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="950.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="951.4" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.4" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.07%)</title><rect x="952.2" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="955.2" y="1854.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="952.2" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="955.2" y="1838.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="953.0" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.0" y="1886.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="953.8" y="1891.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="956.8" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (266 samples, 18.55%)</title><rect x="954.7" y="1907.0" width="218.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.7" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="954.7" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.7" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="954.7" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.7" y="1886.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="955.5" y="1891.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="958.5" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="955.5" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.5" y="1886.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.07%)</title><rect x="955.5" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="958.5" y="1870.0"></text>
</g>
<g>
<title>GraphKit::replace_call(CallNode*, Node*, bool) (1 samples, 0.07%)</title><rect x="955.5" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.5" y="1854.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="955.5" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="958.5" y="1838.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="956.3" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.07%)</title><rect x="956.3" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="959.3" y="1886.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.07%)</title><rect x="956.3" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.3" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.42%)</title><rect x="957.1" y="1891.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.1" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.42%)</title><rect x="957.1" y="1875.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.1" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="957.1" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="957.1" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="960.1" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="957.1" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.1" y="1838.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="957.1" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.1" y="1822.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="957.1" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.1" y="1806.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="957.1" y="1779.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.1" y="1790.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="957.1" y="1763.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="960.1" y="1774.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="957.1" y="1747.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="960.1" y="1758.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="957.1" y="1731.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.1" y="1742.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="957.1" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.1" y="1726.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="957.1" y="1699.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.1" y="1710.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="957.1" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.1" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="957.1" y="1667.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.1" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="957.1" y="1651.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.1" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="957.1" y="1635.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="960.1" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="957.1" y="1619.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.1" y="1630.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="957.1" y="1603.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.1" y="1614.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="957.1" y="1587.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.1" y="1598.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="957.1" y="1571.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.1" y="1582.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="957.1" y="1555.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.1" y="1566.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="957.1" y="1539.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.1" y="1550.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="957.1" y="1523.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.1" y="1534.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="957.1" y="1507.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.1" y="1518.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="957.1" y="1491.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.1" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="957.9" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.9" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.28%)</title><rect x="958.8" y="1859.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="959.6" y="1843.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="962.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1763.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1747.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1715.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1699.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.6" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1651.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1635.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.6" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1619.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.6" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1603.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1587.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="962.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1571.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1555.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1539.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.6" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1523.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1507.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1491.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1475.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="962.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1459.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1443.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1427.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1395.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1379.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1363.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="962.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1347.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1331.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1315.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="962.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1283.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1267.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1251.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1203.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="962.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1187.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="959.6" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.6" y="1182.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="959.6" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="960.4" y="1827.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="963.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="960.4" y="1811.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="963.4" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="960.4" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="963.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.2" y="1811.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="961.2" y="1795.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="964.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="961.2" y="1779.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="964.2" y="1790.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.14%)</title><rect x="962.1" y="1891.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.1" y="1902.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="962.9" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.9" y="1886.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="962.9" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.9" y="1870.0"></text>
</g>
<g>
<title>TypeInt::hash() const (1 samples, 0.07%)</title><rect x="962.9" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (229 samples, 15.97%)</title><rect x="963.7" y="1891.0" width="188.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.7" y="1902.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="963.7" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.7" y="1886.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="964.5" y="1875.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.42%)</title><rect x="965.4" y="1875.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.4" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.21%)</title><rect x="967.8" y="1859.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.35%)</title><rect x="970.3" y="1875.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="973.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (201 samples, 14.02%)</title><rect x="974.4" y="1875.0" width="165.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="977.4" y="1886.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (197 samples, 13.74%)</title><rect x="977.7" y="1859.0" width="162.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.7" y="1870.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.49%)</title><rect x="981.8" y="1843.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (185 samples, 12.90%)</title><rect x="987.6" y="1843.0" width="152.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.6" y="1854.0">PhaseIdealLoop::get..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (34 samples, 2.37%)</title><rect x="1110.2" y="1827.0" width="28.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.2" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1138.2" y="1827.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1139.8" y="1875.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.56%)</title><rect x="1141.5" y="1875.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1144.7" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.21%)</title><rect x="1145.6" y="1859.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1145.6" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1146.4" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1146.4" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1147.2" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.35%)</title><rect x="1148.0" y="1875.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.35%)</title><rect x="1148.0" y="1859.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.0" y="1870.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="1148.0" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.0" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1148.9" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.9" y="1854.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.07%)</title><rect x="1148.9" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.7" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.7" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1150.5" y="1843.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.5" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1150.5" y="1827.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1152.1" y="1891.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1152.1" y="1875.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (20 samples, 1.39%)</title><rect x="1153.0" y="1891.0" width="16.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (20 samples, 1.39%)</title><rect x="1153.0" y="1875.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.0" y="1886.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1153.8" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.8" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1154.6" y="1859.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.6" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (3 samples, 0.21%)</title><rect x="1154.6" y="1843.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.21%)</title><rect x="1154.6" y="1827.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.6" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.21%)</title><rect x="1154.6" y="1811.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.6" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1157.1" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.1" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1157.1" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.1" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1157.1" y="1811.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.1" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1157.9" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.9" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.21%)</title><rect x="1158.7" y="1859.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1160.4" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="1854.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1160.4" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.35%)</title><rect x="1161.2" y="1859.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.2" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1165.3" y="1859.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1167.0" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1167.8" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="1870.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1168.6" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.6" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1168.6" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.6" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1168.6" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.6" y="1838.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1168.6" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.6" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.14%)</title><rect x="1169.4" y="1891.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.14%)</title><rect x="1169.4" y="1875.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1169.4" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.4" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1169.4" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.4" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1170.3" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1170.3" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.3" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.3" y="1827.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1173.3" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1171.1" y="1891.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1171.1" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1171.1" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.1" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.9" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1171.9" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1171.9" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.9" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="1838.0"></text>
</g>
<g>
<title>StartNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1172.7" y="1891.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.7" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.98%)</title><rect x="1173.5" y="1907.0" width="11.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.98%)</title><rect x="1173.5" y="1891.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.98%)</title><rect x="1173.5" y="1875.0" width="11.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="1886.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1173.5" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="1870.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.5" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="1854.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1173.5" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="1838.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.07%)</title><rect x="1173.5" y="1811.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.5" y="1822.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1173.5" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.91%)</title><rect x="1174.4" y="1859.0" width="10.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1174.4" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1854.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1174.4" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1838.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1174.4" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="1822.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1174.4" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1806.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1174.4" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1790.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1174.4" y="1763.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="1774.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1174.4" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="1758.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.07%)</title><rect x="1174.4" y="1731.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1742.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.84%)</title><rect x="1175.2" y="1843.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.77%)</title><rect x="1175.2" y="1827.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.70%)</title><rect x="1175.2" y="1811.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.70%)</title><rect x="1175.2" y="1795.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.70%)</title><rect x="1175.2" y="1779.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.70%)</title><rect x="1175.2" y="1763.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.70%)</title><rect x="1175.2" y="1747.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.70%)</title><rect x="1175.2" y="1731.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="1742.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="1726.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1175.2" y="1699.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="1710.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1175.2" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1694.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="1175.2" y="1667.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="1678.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1175.2" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="1662.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1635.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="1646.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1175.2" y="1619.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1630.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1175.2" y="1603.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.2" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1176.0" y="1715.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1176.0" y="1699.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1176.0" y="1683.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1176.0" y="1667.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1176.0" y="1651.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.42%)</title><rect x="1176.0" y="1635.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1176.0" y="1619.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1176.0" y="1603.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.0" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1176.0" y="1587.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1176.0" y="1571.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1176.0" y="1555.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1176.0" y="1539.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1176.0" y="1523.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1176.0" y="1507.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1176.0" y="1491.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1176.0" y="1475.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1176.0" y="1459.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1176.0" y="1443.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.0" y="1427.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.0" y="1395.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.0" y="1379.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.0" y="1363.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.0" y="1347.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="1358.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.0" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="1342.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.07%)</title><rect x="1176.0" y="1315.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.0" y="1326.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1176.0" y="1299.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="1310.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1176.0" y="1283.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1294.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1176.0" y="1267.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1427.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1411.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="1395.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="1379.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="1363.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="1347.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="1331.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1315.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="1299.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="1283.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="1267.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="1251.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="1235.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1246.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="1219.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="1230.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1176.8" y="1203.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.8" y="1214.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1176.8" y="1187.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1198.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1177.7" y="1523.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.7" y="1507.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.7" y="1491.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.7" y="1475.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.7" y="1459.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.7" y="1443.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.7" y="1427.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.7" y="1411.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.7" y="1395.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.7" y="1379.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.7" y="1363.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.7" y="1347.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.7" y="1331.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1283.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1267.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1235.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1187.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1171.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1177.7" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1177.7" y="1091.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="1102.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="1043.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="1054.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.5" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.5" y="1267.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.5" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.5" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.5" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.5" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.5" y="1171.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.5" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.5" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.5" y="1123.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.5" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.5" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.5" y="1075.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.5" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.5" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="1054.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1178.5" y="1027.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.5" y="1011.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1178.5" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1178.5" y="979.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1178.5" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1178.5" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.3" y="1507.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.3" y="1491.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.3" y="1475.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.3" y="1459.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.3" y="1443.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.3" y="1427.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.3" y="1411.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.3" y="1395.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.3" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.3" y="1363.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.3" y="1347.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.3" y="1331.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="1326.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.07%)</title><rect x="1179.3" y="1299.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="1310.0"></text>
</g>
<g>
<title>ReplacedNodes::record(Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="1283.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1539.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="1550.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1180.1" y="1523.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="1534.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1507.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1518.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1180.1" y="1491.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="1502.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1475.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="1486.0"></text>
</g>
<g>
<title>ciMethod::get_field_at_bci(int, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.1" y="1459.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.1" y="1470.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="1715.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="1699.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.9" y="1683.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.9" y="1667.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.9" y="1651.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.9" y="1635.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1180.9" y="1619.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="1603.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.9" y="1587.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.9" y="1571.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.9" y="1555.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.9" y="1539.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1180.9" y="1523.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1180.9" y="1507.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1180.9" y="1491.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1180.9" y="1475.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1180.9" y="1459.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1180.9" y="1443.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1180.9" y="1427.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="1438.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.07%)</title><rect x="1180.9" y="1411.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="1422.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1180.9" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="1406.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1180.9" y="1379.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1390.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.07%)</title><rect x="1180.9" y="1363.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1411.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1395.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1379.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1363.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1347.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1331.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1315.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1299.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1283.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1267.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1251.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1235.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1219.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1203.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1187.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1171.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1155.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1139.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1123.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1107.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1091.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1075.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1059.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1043.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1027.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1011.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="995.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1181.8" y="979.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="990.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1181.8" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1181.8" y="947.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1181.8" y="931.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="942.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1181.8" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.6" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.6" y="963.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="958.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="931.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="942.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1182.6" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="910.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="883.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="894.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1182.6" y="867.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="878.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1182.6" y="851.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1183.4" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1822.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1183.4" y="1795.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="1806.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1183.4" y="1779.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="1790.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1183.4" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1774.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="1758.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1183.4" y="1731.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="1742.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.07%)</title><rect x="1183.4" y="1715.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.4" y="1726.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.07%)</title><rect x="1183.4" y="1699.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="1710.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.07%)</title><rect x="1183.4" y="1683.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1827.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="1838.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1822.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1795.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="1806.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1184.2" y="1779.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="1790.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.2" y="1763.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1774.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1747.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1758.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1184.2" y="1731.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1742.0"></text>
</g>
<g>
<title>MemNode::memory_size() const (1 samples, 0.07%)</title><rect x="1184.2" y="1715.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="1726.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1185.1" y="1907.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.1" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.1" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.1" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1185.9" y="1939.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1185.9" y="1923.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.9" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1185.9" y="1907.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1918.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.07%)</title><rect x="1185.9" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.9" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="1886.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.9" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1185.9" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="1854.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.7" y="1971.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.7" y="1955.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1939.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1923.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1189.7" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1186.7" y="1907.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="1918.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1186.7" y="1891.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1189.7" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.21%)</title><rect x="1187.5" y="2003.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="2014.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.07%)</title><rect x="1187.5" y="1987.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.5" y="1998.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.4" y="1987.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.4" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.14%)</title><rect x="1188.4" y="1971.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.14%)</title><rect x="1188.4" y="1955.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.4" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.14%)</title><rect x="1188.4" y="1939.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.14%)</title><rect x="1188.4" y="1923.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>ReferenceProcessor::enqueue_discovered_references(AbstractRefProcTaskExecutor*) (1 samples, 0.07%)</title><rect x="1188.4" y="1891.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.4" y="1902.0"></text>
</g>
<g>
<title>Thread::is_Java_thread() const (1 samples, 0.07%)</title><rect x="1188.4" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.07%)</title><rect x="1189.2" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="1886.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.07%)</title><rect x="1189.2" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.2" y="1870.0"></text>
</g>
</g>
</svg>
