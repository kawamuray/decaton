<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2117"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2117"> </text>
<g id="frames">
<g>
<title>all (426 samples, 100.00%)</title><rect x="10.0" y="2083.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="2094.0">all</text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.23%)</title><rect x="10.0" y="2067.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="2078.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.23%)</title><rect x="10.0" y="2051.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="2062.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.23%)</title><rect x="10.0" y="2035.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="2019.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="2003.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1987.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1971.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1955.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1939.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1923.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1907.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1891.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1875.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1859.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1843.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1827.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1811.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1795.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1779.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1763.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1747.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1731.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1715.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1699.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1683.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1667.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1651.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1635.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1619.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1603.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1587.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1571.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1555.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1539.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1523.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1507.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1491.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1475.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1459.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1443.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1427.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1411.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1395.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1379.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1363.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1347.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1331.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1315.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1299.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1283.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1267.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1251.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1235.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1219.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1203.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1187.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1171.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1155.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1139.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1123.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1107.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1091.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1075.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1059.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1043.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1027.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="1011.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="995.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="979.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="963.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="947.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="931.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="915.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="899.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="883.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="867.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="851.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="835.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="819.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="803.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="787.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="771.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="755.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="739.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="723.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="707.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="691.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="675.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="659.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="643.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="627.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="611.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="595.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="579.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="563.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="547.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="531.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="515.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="499.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="483.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="467.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="451.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="435.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="419.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="403.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="387.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="371.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="355.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="339.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="323.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="307.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="291.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="275.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="259.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="243.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="227.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="211.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="195.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="179.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="163.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="147.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="131.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="115.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="99.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="83.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="67.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="51.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.23%)</title><rect x="10.0" y="35.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (180 samples, 42.25%)</title><rect x="12.8" y="2067.0" width="498.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.8" y="2078.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.23%)</title><rect x="12.8" y="2051.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.8" y="2062.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.23%)</title><rect x="12.8" y="2035.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.8" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.23%)</title><rect x="12.8" y="2019.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.8" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.23%)</title><rect x="12.8" y="2003.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.8" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.23%)</title><rect x="12.8" y="1987.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.23%)</title><rect x="12.8" y="1971.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.23%)</title><rect x="12.8" y="1955.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.23%)</title><rect x="12.8" y="1939.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.23%)</title><rect x="12.8" y="1923.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.23%)</title><rect x="12.8" y="1907.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.23%)</title><rect x="12.8" y="1891.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.8" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.23%)</title><rect x="12.8" y="1875.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.8" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.23%)</title><rect x="12.8" y="1859.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.8" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.23%)</title><rect x="12.8" y="1843.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.8" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 0.23%)</title><rect x="12.8" y="1827.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.8" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 0.23%)</title><rect x="12.8" y="1811.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.8" y="1822.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.23%)</title><rect x="12.8" y="1795.0" width="2.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="15.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (179 samples, 42.02%)</title><rect x="15.5" y="2051.0" width="495.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.5" y="2062.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.23%)</title><rect x="15.5" y="2035.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.5" y="2046.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.23%)</title><rect x="15.5" y="2019.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.5" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1009236200.accept (1 samples, 0.23%)</title><rect x="15.5" y="2003.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.23%)</title><rect x="15.5" y="1987.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.5" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.23%)</title><rect x="15.5" y="1971.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.5" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.23%)</title><rect x="18.3" y="2035.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.3" y="2046.0"></text>
</g>
<g>
<title>_res (1 samples, 0.23%)</title><rect x="18.3" y="2019.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="21.3" y="2030.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (169 samples, 39.67%)</title><rect x="21.1" y="2035.0" width="468.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.1" y="2046.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/2020657572.accept (166 samples, 38.97%)</title><rect x="21.1" y="2019.0" width="459.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.1" y="2030.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (166 samples, 38.97%)</title><rect x="21.1" y="2003.0" width="459.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.1" y="2014.0">com/linecorp/decaton/processor/runtime/ProcessorSubscription.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (163 samples, 38.26%)</title><rect x="21.1" y="1987.0" width="451.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.1" y="1998.0">com/linecorp/decaton/processor/runtime/PartitionContext.addReq..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (163 samples, 38.26%)</title><rect x="21.1" y="1971.0" width="451.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.1" y="1982.0">com/linecorp/decaton/processor/runtime/PartitionProcessor.addT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (163 samples, 38.26%)</title><rect x="21.1" y="1955.0" width="451.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.1" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (163 samples, 38.26%)</title><rect x="21.1" y="1939.0" width="451.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.1" y="1950.0">java/util/concurrent/Executors$DelegatedExecutorService.execute</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (163 samples, 38.26%)</title><rect x="21.1" y="1923.0" width="451.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.1" y="1934.0">java/util/concurrent/ThreadPoolExecutor.execute</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 37.32%)</title><rect x="32.2" y="1907.0" width="440.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.2" y="1918.0">java/util/concurrent/LinkedBlockingQueue.offer</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (156 samples, 36.62%)</title><rect x="40.5" y="1891.0" width="432.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.5" y="1902.0">java/util/concurrent/LinkedBlockingQueue.signalNotEmpty</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.47%)</title><rect x="40.5" y="1875.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.47%)</title><rect x="40.5" y="1859.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.47%)</title><rect x="40.5" y="1843.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.47%)</title><rect x="40.5" y="1827.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (154 samples, 36.15%)</title><rect x="46.0" y="1875.0" width="426.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.0" y="1886.0">java/util/concurrent/locks/ReentrantLock.unlock</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (154 samples, 36.15%)</title><rect x="46.0" y="1859.0" width="426.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.0" y="1870.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.rele..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (154 samples, 36.15%)</title><rect x="46.0" y="1843.0" width="426.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.0" y="1854.0">java/util/concurrent/locks/AbstractQueuedSynchronizer.unpa..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (154 samples, 36.15%)</title><rect x="46.0" y="1827.0" width="426.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.0" y="1838.0">java/util/concurrent/locks/LockSupport.unpark</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (154 samples, 36.15%)</title><rect x="46.0" y="1811.0" width="426.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.0" y="1822.0">sun/misc/Unsafe.unpark</text>
</g>
<g>
<title>Unsafe_Unpark (149 samples, 34.98%)</title><rect x="59.9" y="1795.0" width="412.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="62.9" y="1806.0">Unsafe_Unpark</text>
</g>
<g>
<title>Parker::unpark() (71 samples, 16.67%)</title><rect x="62.6" y="1779.0" width="196.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="65.6" y="1790.0">Parker::unpark()</text>
</g>
<g>
<title>__psynch_cvsignal (70 samples, 16.43%)</title><rect x="62.6" y="1763.0" width="193.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="65.6" y="1774.0">__psynch_cvsignal</text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.23%)</title><rect x="256.5" y="1763.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="259.5" y="1774.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.23%)</title><rect x="256.5" y="1747.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="259.5" y="1758.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (77 samples, 18.08%)</title><rect x="259.3" y="1779.0" width="213.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="262.3" y="1790.0">_pthread_mutex_firstfit_unlo..</text>
</g>
<g>
<title>__psynch_mutexdrop (76 samples, 17.84%)</title><rect x="262.1" y="1763.0" width="210.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="265.1" y="1774.0">__psynch_mutexdrop</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 0.70%)</title><rect x="472.6" y="1987.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.6" y="1998.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.70%)</title><rect x="472.6" y="1971.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.6" y="1982.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.47%)</title><rect x="475.4" y="1955.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="478.4" y="1966.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.23%)</title><rect x="478.1" y="1939.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.1" y="1950.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.23%)</title><rect x="478.1" y="1923.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.1" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.23%)</title><rect x="480.9" y="2019.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="483.9" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.47%)</title><rect x="483.7" y="2019.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="486.7" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.47%)</title><rect x="483.7" y="2003.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.7" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.47%)</title><rect x="483.7" y="1987.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.47%)</title><rect x="483.7" y="1971.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 1.88%)</title><rect x="489.2" y="2035.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="492.2" y="2046.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 1.88%)</title><rect x="489.2" y="2019.0" width="22.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.2" y="2030.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 0.70%)</title><rect x="489.2" y="2003.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.2" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.70%)</title><rect x="489.2" y="1987.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.70%)</title><rect x="489.2" y="1971.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.70%)</title><rect x="489.2" y="1955.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="492.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.70%)</title><rect x="489.2" y="1939.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.70%)</title><rect x="489.2" y="1923.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.47%)</title><rect x="492.0" y="1907.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.47%)</title><rect x="492.0" y="1891.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.23%)</title><rect x="497.5" y="2003.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.5" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.23%)</title><rect x="497.5" y="1987.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.23%)</title><rect x="497.5" y="1971.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.23%)</title><rect x="497.5" y="1955.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.5" y="1966.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.23%)</title><rect x="497.5" y="1939.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="500.5" y="1950.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="497.5" y="1923.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="500.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.47%)</title><rect x="500.3" y="2003.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.3" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.47%)</title><rect x="500.3" y="1987.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.47%)</title><rect x="500.3" y="1971.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.47%)</title><rect x="500.3" y="1955.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.23%)</title><rect x="500.3" y="1939.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.23%)</title><rect x="500.3" y="1923.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.23%)</title><rect x="500.3" y="1907.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.23%)</title><rect x="500.3" y="1891.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.3" y="1902.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.23%)</title><rect x="500.3" y="1875.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.3" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.23%)</title><rect x="500.3" y="1859.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.3" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.23%)</title><rect x="500.3" y="1843.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.3" y="1854.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.23%)</title><rect x="500.3" y="1827.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.23%)</title><rect x="503.1" y="1939.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="506.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.23%)</title><rect x="503.1" y="1923.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="506.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.23%)</title><rect x="503.1" y="1907.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="506.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.23%)</title><rect x="503.1" y="1891.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.23%)</title><rect x="503.1" y="1875.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="506.1" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.23%)</title><rect x="503.1" y="1859.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="506.1" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.23%)</title><rect x="503.1" y="1843.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.1" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.23%)</title><rect x="503.1" y="1827.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.1" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.23%)</title><rect x="503.1" y="1811.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.1" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.23%)</title><rect x="503.1" y="1795.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="506.1" y="1806.0"></text>
</g>
<g>
<title>read (1 samples, 0.23%)</title><rect x="503.1" y="1779.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="506.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.47%)</title><rect x="505.8" y="2003.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.8" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.47%)</title><rect x="505.8" y="1987.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.8" y="1998.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.23%)</title><rect x="505.8" y="1971.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.8" y="1982.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.23%)</title><rect x="505.8" y="1955.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="508.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.23%)</title><rect x="508.6" y="1971.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.6" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.23%)</title><rect x="508.6" y="1955.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="511.6" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.23%)</title><rect x="508.6" y="1939.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.run (98 samples, 23.00%)</title><rect x="511.4" y="2067.0" width="271.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="514.4" y="2078.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (98 samples, 23.00%)</title><rect x="511.4" y="2051.0" width="271.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.4" y="2062.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (98 samples, 23.00%)</title><rect x="511.4" y="2035.0" width="271.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="514.4" y="2046.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/622196319.run (16 samples, 3.76%)</title><rect x="514.1" y="2019.0" width="44.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.1" y="2030.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (16 samples, 3.76%)</title><rect x="514.1" y="2003.0" width="44.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="517.1" y="2014.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (16 samples, 3.76%)</title><rect x="514.1" y="1987.0" width="44.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.1" y="1998.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (16 samples, 3.76%)</title><rect x="514.1" y="1971.0" width="44.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="517.1" y="1982.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (7 samples, 1.64%)</title><rect x="514.1" y="1955.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (6 samples, 1.41%)</title><rect x="516.9" y="1939.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (6 samples, 1.41%)</title><rect x="516.9" y="1923.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 1.41%)</title><rect x="516.9" y="1907.0" width="16.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (6 samples, 1.41%)</title><rect x="516.9" y="1891.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.9" y="1902.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (6 samples, 1.41%)</title><rect x="516.9" y="1875.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.9" y="1886.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 1.41%)</title><rect x="516.9" y="1859.0" width="16.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.9" y="1870.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.23%)</title><rect x="516.9" y="1843.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.9" y="1854.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.23%)</title><rect x="516.9" y="1827.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.9" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.23%)</title><rect x="516.9" y="1811.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.23%)</title><rect x="516.9" y="1795.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.23%)</title><rect x="516.9" y="1779.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 1.17%)</title><rect x="519.7" y="1843.0" width="13.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.7" y="1854.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.47%)</title><rect x="519.7" y="1827.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.47%)</title><rect x="519.7" y="1811.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.23%)</title><rect x="519.7" y="1795.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="522.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.23%)</title><rect x="519.7" y="1779.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.23%)</title><rect x="522.4" y="1795.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.23%)</title><rect x="522.4" y="1779.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 0.70%)</title><rect x="525.2" y="1827.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="528.2" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 0.70%)</title><rect x="525.2" y="1811.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="528.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.70%)</title><rect x="525.2" y="1795.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.23%)</title><rect x="528.0" y="1779.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.23%)</title><rect x="528.0" y="1763.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.23%)</title><rect x="528.0" y="1747.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.23%)</title><rect x="528.0" y="1731.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="531.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.23%)</title><rect x="528.0" y="1715.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="531.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.23%)</title><rect x="530.8" y="1779.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="533.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.23%)</title><rect x="530.8" y="1763.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="533.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.23%)</title><rect x="530.8" y="1747.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.23%)</title><rect x="530.8" y="1731.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.8" y="1742.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.23%)</title><rect x="530.8" y="1715.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.23%)</title><rect x="530.8" y="1699.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.8" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (9 samples, 2.11%)</title><rect x="533.5" y="1955.0" width="25.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="536.5" y="1966.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (3 samples, 0.70%)</title><rect x="533.5" y="1939.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="536.5" y="1950.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 0.70%)</title><rect x="533.5" y="1923.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="536.5" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 0.70%)</title><rect x="533.5" y="1907.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="536.5" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 0.70%)</title><rect x="533.5" y="1891.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="536.5" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.47%)</title><rect x="536.3" y="1875.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.47%)</title><rect x="536.3" y="1859.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="539.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.23%)</title><rect x="539.1" y="1843.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (6 samples, 1.41%)</title><rect x="541.8" y="1939.0" width="16.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="544.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (6 samples, 1.41%)</title><rect x="541.8" y="1923.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="544.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.47%)</title><rect x="541.8" y="1907.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="544.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.23%)</title><rect x="541.8" y="1891.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.8" y="1902.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.23%)</title><rect x="541.8" y="1875.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="544.8" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.23%)</title><rect x="541.8" y="1859.0" width="2.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="544.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.23%)</title><rect x="544.6" y="1891.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.6" y="1902.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.23%)</title><rect x="544.6" y="1875.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="547.6" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 0.94%)</title><rect x="547.4" y="1907.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.4" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 0.47%)</title><rect x="552.9" y="1891.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="555.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 0.47%)</title><rect x="552.9" y="1875.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="555.9" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.47%)</title><rect x="552.9" y="1859.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.9" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.47%)</title><rect x="552.9" y="1843.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.23%)</title><rect x="555.7" y="1827.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.23%)</title><rect x="558.5" y="2019.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.5" y="2030.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.23%)</title><rect x="558.5" y="2003.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="561.5" y="2014.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.23%)</title><rect x="558.5" y="1987.0" width="2.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="561.5" y="1998.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.23%)</title><rect x="558.5" y="1971.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="561.5" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (80 samples, 18.78%)</title><rect x="561.2" y="2019.0" width="221.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="564.2" y="2030.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (80 samples, 18.78%)</title><rect x="561.2" y="2003.0" width="221.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="564.2" y="2014.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (79 samples, 18.54%)</title><rect x="561.2" y="1987.0" width="218.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="564.2" y="1998.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (79 samples, 18.54%)</title><rect x="561.2" y="1971.0" width="218.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="564.2" y="1982.0">java/util/concurrent/locks/Lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (79 samples, 18.54%)</title><rect x="561.2" y="1955.0" width="218.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="564.2" y="1966.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (77 samples, 18.08%)</title><rect x="566.8" y="1939.0" width="213.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="569.8" y="1950.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (75 samples, 17.61%)</title><rect x="566.8" y="1923.0" width="207.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="569.8" y="1934.0">Parker::park(bool, long)</text>
</g>
<g>
<title>__psynch_cvwait (60 samples, 14.08%)</title><rect x="566.8" y="1907.0" width="166.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="569.8" y="1918.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (14 samples, 3.29%)</title><rect x="733.0" y="1907.0" width="38.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="736.0" y="1918.0">_pt..</text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.23%)</title><rect x="733.0" y="1891.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="736.0" y="1902.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (13 samples, 3.05%)</title><rect x="735.7" y="1891.0" width="36.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="738.7" y="1902.0">_pt..</text>
</g>
<g>
<title>__psynch_mutexwait (13 samples, 3.05%)</title><rect x="735.7" y="1875.0" width="36.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="738.7" y="1886.0">__p..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.23%)</title><rect x="771.7" y="1907.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="774.7" y="1918.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.23%)</title><rect x="774.5" y="1923.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="777.5" y="1934.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.23%)</title><rect x="777.3" y="1923.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="780.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.23%)</title><rect x="780.0" y="1987.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.0" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.23%)</title><rect x="780.0" y="1971.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.0" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.23%)</title><rect x="780.0" y="1955.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.23%)</title><rect x="780.0" y="1939.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.23%)</title><rect x="780.0" y="1923.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="783.0" y="1934.0"></text>
</g>
<g>
<title>thread_start (147 samples, 34.51%)</title><rect x="782.8" y="2067.0" width="407.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="785.8" y="2078.0">thread_start</text>
</g>
<g>
<title>_pthread_start (147 samples, 34.51%)</title><rect x="782.8" y="2051.0" width="407.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="785.8" y="2062.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (147 samples, 34.51%)</title><rect x="782.8" y="2035.0" width="407.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="785.8" y="2046.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (147 samples, 34.51%)</title><rect x="782.8" y="2019.0" width="407.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="785.8" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 1.88%)</title><rect x="782.8" y="2003.0" width="22.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="785.8" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.47%)</title><rect x="782.8" y="1987.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="785.8" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.47%)</title><rect x="782.8" y="1971.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="785.8" y="1982.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.47%)</title><rect x="782.8" y="1955.0" width="5.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="785.8" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.94%)</title><rect x="788.4" y="1987.0" width="11.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.4" y="1998.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.23%)</title><rect x="788.4" y="1971.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.23%)</title><rect x="788.4" y="1955.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="791.4" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.23%)</title><rect x="788.4" y="1939.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="791.4" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.23%)</title><rect x="788.4" y="1923.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.4" y="1934.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.23%)</title><rect x="788.4" y="1907.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="791.4" y="1918.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.23%)</title><rect x="788.4" y="1891.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="791.4" y="1902.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.23%)</title><rect x="788.4" y="1875.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.4" y="1886.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.23%)</title><rect x="788.4" y="1859.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="791.4" y="1870.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.23%)</title><rect x="788.4" y="1843.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="791.4" y="1854.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.70%)</title><rect x="791.1" y="1971.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="794.1" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.70%)</title><rect x="791.1" y="1955.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="794.1" y="1966.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.70%)</title><rect x="791.1" y="1939.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.1" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (3 samples, 0.70%)</title><rect x="791.1" y="1923.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.1" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (3 samples, 0.70%)</title><rect x="791.1" y="1907.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="794.1" y="1918.0"></text>
</g>
<g>
<title>ScanRSClosure::scan_strong_code_roots(HeapRegion*) (3 samples, 0.70%)</title><rect x="791.1" y="1891.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.1" y="1902.0"></text>
</g>
<g>
<title>CodeRootSetTable::nmethods_do(CodeBlobClosure*) (3 samples, 0.70%)</title><rect x="791.1" y="1875.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="794.1" y="1886.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (3 samples, 0.70%)</title><rect x="791.1" y="1859.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.1" y="1870.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (3 samples, 0.70%)</title><rect x="791.1" y="1843.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.1" y="1854.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.23%)</title><rect x="796.7" y="1827.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="799.7" y="1838.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.23%)</title><rect x="796.7" y="1811.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="799.7" y="1822.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.47%)</title><rect x="799.4" y="1987.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="802.4" y="1998.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.47%)</title><rect x="799.4" y="1971.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.4" y="1982.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.47%)</title><rect x="799.4" y="1955.0" width="5.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="802.4" y="1966.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.47%)</title><rect x="799.4" y="1939.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.4" y="1950.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.47%)</title><rect x="799.4" y="1923.0" width="5.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="802.4" y="1934.0"></text>
</g>
<g>
<title>JavaThread::run() (136 samples, 31.92%)</title><rect x="805.0" y="2003.0" width="376.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="808.0" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (136 samples, 31.92%)</title><rect x="805.0" y="1987.0" width="376.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="808.0" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (132 samples, 30.99%)</title><rect x="805.0" y="1971.0" width="365.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="808.0" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (128 samples, 30.05%)</title><rect x="805.0" y="1955.0" width="354.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="808.0" y="1966.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (125 samples, 29.34%)</title><rect x="805.0" y="1939.0" width="346.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.0" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (125 samples, 29.34%)</title><rect x="805.0" y="1923.0" width="346.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="808.0" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.23%)</title><rect x="805.0" y="1907.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.0" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.23%)</title><rect x="805.0" y="1891.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="808.0" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.23%)</title><rect x="805.0" y="1875.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="808.0" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.23%)</title><rect x="805.0" y="1859.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="808.0" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.23%)</title><rect x="805.0" y="1843.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="808.0" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="805.0" y="1827.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="808.0" y="1838.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="805.0" y="1811.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="808.0" y="1822.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.23%)</title><rect x="805.0" y="1795.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.0" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.23%)</title><rect x="805.0" y="1779.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="808.0" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.23%)</title><rect x="805.0" y="1763.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="808.0" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="805.0" y="1747.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.0" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="805.0" y="1731.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="808.0" y="1742.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="805.0" y="1715.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="808.0" y="1726.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="805.0" y="1699.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="808.0" y="1710.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="805.0" y="1683.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="808.0" y="1694.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.23%)</title><rect x="805.0" y="1667.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="808.0" y="1678.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.23%)</title><rect x="805.0" y="1651.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="808.0" y="1662.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.23%)</title><rect x="805.0" y="1635.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="808.0" y="1646.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.23%)</title><rect x="805.0" y="1619.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.0" y="1630.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 14.08%)</title><rect x="807.7" y="1907.0" width="166.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="810.7" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.23%)</title><rect x="807.7" y="1891.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="810.7" y="1902.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.23%)</title><rect x="807.7" y="1875.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.7" y="1886.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.23%)</title><rect x="807.7" y="1859.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="810.7" y="1870.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.23%)</title><rect x="807.7" y="1843.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.7" y="1854.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.23%)</title><rect x="807.7" y="1827.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="810.7" y="1838.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.23%)</title><rect x="807.7" y="1811.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="810.7" y="1822.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.23%)</title><rect x="807.7" y="1795.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="810.7" y="1806.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.23%)</title><rect x="807.7" y="1779.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.7" y="1790.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.23%)</title><rect x="807.7" y="1763.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="810.7" y="1774.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.23%)</title><rect x="810.5" y="1891.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="813.5" y="1902.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.23%)</title><rect x="810.5" y="1875.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="813.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.41%)</title><rect x="813.3" y="1891.0" width="16.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="816.3" y="1902.0"></text>
</g>
<g>
<title>DecodeNKlassNode::Opcode() const (1 samples, 0.23%)</title><rect x="813.3" y="1875.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="816.3" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.47%)</title><rect x="816.1" y="1875.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="819.1" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.70%)</title><rect x="821.6" y="1875.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="824.6" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.23%)</title><rect x="824.4" y="1859.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.23%)</title><rect x="827.1" y="1859.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="830.1" y="1870.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.23%)</title><rect x="829.9" y="1891.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="832.9" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.23%)</title><rect x="829.9" y="1875.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.9" y="1886.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.23%)</title><rect x="829.9" y="1859.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="832.9" y="1870.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.23%)</title><rect x="829.9" y="1843.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="832.9" y="1854.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.23%)</title><rect x="829.9" y="1827.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="832.9" y="1838.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.23%)</title><rect x="829.9" y="1811.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="832.9" y="1822.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.23%)</title><rect x="829.9" y="1795.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="832.9" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.23%)</title><rect x="832.7" y="1891.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="835.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.23%)</title><rect x="832.7" y="1875.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="835.7" y="1886.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.23%)</title><rect x="832.7" y="1859.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="835.7" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.23%)</title><rect x="832.7" y="1843.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="835.7" y="1854.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="832.7" y="1827.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.7" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.17%)</title><rect x="835.4" y="1891.0" width="13.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="838.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.17%)</title><rect x="835.4" y="1875.0" width="13.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="838.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.23%)</title><rect x="835.4" y="1859.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="838.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.70%)</title><rect x="838.2" y="1859.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="841.2" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.23%)</title><rect x="838.2" y="1843.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.23%)</title><rect x="841.0" y="1843.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.0" y="1854.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (1 samples, 0.23%)</title><rect x="841.0" y="1827.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="844.0" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.23%)</title><rect x="843.8" y="1843.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="846.8" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.23%)</title><rect x="846.5" y="1859.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.5" y="1870.0"></text>
</g>
<g>
<title>checkCastPPNode::ideal_Opcode() const (1 samples, 0.23%)</title><rect x="846.5" y="1843.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (44 samples, 10.33%)</title><rect x="849.3" y="1891.0" width="121.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.3" y="1902.0">PhaseChaitin::R..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.23%)</title><rect x="849.3" y="1875.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="852.3" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.23%)</title><rect x="852.1" y="1875.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.1" y="1886.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.23%)</title><rect x="852.1" y="1859.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="855.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.23%)</title><rect x="854.8" y="1875.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="857.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="854.8" y="1859.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="857.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.47%)</title><rect x="857.6" y="1875.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="860.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.47%)</title><rect x="857.6" y="1859.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="860.6" y="1870.0"></text>
</g>
<g>
<title>IndexSet::remove(unsigned int) (1 samples, 0.23%)</title><rect x="857.6" y="1843.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="860.6" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.23%)</title><rect x="860.4" y="1843.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.94%)</title><rect x="863.1" y="1875.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="866.1" y="1886.0"></text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.23%)</title><rect x="865.9" y="1859.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="868.9" y="1870.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.47%)</title><rect x="868.7" y="1859.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="871.7" y="1870.0"></text>
</g>
<g>
<title>loadNNode::rule() const (2 samples, 0.47%)</title><rect x="868.7" y="1843.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 1.88%)</title><rect x="874.2" y="1875.0" width="22.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.2" y="1886.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.23%)</title><rect x="888.1" y="1859.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.23%)</title><rect x="890.8" y="1859.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.8" y="1870.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.23%)</title><rect x="890.8" y="1843.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.8" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.23%)</title><rect x="893.6" y="1859.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="896.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.47%)</title><rect x="896.4" y="1875.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.47%)</title><rect x="896.4" y="1859.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.4" y="1870.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.47%)</title><rect x="896.4" y="1843.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="899.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.23%)</title><rect x="901.9" y="1875.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 1.41%)</title><rect x="904.7" y="1875.0" width="16.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="907.7" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.23%)</title><rect x="918.5" y="1859.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="921.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 1.88%)</title><rect x="921.3" y="1875.0" width="22.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.3" y="1886.0">P..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.23%)</title><rect x="926.9" y="1859.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.9" y="1870.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.23%)</title><rect x="926.9" y="1843.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="929.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.94%)</title><rect x="929.6" y="1859.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.23%)</title><rect x="940.7" y="1859.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.23%)</title><rect x="943.5" y="1875.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.5" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.23%)</title><rect x="943.5" y="1859.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="946.5" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.23%)</title><rect x="943.5" y="1843.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.5" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.23%)</title><rect x="943.5" y="1827.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.5" y="1838.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.23%)</title><rect x="943.5" y="1811.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.47%)</title><rect x="946.2" y="1875.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.2" y="1886.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.23%)</title><rect x="946.2" y="1859.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.2" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.23%)</title><rect x="946.2" y="1843.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="949.2" y="1854.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.23%)</title><rect x="946.2" y="1827.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.2" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.23%)</title><rect x="949.0" y="1859.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.47%)</title><rect x="951.8" y="1875.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.47%)</title><rect x="951.8" y="1859.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.17%)</title><rect x="957.3" y="1875.0" width="13.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.23%)</title><rect x="962.9" y="1859.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.23%)</title><rect x="965.6" y="1859.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="968.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="965.6" y="1843.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="968.6" y="1854.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.23%)</title><rect x="968.4" y="1859.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.4" y="1870.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.23%)</title><rect x="968.4" y="1843.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.4" y="1854.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.23%)</title><rect x="968.4" y="1827.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.4" y="1838.0"></text>
</g>
<g>
<title>free (1 samples, 0.23%)</title><rect x="968.4" y="1811.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="971.4" y="1822.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.23%)</title><rect x="968.4" y="1795.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="971.4" y="1806.0"></text>
</g>
<g>
<title>compI_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.23%)</title><rect x="971.2" y="1891.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.2" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 11.27%)</title><rect x="973.9" y="1907.0" width="133.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.9" y="1918.0">Compile::Optimiz..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.94%)</title><rect x="973.9" y="1891.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="976.9" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.94%)</title><rect x="973.9" y="1875.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.9" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.47%)</title><rect x="976.7" y="1859.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.47%)</title><rect x="976.7" y="1843.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.47%)</title><rect x="976.7" y="1827.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.23%)</title><rect x="976.7" y="1811.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.7" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.23%)</title><rect x="976.7" y="1795.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="979.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1811.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1795.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="982.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1779.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1763.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1747.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="982.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1731.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1715.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="982.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1699.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1683.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1667.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1651.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1635.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1619.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1603.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="982.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1587.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1571.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1555.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1539.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1523.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1507.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1491.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1475.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1459.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1443.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="982.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1427.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1411.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="982.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.23%)</title><rect x="979.5" y="1395.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="982.5" y="1406.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.23%)</title><rect x="982.3" y="1859.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.23%)</title><rect x="985.0" y="1891.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.0" y="1902.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.23%)</title><rect x="985.0" y="1875.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.23%)</title><rect x="987.8" y="1891.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.8" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.23%)</title><rect x="987.8" y="1875.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.23%)</title><rect x="987.8" y="1859.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.8" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.23%)</title><rect x="987.8" y="1843.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.8" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.23%)</title><rect x="987.8" y="1827.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 6.81%)</title><rect x="990.6" y="1891.0" width="80.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.6" y="1902.0">PhaseIdea..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.23%)</title><rect x="990.6" y="1875.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.6" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.23%)</title><rect x="990.6" y="1859.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.6" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.23%)</title><rect x="990.6" y="1843.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.23%)</title><rect x="990.6" y="1827.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.23%)</title><rect x="990.6" y="1811.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.6" y="1822.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="990.6" y="1795.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.6" y="1806.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.23%)</title><rect x="990.6" y="1779.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="993.6" y="1790.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.23%)</title><rect x="993.3" y="1875.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.23%)</title><rect x="996.1" y="1875.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="999.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.70%)</title><rect x="998.9" y="1875.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.23%)</title><rect x="998.9" y="1859.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.23%)</title><rect x="998.9" y="1843.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.23%)</title><rect x="998.9" y="1827.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.9" y="1838.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.23%)</title><rect x="1001.6" y="1859.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1004.6" y="1870.0"></text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.23%)</title><rect x="1001.6" y="1843.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.6" y="1854.0"></text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 0.23%)</title><rect x="1004.4" y="1859.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1007.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 4.93%)</title><rect x="1007.2" y="1875.0" width="58.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1010.2" y="1886.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 3.99%)</title><rect x="1018.3" y="1859.0" width="47.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.3" y="1870.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.23%)</title><rect x="1021.0" y="1843.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.23%)</title><rect x="1021.0" y="1827.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 2.82%)</title><rect x="1023.8" y="1843.0" width="33.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.8" y="1854.0">Ph..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.23%)</title><rect x="1023.8" y="1827.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.8" y="1838.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.23%)</title><rect x="1023.8" y="1811.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1026.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.23%)</title><rect x="1026.6" y="1827.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.23%)</title><rect x="1026.6" y="1811.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.23%)</title><rect x="1026.6" y="1795.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.6" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.23%)</title><rect x="1029.3" y="1827.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (9 samples, 2.11%)</title><rect x="1032.1" y="1827.0" width="24.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.1" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.23%)</title><rect x="1034.9" y="1811.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1037.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (7 samples, 1.64%)</title><rect x="1037.7" y="1811.0" width="19.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (2 samples, 0.47%)</title><rect x="1057.0" y="1843.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_ctrl(Node*, Node*) (1 samples, 0.23%)</title><rect x="1062.6" y="1843.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.23%)</title><rect x="1065.4" y="1875.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.23%)</title><rect x="1068.1" y="1875.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 2.82%)</title><rect x="1070.9" y="1891.0" width="33.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.9" y="1902.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 2.82%)</title><rect x="1070.9" y="1875.0" width="33.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.9" y="1886.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1073.7" y="1859.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.7" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="1073.7" y="1843.0" width="2.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1076.7" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.47%)</title><rect x="1076.4" y="1859.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.4" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.23%)</title><rect x="1076.4" y="1843.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.4" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.23%)</title><rect x="1076.4" y="1827.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.4" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.23%)</title><rect x="1076.4" y="1811.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.4" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.23%)</title><rect x="1079.2" y="1843.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.23%)</title><rect x="1079.2" y="1827.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.2" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.23%)</title><rect x="1079.2" y="1811.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1082.2" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.23%)</title><rect x="1082.0" y="1859.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.23%)</title><rect x="1082.0" y="1843.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.0" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.23%)</title><rect x="1082.0" y="1827.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.0" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.23%)</title><rect x="1082.0" y="1811.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.0" y="1822.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.23%)</title><rect x="1082.0" y="1795.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.0" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.23%)</title><rect x="1082.0" y="1779.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.0" y="1790.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.47%)</title><rect x="1084.7" y="1859.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.7" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (2 samples, 0.47%)</title><rect x="1090.3" y="1859.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::is_IterGVN() (1 samples, 0.23%)</title><rect x="1095.8" y="1859.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.23%)</title><rect x="1098.6" y="1859.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.6" y="1870.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.23%)</title><rect x="1098.6" y="1843.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.6" y="1854.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.23%)</title><rect x="1098.6" y="1827.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.6" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1101.4" y="1859.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.4" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.23%)</title><rect x="1101.4" y="1843.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.4" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.23%)</title><rect x="1104.1" y="1891.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.1" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.23%)</title><rect x="1104.1" y="1875.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.1" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.23%)</title><rect x="1104.1" y="1859.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.1" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.23%)</title><rect x="1104.1" y="1843.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.1" y="1854.0"></text>
</g>
<g>
<title>ClearArrayNode::clear_memory(Node*, Node*, Node*, Node*, Node*, PhaseGVN*) (1 samples, 0.23%)</title><rect x="1104.1" y="1827.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.1" y="1838.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.23%)</title><rect x="1104.1" y="1811.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.1" y="1822.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.23%)</title><rect x="1104.1" y="1795.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.1" y="1806.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="1104.1" y="1779.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.1" y="1790.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 3.52%)</title><rect x="1106.9" y="1907.0" width="41.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.9" y="1918.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 3.52%)</title><rect x="1106.9" y="1891.0" width="41.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.9" y="1902.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 3.52%)</title><rect x="1106.9" y="1875.0" width="41.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.9" y="1886.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 3.52%)</title><rect x="1106.9" y="1859.0" width="41.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.9" y="1870.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 3.52%)</title><rect x="1106.9" y="1843.0" width="41.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.9" y="1854.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (15 samples, 3.52%)</title><rect x="1106.9" y="1827.0" width="41.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.9" y="1838.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 3.05%)</title><rect x="1106.9" y="1811.0" width="36.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.9" y="1822.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 2.82%)</title><rect x="1106.9" y="1795.0" width="33.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.9" y="1806.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 2.82%)</title><rect x="1106.9" y="1779.0" width="33.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.9" y="1790.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 2.82%)</title><rect x="1106.9" y="1763.0" width="33.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.9" y="1774.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 2.82%)</title><rect x="1106.9" y="1747.0" width="33.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.9" y="1758.0">Pa..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.23%)</title><rect x="1106.9" y="1731.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.9" y="1742.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.23%)</title><rect x="1106.9" y="1715.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.9" y="1726.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.23%)</title><rect x="1106.9" y="1699.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.9" y="1710.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1106.9" y="1683.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.9" y="1694.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1106.9" y="1667.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.9" y="1678.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.23%)</title><rect x="1106.9" y="1651.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.9" y="1662.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.23%)</title><rect x="1106.9" y="1635.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.9" y="1646.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.23%)</title><rect x="1106.9" y="1619.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.9" y="1630.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.23%)</title><rect x="1106.9" y="1603.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.9" y="1614.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypeOopPtr const*, int, bool) (1 samples, 0.23%)</title><rect x="1106.9" y="1587.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.9" y="1598.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.23%)</title><rect x="1106.9" y="1571.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 2.35%)</title><rect x="1109.7" y="1731.0" width="27.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.7" y="1742.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.23%)</title><rect x="1109.7" y="1715.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.7" y="1726.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.23%)</title><rect x="1109.7" y="1699.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.7" y="1710.0"></text>
</g>
<g>
<title>Compile::intrinsic_insertion_index(ciMethod*, bool) (1 samples, 0.23%)</title><rect x="1109.7" y="1683.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.7" y="1694.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 1.88%)</title><rect x="1112.4" y="1715.0" width="22.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.4" y="1726.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 1.88%)</title><rect x="1112.4" y="1699.0" width="22.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.4" y="1710.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 1.88%)</title><rect x="1112.4" y="1683.0" width="22.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.4" y="1694.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 1.88%)</title><rect x="1112.4" y="1667.0" width="22.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.4" y="1678.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 1.88%)</title><rect x="1112.4" y="1651.0" width="22.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.4" y="1662.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 1.88%)</title><rect x="1112.4" y="1635.0" width="22.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.4" y="1646.0">P..</text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::remove_at(int) (1 samples, 0.23%)</title><rect x="1112.4" y="1619.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.4" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.17%)</title><rect x="1115.2" y="1619.0" width="13.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.2" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.17%)</title><rect x="1115.2" y="1603.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.2" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.94%)</title><rect x="1115.2" y="1587.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.94%)</title><rect x="1115.2" y="1571.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.94%)</title><rect x="1115.2" y="1555.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.70%)</title><rect x="1115.2" y="1539.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.2" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.70%)</title><rect x="1115.2" y="1523.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.2" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.70%)</title><rect x="1115.2" y="1507.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.2" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.70%)</title><rect x="1115.2" y="1491.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.70%)</title><rect x="1115.2" y="1475.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.70%)</title><rect x="1115.2" y="1459.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.70%)</title><rect x="1115.2" y="1443.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.2" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.70%)</title><rect x="1115.2" y="1427.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.2" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.70%)</title><rect x="1115.2" y="1411.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.2" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.70%)</title><rect x="1115.2" y="1395.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.70%)</title><rect x="1115.2" y="1379.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.70%)</title><rect x="1115.2" y="1363.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.2" y="1374.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.23%)</title><rect x="1115.2" y="1347.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.2" y="1358.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.23%)</title><rect x="1115.2" y="1331.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.2" y="1342.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.23%)</title><rect x="1115.2" y="1315.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.2" y="1326.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.23%)</title><rect x="1115.2" y="1299.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1118.0" y="1347.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.0" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1118.0" y="1331.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.0" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1118.0" y="1315.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.0" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1118.0" y="1299.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1118.0" y="1283.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1118.0" y="1267.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1118.0" y="1251.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.0" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1118.0" y="1235.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.0" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1118.0" y="1219.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.0" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1118.0" y="1203.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1118.0" y="1187.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1118.0" y="1171.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1118.0" y="1155.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.0" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1118.0" y="1139.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.0" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1118.0" y="1123.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1118.0" y="1107.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.0" y="1118.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.23%)</title><rect x="1118.0" y="1091.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.0" y="1102.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.23%)</title><rect x="1118.0" y="1075.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.0" y="1086.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.23%)</title><rect x="1118.0" y="1059.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.0" y="1070.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.23%)</title><rect x="1118.0" y="1043.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.0" y="1054.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.23%)</title><rect x="1118.0" y="1027.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.0" y="1038.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.23%)</title><rect x="1118.0" y="1011.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.0" y="1022.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="1118.0" y="995.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.0" y="1006.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.23%)</title><rect x="1118.0" y="979.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1121.0" y="990.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.23%)</title><rect x="1120.8" y="1347.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.8" y="1358.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.23%)</title><rect x="1120.8" y="1331.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.8" y="1342.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.23%)</title><rect x="1120.8" y="1315.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.8" y="1326.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.23%)</title><rect x="1120.8" y="1299.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.8" y="1310.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.23%)</title><rect x="1120.8" y="1283.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.8" y="1294.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.23%)</title><rect x="1120.8" y="1267.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.23%)</title><rect x="1123.5" y="1539.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.5" y="1550.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.23%)</title><rect x="1126.3" y="1587.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.3" y="1598.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.23%)</title><rect x="1126.3" y="1571.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.3" y="1582.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.23%)</title><rect x="1126.3" y="1555.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.3" y="1566.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.23%)</title><rect x="1126.3" y="1539.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.3" y="1550.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.23%)</title><rect x="1126.3" y="1523.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.3" y="1534.0"></text>
</g>
<g>
<title>ProjNode::ProjNode(Node*, unsigned int, bool) (1 samples, 0.23%)</title><rect x="1126.3" y="1507.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.3" y="1518.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.23%)</title><rect x="1126.3" y="1491.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.3" y="1502.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1129.1" y="1619.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.1" y="1630.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (2 samples, 0.47%)</title><rect x="1129.1" y="1603.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.1" y="1614.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (2 samples, 0.47%)</title><rect x="1129.1" y="1587.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.1" y="1598.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.23%)</title><rect x="1129.1" y="1571.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="1582.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.23%)</title><rect x="1129.1" y="1555.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.1" y="1566.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.23%)</title><rect x="1129.1" y="1539.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.1" y="1550.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.23%)</title><rect x="1129.1" y="1523.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.1" y="1534.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.23%)</title><rect x="1129.1" y="1507.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.1" y="1518.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.23%)</title><rect x="1129.1" y="1491.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.1" y="1502.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.23%)</title><rect x="1131.8" y="1571.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.8" y="1582.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.23%)</title><rect x="1131.8" y="1555.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.8" y="1566.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.23%)</title><rect x="1131.8" y="1539.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.8" y="1550.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.23%)</title><rect x="1131.8" y="1523.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.8" y="1534.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1134.6" y="1715.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1134.6" y="1699.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1134.6" y="1683.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1134.6" y="1667.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1134.6" y="1651.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1134.6" y="1635.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1134.6" y="1619.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1134.6" y="1603.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1134.6" y="1587.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1134.6" y="1571.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1134.6" y="1555.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1134.6" y="1539.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1134.6" y="1523.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1134.6" y="1507.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1134.6" y="1491.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.23%)</title><rect x="1134.6" y="1475.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.6" y="1486.0"></text>
</g>
<g>
<title>ReplacedNodes::apply(Node*, unsigned int) (1 samples, 0.23%)</title><rect x="1134.6" y="1459.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="1470.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.23%)</title><rect x="1134.6" y="1443.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.23%)</title><rect x="1137.4" y="1731.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="1742.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.23%)</title><rect x="1137.4" y="1715.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.4" y="1726.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.23%)</title><rect x="1137.4" y="1699.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="1710.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.23%)</title><rect x="1137.4" y="1683.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.4" y="1694.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.23%)</title><rect x="1137.4" y="1667.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.4" y="1678.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1137.4" y="1651.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="1662.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.23%)</title><rect x="1137.4" y="1635.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.4" y="1646.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.23%)</title><rect x="1137.4" y="1619.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.4" y="1630.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.23%)</title><rect x="1140.1" y="1795.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.1" y="1806.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1142.9" y="1811.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.9" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1142.9" y="1795.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.9" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1142.9" y="1779.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.9" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1142.9" y="1763.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.9" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1142.9" y="1747.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.9" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1142.9" y="1731.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.9" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.47%)</title><rect x="1142.9" y="1715.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.47%)</title><rect x="1142.9" y="1699.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.47%)</title><rect x="1142.9" y="1683.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.47%)</title><rect x="1142.9" y="1667.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.47%)</title><rect x="1142.9" y="1651.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.47%)</title><rect x="1142.9" y="1635.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.47%)</title><rect x="1142.9" y="1619.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.9" y="1630.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.23%)</title><rect x="1142.9" y="1603.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.9" y="1614.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.23%)</title><rect x="1142.9" y="1587.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.9" y="1598.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.23%)</title><rect x="1142.9" y="1571.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.9" y="1582.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.23%)</title><rect x="1142.9" y="1555.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.9" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.23%)</title><rect x="1142.9" y="1539.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.9" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.23%)</title><rect x="1142.9" y="1523.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.9" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="1142.9" y="1507.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.9" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="1142.9" y="1491.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.9" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::StateVector(ciTypeFlow*) (1 samples, 0.23%)</title><rect x="1142.9" y="1475.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.9" y="1486.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.23%)</title><rect x="1142.9" y="1459.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.9" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1145.7" y="1603.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.7" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1145.7" y="1587.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.7" y="1598.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.23%)</title><rect x="1145.7" y="1571.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.7" y="1582.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.23%)</title><rect x="1145.7" y="1555.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.7" y="1566.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.23%)</title><rect x="1145.7" y="1539.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.7" y="1550.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.23%)</title><rect x="1148.5" y="1907.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.5" y="1918.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.23%)</title><rect x="1148.5" y="1891.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.5" y="1902.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.23%)</title><rect x="1148.5" y="1875.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.5" y="1886.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.23%)</title><rect x="1148.5" y="1859.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.5" y="1870.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.23%)</title><rect x="1148.5" y="1843.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.5" y="1854.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.47%)</title><rect x="1151.2" y="1939.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.2" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.47%)</title><rect x="1151.2" y="1923.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.2" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.47%)</title><rect x="1151.2" y="1907.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.23%)</title><rect x="1151.2" y="1891.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.2" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.23%)</title><rect x="1151.2" y="1875.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.23%)</title><rect x="1151.2" y="1859.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.2" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.23%)</title><rect x="1151.2" y="1843.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.2" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.23%)</title><rect x="1151.2" y="1827.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.2" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.23%)</title><rect x="1151.2" y="1811.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.2" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.23%)</title><rect x="1151.2" y="1795.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.2" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.23%)</title><rect x="1151.2" y="1779.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.2" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.23%)</title><rect x="1151.2" y="1763.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.2" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.23%)</title><rect x="1151.2" y="1747.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.23%)</title><rect x="1151.2" y="1731.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.2" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.23%)</title><rect x="1151.2" y="1715.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.2" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*) (1 samples, 0.23%)</title><rect x="1151.2" y="1699.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="1710.0"></text>
</g>
<g>
<title>ValueStack::copy_for_parsing() (1 samples, 0.23%)</title><rect x="1151.2" y="1683.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.2" y="1694.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.23%)</title><rect x="1151.2" y="1667.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="1678.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="1151.2" y="1651.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="1662.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.23%)</title><rect x="1154.0" y="1891.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.0" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.23%)</title><rect x="1154.0" y="1875.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.0" y="1886.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.23%)</title><rect x="1154.0" y="1859.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.0" y="1870.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.23%)</title><rect x="1154.0" y="1843.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.0" y="1854.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.23%)</title><rect x="1154.0" y="1827.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.0" y="1838.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long, bool) (1 samples, 0.23%)</title><rect x="1154.0" y="1811.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.0" y="1822.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.23%)</title><rect x="1156.8" y="1939.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.8" y="1950.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.23%)</title><rect x="1156.8" y="1923.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.8" y="1934.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.23%)</title><rect x="1156.8" y="1907.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.8" y="1918.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.23%)</title><rect x="1156.8" y="1891.0" width="2.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1159.8" y="1902.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.23%)</title><rect x="1156.8" y="1875.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1159.8" y="1886.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.23%)</title><rect x="1156.8" y="1859.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1159.8" y="1870.0"></text>
</g>
<g>
<title>CompileQueue::get() (4 samples, 0.94%)</title><rect x="1159.5" y="1955.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="1966.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.70%)</title><rect x="1159.5" y="1939.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.5" y="1950.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.70%)</title><rect x="1159.5" y="1923.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="1934.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.70%)</title><rect x="1159.5" y="1907.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="1918.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.70%)</title><rect x="1159.5" y="1891.0" width="8.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1162.5" y="1902.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.23%)</title><rect x="1167.8" y="1939.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.8" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.23%)</title><rect x="1167.8" y="1923.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.23%)</title><rect x="1167.8" y="1907.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.23%)</title><rect x="1167.8" y="1891.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1902.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.70%)</title><rect x="1170.6" y="1971.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.6" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.23%)</title><rect x="1170.6" y="1955.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.23%)</title><rect x="1170.6" y="1939.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="1950.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.23%)</title><rect x="1170.6" y="1923.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.6" y="1934.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.23%)</title><rect x="1170.6" y="1907.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.23%)</title><rect x="1170.6" y="1891.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="1902.0"></text>
</g>
<g>
<title>ScopeDesc::stream_at(int) const (1 samples, 0.23%)</title><rect x="1170.6" y="1875.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="1886.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.47%)</title><rect x="1173.4" y="1955.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1966.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.47%)</title><rect x="1173.4" y="1939.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="1950.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.47%)</title><rect x="1173.4" y="1923.0" width="5.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1176.4" y="1934.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.47%)</title><rect x="1173.4" y="1907.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="1918.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.47%)</title><rect x="1173.4" y="1891.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1176.4" y="1902.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.23%)</title><rect x="1178.9" y="1971.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1181.9" y="1982.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.23%)</title><rect x="1178.9" y="1955.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="1966.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.23%)</title><rect x="1178.9" y="1939.0" width="2.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1181.9" y="1950.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.23%)</title><rect x="1178.9" y="1923.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="1934.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.23%)</title><rect x="1178.9" y="1907.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1181.9" y="1918.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.47%)</title><rect x="1181.7" y="2003.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.47%)</title><rect x="1181.7" y="1987.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.47%)</title><rect x="1181.7" y="1971.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.47%)</title><rect x="1181.7" y="1955.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.47%)</title><rect x="1181.7" y="1939.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.47%)</title><rect x="1181.7" y="1923.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.23%)</title><rect x="1181.7" y="1907.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.23%)</title><rect x="1181.7" y="1891.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="1902.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.23%)</title><rect x="1181.7" y="1875.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.23%)</title><rect x="1181.7" y="1859.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.23%)</title><rect x="1181.7" y="1843.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="1854.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.23%)</title><rect x="1181.7" y="1827.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1184.7" y="1838.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.23%)</title><rect x="1181.7" y="1811.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="1822.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.23%)</title><rect x="1181.7" y="1795.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1184.7" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.23%)</title><rect x="1184.5" y="1907.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool) (1 samples, 0.23%)</title><rect x="1184.5" y="1891.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.23%)</title><rect x="1184.5" y="1875.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="1886.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.23%)</title><rect x="1184.5" y="1859.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="1870.0"></text>
</g>
<g>
<title>G1CodeRootSet::clear() (1 samples, 0.23%)</title><rect x="1184.5" y="1843.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="1854.0"></text>
</g>
<g>
<title>CodeRootSetTable::~CodeRootSetTable() (1 samples, 0.23%)</title><rect x="1184.5" y="1827.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="1838.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.23%)</title><rect x="1184.5" y="1811.0" width="2.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1187.5" y="1822.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.23%)</title><rect x="1184.5" y="1795.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1187.5" y="1806.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.23%)</title><rect x="1184.5" y="1779.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1187.5" y="1790.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.23%)</title><rect x="1187.2" y="2003.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="2014.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.23%)</title><rect x="1187.2" y="1987.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.2" y="1998.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.23%)</title><rect x="1187.2" y="1971.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="1982.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.23%)</title><rect x="1187.2" y="1955.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="1966.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.23%)</title><rect x="1187.2" y="1939.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="1950.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.23%)</title><rect x="1187.2" y="1923.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.2" y="1934.0"></text>
</g>
</g>
</svg>
