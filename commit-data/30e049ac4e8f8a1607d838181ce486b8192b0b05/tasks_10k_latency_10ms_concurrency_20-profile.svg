<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="645"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="645"> </text>
<g id="frames">
<g>
<title>all (100 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="622.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 14.00%)</title><rect x="10.0" y="595.0" width="165.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="606.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 1.00%)</title><rect x="21.8" y="579.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 1.00%)</title><rect x="21.8" y="563.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.00%)</title><rect x="21.8" y="547.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 1.00%)</title><rect x="21.8" y="531.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 1.00%)</title><rect x="21.8" y="515.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.00%)</title><rect x="21.8" y="499.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.00%)</title><rect x="21.8" y="483.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 1.00%)</title><rect x="21.8" y="467.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 1.00%)</title><rect x="21.8" y="451.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 1.00%)</title><rect x="21.8" y="435.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 1.00%)</title><rect x="21.8" y="419.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 1.00%)</title><rect x="21.8" y="403.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 1.00%)</title><rect x="21.8" y="387.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 1.00%)</title><rect x="21.8" y="371.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 1.00%)</title><rect x="21.8" y="355.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.8" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 1.00%)</title><rect x="21.8" y="339.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 1.00%)</title><rect x="21.8" y="323.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 1.00%)</title><rect x="21.8" y="307.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.8" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 1.00%)</title><rect x="21.8" y="291.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 1.00%)</title><rect x="21.8" y="275.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 1.00%)</title><rect x="21.8" y="259.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 1.00%)</title><rect x="21.8" y="243.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 1.00%)</title><rect x="21.8" y="227.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 1.00%)</title><rect x="21.8" y="211.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 1.00%)</title><rect x="21.8" y="195.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.8" y="206.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 1.00%)</title><rect x="21.8" y="179.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.8" y="190.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 1.00%)</title><rect x="21.8" y="163.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="174.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (1 samples, 1.00%)</title><rect x="21.8" y="147.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.8" y="158.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (12 samples, 12.00%)</title><rect x="33.6" y="579.0" width="141.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.6" y="590.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 1.00%)</title><rect x="33.6" y="563.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.6" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/464908022.accept (1 samples, 1.00%)</title><rect x="33.6" y="547.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (1 samples, 1.00%)</title><rect x="33.6" y="531.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="36.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 1.00%)</title><rect x="33.6" y="515.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.6" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 1.00%)</title><rect x="33.6" y="499.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="36.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 11.00%)</title><rect x="45.4" y="563.0" width="129.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.4" y="574.0">org/apache/kafka..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 11.00%)</title><rect x="45.4" y="547.0" width="129.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.4" y="558.0">org/apache/kafka..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 7.00%)</title><rect x="45.4" y="531.0" width="82.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.4" y="542.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 1.00%)</title><rect x="45.4" y="515.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 1.00%)</title><rect x="45.4" y="499.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.4" y="510.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 1.00%)</title><rect x="45.4" y="483.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="48.4" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 1.00%)</title><rect x="45.4" y="467.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="48.4" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 1.00%)</title><rect x="45.4" y="451.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="48.4" y="462.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 1.00%)</title><rect x="45.4" y="435.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="48.4" y="446.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 1.00%)</title><rect x="45.4" y="419.0" width="11.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="48.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 4.00%)</title><rect x="57.2" y="515.0" width="47.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="60.2" y="526.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 4.00%)</title><rect x="57.2" y="499.0" width="47.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.2" y="510.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 4.00%)</title><rect x="57.2" y="483.0" width="47.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.2" y="494.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 4.00%)</title><rect x="57.2" y="467.0" width="47.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.2" y="478.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (4 samples, 4.00%)</title><rect x="57.2" y="451.0" width="47.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.2" y="462.0">org/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 3.00%)</title><rect x="57.2" y="435.0" width="35.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="60.2" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 3.00%)</title><rect x="57.2" y="419.0" width="35.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.2" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (3 samples, 3.00%)</title><rect x="57.2" y="403.0" width="35.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.2" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (3 samples, 3.00%)</title><rect x="57.2" y="387.0" width="35.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.2" y="398.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (3 samples, 3.00%)</title><rect x="57.2" y="371.0" width="35.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.2" y="382.0">sun..</text>
</g>
<g>
<title>kevent (3 samples, 3.00%)</title><rect x="57.2" y="355.0" width="35.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="60.2" y="366.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 1.00%)</title><rect x="92.6" y="435.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 1.00%)</title><rect x="92.6" y="419.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 1.00%)</title><rect x="92.6" y="403.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 1.00%)</title><rect x="92.6" y="387.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 1.00%)</title><rect x="92.6" y="371.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.6" y="382.0"></text>
</g>
<g>
<title>kevent (1 samples, 1.00%)</title><rect x="92.6" y="355.0" width="11.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="95.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 2.00%)</title><rect x="104.4" y="515.0" width="23.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.4" y="526.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 2.00%)</title><rect x="104.4" y="499.0" width="23.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.4" y="510.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 2.00%)</title><rect x="104.4" y="483.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.4" y="494.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 1.00%)</title><rect x="104.4" y="467.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 1.00%)</title><rect x="116.2" y="467.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.2" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 1.00%)</title><rect x="116.2" y="451.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.2" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 1.00%)</title><rect x="116.2" y="435.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.2" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 1.00%)</title><rect x="116.2" y="419.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.2" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 1.00%)</title><rect x="116.2" y="403.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 1.00%)</title><rect x="116.2" y="387.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.2" y="398.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 1.00%)</title><rect x="116.2" y="371.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.2" y="382.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 1.00%)</title><rect x="116.2" y="355.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.2" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 1.00%)</title><rect x="116.2" y="339.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.2" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 1.00%)</title><rect x="116.2" y="323.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.2" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 1.00%)</title><rect x="116.2" y="307.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.2" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 1.00%)</title><rect x="116.2" y="291.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.2" y="302.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$182/390917555.accept (1 samples, 1.00%)</title><rect x="116.2" y="275.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.2" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 1.00%)</title><rect x="116.2" y="259.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.2" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 1.00%)</title><rect x="116.2" y="243.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="119.2" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 1.00%)</title><rect x="116.2" y="227.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.2" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 1.00%)</title><rect x="116.2" y="211.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.2" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 1.00%)</title><rect x="116.2" y="195.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.2" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 2.00%)</title><rect x="128.0" y="531.0" width="23.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="131.0" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 1.00%)</title><rect x="128.0" y="515.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 1.00%)</title><rect x="128.0" y="499.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 1.00%)</title><rect x="128.0" y="483.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 1.00%)</title><rect x="128.0" y="467.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 1.00%)</title><rect x="128.0" y="451.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 1.00%)</title><rect x="128.0" y="435.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 1.00%)</title><rect x="128.0" y="419.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="131.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 1.00%)</title><rect x="128.0" y="403.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 1.00%)</title><rect x="139.8" y="515.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeAutoCommitOffsetsAsync (1 samples, 1.00%)</title><rect x="139.8" y="499.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="142.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 2.00%)</title><rect x="151.6" y="531.0" width="23.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.6" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 2.00%)</title><rect x="151.6" y="515.0" width="23.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="154.6" y="526.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 2.00%)</title><rect x="151.6" y="499.0" width="23.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.6" y="510.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 1.00%)</title><rect x="151.6" y="483.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 1.00%)</title><rect x="151.6" y="467.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 1.00%)</title><rect x="151.6" y="451.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 1.00%)</title><rect x="151.6" y="435.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (1 samples, 1.00%)</title><rect x="151.6" y="419.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="154.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (1 samples, 1.00%)</title><rect x="151.6" y="403.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.6" y="414.0"></text>
</g>
<g>
<title>kevent (1 samples, 1.00%)</title><rect x="151.6" y="387.0" width="11.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="154.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 1.00%)</title><rect x="163.4" y="483.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.4" y="494.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 1.00%)</title><rect x="163.4" y="467.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="166.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (63 samples, 63.00%)</title><rect x="175.2" y="595.0" width="743.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="178.2" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (63 samples, 63.00%)</title><rect x="175.2" y="579.0" width="743.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="178.2" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (63 samples, 63.00%)</title><rect x="175.2" y="563.0" width="743.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.2" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1471697728.run (63 samples, 63.00%)</title><rect x="175.2" y="547.0" width="743.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.2" y="558.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1471697728.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (63 samples, 63.00%)</title><rect x="175.2" y="531.0" width="743.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="178.2" y="542.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (63 samples, 63.00%)</title><rect x="175.2" y="515.0" width="743.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.2" y="526.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (63 samples, 63.00%)</title><rect x="175.2" y="499.0" width="743.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.2" y="510.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (1 samples, 1.00%)</title><rect x="175.2" y="483.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="178.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (1 samples, 1.00%)</title><rect x="175.2" y="467.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (1 samples, 1.00%)</title><rect x="175.2" y="451.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 1.00%)</title><rect x="175.2" y="435.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.2" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (1 samples, 1.00%)</title><rect x="175.2" y="419.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 1.00%)</title><rect x="175.2" y="403.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 1.00%)</title><rect x="175.2" y="387.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 1.00%)</title><rect x="175.2" y="371.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 1.00%)</title><rect x="175.2" y="355.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="178.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 1.00%)</title><rect x="175.2" y="339.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 1.00%)</title><rect x="175.2" y="323.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.2" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (62 samples, 62.00%)</title><rect x="187.0" y="483.0" width="731.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.0" y="494.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 1.00%)</title><rect x="187.0" y="467.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.0" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 1.00%)</title><rect x="187.0" y="451.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.0" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 1.00%)</title><rect x="187.0" y="435.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.0" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 1.00%)</title><rect x="187.0" y="419.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 1.00%)</title><rect x="187.0" y="403.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 1.00%)</title><rect x="187.0" y="387.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.0" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 1.00%)</title><rect x="198.8" y="467.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 1.00%)</title><rect x="198.8" y="451.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.8" y="462.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 1.00%)</title><rect x="198.8" y="435.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.8" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 1.00%)</title><rect x="198.8" y="419.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="201.8" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 1.00%)</title><rect x="198.8" y="403.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 1.00%)</title><rect x="198.8" y="387.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 1.00%)</title><rect x="198.8" y="371.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.8" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (60 samples, 60.00%)</title><rect x="210.6" y="467.0" width="708.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.6" y="478.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (60 samples, 60.00%)</title><rect x="210.6" y="451.0" width="708.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.6" y="462.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/191282897.process (60 samples, 60.00%)</title><rect x="210.6" y="435.0" width="708.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.6" y="446.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/191282897.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (60 samples, 60.00%)</title><rect x="210.6" y="419.0" width="708.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.6" y="430.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 60.00%)</title><rect x="210.6" y="403.0" width="708.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.6" y="414.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 1.00%)</title><rect x="210.6" y="387.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 1.00%)</title><rect x="210.6" y="371.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.6" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (59 samples, 59.00%)</title><rect x="222.4" y="387.0" width="696.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.4" y="398.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (59 samples, 59.00%)</title><rect x="222.4" y="371.0" width="696.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.4" y="382.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 1.00%)</title><rect x="222.4" y="355.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="225.4" y="366.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 1.00%)</title><rect x="222.4" y="339.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="225.4" y="350.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 1.00%)</title><rect x="222.4" y="323.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="225.4" y="334.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 1.00%)</title><rect x="222.4" y="307.0" width="11.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="225.4" y="318.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 1.00%)</title><rect x="222.4" y="291.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="225.4" y="302.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 1.00%)</title><rect x="222.4" y="275.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="225.4" y="286.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 1.00%)</title><rect x="222.4" y="259.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="225.4" y="270.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle) (1 samples, 1.00%)</title><rect x="222.4" y="243.0" width="11.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="225.4" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle, int, BasicType*, VMRegPair*, BasicType) (1 samples, 1.00%)</title><rect x="222.4" y="227.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="225.4" y="238.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 1.00%)</title><rect x="222.4" y="211.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="225.4" y="222.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle) (1 samples, 1.00%)</title><rect x="222.4" y="195.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="225.4" y="206.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle, char*, char const*, int, bool) (1 samples, 1.00%)</title><rect x="222.4" y="179.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="225.4" y="190.0"></text>
</g>
<g>
<title>os::dll_address_to_library_name(unsigned char*, char*, int, int*) (1 samples, 1.00%)</title><rect x="222.4" y="163.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="225.4" y="174.0"></text>
</g>
<g>
<title>OBJC_CLASS_$_OS_dispatch_object (1 samples, 1.00%)</title><rect x="222.4" y="147.0" width="11.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="225.4" y="158.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 1.00%)</title><rect x="222.4" y="131.0" width="11.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="225.4" y="142.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 1.00%)</title><rect x="222.4" y="115.0" width="11.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="225.4" y="126.0"></text>
</g>
<g>
<title>JVM_Sleep (58 samples, 58.00%)</title><rect x="234.2" y="355.0" width="684.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="237.2" y="366.0">JVM_Sleep</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (58 samples, 58.00%)</title><rect x="234.2" y="339.0" width="684.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="237.2" y="350.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (58 samples, 58.00%)</title><rect x="234.2" y="323.0" width="684.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="237.2" y="334.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (1 samples, 1.00%)</title><rect x="234.2" y="307.0" width="11.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="237.2" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (57 samples, 57.00%)</title><rect x="246.0" y="307.0" width="672.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="249.0" y="318.0">__psynch_cvwait</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 1.00%)</title><rect x="918.6" y="595.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 1.00%)</title><rect x="918.6" y="579.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="921.6" y="590.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 1.00%)</title><rect x="918.6" y="563.0" width="11.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="921.6" y="574.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 1.00%)</title><rect x="918.6" y="547.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="921.6" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 1.00%)</title><rect x="918.6" y="531.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.6" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 1.00%)</title><rect x="918.6" y="515.0" width="11.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.6" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 1.00%)</title><rect x="918.6" y="499.0" width="11.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="921.6" y="510.0"></text>
</g>
<g>
<title>thread_start (22 samples, 22.00%)</title><rect x="930.4" y="595.0" width="259.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="933.4" y="606.0">thread_start</text>
</g>
<g>
<title>_pthread_start (22 samples, 22.00%)</title><rect x="930.4" y="579.0" width="259.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="933.4" y="590.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (22 samples, 22.00%)</title><rect x="930.4" y="563.0" width="259.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="933.4" y="574.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (22 samples, 22.00%)</title><rect x="930.4" y="547.0" width="259.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="933.4" y="558.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (21 samples, 21.00%)</title><rect x="930.4" y="531.0" width="247.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.4" y="542.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (21 samples, 21.00%)</title><rect x="930.4" y="515.0" width="247.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.4" y="526.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (17 samples, 17.00%)</title><rect x="930.4" y="499.0" width="200.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.4" y="510.0">CompileBroker::compiler_th..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (16 samples, 16.00%)</title><rect x="930.4" y="483.0" width="188.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.4" y="494.0">CompileBroker::invoke_co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (13 samples, 13.00%)</title><rect x="930.4" y="467.0" width="153.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.4" y="478.0">C2Compiler::compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (12 samples, 12.00%)</title><rect x="930.4" y="451.0" width="141.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.4" y="462.0">Compile::Compile(c..</text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 3.00%)</title><rect x="930.4" y="435.0" width="35.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.4" y="446.0">Com..</text>
</g>
<g>
<title>Matcher::match() (1 samples, 1.00%)</title><rect x="930.4" y="419.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.4" y="430.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 1.00%)</title><rect x="930.4" y="403.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.4" y="414.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 1.00%)</title><rect x="930.4" y="387.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="933.4" y="398.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.00%)</title><rect x="930.4" y="371.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="933.4" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 2.00%)</title><rect x="942.2" y="419.0" width="23.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="945.2" y="430.0">P..</text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 1.00%)</title><rect x="942.2" y="403.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.2" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 1.00%)</title><rect x="942.2" y="387.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.2" y="398.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 1.00%)</title><rect x="954.0" y="403.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.0" y="414.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 1.00%)</title><rect x="954.0" y="387.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.0" y="398.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 1.00%)</title><rect x="954.0" y="371.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.0" y="382.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 5.00%)</title><rect x="965.8" y="435.0" width="59.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.8" y="446.0">Compil..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 1.00%)</title><rect x="965.8" y="419.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="968.8" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 1.00%)</title><rect x="965.8" y="403.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.8" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 4.00%)</title><rect x="977.6" y="419.0" width="47.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.6" y="430.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 2.00%)</title><rect x="977.6" y="403.0" width="23.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.6" y="414.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 1.00%)</title><rect x="1001.2" y="403.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.2" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 1.00%)</title><rect x="1001.2" y="387.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.2" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 1.00%)</title><rect x="1001.2" y="371.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1004.2" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 1.00%)</title><rect x="1013.0" y="403.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.0" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 1.00%)</title><rect x="1013.0" y="387.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.0" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 1.00%)</title><rect x="1013.0" y="371.0" width="11.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 3.00%)</title><rect x="1024.8" y="435.0" width="35.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1027.8" y="446.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 3.00%)</title><rect x="1024.8" y="419.0" width="35.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1027.8" y="430.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 3.00%)</title><rect x="1024.8" y="403.0" width="35.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.8" y="414.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 3.00%)</title><rect x="1024.8" y="387.0" width="35.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.8" y="398.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 3.00%)</title><rect x="1024.8" y="371.0" width="35.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.8" y="382.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 2.00%)</title><rect x="1024.8" y="355.0" width="23.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.8" y="366.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 1.00%)</title><rect x="1024.8" y="339.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.8" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 1.00%)</title><rect x="1024.8" y="323.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.8" y="334.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 1.00%)</title><rect x="1024.8" y="307.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.8" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 1.00%)</title><rect x="1024.8" y="291.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1027.8" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 1.00%)</title><rect x="1024.8" y="275.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1027.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 1.00%)</title><rect x="1024.8" y="259.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.00%)</title><rect x="1024.8" y="243.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 1.00%)</title><rect x="1024.8" y="227.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 1.00%)</title><rect x="1024.8" y="211.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 1.00%)</title><rect x="1024.8" y="195.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 1.00%)</title><rect x="1024.8" y="179.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.00%)</title><rect x="1024.8" y="163.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.8" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 1.00%)</title><rect x="1024.8" y="147.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.8" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.00%)</title><rect x="1036.6" y="339.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.00%)</title><rect x="1036.6" y="323.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.00%)</title><rect x="1036.6" y="307.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.00%)</title><rect x="1036.6" y="291.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.00%)</title><rect x="1036.6" y="275.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.00%)</title><rect x="1036.6" y="259.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.00%)</title><rect x="1036.6" y="243.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.00%)</title><rect x="1036.6" y="227.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1039.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.00%)</title><rect x="1036.6" y="211.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.00%)</title><rect x="1036.6" y="195.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.00%)</title><rect x="1036.6" y="179.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.00%)</title><rect x="1036.6" y="163.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.6" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.00%)</title><rect x="1036.6" y="147.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.6" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.00%)</title><rect x="1036.6" y="131.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 1.00%)</title><rect x="1036.6" y="115.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 1.00%)</title><rect x="1036.6" y="99.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 1.00%)</title><rect x="1036.6" y="83.0" width="11.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 1.00%)</title><rect x="1036.6" y="67.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.6" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 1.00%)</title><rect x="1036.6" y="51.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1039.6" y="62.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 1.00%)</title><rect x="1036.6" y="35.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 1.00%)</title><rect x="1048.4" y="355.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.4" y="366.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 1.00%)</title><rect x="1048.4" y="339.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.4" y="350.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 1.00%)</title><rect x="1048.4" y="323.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.4" y="334.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 1.00%)</title><rect x="1048.4" y="307.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.4" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 1.00%)</title><rect x="1048.4" y="291.0" width="11.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.4" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 1.00%)</title><rect x="1048.4" y="275.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.4" y="286.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 1.00%)</title><rect x="1048.4" y="259.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.4" y="270.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 1.00%)</title><rect x="1048.4" y="243.0" width="11.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.4" y="254.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 1.00%)</title><rect x="1060.2" y="435.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.2" y="446.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 1.00%)</title><rect x="1060.2" y="419.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.2" y="430.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 1.00%)</title><rect x="1060.2" y="403.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.2" y="414.0"></text>
</g>
<g>
<title>DataLayout::data_in() (1 samples, 1.00%)</title><rect x="1060.2" y="387.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1063.2" y="398.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.00%)</title><rect x="1060.2" y="371.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.2" y="382.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 1.00%)</title><rect x="1060.2" y="355.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1063.2" y="366.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 1.00%)</title><rect x="1060.2" y="339.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1063.2" y="350.0"></text>
</g>
<g>
<title>Compile::~Compile() (1 samples, 1.00%)</title><rect x="1072.0" y="451.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.0" y="462.0"></text>
</g>
<g>
<title>__ulock_wake (1 samples, 1.00%)</title><rect x="1072.0" y="435.0" width="11.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1075.0" y="446.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 1.00%)</title><rect x="1083.8" y="467.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.8" y="478.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 1.00%)</title><rect x="1083.8" y="451.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.8" y="462.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 1.00%)</title><rect x="1083.8" y="435.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.8" y="446.0"></text>
</g>
<g>
<title>Klass::external_name() const (1 samples, 1.00%)</title><rect x="1083.8" y="419.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.8" y="430.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 1.00%)</title><rect x="1095.6" y="467.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.6" y="478.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 1.00%)</title><rect x="1095.6" y="451.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.6" y="462.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 1.00%)</title><rect x="1095.6" y="435.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.6" y="446.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 1.00%)</title><rect x="1095.6" y="419.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.6" y="430.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 1.00%)</title><rect x="1095.6" y="403.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.6" y="414.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 1.00%)</title><rect x="1095.6" y="387.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.6" y="398.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 1.00%)</title><rect x="1095.6" y="371.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.6" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 1.00%)</title><rect x="1095.6" y="355.0" width="11.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.6" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 1.00%)</title><rect x="1095.6" y="339.0" width="11.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.6" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 1.00%)</title><rect x="1095.6" y="323.0" width="11.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.6" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 1.00%)</title><rect x="1095.6" y="307.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.6" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 1.00%)</title><rect x="1095.6" y="291.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.6" y="302.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 1.00%)</title><rect x="1095.6" y="275.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.6" y="286.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 1.00%)</title><rect x="1095.6" y="259.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.6" y="270.0"></text>
</g>
<g>
<title>LinkResolver::check_field_accessability(KlassHandle, KlassHandle, KlassHandle, fieldDescriptor&amp;, Thread*) (1 samples, 1.00%)</title><rect x="1095.6" y="243.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.6" y="254.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 1.00%)</title><rect x="1095.6" y="227.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.6" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 1.00%)</title><rect x="1107.4" y="467.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.4" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 1.00%)</title><rect x="1107.4" y="451.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.4" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 1.00%)</title><rect x="1107.4" y="435.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.4" y="446.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 1.00%)</title><rect x="1107.4" y="419.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.4" y="430.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 1.00%)</title><rect x="1107.4" y="403.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.4" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 1.00%)</title><rect x="1107.4" y="387.0" width="11.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.4" y="398.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 1.00%)</title><rect x="1119.2" y="483.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.2" y="494.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 1.00%)</title><rect x="1119.2" y="467.0" width="11.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.2" y="478.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 1.00%)</title><rect x="1119.2" y="451.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.2" y="462.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 1.00%)</title><rect x="1119.2" y="435.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.2" y="446.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 1.00%)</title><rect x="1119.2" y="419.0" width="11.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1122.2" y="430.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 3.00%)</title><rect x="1131.0" y="499.0" width="35.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.0" y="510.0">Ser..</text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 2.00%)</title><rect x="1131.0" y="483.0" width="23.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.0" y="494.0">J..</text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 2.00%)</title><rect x="1131.0" y="467.0" width="23.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.0" y="478.0">J..</text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (2 samples, 2.00%)</title><rect x="1131.0" y="451.0" width="23.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.0" y="462.0">J..</text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (2 samples, 2.00%)</title><rect x="1131.0" y="435.0" width="23.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.0" y="446.0">J..</text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 1.00%)</title><rect x="1131.0" y="419.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.0" y="430.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 1.00%)</title><rect x="1142.8" y="419.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.8" y="430.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 1.00%)</title><rect x="1154.6" y="483.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.6" y="494.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 1.00%)</title><rect x="1154.6" y="467.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.6" y="478.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 1.00%)</title><rect x="1154.6" y="451.0" width="11.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1157.6" y="462.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 1.00%)</title><rect x="1154.6" y="435.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.6" y="446.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 1.00%)</title><rect x="1154.6" y="419.0" width="11.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1157.6" y="430.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 1.00%)</title><rect x="1166.4" y="499.0" width="11.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1169.4" y="510.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 1.00%)</title><rect x="1166.4" y="483.0" width="11.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.4" y="494.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 1.00%)</title><rect x="1166.4" y="467.0" width="11.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1169.4" y="478.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 1.00%)</title><rect x="1166.4" y="451.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.4" y="462.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt; &gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, char const*, unsigned long) (1 samples, 1.00%)</title><rect x="1166.4" y="435.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.4" y="446.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 1.00%)</title><rect x="1178.2" y="531.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="542.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 1.00%)</title><rect x="1178.2" y="515.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="526.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 1.00%)</title><rect x="1178.2" y="499.0" width="11.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="510.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 1.00%)</title><rect x="1178.2" y="483.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="494.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 1.00%)</title><rect x="1178.2" y="467.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="478.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 1.00%)</title><rect x="1178.2" y="451.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="462.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 1.00%)</title><rect x="1178.2" y="435.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="446.0"></text>
</g>
</g>
</svg>
