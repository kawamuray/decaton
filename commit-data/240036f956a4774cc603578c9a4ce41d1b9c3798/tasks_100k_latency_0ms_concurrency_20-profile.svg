<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (176 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.57%)</title><rect x="10.0" y="1155.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 15.34%)</title><rect x="16.7" y="1155.0" width="181.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1166.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 15.34%)</title><rect x="16.7" y="1139.0" width="181.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1150.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (19 samples, 10.80%)</title><rect x="16.7" y="1123.0" width="127.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="1134.0">java/lang/Iterab..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1287423904.accept (19 samples, 10.80%)</title><rect x="16.7" y="1107.0" width="127.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.7" y="1118.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 10.80%)</title><rect x="16.7" y="1091.0" width="127.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="1102.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 9.09%)</title><rect x="23.4" y="1075.0" width="107.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.4" y="1086.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 9.09%)</title><rect x="23.4" y="1059.0" width="107.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.4" y="1070.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 9.09%)</title><rect x="23.4" y="1043.0" width="107.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.4" y="1054.0">com/linecorp/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 9.09%)</title><rect x="23.4" y="1027.0" width="107.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.4" y="1038.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 9.09%)</title><rect x="23.4" y="1011.0" width="107.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.4" y="1022.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 9.09%)</title><rect x="23.4" y="995.0" width="107.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.4" y="1006.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 6.82%)</title><rect x="50.2" y="979.0" width="80.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.2" y="990.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.70%)</title><rect x="50.2" y="963.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.70%)</title><rect x="50.2" y="947.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.70%)</title><rect x="50.2" y="931.0" width="20.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.57%)</title><rect x="70.3" y="963.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.57%)</title><rect x="70.3" y="947.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.57%)</title><rect x="70.3" y="931.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 4.55%)</title><rect x="77.0" y="963.0" width="53.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.0" y="974.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 4.55%)</title><rect x="77.0" y="947.0" width="53.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.0" y="958.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 4.55%)</title><rect x="77.0" y="931.0" width="53.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.0" y="942.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 4.55%)</title><rect x="77.0" y="915.0" width="53.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.0" y="926.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (8 samples, 4.55%)</title><rect x="77.0" y="899.0" width="53.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.0" y="910.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 3.98%)</title><rect x="83.7" y="883.0" width="47.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="86.7" y="894.0">Unsa..</text>
</g>
<g>
<title>BarrierSet::read_barrier(oopDesc*) (1 samples, 0.57%)</title><rect x="83.7" y="867.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="86.7" y="878.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.57%)</title><rect x="90.5" y="867.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="93.5" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.57%)</title><rect x="97.2" y="867.0" width="6.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="100.2" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 2.27%)</title><rect x="103.9" y="867.0" width="26.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="106.9" y="878.0">p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.14%)</title><rect x="130.7" y="1075.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.14%)</title><rect x="130.7" y="1059.0" width="13.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.14%)</title><rect x="130.7" y="1043.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="133.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="137.4" y="1027.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="137.4" y="1011.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.55%)</title><rect x="144.1" y="1123.0" width="53.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.1" y="1134.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.55%)</title><rect x="144.1" y="1107.0" width="53.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="147.1" y="1118.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.84%)</title><rect x="144.1" y="1091.0" width="33.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.1" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 2.84%)</title><rect x="144.1" y="1075.0" width="33.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.1" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.84%)</title><rect x="144.1" y="1059.0" width="33.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.1" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.27%)</title><rect x="144.1" y="1043.0" width="26.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.1" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.27%)</title><rect x="144.1" y="1027.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.1" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.57%)</title><rect x="150.8" y="1011.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.57%)</title><rect x="150.8" y="995.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.57%)</title><rect x="150.8" y="979.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.57%)</title><rect x="150.8" y="963.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.57%)</title><rect x="150.8" y="947.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.57%)</title><rect x="150.8" y="931.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.57%)</title><rect x="150.8" y="915.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.57%)</title><rect x="150.8" y="899.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.14%)</title><rect x="157.5" y="1011.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.14%)</title><rect x="157.5" y="995.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.14%)</title><rect x="157.5" y="979.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.5" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.14%)</title><rect x="157.5" y="963.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.57%)</title><rect x="170.9" y="1043.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.57%)</title><rect x="170.9" y="1027.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.57%)</title><rect x="170.9" y="1011.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.57%)</title><rect x="170.9" y="995.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="173.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.57%)</title><rect x="170.9" y="979.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.9" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="170.9" y="963.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.9" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="170.9" y="947.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 1.14%)</title><rect x="177.6" y="1091.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.57%)</title><rect x="177.6" y="1075.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.57%)</title><rect x="177.6" y="1059.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="180.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.57%)</title><rect x="177.6" y="1043.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="177.6" y="1027.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.57%)</title><rect x="177.6" y="1011.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.57%)</title><rect x="177.6" y="995.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="177.6" y="979.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.57%)</title><rect x="177.6" y="963.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.57%)</title><rect x="177.6" y="947.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.57%)</title><rect x="177.6" y="931.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.6" y="942.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.57%)</title><rect x="177.6" y="915.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.57%)</title><rect x="177.6" y="899.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/1096354927.apply (1 samples, 0.57%)</title><rect x="177.6" y="883.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.57%)</title><rect x="177.6" y="867.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.57%)</title><rect x="184.3" y="1075.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.57%)</title><rect x="184.3" y="1059.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.57%)</title><rect x="184.3" y="1043.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.57%)</title><rect x="184.3" y="1027.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="187.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.57%)</title><rect x="184.3" y="1011.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.57%)</title><rect x="184.3" y="995.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.57%)</title><rect x="184.3" y="979.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.57%)</title><rect x="191.0" y="1091.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.57%)</title><rect x="191.0" y="1075.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.57%)</title><rect x="191.0" y="1059.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.57%)</title><rect x="191.0" y="1043.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.57%)</title><rect x="191.0" y="1027.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.57%)</title><rect x="191.0" y="1011.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.57%)</title><rect x="191.0" y="995.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (61 samples, 34.66%)</title><rect x="197.7" y="1155.0" width="409.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="200.7" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (61 samples, 34.66%)</title><rect x="197.7" y="1139.0" width="409.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.7" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (61 samples, 34.66%)</title><rect x="197.7" y="1123.0" width="409.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.7" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1786762707.run (39 samples, 22.16%)</title><rect x="204.4" y="1107.0" width="261.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.4" y="1118.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (39 samples, 22.16%)</title><rect x="204.4" y="1091.0" width="261.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.4" y="1102.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (39 samples, 22.16%)</title><rect x="204.4" y="1075.0" width="261.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.4" y="1086.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="204.4" y="1059.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="207.4" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="204.4" y="1043.0" width="6.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="207.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (36 samples, 20.45%)</title><rect x="211.1" y="1059.0" width="241.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.1" y="1070.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (15 samples, 8.52%)</title><rect x="211.1" y="1043.0" width="100.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.1" y="1054.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (15 samples, 8.52%)</title><rect x="211.1" y="1027.0" width="100.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.1" y="1038.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (15 samples, 8.52%)</title><rect x="211.1" y="1011.0" width="100.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.1" y="1022.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 8.52%)</title><rect x="211.1" y="995.0" width="100.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.1" y="1006.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 8.52%)</title><rect x="211.1" y="979.0" width="100.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.1" y="990.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (15 samples, 8.52%)</title><rect x="211.1" y="963.0" width="100.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.1" y="974.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.41%)</title><rect x="211.1" y="947.0" width="40.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.1" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 3.41%)</title><rect x="211.1" y="931.0" width="40.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.1" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 3.41%)</title><rect x="211.1" y="915.0" width="40.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.1" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 2.27%)</title><rect x="211.1" y="899.0" width="26.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.1" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 1.14%)</title><rect x="224.5" y="883.0" width="13.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.57%)</title><rect x="238.0" y="899.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.57%)</title><rect x="238.0" y="883.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.57%)</title><rect x="238.0" y="867.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.57%)</title><rect x="244.7" y="899.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 4.55%)</title><rect x="251.4" y="947.0" width="53.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.4" y="958.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.57%)</title><rect x="251.4" y="931.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.57%)</title><rect x="251.4" y="915.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.57%)</title><rect x="251.4" y="899.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.57%)</title><rect x="251.4" y="883.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 3.98%)</title><rect x="258.1" y="931.0" width="46.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.1" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.70%)</title><rect x="258.1" y="915.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 1.14%)</title><rect x="258.1" y="899.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.57%)</title><rect x="271.5" y="899.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.57%)</title><rect x="271.5" y="883.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.27%)</title><rect x="278.2" y="915.0" width="26.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.2" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.27%)</title><rect x="278.2" y="899.0" width="26.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.2" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.27%)</title><rect x="278.2" y="883.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.2" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.70%)</title><rect x="284.9" y="867.0" width="20.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.14%)</title><rect x="291.6" y="851.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.14%)</title><rect x="291.6" y="835.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.14%)</title><rect x="291.6" y="819.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.57%)</title><rect x="305.0" y="947.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.57%)</title><rect x="305.0" y="931.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.57%)</title><rect x="305.0" y="915.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.57%)</title><rect x="305.0" y="899.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (20 samples, 11.36%)</title><rect x="311.7" y="1043.0" width="134.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.7" y="1054.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (1 samples, 0.57%)</title><rect x="311.7" y="1027.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.7" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.57%)</title><rect x="311.7" y="1011.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="314.7" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.57%)</title><rect x="311.7" y="995.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.57%)</title><rect x="311.7" y="979.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (11 samples, 6.25%)</title><rect x="318.4" y="1027.0" width="73.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.4" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 5.68%)</title><rect x="325.1" y="1011.0" width="67.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="328.1" y="1022.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.98%)</title><rect x="325.1" y="995.0" width="46.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.1" y="1006.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 3.98%)</title><rect x="325.1" y="979.0" width="46.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.1" y="990.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="331.8" y="963.0" width="6.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="334.8" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="331.8" y="947.0" width="6.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="334.8" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.70%)</title><rect x="338.5" y="963.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.5" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="351.9" y="947.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.9" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="351.9" y="931.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.9" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="351.9" y="915.0" width="6.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="354.9" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.14%)</title><rect x="358.6" y="963.0" width="13.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="361.6" y="974.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.57%)</title><rect x="372.0" y="995.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.57%)</title><rect x="372.0" y="979.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.0" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.14%)</title><rect x="378.7" y="995.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.7" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 1.14%)</title><rect x="378.7" y="979.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.7" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.14%)</title><rect x="378.7" y="963.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.57%)</title><rect x="385.5" y="947.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.57%)</title><rect x="385.5" y="931.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.57%)</title><rect x="385.5" y="915.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 2.27%)</title><rect x="392.2" y="1027.0" width="26.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.2" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 2.27%)</title><rect x="392.2" y="1011.0" width="26.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.2" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1823890470.process (3 samples, 1.70%)</title><rect x="392.2" y="995.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.70%)</title><rect x="392.2" y="979.0" width="20.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 1.14%)</title><rect x="392.2" y="963.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.57%)</title><rect x="392.2" y="947.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.57%)</title><rect x="392.2" y="931.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.57%)</title><rect x="392.2" y="915.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="392.2" y="899.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="395.2" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.57%)</title><rect x="398.9" y="947.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.57%)</title><rect x="398.9" y="931.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="401.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="398.9" y="915.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="401.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.57%)</title><rect x="405.6" y="963.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.57%)</title><rect x="405.6" y="947.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="408.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.57%)</title><rect x="405.6" y="931.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.57%)</title><rect x="405.6" y="915.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.57%)</title><rect x="412.3" y="995.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.57%)</title><rect x="412.3" y="979.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.3" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.57%)</title><rect x="412.3" y="963.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="415.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.57%)</title><rect x="419.0" y="1027.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.57%)</title><rect x="419.0" y="1011.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.57%)</title><rect x="425.7" y="1027.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.57%)</title><rect x="425.7" y="1011.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.57%)</title><rect x="425.7" y="995.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="428.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.57%)</title><rect x="425.7" y="979.0" width="6.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="428.7" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="425.7" y="963.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="428.7" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="425.7" y="947.0" width="6.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="428.7" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1753968043.linkToTargetMethod (1 samples, 0.57%)</title><rect x="432.4" y="1027.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="435.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.57%)</title><rect x="439.1" y="1027.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.57%)</title><rect x="445.8" y="1043.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.57%)</title><rect x="445.8" y="1027.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 1.14%)</title><rect x="452.5" y="1059.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.5" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.57%)</title><rect x="452.5" y="1043.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="455.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.57%)</title><rect x="452.5" y="1027.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="455.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.57%)</title><rect x="452.5" y="1011.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="455.5" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.57%)</title><rect x="452.5" y="995.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="455.5" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="459.2" y="1043.0" width="6.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="462.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="459.2" y="1027.0" width="6.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="462.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.57%)</title><rect x="465.9" y="1107.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.57%)</title><rect x="465.9" y="1091.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.9" y="1102.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.57%)</title><rect x="465.9" y="1075.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="468.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.14%)</title><rect x="472.6" y="1107.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.14%)</title><rect x="472.6" y="1091.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.57%)</title><rect x="479.3" y="1075.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.57%)</title><rect x="486.0" y="1107.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 9.66%)</title><rect x="492.7" y="1107.0" width="114.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.7" y="1118.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 9.66%)</title><rect x="492.7" y="1091.0" width="114.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.7" y="1102.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 6.25%)</title><rect x="526.2" y="1075.0" width="73.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.2" y="1086.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 6.25%)</title><rect x="526.2" y="1059.0" width="73.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.2" y="1070.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (11 samples, 6.25%)</title><rect x="526.2" y="1043.0" width="73.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="529.2" y="1054.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 5.68%)</title><rect x="526.2" y="1027.0" width="67.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="529.2" y="1038.0">Unsafe_..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.57%)</title><rect x="526.2" y="1011.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.2" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 1.70%)</title><rect x="533.0" y="1011.0" width="20.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="536.0" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 1.14%)</title><rect x="539.7" y="995.0" width="13.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="542.7" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.57%)</title><rect x="553.1" y="1011.0" width="6.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="556.1" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.27%)</title><rect x="559.8" y="1011.0" width="26.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="562.8" y="1022.0">_..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.57%)</title><rect x="586.6" y="1011.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="589.6" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.57%)</title><rect x="593.3" y="1027.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.57%)</title><rect x="600.0" y="1075.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.57%)</title><rect x="600.0" y="1059.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="603.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.57%)</title><rect x="600.0" y="1043.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.57%)</title><rect x="600.0" y="1027.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.0" y="1038.0"></text>
</g>
<g>
<title>start_thread (87 samples, 49.43%)</title><rect x="606.7" y="1155.0" width="583.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="609.7" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (87 samples, 49.43%)</title><rect x="606.7" y="1139.0" width="583.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="609.7" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 10.80%)</title><rect x="606.7" y="1123.0" width="127.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="609.7" y="1134.0">GangWorker::loop()</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 5.11%)</title><rect x="606.7" y="1107.0" width="60.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="609.7" y="1118.0">G1ParP..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 5.11%)</title><rect x="606.7" y="1091.0" width="60.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="609.7" y="1102.0">G1ParE..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 1.70%)</title><rect x="606.7" y="1075.0" width="20.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="609.7" y="1086.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 3.41%)</title><rect x="626.8" y="1075.0" width="40.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="629.8" y="1086.0">Spi..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 5.68%)</title><rect x="667.0" y="1107.0" width="67.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="670.0" y="1118.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.68%)</title><rect x="667.0" y="1091.0" width="67.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="670.0" y="1102.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.84%)</title><rect x="667.0" y="1075.0" width="33.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="670.0" y="1086.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.14%)</title><rect x="680.5" y="1059.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="683.5" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.57%)</title><rect x="687.2" y="1043.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="690.2" y="1054.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.57%)</title><rect x="687.2" y="1027.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.2" y="1038.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.57%)</title><rect x="693.9" y="1059.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="696.9" y="1070.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.27%)</title><rect x="700.6" y="1075.0" width="26.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="703.6" y="1086.0">G..</text>
</g>
<g>
<title>SpinPause (1 samples, 0.57%)</title><rect x="727.4" y="1075.0" width="6.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="730.4" y="1086.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (68 samples, 38.64%)</title><rect x="734.1" y="1123.0" width="455.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="737.1" y="1134.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (68 samples, 38.64%)</title><rect x="734.1" y="1107.0" width="455.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="737.1" y="1118.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (67 samples, 38.07%)</title><rect x="734.1" y="1091.0" width="449.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="737.1" y="1102.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (67 samples, 38.07%)</title><rect x="734.1" y="1075.0" width="449.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.1" y="1086.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (67 samples, 38.07%)</title><rect x="734.1" y="1059.0" width="449.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="737.1" y="1070.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bo..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.57%)</title><rect x="734.1" y="1043.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="737.1" y="1054.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.57%)</title><rect x="734.1" y="1027.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="737.1" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="734.1" y="1011.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="737.1" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="734.1" y="995.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.1" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="734.1" y="979.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.1" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="734.1" y="963.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="737.1" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="734.1" y="947.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="737.1" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="734.1" y="931.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.1" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.57%)</title><rect x="734.1" y="915.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.1" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.57%)</title><rect x="734.1" y="899.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="737.1" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="734.1" y="883.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="737.1" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="734.1" y="867.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.1" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="734.1" y="851.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.1" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="734.1" y="835.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.1" y="846.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="734.1" y="819.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="737.1" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.57%)</title><rect x="734.1" y="803.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="737.1" y="814.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 14.77%)</title><rect x="740.8" y="1043.0" width="174.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="743.8" y="1054.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.14%)</title><rect x="740.8" y="1027.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="743.8" y="1038.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.14%)</title><rect x="740.8" y="1011.0" width="13.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="743.8" y="1022.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.57%)</title><rect x="754.2" y="1027.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.2" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.57%)</title><rect x="754.2" y="1011.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.2" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.57%)</title><rect x="754.2" y="995.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.2" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.27%)</title><rect x="760.9" y="1027.0" width="26.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="763.9" y="1038.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.27%)</title><rect x="760.9" y="1011.0" width="26.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.9" y="1022.0">M..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.57%)</title><rect x="767.6" y="995.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="770.6" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int) (1 samples, 0.57%)</title><rect x="767.6" y="979.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="770.6" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.14%)</title><rect x="774.3" y="995.0" width="13.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="777.3" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 1.14%)</title><rect x="774.3" y="979.0" width="13.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="777.3" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.57%)</title><rect x="774.3" y="963.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="777.3" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.57%)</title><rect x="781.0" y="963.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="784.0" y="974.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.57%)</title><rect x="781.0" y="947.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.0" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.57%)</title><rect x="787.7" y="1027.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="790.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.57%)</title><rect x="787.7" y="1011.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.57%)</title><rect x="787.7" y="995.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="790.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (18 samples, 10.23%)</title><rect x="794.4" y="1027.0" width="120.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="797.4" y="1038.0">PhaseChaitin::R..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.57%)</title><rect x="801.1" y="1011.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="804.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.14%)</title><rect x="807.8" y="1011.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="810.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.14%)</title><rect x="807.8" y="995.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.70%)</title><rect x="821.3" y="1011.0" width="20.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="824.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.57%)</title><rect x="834.7" y="995.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="837.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.57%)</title><rect x="834.7" y="979.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="837.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 1.14%)</title><rect x="841.4" y="1011.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="844.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.57%)</title><rect x="841.4" y="995.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="844.4" y="1006.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.57%)</title><rect x="841.4" y="979.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.4" y="990.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.57%)</title><rect x="848.1" y="995.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="851.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.57%)</title><rect x="854.8" y="1011.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="857.8" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.14%)</title><rect x="861.5" y="1011.0" width="13.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="864.5" y="1022.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.57%)</title><rect x="868.2" y="995.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.57%)</title><rect x="874.9" y="1011.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.14%)</title><rect x="881.6" y="1011.0" width="13.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="884.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.57%)</title><rect x="895.0" y="1011.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.57%)</title><rect x="895.0" y="995.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.0" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.14%)</title><rect x="901.7" y="1011.0" width="13.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="904.7" y="1022.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 1.14%)</title><rect x="901.7" y="995.0" width="13.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="904.7" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 18.18%)</title><rect x="915.1" y="1043.0" width="214.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="918.1" y="1054.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.57%)</title><rect x="915.1" y="1027.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.57%)</title><rect x="915.1" y="1011.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="918.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.57%)</title><rect x="915.1" y="995.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="918.1" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="915.1" y="979.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="918.1" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.57%)</title><rect x="915.1" y="963.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="918.1" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.57%)</title><rect x="915.1" y="947.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="918.1" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="915.1" y="931.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 2.27%)</title><rect x="921.8" y="1027.0" width="26.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="924.8" y="1038.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 2.27%)</title><rect x="921.8" y="1011.0" width="26.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.8" y="1022.0">C..</text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.57%)</title><rect x="921.8" y="995.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="924.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.57%)</title><rect x="921.8" y="979.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.8" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.57%)</title><rect x="921.8" y="963.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.8" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.57%)</title><rect x="921.8" y="947.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="924.8" y="958.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.57%)</title><rect x="921.8" y="931.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="924.8" y="942.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.57%)</title><rect x="921.8" y="915.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.8" y="926.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.57%)</title><rect x="921.8" y="899.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="924.8" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="921.8" y="883.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.8" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="921.8" y="867.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.8" y="878.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.57%)</title><rect x="921.8" y="851.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="924.8" y="862.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.57%)</title><rect x="921.8" y="835.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="924.8" y="846.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.57%)</title><rect x="921.8" y="819.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="924.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::adjust_scalar_replaceable_state(JavaObjectNode*) (1 samples, 0.57%)</title><rect x="928.5" y="995.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="935.2" y="995.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="935.2" y="979.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.57%)</title><rect x="935.2" y="963.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="938.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.57%)</title><rect x="935.2" y="947.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="995.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="979.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="963.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="947.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="931.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="915.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="899.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="883.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="867.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="851.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="835.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="819.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="803.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="787.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="771.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="755.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="739.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="944.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="723.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="944.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="707.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="691.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="675.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="659.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="643.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="627.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="611.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="595.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="944.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="579.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.57%)</title><rect x="941.9" y="563.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.9" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.57%)</title><rect x="948.6" y="1027.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="951.6" y="1038.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.57%)</title><rect x="948.6" y="1011.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (14 samples, 7.95%)</title><rect x="955.3" y="1027.0" width="93.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="958.3" y="1038.0">PhaseIdealL..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="1011.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="958.3" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="995.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.3" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="979.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="958.3" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="963.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="958.3" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="947.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="958.3" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="931.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.3" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="915.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="958.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="955.3" y="899.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="958.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.57%)</title><rect x="955.3" y="883.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.70%)</title><rect x="962.0" y="1011.0" width="20.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 1.14%)</title><rect x="968.8" y="995.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="971.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.57%)</title><rect x="975.5" y="979.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 4.55%)</title><rect x="982.2" y="1011.0" width="53.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.2" y="1022.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.84%)</title><rect x="1002.3" y="995.0" width="33.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.3" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.84%)</title><rect x="1002.3" y="979.0" width="33.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1005.3" y="990.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 2.84%)</title><rect x="1002.3" y="963.0" width="33.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.3" y="974.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.57%)</title><rect x="1035.8" y="1011.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.57%)</title><rect x="1042.5" y="1011.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.57%)</title><rect x="1042.5" y="995.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.5" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1042.5" y="979.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.57%)</title><rect x="1042.5" y="963.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1045.5" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 5.68%)</title><rect x="1049.2" y="1027.0" width="67.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.2" y="1038.0">PhaseIt..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 5.68%)</title><rect x="1049.2" y="1011.0" width="67.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.2" y="1022.0">PhaseIt..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1049.2" y="995.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.2" y="1006.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1055.9" y="995.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.9" y="1006.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.57%)</title><rect x="1055.9" y="979.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.9" y="990.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.57%)</title><rect x="1055.9" y="963.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.9" y="974.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.57%)</title><rect x="1055.9" y="947.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.9" y="958.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.57%)</title><rect x="1055.9" y="931.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1058.9" y="942.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1062.6" y="995.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.6" y="1006.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1062.6" y="979.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.6" y="990.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.57%)</title><rect x="1062.6" y="963.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.6" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.57%)</title><rect x="1062.6" y="947.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.6" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.57%)</title><rect x="1062.6" y="931.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.6" y="942.0"></text>
</g>
<g>
<title>LoadUBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1069.3" y="995.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.3" y="1006.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.57%)</title><rect x="1069.3" y="979.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.3" y="990.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.57%)</title><rect x="1069.3" y="963.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.3" y="974.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.57%)</title><rect x="1069.3" y="947.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.3" y="958.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.57%)</title><rect x="1069.3" y="931.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.3" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 2.27%)</title><rect x="1076.0" y="995.0" width="26.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.0" y="1006.0">P..</text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.57%)</title><rect x="1089.4" y="979.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.4" y="990.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.57%)</title><rect x="1089.4" y="963.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.4" y="974.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.57%)</title><rect x="1089.4" y="947.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.4" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.57%)</title><rect x="1096.1" y="979.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.1" y="990.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.57%)</title><rect x="1096.1" y="963.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.1" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1102.8" y="995.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.8" y="1006.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.57%)</title><rect x="1102.8" y="979.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.8" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1109.5" y="995.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.57%)</title><rect x="1109.5" y="979.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.57%)</title><rect x="1109.5" y="963.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.5" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.57%)</title><rect x="1109.5" y="947.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.5" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 1.14%)</title><rect x="1116.2" y="1027.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.57%)</title><rect x="1116.2" y="1011.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.57%)</title><rect x="1116.2" y="995.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.2" y="1006.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1116.2" y="979.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.2" y="990.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1116.2" y="963.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.2" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.57%)</title><rect x="1123.0" y="1011.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.0" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::extract_call_projections(CallNode*) (1 samples, 0.57%)</title><rect x="1123.0" y="995.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.0" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.55%)</title><rect x="1129.7" y="1043.0" width="53.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.7" y="1054.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.55%)</title><rect x="1129.7" y="1027.0" width="53.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.7" y="1038.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.55%)</title><rect x="1129.7" y="1011.0" width="53.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.7" y="1022.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.55%)</title><rect x="1129.7" y="995.0" width="53.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.7" y="1006.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.55%)</title><rect x="1129.7" y="979.0" width="53.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.7" y="990.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 4.55%)</title><rect x="1129.7" y="963.0" width="53.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.7" y="974.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.14%)</title><rect x="1129.7" y="947.0" width="13.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.7" y="958.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.14%)</title><rect x="1129.7" y="931.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.7" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.14%)</title><rect x="1129.7" y="915.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.7" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.14%)</title><rect x="1129.7" y="899.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.7" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.14%)</title><rect x="1129.7" y="883.0" width="13.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.7" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.14%)</title><rect x="1129.7" y="867.0" width="13.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.7" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1129.7" y="851.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.7" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1136.4" y="851.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.4" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1136.4" y="835.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.4" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.57%)</title><rect x="1136.4" y="819.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.57%)</title><rect x="1136.4" y="803.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1136.4" y="787.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1136.4" y="771.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.4" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1136.4" y="755.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.4" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1136.4" y="739.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.4" y="750.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1136.4" y="723.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.4" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.57%)</title><rect x="1136.4" y="707.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="718.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.57%)</title><rect x="1136.4" y="691.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.27%)</title><rect x="1143.1" y="947.0" width="26.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="958.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.27%)</title><rect x="1143.1" y="931.0" width="26.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.70%)</title><rect x="1143.1" y="915.0" width="20.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.70%)</title><rect x="1143.1" y="899.0" width="20.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.70%)</title><rect x="1143.1" y="883.0" width="20.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.70%)</title><rect x="1143.1" y="867.0" width="20.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1143.1" y="851.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.14%)</title><rect x="1143.1" y="835.0" width="13.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.14%)</title><rect x="1143.1" y="819.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.14%)</title><rect x="1143.1" y="803.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.14%)</title><rect x="1143.1" y="787.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.14%)</title><rect x="1143.1" y="771.0" width="13.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.1" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1143.1" y="755.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="766.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.57%)</title><rect x="1143.1" y="739.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.1" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1143.1" y="723.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.1" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1143.1" y="707.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.1" y="718.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.57%)</title><rect x="1143.1" y="691.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="755.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="739.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="723.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="707.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="691.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="675.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="659.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="643.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="627.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="611.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="595.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="579.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="563.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="547.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="531.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="515.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="499.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="483.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="467.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="451.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="435.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="419.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="403.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="387.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="371.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="355.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="339.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="323.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="307.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="291.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="275.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="259.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="243.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="227.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="211.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="195.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="179.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.8" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="163.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="147.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="131.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="115.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.57%)</title><rect x="1149.8" y="99.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.57%)</title><rect x="1149.8" y="83.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.57%)</title><rect x="1149.8" y="67.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.8" y="78.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.57%)</title><rect x="1149.8" y="51.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="62.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.57%)</title><rect x="1149.8" y="35.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.5" y="851.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.5" y="835.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1156.5" y="819.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1156.5" y="803.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1156.5" y="787.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1156.5" y="771.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1156.5" y="755.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.5" y="739.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1156.5" y="723.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1156.5" y="707.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1156.5" y="691.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1156.5" y="675.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1156.5" y="659.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1156.5" y="643.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1156.5" y="627.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1156.5" y="611.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1156.5" y="595.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1156.5" y="579.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="590.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.188] (1 samples, 0.57%)</title><rect x="1163.2" y="915.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.2" y="926.0"></text>
</g>
<g>
<title>CounterData::cell_count() const (1 samples, 0.57%)</title><rect x="1163.2" y="899.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1169.9" y="947.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1169.9" y="931.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.14%)</title><rect x="1169.9" y="915.0" width="13.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.14%)</title><rect x="1169.9" y="899.0" width="13.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.14%)</title><rect x="1169.9" y="883.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.14%)</title><rect x="1169.9" y="867.0" width="13.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.14%)</title><rect x="1169.9" y="851.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.14%)</title><rect x="1169.9" y="835.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.14%)</title><rect x="1169.9" y="819.0" width="13.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.14%)</title><rect x="1169.9" y="803.0" width="13.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.14%)</title><rect x="1169.9" y="787.0" width="13.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.14%)</title><rect x="1169.9" y="771.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.14%)</title><rect x="1169.9" y="755.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1169.9" y="739.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1169.9" y="723.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1169.9" y="707.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1169.9" y="691.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1169.9" y="675.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1169.9" y="659.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1169.9" y="643.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1169.9" y="627.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.57%)</title><rect x="1169.9" y="611.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.57%)</title><rect x="1169.9" y="595.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1169.9" y="579.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1169.9" y="563.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1169.9" y="547.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1169.9" y="531.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1169.9" y="515.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.57%)</title><rect x="1169.9" y="499.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.57%)</title><rect x="1169.9" y="483.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.57%)</title><rect x="1169.9" y="467.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.57%)</title><rect x="1169.9" y="451.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.57%)</title><rect x="1169.9" y="435.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1176.6" y="739.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.57%)</title><rect x="1176.6" y="723.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.57%)</title><rect x="1176.6" y="707.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.57%)</title><rect x="1176.6" y="691.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.57%)</title><rect x="1183.3" y="1091.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.57%)</title><rect x="1183.3" y="1075.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.57%)</title><rect x="1183.3" y="1059.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.57%)</title><rect x="1183.3" y="1043.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="1054.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.57%)</title><rect x="1183.3" y="1027.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.3" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.57%)</title><rect x="1183.3" y="1011.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="1022.0"></text>
</g>
</g>
</svg>
