<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (1,209 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[unknown] (2 samples, 0.17%)</title><rect x="10.0" y="947.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>__strchrnul (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="11.0" y="931.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (256 samples, 21.17%)</title><rect x="12.0" y="947.0" width="249.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="958.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (256 samples, 21.17%)</title><rect x="12.0" y="931.0" width="249.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="942.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.41%)</title><rect x="12.0" y="915.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.41%)</title><rect x="12.0" y="899.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1839207692.accept (5 samples, 0.41%)</title><rect x="12.0" y="883.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.41%)</title><rect x="12.0" y="867.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.41%)</title><rect x="12.0" y="851.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.41%)</title><rect x="12.0" y="835.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.17%)</title><rect x="16.8" y="915.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.17%)</title><rect x="16.8" y="899.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="16.8" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="16.8" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="16.8" y="851.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="17.8" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="17.8" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="17.8" y="851.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="17.8" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="17.8" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="17.8" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="17.8" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="17.8" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="17.8" y="755.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.8" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="17.8" y="739.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="20.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="18.8" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="18.8" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="18.8" y="883.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="18.8" y="867.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="18.8" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="18.8" y="835.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="18.8" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="18.8" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="18.8" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (184 samples, 15.22%)</title><rect x="19.8" y="915.0" width="179.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.8" y="926.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/845115886.accept (176 samples, 14.56%)</title><rect x="19.8" y="899.0" width="171.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.8" y="910.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (175 samples, 14.47%)</title><rect x="20.7" y="883.0" width="170.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.7" y="894.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (149 samples, 12.32%)</title><rect x="24.6" y="867.0" width="145.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.6" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (149 samples, 12.32%)</title><rect x="24.6" y="851.0" width="145.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.6" y="862.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (149 samples, 12.32%)</title><rect x="24.6" y="835.0" width="145.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.6" y="846.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (149 samples, 12.32%)</title><rect x="24.6" y="819.0" width="145.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.6" y="830.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (149 samples, 12.32%)</title><rect x="24.6" y="803.0" width="145.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.6" y="814.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 12.32%)</title><rect x="24.6" y="787.0" width="145.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.6" y="798.0">java/util/concurre..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="56.8" y="771.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 8.60%)</title><rect x="57.8" y="771.0" width="101.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.8" y="782.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.82%)</title><rect x="60.8" y="755.0" width="21.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.8" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.82%)</title><rect x="60.8" y="739.0" width="21.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.8" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 1.82%)</title><rect x="60.8" y="723.0" width="21.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.8" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.83%)</title><rect x="82.2" y="755.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.83%)</title><rect x="82.2" y="739.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="85.2" y="723.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.2" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="85.2" y="707.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="88.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.33%)</title><rect x="87.1" y="723.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="91.0" y="723.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (69 samples, 5.71%)</title><rect x="92.0" y="755.0" width="67.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.0" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (69 samples, 5.71%)</title><rect x="92.0" y="739.0" width="67.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.0" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (67 samples, 5.54%)</title><rect x="92.0" y="723.0" width="65.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.0" y="734.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (67 samples, 5.54%)</title><rect x="92.0" y="707.0" width="65.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.0" y="718.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (65 samples, 5.38%)</title><rect x="93.9" y="691.0" width="63.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.9" y="702.0">sun/mis..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="93.9" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="96.9" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 4.80%)</title><rect x="94.9" y="675.0" width="56.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="97.9" y="686.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="94.9" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.9" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="95.9" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="98.9" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 3.14%)</title><rect x="96.9" y="659.0" width="37.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="99.9" y="670.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.41%)</title><rect x="134.0" y="659.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="137.0" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.08%)</title><rect x="138.8" y="659.0" width="12.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="141.8" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.25%)</title><rect x="151.5" y="675.0" width="2.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="154.5" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.25%)</title><rect x="154.4" y="675.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="157.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="157.4" y="723.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="159.3" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="159.3" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="159.3" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="159.3" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="162.3" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="159.3" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="162.3" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="159.3" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="162.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.74%)</title><rect x="160.3" y="771.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.74%)</title><rect x="160.3" y="755.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="163.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.50%)</title><rect x="160.3" y="739.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="165.2" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.25%)</title><rect x="166.2" y="739.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="167.1" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="168.1" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.1" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="169.1" y="771.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="172.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.25%)</title><rect x="170.1" y="867.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="170.1" y="851.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="170.1" y="835.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (19 samples, 1.57%)</title><rect x="173.0" y="867.0" width="18.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 0.66%)</title><rect x="181.8" y="851.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.8" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.66%)</title><rect x="181.8" y="835.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.8" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.33%)</title><rect x="181.8" y="819.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.8" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.33%)</title><rect x="181.8" y="803.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.8" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.33%)</title><rect x="181.8" y="787.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="184.7" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="187.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="185.7" y="819.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.7" y="830.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="189.6" y="851.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="192.6" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="190.6" y="851.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="193.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="191.5" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="191.5" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="194.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="192.5" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.08%)</title><rect x="192.5" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.41%)</title><rect x="193.5" y="899.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.41%)</title><rect x="193.5" y="883.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.41%)</title><rect x="193.5" y="867.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.41%)</title><rect x="193.5" y="851.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="198.4" y="899.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="198.4" y="883.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.29%)</title><rect x="199.3" y="915.0" width="62.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.3" y="926.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.29%)</title><rect x="199.3" y="899.0" width="62.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.3" y="910.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.08%)</title><rect x="199.3" y="883.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="202.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 2.89%)</title><rect x="200.3" y="883.0" width="34.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.3" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="201.3" y="867.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.3" y="878.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="201.3" y="851.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="204.3" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.08%)</title><rect x="201.3" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="204.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.73%)</title><rect x="202.3" y="867.0" width="32.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.3" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 2.56%)</title><rect x="203.3" y="851.0" width="30.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="206.3" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.48%)</title><rect x="203.3" y="835.0" width="29.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.3" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.48%)</title><rect x="203.3" y="819.0" width="29.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.3" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.32%)</title><rect x="204.2" y="803.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.50%)</title><rect x="204.2" y="787.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.50%)</title><rect x="204.2" y="771.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.50%)</title><rect x="204.2" y="755.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.50%)</title><rect x="204.2" y="739.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.50%)</title><rect x="204.2" y="723.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.50%)</title><rect x="204.2" y="707.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.50%)</title><rect x="204.2" y="691.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 0.83%)</title><rect x="210.1" y="787.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 0.83%)</title><rect x="210.1" y="771.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.08%)</title><rect x="218.9" y="755.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.08%)</title><rect x="219.8" y="803.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="220.8" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.91%)</title><rect x="221.8" y="787.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (11 samples, 0.91%)</title><rect x="221.8" y="771.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.8" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (11 samples, 0.91%)</title><rect x="221.8" y="755.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.8" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.74%)</title><rect x="223.7" y="739.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (9 samples, 0.74%)</title><rect x="223.7" y="723.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (9 samples, 0.74%)</title><rect x="223.7" y="707.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (9 samples, 0.74%)</title><rect x="223.7" y="691.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.7" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="230.6" y="675.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="233.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="232.5" y="835.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="232.5" y="819.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="232.5" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="232.5" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="232.5" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="233.5" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="233.5" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="233.5" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.5" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="233.5" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="233.5" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.99%)</title><rect x="234.5" y="883.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.99%)</title><rect x="234.5" y="867.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 0.83%)</title><rect x="234.5" y="851.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="234.5" y="835.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/1148168779.accept (2 samples, 0.17%)</title><rect x="234.5" y="819.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="234.5" y="803.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.17%)</title><rect x="234.5" y="787.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (2 samples, 0.17%)</title><rect x="234.5" y="771.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="234.5" y="755.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="234.5" y="739.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="235.5" y="723.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (2 samples, 0.17%)</title><rect x="236.4" y="835.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="238.4" y="835.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="238.4" y="819.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="238.4" y="803.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="238.4" y="787.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="238.4" y="771.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.4" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="238.4" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="238.4" y="739.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="239.4" y="755.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$67/1819882604.get (1 samples, 0.08%)</title><rect x="239.4" y="739.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="240.3" y="835.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="240.3" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="240.3" y="803.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="240.3" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="241.3" y="835.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="241.3" y="819.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.3" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="241.3" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.08%)</title><rect x="241.3" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="241.3" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="242.3" y="835.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="243.3" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="243.3" y="803.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="243.3" y="787.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="243.3" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="243.3" y="755.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="243.3" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="243.3" y="723.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="244.2" y="851.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.17%)</title><rect x="244.2" y="835.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="244.2" y="819.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="244.2" y="803.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="244.2" y="787.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="244.2" y="771.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="244.2" y="755.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.17%)</title><rect x="244.2" y="739.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.17%)</title><rect x="244.2" y="723.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.2" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.17%)</title><rect x="244.2" y="707.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="245.2" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="245.2" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.2" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.08%)</title><rect x="245.2" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="248.2" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="245.2" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="248.2" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="245.2" y="627.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="248.2" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.08%)</title><rect x="245.2" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="248.2" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="245.2" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="248.2" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="245.2" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="248.2" y="590.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="245.2" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="248.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.08%)</title><rect x="246.2" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.50%)</title><rect x="247.2" y="883.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.50%)</title><rect x="247.2" y="867.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="248.1" y="851.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="251.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="248.1" y="835.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="248.1" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="248.1" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="248.1" y="787.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="248.1" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="248.1" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="248.1" y="739.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="248.1" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="248.1" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="249.1" y="851.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.25%)</title><rect x="249.1" y="835.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.25%)</title><rect x="249.1" y="819.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.25%)</title><rect x="249.1" y="803.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.1" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="249.1" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="252.1" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="249.1" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="252.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="250.1" y="787.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="250.1" y="771.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="250.1" y="755.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="250.1" y="739.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.1" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="250.1" y="723.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="253.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="251.1" y="723.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="251.1" y="707.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="251.1" y="691.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="252.1" y="835.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="252.1" y="819.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="252.1" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.41%)</title><rect x="253.0" y="883.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.41%)</title><rect x="253.0" y="867.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="253.0" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/981530120.accept (1 samples, 0.08%)</title><rect x="253.0" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="253.0" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="253.0" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.0" y="814.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="253.0" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/1687443995.apply (1 samples, 0.08%)</title><rect x="253.0" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="253.0" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="254.0" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.0" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="254.0" y="835.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.0" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="254.0" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.0" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="254.0" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.setValue (1 samples, 0.08%)</title><rect x="254.0" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.25%)</title><rect x="255.0" y="851.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.25%)</title><rect x="255.0" y="835.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="255.0" y="819.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="255.0" y="803.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="255.0" y="787.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="255.0" y="771.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="255.0" y="755.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.0" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="255.0" y="739.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.0" y="750.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.17%)</title><rect x="255.0" y="723.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.17%)</title><rect x="255.0" y="707.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="255.0" y="691.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="255.0" y="675.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="258.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/338921526.test (2 samples, 0.17%)</title><rect x="255.0" y="659.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="256.9" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.9" y="830.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="256.9" y="803.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="256.9" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="256.9" y="771.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.17%)</title><rect x="257.9" y="883.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="257.9" y="867.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="258.9" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="258.9" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="258.9" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.17%)</title><rect x="259.9" y="883.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="259.9" y="867.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="259.9" y="851.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.8" y="835.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (669 samples, 55.33%)</title><rect x="261.8" y="947.0" width="653.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.8" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (669 samples, 55.33%)</title><rect x="261.8" y="931.0" width="653.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.8" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (669 samples, 55.33%)</title><rect x="261.8" y="915.0" width="653.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.8" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="266.7" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="269.7" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="266.7" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="269.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="266.7" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="269.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="266.7" y="851.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="269.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="266.7" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="269.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="266.7" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="269.7" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="266.7" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="269.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="266.7" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="269.7" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="266.7" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="269.7" y="782.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.08%)</title><rect x="266.7" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="269.7" y="766.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.08%)</title><rect x="266.7" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="269.7" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="267.7" y="899.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="270.7" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="267.7" y="883.0" width="1.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="270.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (4 samples, 0.33%)</title><rect x="269.6" y="899.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/26288078.run (447 samples, 36.97%)</title><rect x="273.5" y="899.0" width="436.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.5" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (447 samples, 36.97%)</title><rect x="273.5" y="883.0" width="436.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.5" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (447 samples, 36.97%)</title><rect x="273.5" y="867.0" width="436.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.5" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.process..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="274.5" y="851.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="277.5" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.66%)</title><rect x="276.5" y="851.0" width="7.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="279.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="280.4" y="835.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="283.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (436 samples, 36.06%)</title><rect x="284.3" y="851.0" width="425.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.3" y="862.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sch..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (133 samples, 11.00%)</title><rect x="287.2" y="835.0" width="129.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.2" y="846.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (130 samples, 10.75%)</title><rect x="290.1" y="819.0" width="126.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.1" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (130 samples, 10.75%)</title><rect x="290.1" y="803.0" width="126.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.1" y="814.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="290.1" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="293.1" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="290.1" y="771.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="293.1" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="290.1" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="293.1" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="290.1" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="293.1" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="290.1" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="293.1" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="290.1" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="293.1" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="290.1" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="293.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="290.1" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="293.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (129 samples, 10.67%)</title><rect x="291.1" y="787.0" width="125.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.1" y="798.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (129 samples, 10.67%)</title><rect x="291.1" y="771.0" width="125.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.1" y="782.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (129 samples, 10.67%)</title><rect x="291.1" y="755.0" width="125.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.1" y="766.0">com/fasterxml/j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="291.1" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="294.1" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="291.1" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="294.1" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="291.1" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="294.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="291.1" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (36 samples, 2.98%)</title><rect x="292.1" y="739.0" width="35.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.1" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.58%)</title><rect x="292.1" y="723.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.58%)</title><rect x="292.1" y="707.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.58%)</title><rect x="292.1" y="691.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.58%)</title><rect x="292.1" y="675.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.58%)</title><rect x="292.1" y="659.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="296.9" y="643.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (29 samples, 2.40%)</title><rect x="298.9" y="723.0" width="28.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.9" y="734.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="298.9" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="301.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="298.9" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="301.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="298.9" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="301.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="298.9" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="301.9" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="298.9" y="643.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="301.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="298.9" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="301.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (28 samples, 2.32%)</title><rect x="299.9" y="707.0" width="27.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.9" y="718.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="299.9" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="302.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="299.9" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="302.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="299.9" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="302.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="299.9" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="302.9" y="654.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="299.9" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="302.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.83%)</title><rect x="300.9" y="691.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (10 samples, 0.83%)</title><rect x="300.9" y="675.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.08%)</title><rect x="309.6" y="659.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (16 samples, 1.32%)</title><rect x="310.6" y="691.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (16 samples, 1.32%)</title><rect x="310.6" y="675.0" width="15.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (9 samples, 0.74%)</title><rect x="310.6" y="659.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.25%)</title><rect x="319.4" y="659.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.4" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="320.4" y="643.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="323.4" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="320.4" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="323.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="320.4" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="323.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="320.4" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="323.4" y="606.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="320.4" y="579.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="323.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="320.4" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="323.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="321.3" y="643.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (4 samples, 0.33%)</title><rect x="322.3" y="659.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="324.3" y="643.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="325.3" y="643.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="326.2" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="326.2" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="329.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="326.2" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="329.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="326.2" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="329.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (82 samples, 6.78%)</title><rect x="327.2" y="739.0" width="80.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="330.2" y="750.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.25%)</title><rect x="327.2" y="723.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.25%)</title><rect x="327.2" y="707.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.25%)</title><rect x="327.2" y="691.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.25%)</title><rect x="327.2" y="675.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.25%)</title><rect x="327.2" y="659.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="327.2" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.17%)</title><rect x="328.2" y="643.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.17%)</title><rect x="328.2" y="627.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.74%)</title><rect x="330.1" y="723.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.74%)</title><rect x="330.1" y="707.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.41%)</title><rect x="334.0" y="691.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="337.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.50%)</title><rect x="338.9" y="723.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.33%)</title><rect x="340.9" y="707.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.33%)</title><rect x="340.9" y="691.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.08%)</title><rect x="343.8" y="675.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="346.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.33%)</title><rect x="344.8" y="723.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="344.8" y="707.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="347.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.25%)</title><rect x="345.7" y="707.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (60 samples, 4.96%)</title><rect x="348.7" y="723.0" width="58.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="351.7" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.16%)</title><rect x="348.7" y="707.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="352.6" y="691.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.50%)</title><rect x="353.6" y="691.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.50%)</title><rect x="353.6" y="675.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.50%)</title><rect x="353.6" y="659.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.50%)</title><rect x="353.6" y="643.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.33%)</title><rect x="355.5" y="627.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="359.4" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.17%)</title><rect x="360.4" y="691.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="363.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (46 samples, 3.80%)</title><rect x="362.3" y="707.0" width="44.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.3" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (46 samples, 3.80%)</title><rect x="362.3" y="691.0" width="44.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.3" y="702.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 3.72%)</title><rect x="363.3" y="675.0" width="43.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.3" y="686.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.82%)</title><rect x="368.2" y="659.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.2" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (6 samples, 0.50%)</title><rect x="371.1" y="643.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="374.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="377.0" y="643.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="380.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="377.0" y="627.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="377.0" y="611.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="377.0" y="595.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.25%)</title><rect x="378.9" y="595.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="378.9" y="579.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="378.9" y="563.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.08%)</title><rect x="379.9" y="547.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.08%)</title><rect x="380.9" y="579.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="383.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="381.9" y="643.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="381.9" y="627.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="382.8" y="611.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (4 samples, 0.33%)</title><rect x="383.8" y="643.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.17%)</title><rect x="387.7" y="643.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.50%)</title><rect x="389.7" y="659.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.33%)</title><rect x="391.6" y="643.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.33%)</title><rect x="391.6" y="627.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.33%)</title><rect x="391.6" y="611.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.33%)</title><rect x="391.6" y="595.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="395.5" y="659.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.41%)</title><rect x="397.5" y="659.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.41%)</title><rect x="397.5" y="643.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.41%)</title><rect x="397.5" y="627.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.41%)</title><rect x="397.5" y="611.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.5" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.41%)</title><rect x="397.5" y="595.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.08%)</title><rect x="402.4" y="659.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.4" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="402.4" y="643.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="402.4" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="405.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.33%)</title><rect x="403.3" y="659.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="406.3" y="643.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.3" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="406.3" y="627.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="409.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="406.3" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="409.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="406.3" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="409.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="406.3" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="409.3" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="406.3" y="563.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="409.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.83%)</title><rect x="407.2" y="739.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="410.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.83%)</title><rect x="407.2" y="723.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.83%)</title><rect x="407.2" y="707.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.83%)</title><rect x="407.2" y="691.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.83%)</title><rect x="407.2" y="675.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="416.0" y="659.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (278 samples, 22.99%)</title><rect x="417.0" y="835.0" width="271.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.0" y="846.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (56 samples, 4.63%)</title><rect x="418.0" y="819.0" width="54.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="421.0" y="830.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 4.63%)</title><rect x="418.0" y="803.0" width="54.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.0" y="814.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 4.55%)</title><rect x="418.9" y="787.0" width="53.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.9" y="798.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.65%)</title><rect x="419.9" y="771.0" width="19.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="422.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (20 samples, 1.65%)</title><rect x="419.9" y="755.0" width="19.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 1.08%)</title><rect x="426.8" y="739.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 1.08%)</title><rect x="426.8" y="723.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="429.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (13 samples, 1.08%)</title><rect x="426.8" y="707.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 2.81%)</title><rect x="439.4" y="771.0" width="33.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="442.4" y="782.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (29 samples, 2.40%)</title><rect x="444.3" y="755.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.3" y="766.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 1.08%)</title><rect x="448.2" y="739.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="451.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 1.08%)</title><rect x="448.2" y="723.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="451.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 0.99%)</title><rect x="460.9" y="739.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="472.6" y="819.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="475.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="473.6" y="803.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="476.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.17%)</title><rect x="473.6" y="787.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (160 samples, 13.23%)</title><rect x="475.6" y="819.0" width="156.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="478.6" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (160 samples, 13.23%)</title><rect x="475.6" y="803.0" width="156.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.6" y="814.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.50%)</title><rect x="481.4" y="787.0" width="5.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="484.4" y="798.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="481.4" y="771.0" width="5.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="484.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (59 samples, 4.88%)</title><rect x="487.3" y="787.0" width="57.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.3" y="798.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 2.23%)</title><rect x="506.8" y="771.0" width="26.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="509.8" y="782.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (26 samples, 2.15%)</title><rect x="507.8" y="755.0" width="25.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.8" y="766.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.58%)</title><rect x="518.5" y="739.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.5" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.58%)</title><rect x="518.5" y="723.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="521.5" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.58%)</title><rect x="518.5" y="707.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.58%)</title><rect x="518.5" y="691.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="521.5" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.17%)</title><rect x="518.5" y="675.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="521.5" y="686.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="518.5" y="659.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="521.5" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="519.5" y="659.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="522.5" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="519.5" y="643.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="522.5" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="519.5" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="522.5" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="519.5" y="611.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="522.5" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.41%)</title><rect x="520.5" y="675.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="523.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.33%)</title><rect x="521.4" y="659.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="524.4" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="521.4" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="524.4" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="521.4" y="627.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="524.4" y="638.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="521.4" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="524.4" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="521.4" y="595.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="524.4" y="606.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="521.4" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="524.4" y="590.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="521.4" y="563.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="524.4" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.08%)</title><rect x="522.4" y="643.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="525.4" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="523.4" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="526.4" y="654.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="524.4" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="527.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.41%)</title><rect x="525.3" y="739.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.3" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="530.2" y="739.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="533.2" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="531.2" y="739.0" width="1.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="534.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="533.1" y="771.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="536.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="533.1" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="536.1" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="533.1" y="739.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="536.1" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.25%)</title><rect x="534.1" y="771.0" width="2.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="537.1" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.66%)</title><rect x="537.0" y="771.0" width="7.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="540.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.74%)</title><rect x="544.9" y="787.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.74%)</title><rect x="544.9" y="771.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="547.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.74%)</title><rect x="544.9" y="755.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="547.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="550.7" y="739.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.7" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 6.53%)</title><rect x="553.6" y="787.0" width="77.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.6" y="798.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (77 samples, 6.37%)</title><rect x="555.6" y="771.0" width="75.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.6" y="782.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (30 samples, 2.48%)</title><rect x="555.6" y="755.0" width="29.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.6" y="766.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (30 samples, 2.48%)</title><rect x="555.6" y="739.0" width="29.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="558.6" y="750.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.91%)</title><rect x="574.1" y="723.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="577.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.91%)</title><rect x="574.1" y="707.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (11 samples, 0.91%)</title><rect x="574.1" y="691.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="577.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="584.9" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="584.9" y="739.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="587.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="584.9" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="587.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="584.9" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="587.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (46 samples, 3.80%)</title><rect x="585.8" y="755.0" width="44.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.8" y="766.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (39 samples, 3.23%)</title><rect x="592.7" y="739.0" width="38.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="595.7" y="750.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.58%)</title><rect x="595.6" y="723.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="598.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.58%)</title><rect x="595.6" y="707.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="598.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (29 samples, 2.40%)</title><rect x="602.4" y="723.0" width="28.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="605.4" y="734.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.41%)</title><rect x="612.2" y="707.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="615.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.91%)</title><rect x="617.1" y="707.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="620.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="625.9" y="691.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="628.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="626.8" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="629.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="626.8" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="629.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="626.8" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="629.8" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="626.8" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="629.8" y="638.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.25%)</title><rect x="627.8" y="707.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="630.8" y="718.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="630.7" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (43 samples, 3.56%)</title><rect x="631.7" y="819.0" width="42.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.7" y="830.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (43 samples, 3.56%)</title><rect x="631.7" y="803.0" width="42.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.7" y="814.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/911397161.process (20 samples, 1.65%)</title><rect x="634.6" y="787.0" width="19.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.65%)</title><rect x="634.6" y="771.0" width="19.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.65%)</title><rect x="634.6" y="755.0" width="19.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="637.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="641.5" y="739.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="644.5" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="642.5" y="739.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="645.5" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="642.5" y="723.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.5" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="642.5" y="707.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.5" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="642.5" y="691.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="643.4" y="675.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.74%)</title><rect x="644.4" y="739.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.4" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.41%)</title><rect x="648.3" y="723.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.3" y="734.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="648.3" y="707.0" width="4.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="651.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="653.2" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="653.2" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="653.2" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="654.2" y="787.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.2" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.17%)</title><rect x="654.2" y="771.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.2" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.50%)</title><rect x="656.1" y="787.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.1" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.50%)</title><rect x="656.1" y="771.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$275/1981921923.get$Lambda (6 samples, 0.50%)</title><rect x="656.1" y="755.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="659.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="656.1" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.1" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="656.1" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="659.1" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="656.1" y="707.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="656.1" y="691.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="659.1" y="702.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="656.1" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$275/1981921923.&lt;init&gt; (5 samples, 0.41%)</title><rect x="657.1" y="739.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.66%)</title><rect x="662.0" y="787.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="665.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.66%)</title><rect x="662.0" y="771.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.0" y="782.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.41%)</title><rect x="662.0" y="755.0" width="4.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="665.0" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.25%)</title><rect x="666.9" y="755.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.9" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="669.8" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.8" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="669.8" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.8" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.25%)</title><rect x="670.8" y="787.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.24%)</title><rect x="673.7" y="819.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.7" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="676.6" y="803.0" width="3.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="679.6" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="678.6" y="787.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="681.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.66%)</title><rect x="680.5" y="803.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.66%)</title><rect x="680.5" y="787.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="683.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1327257622.accept (8 samples, 0.66%)</title><rect x="680.5" y="771.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="683.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.66%)</title><rect x="680.5" y="755.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.5" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.66%)</title><rect x="680.5" y="739.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.5" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.66%)</title><rect x="680.5" y="723.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.5" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="684.4" y="707.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="687.4" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="684.4" y="691.0" width="3.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="687.4" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="687.4" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.32%)</title><rect x="688.3" y="835.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.32%)</title><rect x="688.3" y="819.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.16%)</title><rect x="689.3" y="803.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="692.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1327257622.accept (1 samples, 0.08%)</title><rect x="689.3" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="692.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.08%)</title><rect x="689.3" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="692.3" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="689.3" y="755.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="692.3" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="689.3" y="739.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/219988243.accept (13 samples, 1.08%)</title><rect x="690.3" y="787.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (13 samples, 1.08%)</title><rect x="690.3" y="771.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/498704266.complete (13 samples, 1.08%)</title><rect x="690.3" y="755.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (13 samples, 1.08%)</title><rect x="690.3" y="739.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 1.08%)</title><rect x="690.3" y="723.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="693.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.08%)</title><rect x="690.3" y="707.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.08%)</title><rect x="690.3" y="691.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 1.08%)</title><rect x="690.3" y="675.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="693.3" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (13 samples, 1.08%)</title><rect x="690.3" y="659.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="693.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="703.0" y="803.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.0" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.50%)</title><rect x="703.9" y="835.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="706.9" y="846.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="704.9" y="819.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="707.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.33%)</title><rect x="709.8" y="899.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="712.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.33%)</title><rect x="709.8" y="883.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="712.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.33%)</title><rect x="709.8" y="867.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.33%)</title><rect x="709.8" y="851.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="712.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (206 samples, 17.04%)</title><rect x="713.7" y="899.0" width="201.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.7" y="910.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (205 samples, 16.96%)</title><rect x="714.7" y="883.0" width="200.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.7" y="894.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (180 samples, 14.89%)</title><rect x="739.1" y="867.0" width="175.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="742.1" y="878.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="744.9" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="747.9" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="744.9" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="747.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.83%)</title><rect x="745.9" y="851.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.83%)</title><rect x="745.9" y="835.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.83%)</title><rect x="745.9" y="819.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.83%)</title><rect x="745.9" y="803.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 13.48%)</title><rect x="755.7" y="851.0" width="159.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.7" y="862.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (149 samples, 12.32%)</title><rect x="769.3" y="835.0" width="145.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="772.3" y="846.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="777.1" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.1" y="830.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="778.1" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="781.1" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.33%)</title><rect x="779.1" y="819.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="782.1" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (132 samples, 10.92%)</title><rect x="783.0" y="819.0" width="128.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="786.0" y="830.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="785.9" y="803.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="788.9" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.99%)</title><rect x="787.9" y="803.0" width="23.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.9" y="814.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.50%)</title><rect x="795.7" y="787.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="798.7" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="795.7" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="798.7" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="795.7" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.7" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.25%)</title><rect x="796.7" y="771.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="799.6" y="771.0" width="1.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="802.6" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.25%)</title><rect x="801.5" y="787.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.5" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.50%)</title><rect x="804.5" y="787.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="807.5" y="798.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="810.3" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.3" y="798.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="811.3" y="803.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.3" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="813.3" y="803.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="816.3" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.25%)</title><rect x="816.2" y="803.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="819.2" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.15%)</title><rect x="819.1" y="803.0" width="25.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="822.1" y="814.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 4.80%)</title><rect x="844.5" y="803.0" width="56.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="847.5" y="814.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.33%)</title><rect x="901.1" y="803.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="904.1" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="905.0" y="803.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="908.0" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="907.0" y="803.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="910.0" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="908.9" y="803.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.9" y="814.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="910.9" y="803.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.9" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="911.8" y="819.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="914.8" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="913.8" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="916.8" y="830.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.08%)</title><rect x="914.8" y="947.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="917.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="915.7" y="947.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="915.7" y="931.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="918.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="915.7" y="915.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="915.7" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="918.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="915.7" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="918.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="915.7" y="867.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="918.7" y="878.0"></text>
</g>
<g>
<title>start_thread (280 samples, 23.16%)</title><rect x="916.7" y="947.0" width="273.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="919.7" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (280 samples, 23.16%)</title><rect x="916.7" y="931.0" width="273.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="919.7" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.82%)</title><rect x="916.7" y="915.0" width="21.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.7" y="926.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.25%)</title><rect x="916.7" y="899.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="919.7" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.25%)</title><rect x="916.7" y="883.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.7" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="916.7" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="919.7" y="878.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="917.7" y="867.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="920.7" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.57%)</title><rect x="919.6" y="899.0" width="18.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.6" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.50%)</title><rect x="919.6" y="883.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.6" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="919.6" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.6" y="878.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="919.6" y="851.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="922.6" y="862.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="920.6" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="923.6" y="878.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.33%)</title><rect x="921.6" y="867.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="924.6" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (9 samples, 0.74%)</title><rect x="925.5" y="883.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="928.5" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.33%)</title><rect x="925.5" y="867.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.5" y="878.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="925.5" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="928.5" y="862.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="925.5" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.5" y="846.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="925.5" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="928.5" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.25%)</title><rect x="926.5" y="851.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.5" y="862.0"></text>
</g>
<g>
<title>CompilerThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="926.5" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.5" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="926.5" y="819.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.5" y="830.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="926.5" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.5" y="814.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="926.5" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="929.5" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="926.5" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.5" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="927.5" y="835.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="930.5" y="846.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="927.5" y="819.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="930.5" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.41%)</title><rect x="929.4" y="867.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.4" y="878.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.41%)</title><rect x="929.4" y="851.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.4" y="862.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="933.3" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.3" y="846.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="933.3" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="936.3" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="934.3" y="883.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="937.3" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="934.3" y="867.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.3" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.25%)</title><rect x="934.3" y="851.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.3" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.25%)</title><rect x="934.3" y="835.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="937.3" y="846.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.25%)</title><rect x="934.3" y="819.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.3" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.25%)</title><rect x="934.3" y="803.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.3" y="814.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="934.3" y="787.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.3" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="935.3" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.3" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="935.3" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.3" y="766.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.08%)</title><rect x="935.3" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.3" y="750.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::block_start(void const*) (1 samples, 0.08%)</title><rect x="936.2" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.2" y="782.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="937.2" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="937.2" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="940.2" y="846.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="937.2" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="940.2" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (256 samples, 21.17%)</title><rect x="938.2" y="915.0" width="249.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.2" y="926.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (256 samples, 21.17%)</title><rect x="938.2" y="899.0" width="249.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.2" y="910.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (256 samples, 21.17%)</title><rect x="938.2" y="883.0" width="249.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="941.2" y="894.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (256 samples, 21.17%)</title><rect x="938.2" y="867.0" width="249.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="941.2" y="878.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (255 samples, 21.09%)</title><rect x="938.2" y="851.0" width="248.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.2" y="862.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (255 samples, 21.09%)</title><rect x="938.2" y="835.0" width="248.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="941.2" y="846.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (56 samples, 4.63%)</title><rect x="938.2" y="819.0" width="54.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.2" y="830.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="938.2" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.2" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="938.2" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="941.2" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.25%)</title><rect x="939.2" y="803.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="942.2" y="814.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="939.2" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.2" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="939.2" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.2" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="940.1" y="787.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.1" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="940.1" y="771.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.1" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.58%)</title><rect x="942.1" y="803.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.1" y="814.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="942.1" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.1" y="798.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.08%)</title><rect x="942.1" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.1" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.41%)</title><rect x="943.1" y="787.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.1" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.25%)</title><rect x="943.1" y="771.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.1" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="946.0" y="771.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.0" y="782.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="947.0" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="950.0" y="766.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.08%)</title><rect x="947.9" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="950.9" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.33%)</title><rect x="948.9" y="803.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.9" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.08%)</title><rect x="948.9" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.9" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.25%)</title><rect x="949.9" y="787.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.9" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="950.9" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.9" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="950.9" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.9" y="766.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="950.9" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.9" y="750.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="950.9" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.9" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="950.9" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.9" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="950.9" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.9" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="951.9" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="954.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 3.39%)</title><rect x="952.8" y="803.0" width="40.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="955.8" y="814.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="953.8" y="787.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.25%)</title><rect x="955.8" y="787.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="957.7" y="771.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.7" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="957.7" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.25%)</title><rect x="958.7" y="787.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.7" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="958.7" y="771.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="961.7" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="960.6" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.6" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="960.6" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="963.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.66%)</title><rect x="961.6" y="787.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.66%)</title><rect x="969.4" y="787.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.25%)</title><rect x="974.3" y="771.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.3" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="976.3" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.25%)</title><rect x="977.2" y="787.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="980.2" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.08%)</title><rect x="980.2" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.41%)</title><rect x="981.1" y="787.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.1" y="798.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="983.1" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="984.1" y="771.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="986.0" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.0" y="798.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.08%)</title><rect x="986.0" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="989.0" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="986.0" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.0" y="766.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="986.0" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.0" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="987.0" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="987.0" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="990.0" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="988.0" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="991.0" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.33%)</title><rect x="988.9" y="787.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.9" y="798.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="989.9" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.9" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="990.9" y="771.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="993.9" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (192 samples, 15.88%)</title><rect x="992.8" y="819.0" width="187.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="995.8" y="830.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="995.8" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="992.8" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.8" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="992.8" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.8" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="992.8" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.8" y="766.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="992.8" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.8" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.8" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.8" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.8" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.8" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.8" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.8" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.8" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.8" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.8" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="579.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.8" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="992.8" y="563.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.8" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="992.8" y="547.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.41%)</title><rect x="993.8" y="803.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.41%)</title><rect x="993.8" y="787.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="993.8" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) (1 samples, 0.08%)</title><rect x="993.8" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.8" y="766.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.08%)</title><rect x="993.8" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="994.8" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="994.8" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.25%)</title><rect x="995.8" y="771.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.25%)</title><rect x="995.8" y="755.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="723.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="707.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="627.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="998.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="611.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="998.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="563.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="998.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="499.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="451.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="435.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="419.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="403.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="387.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="998.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="371.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="355.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="339.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="323.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="307.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="998.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="291.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="275.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="259.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="243.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="998.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="227.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="211.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="195.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="179.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="163.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="147.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="131.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="99.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="83.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="67.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="995.8" y="51.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.8" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="996.7" y="739.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="999.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="996.7" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.7" y="734.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="996.7" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="675.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="659.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="997.7" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.7" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="998.7" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.7" y="814.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="998.7" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.7" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="998.7" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.7" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="998.7" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (2 samples, 0.17%)</title><rect x="999.7" y="803.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.7" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.17%)</title><rect x="999.7" y="787.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1002.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (165 samples, 13.65%)</title><rect x="1001.6" y="803.0" width="161.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.6" y="814.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1001.6" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.6" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1001.6" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.6" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1001.6" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1004.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.58%)</title><rect x="1002.6" y="787.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.6" y="798.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1008.5" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.50%)</title><rect x="1009.4" y="787.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1011.4" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.4" y="782.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.08%)</title><rect x="1012.4" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.4" y="782.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.17%)</title><rect x="1013.3" y="771.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (142 samples, 11.75%)</title><rect x="1015.3" y="787.0" width="138.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.3" y="798.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (138 samples, 11.41%)</title><rect x="1019.2" y="771.0" width="134.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.2" y="782.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.83%)</title><rect x="1020.2" y="755.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (127 samples, 10.50%)</title><rect x="1029.9" y="755.0" width="124.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.9" y="766.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (13 samples, 1.08%)</title><rect x="1138.3" y="739.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.25%)</title><rect x="1151.0" y="739.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1151.0" y="723.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1153.9" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.08%)</title><rect x="1154.9" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1154.9" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1154.9" y="755.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.08%)</title><rect x="1154.9" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="750.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.08%)</title><rect x="1154.9" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="734.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.08%)</title><rect x="1154.9" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.33%)</title><rect x="1155.8" y="787.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1155.8" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1155.8" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.25%)</title><rect x="1156.8" y="771.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1156.8" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1157.8" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1157.8" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="750.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1157.8" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1158.8" y="755.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.25%)</title><rect x="1159.7" y="787.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.25%)</title><rect x="1159.7" y="771.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.7" y="782.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.08%)</title><rect x="1159.7" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.7" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1160.7" y="755.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.7" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.08%)</title><rect x="1160.7" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.7" y="750.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1160.7" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.7" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.08%)</title><rect x="1160.7" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="718.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1161.7" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (15 samples, 1.24%)</title><rect x="1162.7" y="803.0" width="14.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.7" y="814.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.08%)</title><rect x="1162.7" y="787.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.7" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (14 samples, 1.16%)</title><rect x="1163.6" y="787.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.6" y="798.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1163.6" y="771.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.6" y="782.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.6" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.6" y="766.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1163.6" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1164.6" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.6" y="766.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1164.6" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1165.6" y="771.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.6" y="782.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.17%)</title><rect x="1165.6" y="755.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.6" y="766.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1165.6" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="750.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1166.6" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.6" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1166.6" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.41%)</title><rect x="1167.6" y="771.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.6" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.25%)</title><rect x="1169.5" y="755.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.5" y="766.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.5" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.5" y="750.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1171.5" y="739.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.5" y="750.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.4" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.4" y="782.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1173.4" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.4" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="766.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.08%)</title><rect x="1174.4" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="750.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1175.4" y="771.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1175.4" y="755.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.4" y="739.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.4" y="723.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="691.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="595.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.4" y="579.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="574.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1176.3" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1176.3" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1177.3" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1177.3" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1177.3" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.3" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1178.3" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1178.3" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.08%)</title><rect x="1179.3" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1180.2" y="819.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1180.2" y="803.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1180.2" y="787.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1180.2" y="771.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1180.2" y="755.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.58%)</title><rect x="1180.2" y="739.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1180.2" y="723.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1180.2" y="707.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1180.2" y="691.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1180.2" y="675.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1180.2" y="659.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.58%)</title><rect x="1180.2" y="643.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1180.2" y="627.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1180.2" y="611.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1180.2" y="595.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1180.2" y="579.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1180.2" y="563.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1180.2" y="547.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.50%)</title><rect x="1180.2" y="531.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.50%)</title><rect x="1180.2" y="515.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.50%)</title><rect x="1180.2" y="499.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.50%)</title><rect x="1180.2" y="483.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.50%)</title><rect x="1180.2" y="467.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1180.2" y="451.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1180.2" y="435.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1180.2" y="419.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1180.2" y="403.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1180.2" y="387.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1180.2" y="371.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1180.2" y="355.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="339.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.2" y="323.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.2" y="307.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.2" y="291.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.2" y="275.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="259.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="243.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.2" y="227.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.2" y="211.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.2" y="195.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.2" y="179.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="163.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="147.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.08%)</title><rect x="1180.2" y="131.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1180.2" y="115.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1180.2" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="83.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="94.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.08%)</title><rect x="1180.2" y="67.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="78.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="51.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="62.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1180.2" y="35.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="147.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="142.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1181.2" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1181.2" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="83.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="94.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1181.2" y="67.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="339.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1182.2" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="302.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1182.2" y="275.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="286.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="270.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="355.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="339.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1183.2" y="323.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="307.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="318.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1183.2" y="291.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="302.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1183.2" y="275.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.2" y="286.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1183.2" y="259.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="270.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1183.2" y="243.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="254.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1183.2" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1184.1" y="435.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1184.1" y="419.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1184.1" y="403.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1184.1" y="387.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1184.1" y="371.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1184.1" y="355.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1184.1" y="339.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="323.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="307.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="243.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="227.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="211.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="195.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="179.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="163.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="147.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="131.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="115.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="99.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="83.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1184.1" y="67.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1185.1" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1185.1" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.1" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1185.1" y="291.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1185.1" y="275.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="286.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="1185.1" y="259.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1186.1" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1186.1" y="531.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1186.1" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="526.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1186.1" y="499.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="510.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.1" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1187.1" y="835.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1187.1" y="819.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1187.1" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1187.1" y="787.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.1" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1187.1" y="755.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1187.1" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="750.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.08%)</title><rect x="1187.1" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops(BlockBegin*, bool) (1 samples, 0.08%)</title><rect x="1187.1" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="718.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="915.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="899.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1188.0" y="883.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1189.0" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_idle_monitors() (1 samples, 0.08%)</title><rect x="1189.0" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
</g>
</svg>
