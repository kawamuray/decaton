<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (235 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 9.79%)</title><rect x="10.0" y="1139.0" width="115.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (23 samples, 9.79%)</title><rect x="10.0" y="1123.0" width="115.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.85%)</title><rect x="10.0" y="1107.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.85%)</title><rect x="10.0" y="1091.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/165580172.accept (2 samples, 0.85%)</title><rect x="10.0" y="1075.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.85%)</title><rect x="10.0" y="1059.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.85%)</title><rect x="10.0" y="1043.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.43%)</title><rect x="15.0" y="1027.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.85%)</title><rect x="20.0" y="1107.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.0" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.43%)</title><rect x="20.0" y="1091.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.0" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.43%)</title><rect x="20.0" y="1075.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.0" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_1 (1 samples, 0.43%)</title><rect x="20.0" y="1059.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.43%)</title><rect x="25.1" y="1091.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.43%)</title><rect x="25.1" y="1075.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.resolveOrFail (1 samples, 0.43%)</title><rect x="25.1" y="1059.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolveOrFail (1 samples, 0.43%)</title><rect x="25.1" y="1043.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolve (1 samples, 0.43%)</title><rect x="25.1" y="1027.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.checkForTypeAlias (1 samples, 0.43%)</title><rect x="25.1" y="1011.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.1" y="1022.0"></text>
</g>
<g>
<title>sun/invoke/util/VerifyAccess.isTypeVisible (1 samples, 0.43%)</title><rect x="25.1" y="995.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.1" y="1006.0"></text>
</g>
<g>
<title>sun/invoke/util/VerifyAccess.isTypeVisible (1 samples, 0.43%)</title><rect x="25.1" y="979.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.43%)</title><rect x="30.1" y="1107.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.43%)</title><rect x="30.1" y="1091.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.43%)</title><rect x="30.1" y="1075.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.43%)</title><rect x="30.1" y="1059.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.70%)</title><rect x="35.1" y="1107.0" width="20.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1950086458.accept (4 samples, 1.70%)</title><rect x="35.1" y="1091.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (4 samples, 1.70%)</title><rect x="35.1" y="1075.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.85%)</title><rect x="35.1" y="1059.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.85%)</title><rect x="35.1" y="1043.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.85%)</title><rect x="35.1" y="1027.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.85%)</title><rect x="35.1" y="1011.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.85%)</title><rect x="35.1" y="995.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.85%)</title><rect x="35.1" y="979.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.85%)</title><rect x="35.1" y="963.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.85%)</title><rect x="35.1" y="947.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.85%)</title><rect x="35.1" y="931.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.43%)</title><rect x="45.1" y="1059.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.43%)</title><rect x="45.1" y="1043.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.43%)</title><rect x="45.1" y="1027.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.43%)</title><rect x="50.2" y="1059.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.43%)</title><rect x="50.2" y="1043.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.2" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.43%)</title><rect x="50.2" y="1027.0" width="5.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="53.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 5.96%)</title><rect x="55.2" y="1107.0" width="70.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.2" y="1118.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 5.53%)</title><rect x="55.2" y="1091.0" width="65.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.2" y="1102.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 3.83%)</title><rect x="55.2" y="1075.0" width="45.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.2" y="1086.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.28%)</title><rect x="55.2" y="1059.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.28%)</title><rect x="55.2" y="1043.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.43%)</title><rect x="55.2" y="1027.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.43%)</title><rect x="55.2" y="1011.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeyIterator.&lt;init&gt; (1 samples, 0.43%)</title><rect x="55.2" y="995.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.43%)</title><rect x="55.2" y="979.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.43%)</title><rect x="55.2" y="963.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.43%)</title><rect x="60.2" y="1027.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.43%)</title><rect x="60.2" y="1011.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.43%)</title><rect x="60.2" y="995.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.43%)</title><rect x="60.2" y="979.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.43%)</title><rect x="60.2" y="963.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.43%)</title><rect x="60.2" y="947.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.batches (1 samples, 0.43%)</title><rect x="60.2" y="931.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.43%)</title><rect x="65.2" y="1027.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.43%)</title><rect x="65.2" y="1011.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.43%)</title><rect x="65.2" y="995.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.43%)</title><rect x="65.2" y="979.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.2" y="990.0"></text>
</g>
<g>
<title>java/util/EnumMap.get (1 samples, 0.43%)</title><rect x="65.2" y="963.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.2" y="974.0"></text>
</g>
<g>
<title>java/util/EnumMap.isValidKey (1 samples, 0.43%)</title><rect x="65.2" y="947.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.55%)</title><rect x="70.3" y="1059.0" width="30.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.3" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.55%)</title><rect x="70.3" y="1043.0" width="30.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.3" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.13%)</title><rect x="70.3" y="1027.0" width="25.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.3" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.13%)</title><rect x="70.3" y="1011.0" width="25.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.3" y="1022.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.28%)</title><rect x="70.3" y="995.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.85%)</title><rect x="70.3" y="979.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.85%)</title><rect x="70.3" y="963.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.85%)</title><rect x="70.3" y="947.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.85%)</title><rect x="70.3" y="931.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.85%)</title><rect x="70.3" y="915.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.85%)</title><rect x="70.3" y="899.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.85%)</title><rect x="70.3" y="883.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.43%)</title><rect x="80.3" y="979.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.43%)</title><rect x="80.3" y="963.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.85%)</title><rect x="85.3" y="995.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.85%)</title><rect x="85.3" y="979.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.85%)</title><rect x="85.3" y="963.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.3" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.85%)</title><rect x="85.3" y="947.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.43%)</title><rect x="95.4" y="1027.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.43%)</title><rect x="95.4" y="1011.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.43%)</title><rect x="95.4" y="995.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.43%)</title><rect x="95.4" y="979.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.4" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.43%)</title><rect x="95.4" y="963.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.4" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.43%)</title><rect x="95.4" y="947.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="958.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.43%)</title><rect x="95.4" y="931.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.85%)</title><rect x="100.4" y="1075.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.85%)</title><rect x="100.4" y="1059.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.85%)</title><rect x="100.4" y="1043.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="103.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.43%)</title><rect x="100.4" y="1027.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.43%)</title><rect x="100.4" y="1011.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.43%)</title><rect x="100.4" y="995.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.43%)</title><rect x="100.4" y="979.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.43%)</title><rect x="100.4" y="963.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.43%)</title><rect x="100.4" y="947.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.43%)</title><rect x="100.4" y="931.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.43%)</title><rect x="105.4" y="1027.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.43%)</title><rect x="105.4" y="1011.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.43%)</title><rect x="105.4" y="995.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.43%)</title><rect x="105.4" y="979.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.43%)</title><rect x="105.4" y="963.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.43%)</title><rect x="105.4" y="947.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.43%)</title><rect x="105.4" y="931.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.43%)</title><rect x="105.4" y="915.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="108.4" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.43%)</title><rect x="105.4" y="899.0" width="5.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="108.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.43%)</title><rect x="110.4" y="1075.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.43%)</title><rect x="110.4" y="1059.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.43%)</title><rect x="110.4" y="1043.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.43%)</title><rect x="110.4" y="1027.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.43%)</title><rect x="110.4" y="1011.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.43%)</title><rect x="110.4" y="995.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.43%)</title><rect x="110.4" y="979.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="113.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.43%)</title><rect x="110.4" y="963.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.43%)</title><rect x="110.4" y="947.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.43%)</title><rect x="110.4" y="931.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type.isArray (1 samples, 0.43%)</title><rect x="110.4" y="915.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.arrayElementType (1 samples, 0.43%)</title><rect x="110.4" y="899.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.4" y="910.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.43%)</title><rect x="110.4" y="883.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.4" y="894.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.43%)</title><rect x="110.4" y="867.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.4" y="878.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.43%)</title><rect x="110.4" y="851.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.43%)</title><rect x="115.4" y="1075.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.43%)</title><rect x="120.5" y="1091.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.43%)</title><rect x="120.5" y="1075.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (155 samples, 65.96%)</title><rect x="125.5" y="1139.0" width="778.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.5" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (155 samples, 65.96%)</title><rect x="125.5" y="1123.0" width="778.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.5" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (155 samples, 65.96%)</title><rect x="125.5" y="1107.0" width="778.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.5" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1726595460.run (146 samples, 62.13%)</title><rect x="125.5" y="1091.0" width="733.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.5" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1726595460.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (146 samples, 62.13%)</title><rect x="125.5" y="1075.0" width="733.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="128.5" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (146 samples, 62.13%)</title><rect x="125.5" y="1059.0" width="733.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.5" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (142 samples, 60.43%)</title><rect x="125.5" y="1043.0" width="713.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.5" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (35 samples, 14.89%)</title><rect x="140.6" y="1027.0" width="175.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.6" y="1038.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (35 samples, 14.89%)</title><rect x="140.6" y="1011.0" width="175.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.6" y="1022.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (35 samples, 14.89%)</title><rect x="140.6" y="995.0" width="175.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="143.6" y="1006.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 14.89%)</title><rect x="140.6" y="979.0" width="175.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.6" y="990.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 14.89%)</title><rect x="140.6" y="963.0" width="175.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.6" y="974.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (35 samples, 14.89%)</title><rect x="140.6" y="947.0" width="175.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.6" y="958.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 4.26%)</title><rect x="140.6" y="931.0" width="50.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.6" y="942.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.43%)</title><rect x="155.6" y="915.0" width="5.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="158.6" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="155.6" y="899.0" width="5.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="158.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.70%)</title><rect x="160.6" y="915.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.70%)</title><rect x="160.6" y="899.0" width="20.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.70%)</title><rect x="160.6" y="883.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.70%)</title><rect x="160.6" y="867.0" width="20.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.70%)</title><rect x="160.6" y="851.0" width="20.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.70%)</title><rect x="160.6" y="835.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.85%)</title><rect x="180.7" y="915.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 10.21%)</title><rect x="190.8" y="931.0" width="120.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.8" y="942.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.43%)</title><rect x="190.8" y="915.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.85%)</title><rect x="195.8" y="915.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.43%)</title><rect x="200.8" y="899.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.85%)</title><rect x="205.8" y="915.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.85%)</title><rect x="205.8" y="899.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.85%)</title><rect x="205.8" y="883.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.85%)</title><rect x="205.8" y="867.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.43%)</title><rect x="210.9" y="851.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="213.9" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.43%)</title><rect x="210.9" y="835.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="213.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.43%)</title><rect x="210.9" y="819.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="213.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.43%)</title><rect x="210.9" y="803.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="213.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.43%)</title><rect x="210.9" y="787.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="213.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.43%)</title><rect x="210.9" y="771.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="213.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.70%)</title><rect x="215.9" y="915.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.85%)</title><rect x="225.9" y="899.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 6.38%)</title><rect x="236.0" y="915.0" width="75.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.0" y="926.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.70%)</title><rect x="241.0" y="899.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.43%)</title><rect x="241.0" y="883.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.43%)</title><rect x="241.0" y="867.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.43%)</title><rect x="241.0" y="851.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.43%)</title><rect x="241.0" y="835.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.43%)</title><rect x="241.0" y="819.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.28%)</title><rect x="246.0" y="883.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 1.28%)</title><rect x="246.0" y="867.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 1.28%)</title><rect x="246.0" y="851.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.85%)</title><rect x="251.0" y="835.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.85%)</title><rect x="251.0" y="819.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 4.26%)</title><rect x="261.1" y="899.0" width="50.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.1" y="910.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 4.26%)</title><rect x="261.1" y="883.0" width="50.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.1" y="894.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 4.26%)</title><rect x="261.1" y="867.0" width="50.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.1" y="878.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.85%)</title><rect x="266.1" y="851.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.43%)</title><rect x="266.1" y="835.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.43%)</title><rect x="271.1" y="835.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.43%)</title><rect x="271.1" y="819.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.43%)</title><rect x="271.1" y="803.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.43%)</title><rect x="271.1" y="787.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.70%)</title><rect x="276.1" y="851.0" width="20.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.28%)</title><rect x="281.1" y="835.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.28%)</title><rect x="281.1" y="819.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.28%)</title><rect x="281.1" y="803.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.28%)</title><rect x="281.1" y="787.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.85%)</title><rect x="296.2" y="851.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.85%)</title><rect x="296.2" y="835.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.85%)</title><rect x="296.2" y="819.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.85%)</title><rect x="296.2" y="803.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.2" y="814.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.85%)</title><rect x="296.2" y="787.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.2" y="798.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.85%)</title><rect x="296.2" y="771.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.43%)</title><rect x="306.3" y="851.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.43%)</title><rect x="306.3" y="835.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.43%)</title><rect x="311.3" y="931.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.43%)</title><rect x="311.3" y="915.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.43%)</title><rect x="311.3" y="899.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.43%)</title><rect x="311.3" y="883.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.43%)</title><rect x="311.3" y="867.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (100 samples, 42.55%)</title><rect x="316.3" y="1027.0" width="502.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.3" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (19 samples, 8.09%)</title><rect x="316.3" y="1011.0" width="95.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.3" y="1022.0">com/linecor..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 8.09%)</title><rect x="316.3" y="995.0" width="95.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.3" y="1006.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 6.81%)</title><rect x="331.4" y="979.0" width="80.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.4" y="990.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.43%)</title><rect x="331.4" y="963.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.43%)</title><rect x="331.4" y="947.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.43%)</title><rect x="331.4" y="931.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.43%)</title><rect x="331.4" y="915.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.43%)</title><rect x="336.4" y="963.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.43%)</title><rect x="336.4" y="947.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.43%)</title><rect x="336.4" y="931.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.43%)</title><rect x="336.4" y="915.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 5.96%)</title><rect x="341.4" y="963.0" width="70.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.4" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.98%)</title><rect x="376.6" y="947.0" width="35.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.6" y="958.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.98%)</title><rect x="376.6" y="931.0" width="35.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.6" y="942.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.43%)</title><rect x="401.7" y="915.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.7" y="926.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.43%)</title><rect x="406.7" y="915.0" width="5.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="409.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.43%)</title><rect x="411.7" y="1011.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.43%)</title><rect x="411.7" y="995.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.43%)</title><rect x="411.7" y="979.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (23 samples, 9.79%)</title><rect x="416.7" y="1011.0" width="115.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.7" y="1022.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.85%)</title><rect x="416.7" y="995.0" width="10.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="419.7" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.85%)</title><rect x="416.7" y="979.0" width="10.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="419.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 8.94%)</title><rect x="426.8" y="995.0" width="105.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.8" y="1006.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 4.26%)</title><rect x="436.8" y="979.0" width="50.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="439.8" y="990.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 4.26%)</title><rect x="436.8" y="963.0" width="50.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.8" y="974.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 4.26%)</title><rect x="436.8" y="947.0" width="50.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.8" y="958.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 2.98%)</title><rect x="436.8" y="931.0" width="35.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.8" y="942.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 2.98%)</title><rect x="436.8" y="915.0" width="35.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.8" y="926.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 2.98%)</title><rect x="436.8" y="899.0" width="35.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="439.8" y="910.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 2.13%)</title><rect x="446.9" y="883.0" width="25.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="449.9" y="894.0">O..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 1.28%)</title><rect x="446.9" y="867.0" width="15.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="449.9" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.43%)</title><rect x="446.9" y="851.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="449.9" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.85%)</title><rect x="451.9" y="851.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="454.9" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.85%)</title><rect x="451.9" y="835.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="454.9" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.43%)</title><rect x="451.9" y="819.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="454.9" y="830.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.43%)</title><rect x="456.9" y="819.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="459.9" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.85%)</title><rect x="461.9" y="867.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="464.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.43%)</title><rect x="461.9" y="851.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="464.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.43%)</title><rect x="461.9" y="835.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="464.9" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.43%)</title><rect x="466.9" y="851.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="469.9" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 1.28%)</title><rect x="472.0" y="931.0" width="15.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.0" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.85%)</title><rect x="477.0" y="915.0" width="10.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="480.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.43%)</title><rect x="487.0" y="979.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.43%)</title><rect x="487.0" y="963.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.43%)</title><rect x="487.0" y="947.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.0" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.43%)</title><rect x="492.0" y="979.0" width="5.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="495.0" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.43%)</title><rect x="497.1" y="979.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="500.1" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.55%)</title><rect x="502.1" y="979.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.1" y="990.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.55%)</title><rect x="502.1" y="963.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.1" y="974.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.55%)</title><rect x="502.1" y="947.0" width="30.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.1" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.55%)</title><rect x="502.1" y="931.0" width="30.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.1" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.70%)</title><rect x="512.1" y="915.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.43%)</title><rect x="527.2" y="899.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 21.28%)</title><rect x="532.2" y="1011.0" width="251.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.2" y="1022.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (50 samples, 21.28%)</title><rect x="532.2" y="995.0" width="251.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.2" y="1006.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1066778873.process (45 samples, 19.15%)</title><rect x="532.2" y="979.0" width="226.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.2" y="990.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (45 samples, 19.15%)</title><rect x="532.2" y="963.0" width="226.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="535.2" y="974.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (44 samples, 18.72%)</title><rect x="532.2" y="947.0" width="220.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.2" y="958.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (44 samples, 18.72%)</title><rect x="532.2" y="931.0" width="220.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.2" y="942.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (42 samples, 17.87%)</title><rect x="537.2" y="915.0" width="210.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.2" y="926.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 14.89%)</title><rect x="572.4" y="899.0" width="175.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="575.4" y="910.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.43%)</title><rect x="612.6" y="883.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.6" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.28%)</title><rect x="617.6" y="883.0" width="15.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="620.6" y="894.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.85%)</title><rect x="622.6" y="867.0" width="10.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="625.6" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.43%)</title><rect x="632.6" y="883.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="635.6" y="894.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (22 samples, 9.36%)</title><rect x="637.7" y="883.0" width="110.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="640.7" y="894.0">os::sleep(Thr..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.28%)</title><rect x="652.7" y="867.0" width="15.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="655.7" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 5.11%)</title><rect x="667.8" y="867.0" width="60.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="670.8" y="878.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.43%)</title><rect x="728.0" y="867.0" width="5.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="731.0" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.43%)</title><rect x="733.1" y="867.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="736.1" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.43%)</title><rect x="738.1" y="867.0" width="5.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="741.1" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.43%)</title><rect x="743.1" y="867.0" width="5.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="746.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.43%)</title><rect x="748.1" y="915.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="751.1" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.43%)</title><rect x="748.1" y="899.0" width="5.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="751.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.43%)</title><rect x="753.1" y="947.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.1" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.43%)</title><rect x="758.2" y="979.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.2" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.43%)</title><rect x="758.2" y="963.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/289512438.get$Lambda (1 samples, 0.43%)</title><rect x="758.2" y="947.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/289512438.&lt;init&gt; (1 samples, 0.43%)</title><rect x="758.2" y="931.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.2" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.85%)</title><rect x="763.2" y="979.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="766.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.43%)</title><rect x="768.2" y="963.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.2" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.43%)</title><rect x="768.2" y="947.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="771.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.43%)</title><rect x="773.2" y="979.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.43%)</title><rect x="773.2" y="963.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="776.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.43%)</title><rect x="778.3" y="979.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.98%)</title><rect x="783.3" y="1011.0" width="35.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.3" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.43%)</title><rect x="813.4" y="995.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="816.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.70%)</title><rect x="818.4" y="1027.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.28%)</title><rect x="823.4" y="1011.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.28%)</title><rect x="823.4" y="995.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1567728838.accept (3 samples, 1.28%)</title><rect x="823.4" y="979.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (3 samples, 1.28%)</title><rect x="823.4" y="963.0" width="15.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/186000008.complete (3 samples, 1.28%)</title><rect x="823.4" y="947.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (3 samples, 1.28%)</title><rect x="823.4" y="931.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 1.28%)</title><rect x="823.4" y="915.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.4" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.28%)</title><rect x="823.4" y="899.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 1.28%)</title><rect x="823.4" y="883.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="826.4" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.28%)</title><rect x="823.4" y="867.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.4" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 1.28%)</title><rect x="823.4" y="851.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.70%)</title><rect x="838.5" y="1043.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="841.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.43%)</title><rect x="858.6" y="1091.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="861.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.43%)</title><rect x="858.6" y="1075.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="861.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.43%)</title><rect x="858.6" y="1059.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.43%)</title><rect x="858.6" y="1043.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 3.40%)</title><rect x="863.6" y="1091.0" width="40.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="866.6" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.98%)</title><rect x="868.6" y="1075.0" width="35.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="871.6" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.85%)</title><rect x="868.6" y="1059.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.85%)</title><rect x="868.6" y="1043.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.85%)</title><rect x="868.6" y="1027.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="871.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.85%)</title><rect x="868.6" y="1011.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.85%)</title><rect x="868.6" y="995.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.43%)</title><rect x="878.7" y="1059.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="881.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.43%)</title><rect x="878.7" y="1043.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="881.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.43%)</title><rect x="878.7" y="1027.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="881.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.70%)</title><rect x="883.7" y="1059.0" width="20.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="886.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.70%)</title><rect x="883.7" y="1043.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="886.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.70%)</title><rect x="883.7" y="1027.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="886.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.70%)</title><rect x="883.7" y="1011.0" width="20.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="886.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.85%)</title><rect x="903.8" y="1139.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="906.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.43%)</title><rect x="908.8" y="1123.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="911.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.43%)</title><rect x="908.8" y="1107.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="911.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.43%)</title><rect x="908.8" y="1091.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="911.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.43%)</title><rect x="908.8" y="1075.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.8" y="1086.0"></text>
</g>
<g>
<title>start_thread (55 samples, 23.40%)</title><rect x="913.8" y="1139.0" width="276.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="916.8" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (55 samples, 23.40%)</title><rect x="913.8" y="1123.0" width="276.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="916.8" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 4.68%)</title><rect x="913.8" y="1107.0" width="55.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="916.8" y="1118.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 4.68%)</title><rect x="913.8" y="1091.0" width="55.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.8" y="1102.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 4.26%)</title><rect x="913.8" y="1075.0" width="50.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.8" y="1086.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.43%)</title><rect x="913.8" y="1059.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.8" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 3.83%)</title><rect x="918.9" y="1059.0" width="45.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.9" y="1070.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.43%)</title><rect x="928.9" y="1043.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.9" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.13%)</title><rect x="933.9" y="1043.0" width="25.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.9" y="1054.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.85%)</title><rect x="944.0" y="1027.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="947.0" y="1038.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.43%)</title><rect x="949.0" y="1011.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.0" y="1022.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.43%)</title><rect x="954.0" y="1027.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="957.0" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.43%)</title><rect x="959.0" y="1043.0" width="5.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="962.0" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.43%)</title><rect x="964.0" y="1075.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.0" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.43%)</title><rect x="964.0" y="1059.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.0" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.43%)</title><rect x="964.0" y="1043.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.0" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.43%)</title><rect x="964.0" y="1027.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="967.0" y="1038.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.43%)</title><rect x="964.0" y="1011.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.0" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.43%)</title><rect x="964.0" y="995.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.0" y="1006.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.43%)</title><rect x="964.0" y="979.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.0" y="990.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.43%)</title><rect x="964.0" y="963.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.0" y="974.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.43%)</title><rect x="964.0" y="947.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.0" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (44 samples, 18.72%)</title><rect x="969.1" y="1107.0" width="220.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.1" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (44 samples, 18.72%)</title><rect x="969.1" y="1091.0" width="220.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="972.1" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (44 samples, 18.72%)</title><rect x="969.1" y="1075.0" width="220.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.1" y="1086.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (44 samples, 18.72%)</title><rect x="969.1" y="1059.0" width="220.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.1" y="1070.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (41 samples, 17.45%)</title><rect x="969.1" y="1043.0" width="205.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.1" y="1054.0">C2Compiler::compile_method(..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (41 samples, 17.45%)</title><rect x="969.1" y="1027.0" width="205.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.1" y="1038.0">Compile::Compile(ciEnv*, C2..</text>
</g>
<g>
<title>Compile::Code_Gen() (23 samples, 9.79%)</title><rect x="969.1" y="1011.0" width="115.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.1" y="1022.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.85%)</title><rect x="969.1" y="995.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="972.1" y="1006.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.43%)</title><rect x="974.1" y="979.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="977.1" y="990.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.43%)</title><rect x="974.1" y="963.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="977.1" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.85%)</title><rect x="979.1" y="995.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.43%)</title><rect x="979.1" y="979.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.1" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.43%)</title><rect x="984.1" y="979.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.1" y="990.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.43%)</title><rect x="984.1" y="963.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.1" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.43%)</title><rect x="989.1" y="995.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.43%)</title><rect x="989.1" y="979.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.43%)</title><rect x="989.1" y="963.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (17 samples, 7.23%)</title><rect x="994.2" y="995.0" width="85.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="997.2" y="1006.0">PhaseChait..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.43%)</title><rect x="994.2" y="979.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.43%)</title><rect x="999.2" y="979.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="999.2" y="963.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1002.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.85%)</title><rect x="1004.2" y="979.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.43%)</title><rect x="1009.2" y="963.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="1009.2" y="947.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.43%)</title><rect x="1014.3" y="979.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1017.3" y="990.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.43%)</title><rect x="1014.3" y="963.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.70%)</title><rect x="1019.3" y="979.0" width="20.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.85%)</title><rect x="1039.4" y="979.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.4" y="990.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.43%)</title><rect x="1044.4" y="963.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.85%)</title><rect x="1049.4" y="979.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1052.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.85%)</title><rect x="1049.4" y="963.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.4" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.43%)</title><rect x="1059.4" y="979.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.4" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="1059.4" y="963.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.4" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.43%)</title><rect x="1064.5" y="979.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.5" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.85%)</title><rect x="1069.5" y="979.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.43%)</title><rect x="1079.5" y="995.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.5" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 4.26%)</title><rect x="1084.6" y="1011.0" width="50.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.6" y="1022.0">Compi..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.43%)</title><rect x="1084.6" y="995.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.43%)</title><rect x="1084.6" y="979.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.43%)</title><rect x="1084.6" y="963.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 2.98%)</title><rect x="1089.6" y="995.0" width="35.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="1006.0">Pha..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.43%)</title><rect x="1089.6" y="979.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.43%)</title><rect x="1094.6" y="979.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.6" y="990.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.43%)</title><rect x="1094.6" y="963.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.43%)</title><rect x="1099.6" y="979.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.43%)</title><rect x="1099.6" y="963.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.28%)</title><rect x="1104.6" y="979.0" width="15.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.85%)</title><rect x="1109.7" y="963.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.43%)</title><rect x="1109.7" y="947.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.43%)</title><rect x="1114.7" y="947.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="958.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.43%)</title><rect x="1114.7" y="931.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="942.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.43%)</title><rect x="1114.7" y="915.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.43%)</title><rect x="1119.7" y="979.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.43%)</title><rect x="1119.7" y="963.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.43%)</title><rect x="1119.7" y="947.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.7" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.43%)</title><rect x="1124.7" y="995.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.43%)</title><rect x="1124.7" y="979.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.7" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1124.7" y="963.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.7" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.43%)</title><rect x="1124.7" y="947.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.7" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.43%)</title><rect x="1129.7" y="995.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.7" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.43%)</title><rect x="1129.7" y="979.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.7" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_slow_call(CallNode*, TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*) (1 samples, 0.43%)</title><rect x="1129.7" y="963.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.43%)</title><rect x="1129.7" y="947.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.7" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.43%)</title><rect x="1129.7" y="931.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.13%)</title><rect x="1134.8" y="1011.0" width="25.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.8" y="1022.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.13%)</title><rect x="1134.8" y="995.0" width="25.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.8" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.13%)</title><rect x="1134.8" y="979.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.8" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.13%)</title><rect x="1134.8" y="963.0" width="25.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.8" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.13%)</title><rect x="1134.8" y="947.0" width="25.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.8" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.70%)</title><rect x="1134.8" y="931.0" width="20.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.8" y="942.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1134.8" y="915.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.8" y="926.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.43%)</title><rect x="1134.8" y="899.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.8" y="910.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1134.8" y="883.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.8" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.43%)</title><rect x="1134.8" y="867.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.8" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.43%)</title><rect x="1134.8" y="851.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.28%)</title><rect x="1139.8" y="915.0" width="15.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.28%)</title><rect x="1139.8" y="899.0" width="15.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.28%)</title><rect x="1139.8" y="883.0" width="15.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.28%)</title><rect x="1139.8" y="867.0" width="15.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.28%)</title><rect x="1139.8" y="851.0" width="15.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1139.8" y="835.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1139.8" y="819.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1139.8" y="803.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1139.8" y="787.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1139.8" y="771.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1139.8" y="755.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1139.8" y="739.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1139.8" y="723.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1139.8" y="707.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1139.8" y="691.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1139.8" y="675.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1139.8" y="659.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1139.8" y="643.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1139.8" y="627.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1139.8" y="611.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1139.8" y="595.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1139.8" y="579.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1139.8" y="563.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1139.8" y="547.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1139.8" y="531.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1139.8" y="515.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1139.8" y="499.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1139.8" y="483.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1139.8" y="467.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1139.8" y="451.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1139.8" y="435.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1139.8" y="419.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1139.8" y="403.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1139.8" y="387.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1139.8" y="371.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.85%)</title><rect x="1139.8" y="355.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.85%)</title><rect x="1139.8" y="339.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.85%)</title><rect x="1139.8" y="323.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.85%)</title><rect x="1139.8" y="307.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.85%)</title><rect x="1139.8" y="291.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.85%)</title><rect x="1139.8" y="275.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1139.8" y="259.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1139.8" y="243.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1139.8" y="227.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1139.8" y="211.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1139.8" y="195.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1139.8" y="179.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.43%)</title><rect x="1139.8" y="163.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="174.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.43%)</title><rect x="1139.8" y="147.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1144.8" y="259.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.43%)</title><rect x="1144.8" y="243.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="254.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.43%)</title><rect x="1144.8" y="227.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.8" y="238.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.43%)</title><rect x="1144.8" y="211.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.8" y="222.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.43%)</title><rect x="1144.8" y="195.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.8" y="206.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.43%)</title><rect x="1144.8" y="179.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.43%)</title><rect x="1144.8" y="163.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.8" y="174.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1144.8" y="147.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.8" y="158.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1144.8" y="131.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="142.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.43%)</title><rect x="1144.8" y="115.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.8" y="126.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.43%)</title><rect x="1144.8" y="99.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.43%)</title><rect x="1144.8" y="83.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.8" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.43%)</title><rect x="1144.8" y="67.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.43%)</title><rect x="1144.8" y="51.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.8" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.43%)</title><rect x="1144.8" y="35.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1147.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1149.8" y="835.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.8" y="846.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.43%)</title><rect x="1149.8" y="819.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.43%)</title><rect x="1154.9" y="931.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.9" y="942.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.43%)</title><rect x="1154.9" y="915.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="926.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.43%)</title><rect x="1154.9" y="899.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="910.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.43%)</title><rect x="1154.9" y="883.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.9" y="894.0"></text>
</g>
<g>
<title>PhasePeephole::PhasePeephole(PhaseRegAlloc*, PhaseCFG&amp;) (1 samples, 0.43%)</title><rect x="1159.9" y="1011.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="1022.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.85%)</title><rect x="1164.9" y="1011.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="1022.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.85%)</title><rect x="1164.9" y="995.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.9" y="1006.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.43%)</title><rect x="1164.9" y="979.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="990.0"></text>
</g>
<g>
<title>ImplicitExceptionTable::copy_to(nmethod*) (1 samples, 0.43%)</title><rect x="1169.9" y="979.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.28%)</title><rect x="1174.9" y="1043.0" width="15.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.28%)</title><rect x="1174.9" y="1027.0" width="15.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.28%)</title><rect x="1174.9" y="1011.0" width="15.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.85%)</title><rect x="1174.9" y="995.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.85%)</title><rect x="1174.9" y="979.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.85%)</title><rect x="1174.9" y="963.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.85%)</title><rect x="1174.9" y="947.0" width="10.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.85%)</title><rect x="1174.9" y="931.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.85%)</title><rect x="1174.9" y="915.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.85%)</title><rect x="1174.9" y="899.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.85%)</title><rect x="1174.9" y="883.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.85%)</title><rect x="1174.9" y="867.0" width="10.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.85%)</title><rect x="1174.9" y="851.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.43%)</title><rect x="1174.9" y="835.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.43%)</title><rect x="1174.9" y="819.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.43%)</title><rect x="1174.9" y="803.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.43%)</title><rect x="1174.9" y="787.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.43%)</title><rect x="1174.9" y="771.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="782.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.43%)</title><rect x="1174.9" y="755.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.43%)</title><rect x="1174.9" y="739.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>BranchData::cell_count() const (1 samples, 0.43%)</title><rect x="1174.9" y="723.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.43%)</title><rect x="1180.0" y="835.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.43%)</title><rect x="1180.0" y="819.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.43%)</title><rect x="1180.0" y="803.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="814.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.43%)</title><rect x="1180.0" y="787.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="798.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.43%)</title><rect x="1180.0" y="771.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="782.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.43%)</title><rect x="1185.0" y="995.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.0" y="1006.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.43%)</title><rect x="1185.0" y="979.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.0" y="990.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.43%)</title><rect x="1185.0" y="963.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="974.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.43%)</title><rect x="1185.0" y="947.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="958.0"></text>
</g>
<g>
<title>nmethod::copy_values(GrowableArray&lt;Metadata*&gt;*) (1 samples, 0.43%)</title><rect x="1185.0" y="931.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="942.0"></text>
</g>
</g>
</svg>
