<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (1,256 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (257 samples, 20.46%)</title><rect x="10.9" y="1171.0" width="241.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1182.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (256 samples, 20.38%)</title><rect x="10.9" y="1155.0" width="240.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1166.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.24%)</title><rect x="10.9" y="1139.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.16%)</title><rect x="11.9" y="1123.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1868016132.accept (2 samples, 0.16%)</title><rect x="11.9" y="1107.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.16%)</title><rect x="11.9" y="1091.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.16%)</title><rect x="11.9" y="1075.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.9" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.16%)</title><rect x="11.9" y="1059.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.32%)</title><rect x="13.8" y="1139.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.32%)</title><rect x="13.8" y="1123.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.32%)</title><rect x="13.8" y="1107.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.32%)</title><rect x="13.8" y="1091.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.32%)</title><rect x="13.8" y="1075.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="13.8" y="1059.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.24%)</title><rect x="13.8" y="1043.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="13.8" y="1027.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="13.8" y="1011.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="13.8" y="995.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/1902741375.test (2 samples, 0.16%)</title><rect x="13.8" y="979.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.8" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="15.6" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="16.6" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="16.6" y="1043.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="1054.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="16.6" y="1027.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="19.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="17.5" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="17.5" y="1123.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (192 samples, 15.29%)</title><rect x="18.5" y="1139.0" width="180.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.5" y="1150.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/35877640.accept (184 samples, 14.65%)</title><rect x="18.5" y="1123.0" width="172.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.5" y="1134.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (184 samples, 14.65%)</title><rect x="18.5" y="1107.0" width="172.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="1118.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (147 samples, 11.70%)</title><rect x="18.5" y="1091.0" width="138.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.5" y="1102.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (147 samples, 11.70%)</title><rect x="18.5" y="1075.0" width="138.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.5" y="1086.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (147 samples, 11.70%)</title><rect x="18.5" y="1059.0" width="138.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.5" y="1070.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (147 samples, 11.70%)</title><rect x="18.5" y="1043.0" width="138.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.5" y="1054.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (147 samples, 11.70%)</title><rect x="18.5" y="1027.0" width="138.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="1038.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (147 samples, 11.70%)</title><rect x="18.5" y="1011.0" width="138.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.5" y="1022.0">java/util/concurr..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="55.1" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 8.36%)</title><rect x="56.0" y="995.0" width="98.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.0" y="1006.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.67%)</title><rect x="56.0" y="979.0" width="19.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.67%)</title><rect x="56.0" y="963.0" width="19.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 1.67%)</title><rect x="56.0" y="947.0" width="19.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.48%)</title><rect x="75.8" y="979.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.48%)</title><rect x="75.8" y="963.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="78.6" y="947.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.6" y="958.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="79.5" y="931.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="82.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="80.5" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 6.21%)</title><rect x="81.4" y="979.0" width="73.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.4" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 6.21%)</title><rect x="81.4" y="963.0" width="73.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.4" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 6.21%)</title><rect x="81.4" y="947.0" width="73.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.4" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 6.21%)</title><rect x="81.4" y="931.0" width="73.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.4" y="942.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 6.21%)</title><rect x="81.4" y="915.0" width="73.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.4" y="926.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="82.3" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="85.3" y="910.0"></text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 5.49%)</title><rect x="83.3" y="899.0" width="64.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="86.3" y="910.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="84.2" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="87.2" y="894.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="85.2" y="883.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="88.2" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 3.74%)</title><rect x="87.0" y="883.0" width="44.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="90.0" y="894.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.32%)</title><rect x="131.2" y="883.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="134.2" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.11%)</title><rect x="135.0" y="883.0" width="13.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="138.0" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.24%)</title><rect x="148.1" y="899.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="151.1" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="150.9" y="899.0" width="2.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="153.9" y="910.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="153.7" y="899.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="156.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="154.7" y="995.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="154.7" y="979.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="154.7" y="963.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.7" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="155.6" y="995.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="158.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.40%)</title><rect x="156.6" y="1091.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.40%)</title><rect x="156.6" y="1075.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.24%)</title><rect x="161.3" y="1091.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="161.3" y="1075.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="161.3" y="1059.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (29 samples, 2.31%)</title><rect x="164.1" y="1091.0" width="27.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.1" y="1102.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.31%)</title><rect x="164.1" y="1075.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.1" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (14 samples, 1.11%)</title><rect x="176.3" y="1059.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.64%)</title><rect x="176.3" y="1043.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.64%)</title><rect x="176.3" y="1027.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.64%)</title><rect x="176.3" y="1011.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.3" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="181.9" y="995.0" width="1.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="184.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="183.8" y="1043.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="185.7" y="1043.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.7" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="189.4" y="1059.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="192.4" y="1070.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="191.3" y="1123.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="194.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="193.2" y="1123.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.2" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="193.2" y="1107.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="193.2" y="1091.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="193.2" y="1075.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="193.2" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.40%)</title><rect x="194.1" y="1123.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.40%)</title><rect x="194.1" y="1107.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.40%)</title><rect x="194.1" y="1091.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.40%)</title><rect x="194.1" y="1075.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.1" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.32%)</title><rect x="195.1" y="1059.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.46%)</title><rect x="198.8" y="1139.0" width="52.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.8" y="1150.0">org/a..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="198.8" y="1123.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="201.8" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="198.8" y="1107.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="201.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.38%)</title><rect x="199.8" y="1123.0" width="51.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.8" y="1134.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.47%)</title><rect x="202.6" y="1107.0" width="29.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.6" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.16%)</title><rect x="202.6" y="1091.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.6" y="1102.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="202.6" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="205.6" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="202.6" y="1059.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="205.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="203.5" y="1075.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.5" y="1086.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="203.5" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="206.5" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="203.5" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="206.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="204.5" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="204.5" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="204.5" y="1059.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.08%)</title><rect x="204.5" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (28 samples, 2.23%)</title><rect x="205.4" y="1091.0" width="26.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.4" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 2.15%)</title><rect x="205.4" y="1075.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.4" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 1.99%)</title><rect x="205.4" y="1059.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.4" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 1.99%)</title><rect x="205.4" y="1043.0" width="23.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.4" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 0.88%)</title><rect x="207.3" y="1027.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.48%)</title><rect x="212.0" y="1011.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.48%)</title><rect x="212.0" y="995.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.48%)</title><rect x="212.0" y="979.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.48%)</title><rect x="212.0" y="963.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.48%)</title><rect x="212.0" y="947.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.48%)</title><rect x="212.0" y="931.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.48%)</title><rect x="212.0" y="915.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.96%)</title><rect x="217.6" y="1027.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.96%)</title><rect x="217.6" y="1011.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (9 samples, 0.72%)</title><rect x="217.6" y="995.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.of (9 samples, 0.72%)</title><rect x="217.6" y="979.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.24%)</title><rect x="226.1" y="995.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.1" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.24%)</title><rect x="226.1" y="979.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="228.9" y="1059.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="228.9" y="1043.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="228.9" y="1027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="228.9" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="229.8" y="1059.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="229.8" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="229.8" y="1027.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="229.8" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="229.8" y="995.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="232.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="229.8" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="230.8" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.72%)</title><rect x="231.7" y="1107.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.72%)</title><rect x="231.7" y="1091.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.64%)</title><rect x="231.7" y="1075.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.24%)</title><rect x="231.7" y="1059.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="231.7" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/488084351.accept (2 samples, 0.16%)</title><rect x="232.7" y="1043.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="233.6" y="1027.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="234.5" y="1059.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="234.5" y="1043.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="234.5" y="1027.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="234.5" y="1011.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="234.5" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="234.5" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="234.5" y="963.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="235.5" y="1059.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="235.5" y="1043.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.5" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="236.4" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="236.4" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.4" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="236.4" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.4" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="236.4" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.16%)</title><rect x="237.4" y="1059.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.16%)</title><rect x="237.4" y="1043.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="237.4" y="1027.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="237.4" y="1011.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="237.4" y="995.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="237.4" y="979.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="237.4" y="963.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.4" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="237.4" y="947.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.4" y="958.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="237.4" y="931.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.4" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="237.4" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.4" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="237.4" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.4" y="910.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="237.4" y="883.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="237.4" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="238.3" y="947.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="238.3" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="238.3" y="915.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="238.3" y="899.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.3" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/2136288211.get (1 samples, 0.08%)</title><rect x="238.3" y="883.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="239.2" y="1075.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="239.2" y="1059.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="239.2" y="1043.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="239.2" y="1027.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="239.2" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="239.2" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="239.2" y="979.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="239.2" y="963.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.2" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="239.2" y="947.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.2" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="239.2" y="931.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.2" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="239.2" y="915.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="240.2" y="1107.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="240.2" y="1091.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="240.2" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.08%)</title><rect x="240.2" y="1059.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.56%)</title><rect x="241.1" y="1107.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.48%)</title><rect x="241.1" y="1091.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.16%)</title><rect x="241.1" y="1075.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.16%)</title><rect x="241.1" y="1059.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="241.1" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="241.1" y="1027.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.08%)</title><rect x="242.1" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.forId (1 samples, 0.08%)</title><rect x="242.1" y="1027.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.08%)</title><rect x="242.1" y="1011.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (1 samples, 0.08%)</title><rect x="242.1" y="995.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.32%)</title><rect x="243.0" y="1075.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="243.0" y="1059.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="243.0" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="243.0" y="1027.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="243.0" y="1011.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.24%)</title><rect x="243.9" y="1059.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="243.9" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="243.9" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.9" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="243.9" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="246.9" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="243.9" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="246.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="244.9" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="244.9" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="244.9" y="1011.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="244.9" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="244.9" y="979.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="244.9" y="963.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.9" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureWriteOpen (1 samples, 0.08%)</title><rect x="244.9" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="245.8" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="245.8" y="1027.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="245.8" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="245.8" y="995.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="245.8" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="245.8" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.8" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="245.8" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.08%)</title><rect x="245.8" y="931.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="246.8" y="1091.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="246.8" y="1075.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="246.8" y="1059.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="246.8" y="1043.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="246.8" y="1027.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="246.8" y="1011.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="246.8" y="995.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="246.8" y="979.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="246.8" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.write (1 samples, 0.08%)</title><rect x="246.8" y="947.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.8" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (1 samples, 0.08%)</title><rect x="246.8" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.24%)</title><rect x="247.7" y="1107.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.24%)</title><rect x="247.7" y="1091.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="247.7" y="1075.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/497085780.accept (1 samples, 0.08%)</title><rect x="247.7" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="247.7" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="247.7" y="1027.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="247.7" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="247.7" y="995.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="247.7" y="979.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.16%)</title><rect x="248.6" y="1075.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.16%)</title><rect x="248.6" y="1059.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="248.6" y="1043.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="248.6" y="1027.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="248.6" y="1011.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="248.6" y="995.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="248.6" y="979.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.6" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="248.6" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.6" y="974.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="248.6" y="947.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="248.6" y="931.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="248.6" y="915.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="248.6" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="248.6" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="248.6" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="249.6" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="249.6" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="249.6" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.6" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="249.6" y="915.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="252.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="250.5" y="1107.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.5" y="1091.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.5" y="1075.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.5" y="1059.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="250.5" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="251.4" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (685 samples, 54.54%)</title><rect x="252.4" y="1171.0" width="643.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.4" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (685 samples, 54.54%)</title><rect x="252.4" y="1155.0" width="643.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.4" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (685 samples, 54.54%)</title><rect x="252.4" y="1139.0" width="643.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.4" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1826420464.run (476 samples, 37.90%)</title><rect x="255.2" y="1123.0" width="447.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.2" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (476 samples, 37.90%)</title><rect x="255.2" y="1107.0" width="447.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.2" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (476 samples, 37.90%)</title><rect x="255.2" y="1091.0" width="447.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.2" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (468 samples, 37.26%)</title><rect x="255.2" y="1075.0" width="439.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.2" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="266.5" y="1059.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (159 samples, 12.66%)</title><rect x="268.4" y="1059.0" width="149.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.4" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (159 samples, 12.66%)</title><rect x="268.4" y="1043.0" width="149.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.4" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (159 samples, 12.66%)</title><rect x="268.4" y="1027.0" width="149.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.4" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="268.4" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="271.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (158 samples, 12.58%)</title><rect x="269.3" y="1011.0" width="148.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.3" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (158 samples, 12.58%)</title><rect x="269.3" y="995.0" width="148.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="272.3" y="1006.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (158 samples, 12.58%)</title><rect x="269.3" y="979.0" width="148.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.3" y="990.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (45 samples, 3.58%)</title><rect x="269.3" y="963.0" width="42.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.3" y="974.0">com/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="277.8" y="947.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="280.8" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.64%)</title><rect x="278.7" y="947.0" width="7.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="281.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.48%)</title><rect x="280.6" y="931.0" width="5.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="283.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.56%)</title><rect x="286.2" y="947.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.48%)</title><rect x="287.1" y="931.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.32%)</title><rect x="289.0" y="915.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.32%)</title><rect x="289.0" y="899.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.0" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.32%)</title><rect x="289.0" y="883.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.32%)</title><rect x="289.0" y="867.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.51%)</title><rect x="292.8" y="947.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (17 samples, 1.35%)</title><rect x="292.8" y="931.0" width="16.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="296.5" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="299.5" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="296.5" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="299.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="296.5" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="299.5" y="894.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="296.5" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="299.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.64%)</title><rect x="297.5" y="915.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="297.5" y="899.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="298.4" y="899.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="301.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="298.4" y="883.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="301.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="298.4" y="867.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="301.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="298.4" y="851.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="301.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.40%)</title><rect x="300.3" y="899.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.24%)</title><rect x="305.0" y="915.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.24%)</title><rect x="305.0" y="899.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.16%)</title><rect x="305.0" y="883.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="306.9" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="307.8" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="307.8" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="310.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.16%)</title><rect x="308.8" y="931.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.8" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="310.6" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="313.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (108 samples, 8.60%)</title><rect x="311.6" y="963.0" width="101.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.6" y="974.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="313.5" y="947.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.08%)</title><rect x="315.3" y="947.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.08%)</title><rect x="316.3" y="947.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.40%)</title><rect x="317.2" y="947.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.24%)</title><rect x="319.1" y="931.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.96%)</title><rect x="321.9" y="947.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="324.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.88%)</title><rect x="322.9" y="931.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.56%)</title><rect x="325.7" y="915.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.56%)</title><rect x="325.7" y="899.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="330.4" y="883.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="332.2" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="332.2" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.32%)</title><rect x="333.2" y="947.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.32%)</title><rect x="333.2" y="931.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (78 samples, 6.21%)</title><rect x="336.9" y="947.0" width="73.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.9" y="958.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.43%)</title><rect x="336.9" y="931.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.24%)</title><rect x="339.8" y="915.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.24%)</title><rect x="339.8" y="899.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="342.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.24%)</title><rect x="339.8" y="883.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.88%)</title><rect x="342.6" y="915.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="352.9" y="915.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="352.9" y="899.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="353.9" y="931.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (58 samples, 4.62%)</title><rect x="355.7" y="931.0" width="54.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.7" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (58 samples, 4.62%)</title><rect x="355.7" y="915.0" width="54.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.7" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (58 samples, 4.62%)</title><rect x="355.7" y="899.0" width="54.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.7" y="910.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.59%)</title><rect x="361.4" y="883.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.80%)</title><rect x="368.9" y="867.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.80%)</title><rect x="368.9" y="851.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.80%)</title><rect x="368.9" y="835.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="371.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.48%)</title><rect x="372.6" y="819.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="375.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.40%)</title><rect x="373.6" y="803.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="376.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.08%)</title><rect x="377.3" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.08%)</title><rect x="377.3" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="380.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.08%)</title><rect x="378.3" y="867.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="381.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="379.2" y="867.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.96%)</title><rect x="380.2" y="883.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.80%)</title><rect x="382.0" y="867.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.80%)</title><rect x="382.0" y="851.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.80%)</title><rect x="382.0" y="835.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.80%)</title><rect x="382.0" y="819.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.16%)</title><rect x="391.4" y="883.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.88%)</title><rect x="393.3" y="883.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.88%)</title><rect x="393.3" y="867.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.88%)</title><rect x="393.3" y="851.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.88%)</title><rect x="393.3" y="835.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.3" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.88%)</title><rect x="393.3" y="819.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="396.3" y="830.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (11 samples, 0.88%)</title><rect x="393.3" y="803.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.3" y="814.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (11 samples, 0.88%)</title><rect x="393.3" y="787.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.24%)</title><rect x="403.6" y="883.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="403.6" y="867.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="403.6" y="851.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="405.5" y="835.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.32%)</title><rect x="406.5" y="883.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.16%)</title><rect x="410.2" y="947.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.08%)</title><rect x="412.1" y="947.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.40%)</title><rect x="413.0" y="963.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.40%)</title><rect x="413.0" y="947.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.40%)</title><rect x="413.0" y="931.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.40%)</title><rect x="413.0" y="915.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.40%)</title><rect x="413.0" y="899.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (275 samples, 21.89%)</title><rect x="417.7" y="1059.0" width="258.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.7" y="1070.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.08%)</title><rect x="417.7" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="417.7" y="1027.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (56 samples, 4.46%)</title><rect x="418.7" y="1043.0" width="52.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="421.7" y="1054.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 4.46%)</title><rect x="418.7" y="1027.0" width="52.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="421.7" y="1038.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 4.38%)</title><rect x="419.6" y="1011.0" width="51.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="422.6" y="1022.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 0.96%)</title><rect x="419.6" y="995.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 0.96%)</title><rect x="419.6" y="979.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 0.96%)</title><rect x="419.6" y="963.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="422.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 0.96%)</title><rect x="419.6" y="947.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="430.9" y="995.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="433.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="430.9" y="979.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="430.9" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="430.9" y="947.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (42 samples, 3.34%)</title><rect x="431.8" y="995.0" width="39.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.8" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.11%)</title><rect x="458.1" y="979.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.24%)</title><rect x="458.1" y="963.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.1" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="459.1" y="947.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.88%)</title><rect x="461.0" y="963.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="469.4" y="947.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="472.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.64%)</title><rect x="471.3" y="1043.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.64%)</title><rect x="471.3" y="1027.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.64%)</title><rect x="471.3" y="1011.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (149 samples, 11.86%)</title><rect x="478.8" y="1043.0" width="140.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="481.8" y="1054.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (149 samples, 11.86%)</title><rect x="478.8" y="1027.0" width="140.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.8" y="1038.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.22%)</title><rect x="488.2" y="1011.0" width="49.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.2" y="1022.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (51 samples, 4.06%)</title><rect x="490.1" y="995.0" width="47.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.1" y="1006.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (41 samples, 3.26%)</title><rect x="493.8" y="979.0" width="38.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.8" y="990.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (28 samples, 2.23%)</title><rect x="502.3" y="963.0" width="26.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.3" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (28 samples, 2.23%)</title><rect x="502.3" y="947.0" width="26.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.3" y="958.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (28 samples, 2.23%)</title><rect x="502.3" y="931.0" width="26.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.3" y="942.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.80%)</title><rect x="512.6" y="915.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="515.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.32%)</title><rect x="512.6" y="899.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="515.6" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.32%)</title><rect x="512.6" y="883.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="515.6" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.32%)</title><rect x="512.6" y="867.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.6" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="512.6" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="515.6" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="512.6" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.6" y="846.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="513.6" y="851.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="516.6" y="862.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.16%)</title><rect x="514.5" y="851.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="517.5" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.48%)</title><rect x="516.4" y="899.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="519.4" y="910.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="516.4" y="883.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="519.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.40%)</title><rect x="517.3" y="883.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="520.3" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="518.3" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="521.3" y="878.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="519.2" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="522.2" y="878.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="520.1" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="523.1" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="521.1" y="867.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="524.1" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.56%)</title><rect x="522.0" y="915.0" width="6.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="525.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.24%)</title><rect x="528.6" y="963.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.6" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="531.4" y="963.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="534.4" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.48%)</title><rect x="532.4" y="979.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="535.4" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.32%)</title><rect x="538.0" y="1011.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.32%)</title><rect x="538.0" y="995.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="538.0" y="979.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.0" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="540.8" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="543.8" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="540.8" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="543.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="540.8" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="543.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="540.8" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="543.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="540.8" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="543.8" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="540.8" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="543.8" y="894.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="540.8" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="543.8" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="540.8" y="851.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="543.8" y="862.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.08%)</title><rect x="540.8" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="543.8" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.53%)</title><rect x="541.8" y="1011.0" width="77.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="544.8" y="1022.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (82 samples, 6.53%)</title><rect x="541.8" y="995.0" width="77.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.8" y="1006.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.40%)</title><rect x="541.8" y="979.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.40%)</title><rect x="541.8" y="963.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.40%)</title><rect x="541.8" y="947.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.40%)</title><rect x="541.8" y="931.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="544.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="546.4" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="546.4" y="963.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="549.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="546.4" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="549.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="546.4" y="931.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="549.4" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (76 samples, 6.05%)</title><rect x="547.4" y="979.0" width="71.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="550.4" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (71 samples, 5.65%)</title><rect x="552.1" y="963.0" width="66.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.1" y="974.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 2.95%)</title><rect x="584.0" y="947.0" width="34.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.0" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.48%)</title><rect x="598.1" y="931.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="601.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.88%)</title><rect x="603.8" y="931.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="606.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.24%)</title><rect x="611.3" y="915.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="614.3" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.24%)</title><rect x="611.3" y="899.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="614.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.24%)</title><rect x="611.3" y="883.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="614.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="612.2" y="867.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="615.2" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="612.2" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="612.2" y="835.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="615.2" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="612.2" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="615.2" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="612.2" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.2" y="814.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="613.2" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="616.2" y="862.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.40%)</title><rect x="614.1" y="931.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="617.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 4.14%)</title><rect x="618.8" y="1043.0" width="48.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="621.8" y="1054.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 4.14%)</title><rect x="618.8" y="1027.0" width="48.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.8" y="1038.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="621.6" y="1011.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="624.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="621.6" y="995.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="624.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="621.6" y="979.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="624.6" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="622.5" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.5" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="622.5" y="947.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="625.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/227827484.process (23 samples, 1.83%)</title><rect x="623.5" y="1011.0" width="21.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="626.5" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (23 samples, 1.83%)</title><rect x="623.5" y="995.0" width="21.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="626.5" y="1006.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.43%)</title><rect x="625.4" y="979.0" width="16.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="628.4" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="634.8" y="963.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="637.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="634.8" y="947.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.8" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="634.8" y="931.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.8" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="634.8" y="915.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.16%)</title><rect x="634.8" y="899.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="635.7" y="883.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.32%)</title><rect x="636.6" y="963.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="636.6" y="947.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="639.6" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="637.6" y="931.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="640.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="640.4" y="963.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.24%)</title><rect x="642.3" y="979.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="642.3" y="963.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.24%)</title><rect x="642.3" y="947.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.24%)</title><rect x="642.3" y="931.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="645.1" y="1011.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="645.1" y="995.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (11 samples, 0.88%)</title><rect x="646.0" y="1011.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (11 samples, 0.88%)</title><rect x="646.0" y="995.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1523122822.get$Lambda (11 samples, 0.88%)</title><rect x="646.0" y="979.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/1523122822.&lt;init&gt; (11 samples, 0.88%)</title><rect x="646.0" y="963.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="649.0" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="650.7" y="947.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="653.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="650.7" y="931.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="653.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="653.6" y="947.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="656.6" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="655.4" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="658.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="656.4" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="656.4" y="995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.4" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.08%)</title><rect x="656.4" y="979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.72%)</title><rect x="657.3" y="1011.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="660.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.64%)</title><rect x="658.2" y="995.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.2" y="1006.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.40%)</title><rect x="658.2" y="979.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="661.2" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.24%)</title><rect x="662.9" y="979.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="665.9" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="665.8" y="1011.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="668.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="666.7" y="995.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="669.7" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="666.7" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="669.7" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="666.7" y="963.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="669.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="666.7" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="669.7" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="666.7" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="669.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="666.7" y="915.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="669.7" y="926.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="666.7" y="899.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="669.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 0.32%)</title><rect x="667.6" y="1043.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (3 samples, 0.24%)</title><rect x="667.6" y="1027.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="670.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="667.6" y="1011.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="670.6" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="668.6" y="1011.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="671.6" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="668.6" y="995.0" width="1.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="671.6" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="670.5" y="1027.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.40%)</title><rect x="671.4" y="1043.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.40%)</title><rect x="671.4" y="1027.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.32%)</title><rect x="672.3" y="1011.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/963847638.accept (4 samples, 0.32%)</title><rect x="672.3" y="995.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="675.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (4 samples, 0.32%)</title><rect x="672.3" y="979.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="675.3" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.32%)</title><rect x="672.3" y="963.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="675.3" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 0.32%)</title><rect x="672.3" y="947.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.3" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.16%)</title><rect x="674.2" y="931.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="677.2" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.08%)</title><rect x="676.1" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="676.1" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="679.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/2087824540.get$Lambda (1 samples, 0.08%)</title><rect x="676.1" y="1027.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="679.1" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="676.1" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="679.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.11%)</title><rect x="677.0" y="1059.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.11%)</title><rect x="677.0" y="1043.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.04%)</title><rect x="678.0" y="1027.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="681.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/963847638.accept (1 samples, 0.08%)</title><rect x="678.0" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="681.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (1 samples, 0.08%)</title><rect x="678.0" y="995.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="681.0" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="678.0" y="979.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="681.0" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="678.0" y="963.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/2087824540.accept (12 samples, 0.96%)</title><rect x="678.9" y="1011.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="681.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (12 samples, 0.96%)</title><rect x="678.9" y="995.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="681.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/753115185.complete (12 samples, 0.96%)</title><rect x="678.9" y="979.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="681.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (12 samples, 0.96%)</title><rect x="678.9" y="963.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 0.96%)</title><rect x="678.9" y="947.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="681.9" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.96%)</title><rect x="678.9" y="931.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.9" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.96%)</title><rect x="678.9" y="915.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.9" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 0.96%)</title><rect x="678.9" y="899.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.9" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (12 samples, 0.96%)</title><rect x="678.9" y="883.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="681.9" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.40%)</title><rect x="690.2" y="1059.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="693.2" y="1070.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="690.2" y="1043.0" width="4.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="693.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 0.64%)</title><rect x="694.9" y="1075.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="695.8" y="1059.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="698.8" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="697.7" y="1059.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="700.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="697.7" y="1043.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="700.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="701.5" y="1059.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="704.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="702.4" y="1123.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.80%)</title><rect x="703.3" y="1123.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="706.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.80%)</title><rect x="703.3" y="1107.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.80%)</title><rect x="703.3" y="1091.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.80%)</title><rect x="703.3" y="1075.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (195 samples, 15.53%)</title><rect x="712.7" y="1123.0" width="183.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="715.7" y="1134.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (194 samples, 15.45%)</title><rect x="713.7" y="1107.0" width="182.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="716.7" y="1118.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (159 samples, 12.66%)</title><rect x="726.8" y="1091.0" width="149.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="729.8" y="1102.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.56%)</title><rect x="734.3" y="1075.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.56%)</title><rect x="734.3" y="1059.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="737.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.56%)</title><rect x="734.3" y="1043.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.56%)</title><rect x="734.3" y="1027.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (144 samples, 11.46%)</title><rect x="740.9" y="1075.0" width="135.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="743.9" y="1086.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (143 samples, 11.39%)</title><rect x="741.9" y="1059.0" width="134.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="744.9" y="1070.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="748.4" y="1043.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="751.4" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Park (133 samples, 10.59%)</title><rect x="749.4" y="1043.0" width="124.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="752.4" y="1054.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="753.1" y="1027.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="756.1" y="1038.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.16%)</title><rect x="754.1" y="1027.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="757.1" y="1038.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 1.35%)</title><rect x="756.0" y="1027.0" width="15.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="759.0" y="1038.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.72%)</title><rect x="758.8" y="1011.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="761.8" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.32%)</title><rect x="761.6" y="995.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="764.6" y="1006.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.24%)</title><rect x="762.5" y="979.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="765.5" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="765.4" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="768.4" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="766.3" y="995.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="769.3" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="767.2" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.2" y="1022.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="768.2" y="1011.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.2" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.24%)</title><rect x="769.1" y="1011.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="772.1" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="771.9" y="1027.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="774.9" y="1038.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.40%)</title><rect x="772.9" y="1027.0" width="4.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="775.9" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (20 samples, 1.59%)</title><rect x="777.6" y="1027.0" width="18.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="780.6" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 3.98%)</title><rect x="796.4" y="1027.0" width="46.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="799.4" y="1038.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.40%)</title><rect x="843.3" y="1027.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="846.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="848.0" y="1027.0" width="1.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="851.0" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.24%)</title><rect x="849.9" y="1027.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="852.9" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.32%)</title><rect x="852.7" y="1027.0" width="3.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="855.7" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (10 samples, 0.80%)</title><rect x="856.5" y="1027.0" width="9.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="859.5" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="865.9" y="1027.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="868.9" y="1038.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="867.8" y="1027.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="870.8" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="868.7" y="1027.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="871.7" y="1038.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="871.5" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="874.5" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="872.5" y="1027.0" width="1.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="875.5" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="874.3" y="1043.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="877.3" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="875.3" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.67%)</title><rect x="876.2" y="1091.0" width="19.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="879.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.67%)</title><rect x="876.2" y="1075.0" width="19.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.67%)</title><rect x="876.2" y="1059.0" width="19.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="879.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.67%)</title><rect x="876.2" y="1043.0" width="19.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="879.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="895.9" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="898.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="895.9" y="1155.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="898.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="895.9" y="1139.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="895.9" y="1123.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="898.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="895.9" y="1107.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="895.9" y="1091.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="895.9" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="898.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="895.9" y="1059.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.9" y="1070.0"></text>
</g>
<g>
<title>start_thread (312 samples, 24.84%)</title><rect x="896.9" y="1171.0" width="293.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="899.9" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (312 samples, 24.84%)</title><rect x="896.9" y="1155.0" width="293.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="899.9" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 2.07%)</title><rect x="896.9" y="1139.0" width="24.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.9" y="1150.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (2 samples, 0.16%)</title><rect x="896.9" y="1123.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="899.9" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="897.8" y="1107.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="900.8" y="1118.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.64%)</title><rect x="898.8" y="1123.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.8" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.64%)</title><rect x="898.8" y="1107.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.8" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="898.8" y="1091.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="901.8" y="1102.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.48%)</title><rect x="900.6" y="1091.0" width="5.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="903.6" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.27%)</title><rect x="906.3" y="1123.0" width="15.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="909.3" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.40%)</title><rect x="906.3" y="1107.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="909.3" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="906.3" y="1091.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="909.3" y="1102.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.24%)</title><rect x="908.2" y="1091.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="911.2" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.24%)</title><rect x="911.0" y="1107.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.0" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="911.0" y="1091.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.0" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="911.0" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.0" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="911.0" y="1059.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.0" y="1070.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="911.0" y="1043.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="914.0" y="1054.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="911.9" y="1075.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.9" y="1086.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="911.9" y="1059.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="914.9" y="1070.0"></text>
</g>
<g>
<title>frame::oops_entry_do(OopClosure*, RegisterMap const*) (1 samples, 0.08%)</title><rect x="911.9" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.9" y="1054.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="911.9" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="914.9" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="912.9" y="1043.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.9" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="912.9" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.9" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="912.9" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.9" y="1022.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="912.9" y="995.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.9" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.64%)</title><rect x="913.8" y="1107.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.8" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.64%)</title><rect x="913.8" y="1091.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="916.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.56%)</title><rect x="913.8" y="1075.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.8" y="1086.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.56%)</title><rect x="913.8" y="1059.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.8" y="1070.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.56%)</title><rect x="913.8" y="1043.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.8" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.56%)</title><rect x="913.8" y="1027.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="916.8" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.48%)</title><rect x="914.7" y="1011.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.7" y="1022.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.24%)</title><rect x="914.7" y="995.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.7" y="1006.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="917.5" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.16%)</title><rect x="918.5" y="995.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.5" y="1006.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="919.4" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.4" y="990.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="920.4" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="923.4" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="920.4" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.4" y="1070.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="920.4" y="1043.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.4" y="1054.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="920.4" y="1027.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.4" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (284 samples, 22.61%)</title><rect x="921.3" y="1139.0" width="266.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="924.3" y="1150.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (284 samples, 22.61%)</title><rect x="921.3" y="1123.0" width="266.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.3" y="1134.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (283 samples, 22.53%)</title><rect x="921.3" y="1107.0" width="265.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="924.3" y="1118.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (283 samples, 22.53%)</title><rect x="921.3" y="1091.0" width="265.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="924.3" y="1102.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (281 samples, 22.37%)</title><rect x="921.3" y="1075.0" width="264.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="924.3" y="1086.0">C2Compiler::compile_method(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (281 samples, 22.37%)</title><rect x="921.3" y="1059.0" width="264.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.3" y="1070.0">Compile::Compile(ciEnv*, C2Compiler..</text>
</g>
<g>
<title>Compile::Code_Gen() (103 samples, 8.20%)</title><rect x="921.3" y="1043.0" width="96.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.3" y="1054.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="921.3" y="1027.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.3" y="1038.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="921.3" y="1011.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.3" y="1022.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="922.2" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.2" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.24%)</title><rect x="923.2" y="1027.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.2" y="1038.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="924.1" y="1011.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="927.1" y="1022.0"></text>
</g>
<g>
<title>CompiledStaticCall::emit_to_interp_stub(CodeBuffer&amp;) (1 samples, 0.08%)</title><rect x="924.1" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.1" y="1006.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.08%)</title><rect x="924.1" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="927.1" y="990.0"></text>
</g>
<g>
<title>Assembler::jmp_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.08%)</title><rect x="924.1" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="927.1" y="974.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.08%)</title><rect x="924.1" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="927.1" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="925.1" y="1011.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="928.1" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="925.1" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.88%)</title><rect x="926.0" y="1027.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.0" y="1038.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (2 samples, 0.16%)</title><rect x="926.0" y="1011.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.0" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="926.9" y="995.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="929.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="927.9" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="930.9" y="1022.0"></text>
</g>
<g>
<title>FusedPatternMatcher&lt;TypeLong&gt;::match(int, int, int, int, long) (1 samples, 0.08%)</title><rect x="927.9" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.56%)</title><rect x="928.8" y="1011.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="931.8" y="1022.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.32%)</title><rect x="929.8" y="995.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.8" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.16%)</title><rect x="933.5" y="995.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.5" y="1006.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.08%)</title><rect x="933.5" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="936.5" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="934.5" y="979.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.5" y="990.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.08%)</title><rect x="934.5" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.5" y="974.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.08%)</title><rect x="935.4" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="938.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.32%)</title><rect x="936.3" y="1027.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.32%)</title><rect x="936.3" y="1011.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.32%)</title><rect x="936.3" y="995.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.3" y="1006.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.16%)</title><rect x="937.3" y="979.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="940.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="939.2" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.2" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="940.1" y="1027.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="943.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (81 samples, 6.45%)</title><rect x="941.0" y="1027.0" width="76.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="944.0" y="1038.0">PhaseCha..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="942.0" y="1011.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.0" y="1022.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="942.9" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.9" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="943.9" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.40%)</title><rect x="944.8" y="1011.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="947.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.24%)</title><rect x="946.7" y="995.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="949.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="948.6" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.40%)</title><rect x="949.5" y="1011.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.32%)</title><rect x="950.4" y="995.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.4" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="952.3" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="955.3" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="953.2" y="979.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="956.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.64%)</title><rect x="954.2" y="1011.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.2" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (15 samples, 1.19%)</title><rect x="961.7" y="1011.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="964.7" y="1022.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="963.6" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (12 samples, 0.96%)</title><rect x="964.5" y="995.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="967.5" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.40%)</title><rect x="971.1" y="979.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="975.8" y="1011.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.8" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="976.7" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (12 samples, 0.96%)</title><rect x="977.7" y="1011.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.7" y="1022.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.08%)</title><rect x="985.2" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.2" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.16%)</title><rect x="986.1" y="995.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.1" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.08%)</title><rect x="988.0" y="995.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="991.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="988.9" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="991.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.56%)</title><rect x="989.9" y="1011.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.9" y="1022.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="991.8" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.32%)</title><rect x="992.7" y="995.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.7" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.32%)</title><rect x="996.5" y="1011.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.5" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.32%)</title><rect x="996.5" y="995.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.5" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 0.32%)</title><rect x="996.5" y="979.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.5" y="990.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="997.4" y="963.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.4" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.16%)</title><rect x="998.3" y="963.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.3" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.24%)</title><rect x="1000.2" y="1011.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1003.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1001.2" y="995.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1003.0" y="1011.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1003.0" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1006.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1004.0" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.0" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 0.96%)</title><rect x="1004.9" y="1011.0" width="11.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.9" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.08%)</title><rect x="1010.6" y="995.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.6" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.40%)</title><rect x="1011.5" y="995.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1014.5" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1014.3" y="979.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1017.3" y="990.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1016.2" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1019.2" y="1022.0"></text>
</g>
<g>
<title>compI_rReg_immNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1017.1" y="1027.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.1" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (163 samples, 12.98%)</title><rect x="1018.1" y="1043.0" width="153.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.1" y="1054.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1018.1" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.1" y="1038.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1018.1" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1021.1" y="1022.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1018.1" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.1" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1018.1" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.1" y="990.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1019.0" y="1027.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.48%)</title><rect x="1020.0" y="1027.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1023.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1020.0" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.40%)</title><rect x="1020.9" y="1011.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1023.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.32%)</title><rect x="1020.9" y="995.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1023.9" y="1006.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1020.9" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.9" y="990.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1020.9" y="963.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1023.9" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1020.9" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1023.9" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1020.9" y="931.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1021.8" y="979.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="931.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="659.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="531.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="483.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="467.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="435.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="387.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="339.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="307.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="211.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="195.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1021.8" y="179.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.8" y="190.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1021.8" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1022.8" y="963.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1025.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1022.8" y="947.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.8" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1022.8" y="931.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1025.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="915.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="899.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="883.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="851.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1026.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1026.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="803.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1026.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="707.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1026.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="659.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1026.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1026.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="627.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="547.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1026.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="531.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="515.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="499.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="483.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="467.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="451.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1023.7" y="435.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.7" y="446.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1023.7" y="419.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.7" y="430.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1024.6" y="995.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1027.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1025.6" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1025.6" y="1011.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.08%)</title><rect x="1025.6" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1026.5" y="1027.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.5" y="1038.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.08%)</title><rect x="1026.5" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.5" y="1022.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1026.5" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.5" y="1006.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1026.5" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.5" y="990.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1026.5" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.5" y="974.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1026.5" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (128 samples, 10.19%)</title><rect x="1027.5" y="1027.0" width="120.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1030.5" y="1038.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1027.5" y="1011.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.5" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1027.5" y="995.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.5" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1027.5" y="979.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.5" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1027.5" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.5" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1027.5" y="947.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.5" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1027.5" y="931.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1027.5" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.08%)</title><rect x="1027.5" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.5" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1028.4" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1028.4" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.08%)</title><rect x="1028.4" y="931.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.4" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.08%)</title><rect x="1028.4" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.4" y="926.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1028.4" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.4" y="910.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1028.4" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.4" y="894.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1028.4" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.4" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1028.4" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.4" y="862.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1028.4" y="835.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.4" y="846.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1029.3" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.48%)</title><rect x="1030.3" y="1011.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.3" y="1022.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1035.0" y="995.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.64%)</title><rect x="1035.9" y="1011.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1038.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.32%)</title><rect x="1039.7" y="995.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1041.6" y="979.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (104 samples, 8.28%)</title><rect x="1043.4" y="1011.0" width="97.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.4" y="1022.0">PhaseIdealL..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1048.1" y="995.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (96 samples, 7.64%)</title><rect x="1049.1" y="995.0" width="90.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.1" y="1006.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.24%)</title><rect x="1050.0" y="979.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (92 samples, 7.32%)</title><rect x="1052.8" y="979.0" width="86.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="990.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (12 samples, 0.96%)</title><rect x="1127.1" y="963.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1138.3" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.08%)</title><rect x="1139.3" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.3" y="1006.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.08%)</title><rect x="1140.2" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1141.1" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1142.1" y="1011.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.32%)</title><rect x="1143.0" y="1011.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.32%)</title><rect x="1143.0" y="995.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.0" y="1006.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1144.0" y="979.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.0" y="990.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1144.0" y="963.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.0" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1144.9" y="979.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.9" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1145.8" y="979.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.8" y="990.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1145.8" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.8" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1146.8" y="1011.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (20 samples, 1.59%)</title><rect x="1147.7" y="1027.0" width="18.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (20 samples, 1.59%)</title><rect x="1147.7" y="1011.0" width="18.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.7" y="1022.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.08%)</title><rect x="1150.5" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="1006.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1151.5" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.5" y="1006.0"></text>
</g>
<g>
<title>PhiNode::make_blank(Node*, Node*) (1 samples, 0.08%)</title><rect x="1151.5" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="990.0"></text>
</g>
<g>
<title>IfTrueNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1152.4" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1153.4" y="995.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="1006.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1153.4" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.4" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1153.4" y="963.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.4" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1153.4" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.4" y="958.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1154.3" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.3" y="990.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1154.3" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.3" y="974.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1155.2" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="1006.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1155.2" y="979.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.2" y="990.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1156.2" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.2" y="1006.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1156.2" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.2" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1156.2" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.2" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1156.2" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.2" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1157.1" y="995.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1158.1" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1158.1" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.1" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.0" y="995.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.0" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.32%)</title><rect x="1159.9" y="995.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.9" y="1006.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1159.9" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1160.9" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1160.9" y="963.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1161.8" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.8" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1161.8" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.8" y="974.0"></text>
</g>
<g>
<title>LoadNode::cmp(Node const&amp;) const (1 samples, 0.08%)</title><rect x="1161.8" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="958.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1161.8" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.8" y="942.0"></text>
</g>
<g>
<title>TypeAryPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1161.8" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.8" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative() const (1 samples, 0.08%)</title><rect x="1161.8" y="899.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.8" y="910.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1162.8" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="990.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.08%)</title><rect x="1163.7" y="995.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="1006.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.6" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1164.6" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="931.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.6" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.6" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.6" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="707.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.6" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1164.6" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="686.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.08%)</title><rect x="1165.6" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.6" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.16%)</title><rect x="1166.5" y="1027.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.16%)</title><rect x="1166.5" y="1011.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1166.5" y="995.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1166.5" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1166.5" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="974.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1166.5" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="958.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1166.5" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1167.5" y="979.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1170.5" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.24%)</title><rect x="1168.4" y="1027.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.24%)</title><rect x="1168.4" y="1011.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.24%)</title><rect x="1168.4" y="995.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.4" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1169.3" y="979.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1170.3" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="974.0"></text>
</g>
<g>
<title>CompileWrapper::~CompileWrapper() (1 samples, 0.08%)</title><rect x="1171.2" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="1054.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.08%)</title><rect x="1171.2" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.08%)</title><rect x="1171.2" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.96%)</title><rect x="1172.1" y="1043.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.96%)</title><rect x="1172.1" y="1027.0" width="11.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.96%)</title><rect x="1172.1" y="1011.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.96%)</title><rect x="1172.1" y="995.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1172.1" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.1" y="990.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1172.1" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.1" y="974.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.1" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="958.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.1" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.88%)</title><rect x="1173.1" y="979.0" width="10.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.88%)</title><rect x="1173.1" y="963.0" width="10.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.56%)</title><rect x="1173.1" y="947.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.56%)</title><rect x="1173.1" y="931.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.56%)</title><rect x="1173.1" y="915.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.56%)</title><rect x="1173.1" y="899.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.56%)</title><rect x="1173.1" y="883.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.56%)</title><rect x="1173.1" y="867.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1173.1" y="851.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1173.1" y="835.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1173.1" y="819.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1173.1" y="803.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1173.1" y="787.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1173.1" y="771.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1173.1" y="755.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1173.1" y="739.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1173.1" y="723.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1173.1" y="707.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1173.1" y="691.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1173.1" y="675.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1173.1" y="659.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1173.1" y="643.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1173.1" y="627.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1173.1" y="611.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1173.1" y="595.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1173.1" y="579.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1173.1" y="563.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1173.1" y="547.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1173.1" y="531.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1173.1" y="515.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1173.1" y="499.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1173.1" y="483.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1173.1" y="467.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1173.1" y="451.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1173.1" y="435.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1173.1" y="419.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1173.1" y="403.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1173.1" y="387.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1173.1" y="371.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1173.1" y="355.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1173.1" y="339.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1173.1" y="323.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1173.1" y="307.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1173.1" y="291.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1173.1" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="259.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="270.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="243.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="254.0"></text>
</g>
<g>
<title>ciKlass::is_subclass_of(ciKlass*) (1 samples, 0.08%)</title><rect x="1173.1" y="227.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.0" y="275.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.0" y="259.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.0" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.0" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.0" y="211.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.08%)</title><rect x="1174.0" y="195.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.0" y="206.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.08%)</title><rect x="1174.0" y="179.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.0" y="190.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.08%)</title><rect x="1174.0" y="163.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.0" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.0" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.0" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.0" y="723.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.0" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.0" y="691.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.0" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.0" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.0" y="643.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.0" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.0" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.0" y="595.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.0" y="579.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.0" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.0" y="547.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.0" y="531.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.0" y="515.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.0" y="499.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.0" y="483.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.0" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="435.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1175.0" y="419.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1175.0" y="403.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="414.0"></text>
</g>
<g>
<title>ciEnv::comp_level() (1 samples, 0.08%)</title><rect x="1175.0" y="387.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1175.9" y="851.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1175.9" y="835.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1175.9" y="819.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1175.9" y="803.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1175.9" y="787.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1175.9" y="771.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1175.9" y="755.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1175.9" y="739.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1175.9" y="723.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1175.9" y="707.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1175.9" y="691.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1175.9" y="675.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1175.9" y="659.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1175.9" y="643.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1175.9" y="627.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1175.9" y="611.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1175.9" y="595.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1175.9" y="579.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1175.9" y="563.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.08%)</title><rect x="1175.9" y="547.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_exactness(bool) const (1 samples, 0.08%)</title><rect x="1175.9" y="531.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1175.9" y="515.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1176.8" y="547.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1176.8" y="531.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1176.8" y="515.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1176.8" y="499.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1176.8" y="483.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1176.8" y="467.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.8" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.8" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.8" y="419.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.8" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.8" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1176.8" y="371.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1176.8" y="355.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1176.8" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1176.8" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="334.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1176.8" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.8" y="451.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.8" y="435.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.8" y="419.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.8" y="403.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.8" y="387.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.8" y="371.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.8" y="355.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.8" y="339.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.8" y="323.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.8" y="307.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.8" y="291.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.8" y="275.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.8" y="259.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.8" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.8" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.8" y="211.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.8" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.8" y="179.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1177.8" y="163.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="174.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1177.8" y="147.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="158.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1177.8" y="131.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1177.8" y="115.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="126.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1177.8" y="99.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1177.8" y="83.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1177.8" y="67.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="78.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1177.8" y="51.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="62.0"></text>
</g>
<g>
<title>TypeNarrowPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1177.8" y="35.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1178.7" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1178.7" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.7" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1178.7" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="830.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1178.7" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.08%)</title><rect x="1178.7" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1179.7" y="947.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="958.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1179.7" y="931.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="942.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.08%)</title><rect x="1179.7" y="915.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="926.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.08%)</title><rect x="1179.7" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="910.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.08%)</title><rect x="1179.7" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1180.6" y="931.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1180.6" y="915.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1180.6" y="899.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1180.6" y="883.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1180.6" y="867.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1180.6" y="851.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1180.6" y="835.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1180.6" y="819.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1180.6" y="803.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1180.6" y="787.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1180.6" y="771.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1180.6" y="755.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.6" y="739.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.6" y="723.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.6" y="707.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.6" y="691.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.6" y="675.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.6" y="659.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.6" y="627.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.6" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.6" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.6" y="579.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.6" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="547.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="531.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.6" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.6" y="499.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.6" y="483.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.6" y="467.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.6" y="451.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="435.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.6" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.6" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.6" y="387.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.6" y="371.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.6" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="339.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.6" y="323.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.6" y="307.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.6" y="291.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.6" y="275.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.6" y="259.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.6" y="227.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.6" y="211.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.6" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.6" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.6" y="163.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.6" y="147.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1180.6" y="131.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="142.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1180.6" y="115.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="126.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.08%)</title><rect x="1180.6" y="99.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="110.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.08%)</title><rect x="1180.6" y="83.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="94.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1180.6" y="67.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.5" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.5" y="627.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.5" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1181.5" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1181.5" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="723.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="691.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="675.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="643.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="611.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="579.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.5" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.5" y="531.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1182.5" y="515.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1183.4" y="1043.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.4" y="1027.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1038.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.08%)</title><rect x="1183.4" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1022.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1184.4" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="1038.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.08%)</title><rect x="1185.3" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.2" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.2" y="1059.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.2" y="1043.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.2" y="1027.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="1038.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1186.2" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="1022.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.2" y="995.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="1006.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1186.2" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1186.2" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1186.2" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.2" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1186.2" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.2" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1186.2" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1186.2" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.2" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.2" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1186.2" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1186.2" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1186.2" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1186.2" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1186.2" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="766.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.08%)</title><rect x="1186.2" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="750.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.2" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.2" y="1118.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.2" y="1091.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="1102.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.2" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.2" y="1086.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1187.2" y="1059.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.2" y="1070.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.08%)</title><rect x="1187.2" y="1043.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.08%)</title><rect x="1187.2" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.2" y="1038.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.08%)</title><rect x="1187.2" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="1022.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_object_value() (1 samples, 0.08%)</title><rect x="1187.2" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.2" y="1006.0"></text>
</g>
<g>
<title>ObjectValue::read_object(DebugInfoReadStream*) (1 samples, 0.08%)</title><rect x="1187.2" y="979.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="990.0"></text>
</g>
<g>
<title>ScopeValue::read_from(DebugInfoReadStream*) (1 samples, 0.08%)</title><rect x="1187.2" y="963.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.2" y="974.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1187.2" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.2" y="958.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="1139.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1123.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.1" y="1134.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1188.1" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="1118.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="1118.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="1102.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="1043.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.1" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1189.1" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="1038.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.08%)</title><rect x="1189.1" y="1011.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1022.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (1 samples, 0.08%)</title><rect x="1189.1" y="995.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="1006.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phase3(DiscoveredList&amp;, bool, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.08%)</title><rect x="1189.1" y="979.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.1" y="990.0"></text>
</g>
</g>
</svg>
