<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (216 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="2035.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="2019.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="2003.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1987.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1971.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1955.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1939.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1923.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1907.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1891.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1875.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1859.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1843.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1827.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1811.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1795.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1779.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1763.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1747.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1731.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1715.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1699.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1683.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1667.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1651.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1635.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1619.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1603.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1587.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1571.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1555.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1539.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1523.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1507.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1491.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1475.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1459.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1443.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1427.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1411.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1395.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1379.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1363.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1347.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1331.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1315.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1299.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1283.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1267.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1251.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1235.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1219.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1203.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1187.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1171.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1155.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1139.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1123.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1107.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1091.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1075.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1059.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1043.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1027.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="1011.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="995.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="979.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="963.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="947.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="931.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="915.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="899.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="883.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="867.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="851.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="835.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="819.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="803.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="787.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="771.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="755.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="739.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="723.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="707.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="691.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="675.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="659.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="643.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="627.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="611.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="595.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="579.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="563.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="547.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="531.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="515.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="499.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="483.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="467.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="451.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="435.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="419.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="403.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="387.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="371.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="355.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="339.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="323.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="307.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="291.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="275.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="259.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="243.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="227.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="211.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="195.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="179.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="163.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="147.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="131.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="115.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="99.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="83.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="67.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.46%)</title><rect x="10.0" y="51.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.334] (1 samples, 0.46%)</title><rect x="10.0" y="35.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (34 samples, 15.74%)</title><rect x="15.5" y="2035.0" width="185.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.5" y="2046.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.46%)</title><rect x="15.5" y="2019.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.5" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.46%)</title><rect x="15.5" y="2003.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.5" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.46%)</title><rect x="15.5" y="1987.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.46%)</title><rect x="15.5" y="1971.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.46%)</title><rect x="15.5" y="1955.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="15.5" y="1939.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="15.5" y="1923.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.46%)</title><rect x="15.5" y="1907.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.46%)</title><rect x="15.5" y="1891.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.46%)</title><rect x="15.5" y="1875.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.46%)</title><rect x="15.5" y="1859.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.5" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.46%)</title><rect x="15.5" y="1843.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.5" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.46%)</title><rect x="15.5" y="1827.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.5" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.46%)</title><rect x="15.5" y="1811.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.5" y="1822.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.46%)</title><rect x="15.5" y="1795.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.46%)</title><rect x="15.5" y="1779.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (33 samples, 15.28%)</title><rect x="20.9" y="2019.0" width="180.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.9" y="2030.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.46%)</title><rect x="20.9" y="2003.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.9" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.46%)</title><rect x="20.9" y="1987.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.46%)</title><rect x="20.9" y="1971.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.46%)</title><rect x="20.9" y="1955.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.46%)</title><rect x="20.9" y="1939.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.46%)</title><rect x="20.9" y="1923.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.46%)</title><rect x="20.9" y="1907.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.46%)</title><rect x="20.9" y="1891.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (21 samples, 9.72%)</title><rect x="26.4" y="2003.0" width="114.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.4" y="2014.0">java/lang/Iter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1209424634.accept (19 samples, 8.80%)</title><rect x="26.4" y="1987.0" width="103.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="1998.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (19 samples, 8.80%)</title><rect x="26.4" y="1971.0" width="103.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.4" y="1982.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 7.41%)</title><rect x="26.4" y="1955.0" width="87.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.4" y="1966.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 7.41%)</title><rect x="26.4" y="1939.0" width="87.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.4" y="1950.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 7.41%)</title><rect x="26.4" y="1923.0" width="87.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="29.4" y="1934.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (16 samples, 7.41%)</title><rect x="26.4" y="1907.0" width="87.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.4" y="1918.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 7.41%)</title><rect x="26.4" y="1891.0" width="87.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.4" y="1902.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 7.41%)</title><rect x="26.4" y="1875.0" width="87.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.4" y="1886.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (12 samples, 5.56%)</title><rect x="26.4" y="1859.0" width="65.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.4" y="1870.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.39%)</title><rect x="26.4" y="1843.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.39%)</title><rect x="26.4" y="1827.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.46%)</title><rect x="37.3" y="1811.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.93%)</title><rect x="42.8" y="1843.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.93%)</title><rect x="42.8" y="1827.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.46%)</title><rect x="48.2" y="1811.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 3.24%)</title><rect x="53.7" y="1843.0" width="38.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.7" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 3.24%)</title><rect x="53.7" y="1827.0" width="38.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.7" y="1838.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 3.24%)</title><rect x="53.7" y="1811.0" width="38.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.7" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 3.24%)</title><rect x="53.7" y="1795.0" width="38.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.7" y="1806.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 3.24%)</title><rect x="53.7" y="1779.0" width="38.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.7" y="1790.0">sun..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.179] (1 samples, 0.46%)</title><rect x="53.7" y="1763.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="56.7" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 2.31%)</title><rect x="59.2" y="1763.0" width="27.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="62.2" y="1774.0">U..</text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 1.39%)</title><rect x="59.2" y="1747.0" width="16.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="62.2" y="1758.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.93%)</title><rect x="75.6" y="1747.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="78.6" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.46%)</title><rect x="86.5" y="1763.0" width="5.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="89.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.39%)</title><rect x="91.9" y="1859.0" width="16.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.39%)</title><rect x="91.9" y="1843.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.39%)</title><rect x="91.9" y="1827.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.9" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="102.9" y="1811.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="105.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.46%)</title><rect x="108.3" y="1859.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.46%)</title><rect x="108.3" y="1843.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.46%)</title><rect x="108.3" y="1827.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.46%)</title><rect x="113.8" y="1955.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.46%)</title><rect x="113.8" y="1939.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.93%)</title><rect x="119.3" y="1955.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.3" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.93%)</title><rect x="119.3" y="1939.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.46%)</title><rect x="130.2" y="1987.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.2" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.46%)</title><rect x="130.2" y="1971.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.46%)</title><rect x="130.2" y="1955.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.46%)</title><rect x="135.6" y="1987.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="138.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.46%)</title><rect x="135.6" y="1971.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.46%)</title><rect x="135.6" y="1955.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.46%)</title><rect x="135.6" y="1939.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.46%)</title><rect x="135.6" y="1923.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.46%)</title><rect x="135.6" y="1907.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.09%)</title><rect x="141.1" y="2003.0" width="60.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="144.1" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.09%)</title><rect x="141.1" y="1987.0" width="60.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.1" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 3.24%)</title><rect x="141.1" y="1971.0" width="38.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.1" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.46%)</title><rect x="141.1" y="1955.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.46%)</title><rect x="141.1" y="1939.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.46%)</title><rect x="141.1" y="1923.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.78%)</title><rect x="146.6" y="1955.0" width="32.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.6" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.78%)</title><rect x="146.6" y="1939.0" width="32.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.6" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 2.31%)</title><rect x="146.6" y="1923.0" width="27.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.6" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 2.31%)</title><rect x="146.6" y="1907.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="149.6" y="1918.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.46%)</title><rect x="146.6" y="1891.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.46%)</title><rect x="152.0" y="1891.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.46%)</title><rect x="152.0" y="1875.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.46%)</title><rect x="152.0" y="1859.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="155.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.46%)</title><rect x="152.0" y="1843.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.46%)</title><rect x="152.0" y="1827.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.46%)</title><rect x="152.0" y="1811.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.46%)</title><rect x="152.0" y="1795.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.39%)</title><rect x="157.5" y="1891.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.39%)</title><rect x="157.5" y="1875.0" width="16.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 1.39%)</title><rect x="157.5" y="1859.0" width="16.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 1.39%)</title><rect x="157.5" y="1843.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.46%)</title><rect x="168.4" y="1827.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.46%)</title><rect x="173.9" y="1923.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.46%)</title><rect x="173.9" y="1907.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.46%)</title><rect x="173.9" y="1891.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.46%)</title><rect x="173.9" y="1875.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="176.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.46%)</title><rect x="173.9" y="1859.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.46%)</title><rect x="173.9" y="1843.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 1.39%)</title><rect x="179.4" y="1971.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.93%)</title><rect x="179.4" y="1955.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.93%)</title><rect x="179.4" y="1939.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.93%)</title><rect x="179.4" y="1923.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.93%)</title><rect x="179.4" y="1907.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.93%)</title><rect x="179.4" y="1891.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.93%)</title><rect x="179.4" y="1875.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.46%)</title><rect x="179.4" y="1859.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.46%)</title><rect x="179.4" y="1843.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.46%)</title><rect x="179.4" y="1827.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.4" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.46%)</title><rect x="179.4" y="1811.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.4" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/112302969.get (1 samples, 0.46%)</title><rect x="184.8" y="1859.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.46%)</title><rect x="190.3" y="1955.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.46%)</title><rect x="190.3" y="1939.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.access$100 (1 samples, 0.46%)</title><rect x="190.3" y="1923.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.3" y="1934.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.46%)</title><rect x="190.3" y="1907.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="193.3" y="1918.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.46%)</title><rect x="190.3" y="1891.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="193.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.46%)</title><rect x="195.7" y="1971.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.46%)</title><rect x="195.7" y="1955.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.7" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.46%)</title><rect x="195.7" y="1939.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/808584666.accept (1 samples, 0.46%)</title><rect x="195.7" y="1923.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.46%)</title><rect x="195.7" y="1907.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.46%)</title><rect x="195.7" y="1891.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.46%)</title><rect x="195.7" y="1875.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.46%)</title><rect x="195.7" y="1859.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.7" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.46%)</title><rect x="195.7" y="1843.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="195.7" y="1827.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/Thread.run (61 samples, 28.24%)</title><rect x="201.2" y="2035.0" width="333.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.2" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (61 samples, 28.24%)</title><rect x="201.2" y="2019.0" width="333.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.2" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worke..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (61 samples, 28.24%)</title><rect x="201.2" y="2003.0" width="333.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.2" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2069414408.run (41 samples, 18.98%)</title><rect x="201.2" y="1987.0" width="224.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.2" y="1998.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (41 samples, 18.98%)</title><rect x="201.2" y="1971.0" width="224.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.2" y="1982.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (41 samples, 18.98%)</title><rect x="201.2" y="1955.0" width="224.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.2" y="1966.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="201.2" y="1939.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="204.2" y="1950.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="201.2" y="1923.0" width="5.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="204.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (39 samples, 18.06%)</title><rect x="206.7" y="1939.0" width="213.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.7" y="1950.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.46%)</title><rect x="212.1" y="1923.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (13 samples, 6.02%)</title><rect x="217.6" y="1923.0" width="71.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.6" y="1934.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (13 samples, 6.02%)</title><rect x="217.6" y="1907.0" width="71.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.6" y="1918.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (13 samples, 6.02%)</title><rect x="217.6" y="1891.0" width="71.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.6" y="1902.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 6.02%)</title><rect x="217.6" y="1875.0" width="71.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.6" y="1886.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 6.02%)</title><rect x="217.6" y="1859.0" width="71.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.6" y="1870.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (13 samples, 6.02%)</title><rect x="217.6" y="1843.0" width="71.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.6" y="1854.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.78%)</title><rect x="217.6" y="1827.0" width="32.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.6" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.31%)</title><rect x="223.1" y="1811.0" width="27.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.1" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.31%)</title><rect x="223.1" y="1795.0" width="27.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.1" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (5 samples, 2.31%)</title><rect x="223.1" y="1779.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.1" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 3.24%)</title><rect x="250.4" y="1827.0" width="38.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.4" y="1838.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.46%)</title><rect x="250.4" y="1811.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="250.4" y="1795.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.46%)</title><rect x="250.4" y="1779.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.93%)</title><rect x="255.8" y="1811.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.93%)</title><rect x="255.8" y="1795.0" width="11.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.93%)</title><rect x="255.8" y="1779.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="258.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.46%)</title><rect x="261.3" y="1763.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.46%)</title><rect x="261.3" y="1747.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 1.85%)</title><rect x="266.8" y="1811.0" width="21.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.8" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="266.8" y="1795.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.46%)</title><rect x="266.8" y="1779.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.39%)</title><rect x="272.2" y="1795.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.39%)</title><rect x="272.2" y="1779.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.39%)</title><rect x="272.2" y="1763.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.46%)</title><rect x="272.2" y="1747.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.46%)</title><rect x="272.2" y="1731.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="272.2" y="1715.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="272.2" y="1699.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.46%)</title><rect x="272.2" y="1683.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.93%)</title><rect x="277.7" y="1747.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.93%)</title><rect x="277.7" y="1731.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="280.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.93%)</title><rect x="277.7" y="1715.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.93%)</title><rect x="277.7" y="1699.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.93%)</title><rect x="277.7" y="1683.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.7" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.46%)</title><rect x="283.1" y="1667.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.1" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (21 samples, 9.72%)</title><rect x="288.6" y="1923.0" width="114.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.6" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 2.31%)</title><rect x="288.6" y="1907.0" width="27.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.6" y="1918.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.31%)</title><rect x="288.6" y="1891.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.6" y="1902.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.31%)</title><rect x="288.6" y="1875.0" width="27.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.6" y="1886.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.39%)</title><rect x="288.6" y="1859.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.39%)</title><rect x="288.6" y="1843.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.39%)</title><rect x="288.6" y="1827.0" width="16.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.39%)</title><rect x="288.6" y="1811.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.46%)</title><rect x="299.5" y="1795.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.5" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.93%)</title><rect x="305.0" y="1859.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (9 samples, 4.17%)</title><rect x="315.9" y="1907.0" width="49.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="318.9" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (9 samples, 4.17%)</title><rect x="315.9" y="1891.0" width="49.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.9" y="1902.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.46%)</title><rect x="321.4" y="1875.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.46%)</title><rect x="321.4" y="1859.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.4" y="1870.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.93%)</title><rect x="326.9" y="1875.0" width="10.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="329.9" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.31%)</title><rect x="337.8" y="1875.0" width="27.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="340.8" y="1886.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 1.85%)</title><rect x="343.2" y="1859.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.2" y="1870.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.46%)</title><rect x="343.2" y="1843.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.46%)</title><rect x="343.2" y="1827.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="343.2" y="1811.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="346.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="343.2" y="1795.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.39%)</title><rect x="348.7" y="1843.0" width="16.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="351.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.39%)</title><rect x="348.7" y="1827.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (6 samples, 2.78%)</title><rect x="365.1" y="1907.0" width="32.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.1" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (6 samples, 2.78%)</title><rect x="365.1" y="1891.0" width="32.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.1" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2098216011.process (3 samples, 1.39%)</title><rect x="365.1" y="1875.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.39%)</title><rect x="365.1" y="1859.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.46%)</title><rect x="365.1" y="1843.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.46%)</title><rect x="365.1" y="1827.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.46%)</title><rect x="365.1" y="1811.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.46%)</title><rect x="365.1" y="1795.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.1" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.46%)</title><rect x="365.1" y="1779.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.1" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.93%)</title><rect x="370.6" y="1843.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="373.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.93%)</title><rect x="370.6" y="1827.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.93%)</title><rect x="370.6" y="1811.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.93%)</title><rect x="370.6" y="1795.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.6" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 1.39%)</title><rect x="381.5" y="1875.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.5" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.46%)</title><rect x="381.5" y="1859.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.46%)</title><rect x="381.5" y="1843.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="384.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.93%)</title><rect x="386.9" y="1859.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.9" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 0.93%)</title><rect x="386.9" y="1843.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.9" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.93%)</title><rect x="386.9" y="1827.0" width="11.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="389.9" y="1838.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.93%)</title><rect x="386.9" y="1811.0" width="11.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="389.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.46%)</title><rect x="397.9" y="1907.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.46%)</title><rect x="397.9" y="1891.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.46%)</title><rect x="397.9" y="1875.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/486967840.accept (1 samples, 0.46%)</title><rect x="397.9" y="1859.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (1 samples, 0.46%)</title><rect x="397.9" y="1843.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="400.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.46%)</title><rect x="397.9" y="1827.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="400.9" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.46%)</title><rect x="397.9" y="1811.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.9" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.46%)</title><rect x="397.9" y="1795.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.93%)</title><rect x="403.3" y="1923.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.93%)</title><rect x="403.3" y="1907.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.93%)</title><rect x="403.3" y="1891.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/486967840.accept (2 samples, 0.93%)</title><rect x="403.3" y="1875.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 0.93%)</title><rect x="403.3" y="1859.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.93%)</title><rect x="403.3" y="1843.0" width="11.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.3" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.93%)</title><rect x="403.3" y="1827.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.93%)</title><rect x="403.3" y="1811.0" width="11.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="406.3" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.46%)</title><rect x="414.3" y="1923.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="417.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="414.3" y="1907.0" width="5.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="417.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.46%)</title><rect x="419.7" y="1939.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.7" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="419.7" y="1923.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="422.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="419.7" y="1907.0" width="5.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="422.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.46%)</title><rect x="425.2" y="1987.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.2" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.46%)</title><rect x="425.2" y="1971.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.2" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.46%)</title><rect x="425.2" y="1955.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.93%)</title><rect x="430.6" y="1987.0" width="11.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.46%)</title><rect x="436.1" y="1971.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.46%)</title><rect x="436.1" y="1955.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.46%)</title><rect x="436.1" y="1939.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 7.87%)</title><rect x="441.6" y="1987.0" width="92.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.6" y="1998.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (17 samples, 7.87%)</title><rect x="441.6" y="1971.0" width="92.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.6" y="1982.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 6.94%)</title><rect x="441.6" y="1955.0" width="81.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.6" y="1966.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 1.39%)</title><rect x="447.0" y="1939.0" width="16.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="450.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.39%)</title><rect x="447.0" y="1923.0" width="16.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.39%)</title><rect x="447.0" y="1907.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.39%)</title><rect x="447.0" y="1891.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 5.09%)</title><rect x="463.4" y="1939.0" width="60.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.4" y="1950.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (9 samples, 4.17%)</title><rect x="474.4" y="1923.0" width="49.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.4" y="1934.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Park (9 samples, 4.17%)</title><rect x="474.4" y="1907.0" width="49.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="477.4" y="1918.0">Unsaf..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.46%)</title><rect x="474.4" y="1891.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="477.4" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.46%)</title><rect x="474.4" y="1875.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="477.4" y="1886.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.46%)</title><rect x="479.8" y="1891.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="482.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_cond_wait (6 samples, 2.78%)</title><rect x="485.3" y="1891.0" width="32.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="488.3" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.46%)</title><rect x="518.1" y="1891.0" width="5.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="521.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.93%)</title><rect x="523.5" y="1955.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.93%)</title><rect x="523.5" y="1939.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.93%)</title><rect x="523.5" y="1923.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="526.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.93%)</title><rect x="523.5" y="1907.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.5" y="1918.0"></text>
</g>
<g>
<title>start_thread (120 samples, 55.56%)</title><rect x="534.4" y="2035.0" width="655.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="537.4" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (120 samples, 55.56%)</title><rect x="534.4" y="2019.0" width="655.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="537.4" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 7.41%)</title><rect x="534.4" y="2003.0" width="87.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="537.4" y="2014.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 1.39%)</title><rect x="534.4" y="1987.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="537.4" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.39%)</title><rect x="534.4" y="1971.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="537.4" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.46%)</title><rect x="534.4" y="1955.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="537.4" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.93%)</title><rect x="539.9" y="1955.0" width="10.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="542.9" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 6.02%)</title><rect x="550.8" y="1987.0" width="71.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="553.8" y="1998.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 5.56%)</title><rect x="550.8" y="1971.0" width="65.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="553.8" y="1982.0">G1ParEv..</text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.46%)</title><rect x="550.8" y="1955.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="553.8" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 2.31%)</title><rect x="556.3" y="1955.0" width="27.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="559.3" y="1966.0">P..</text>
</g>
<g>
<title>SpinPause (6 samples, 2.78%)</title><rect x="583.6" y="1955.0" width="32.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="586.6" y="1966.0">Sp..</text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="616.4" y="1971.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="619.4" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="616.4" y="1955.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="619.4" y="1966.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.46%)</title><rect x="616.4" y="1939.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.4" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.46%)</title><rect x="616.4" y="1923.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="619.4" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.46%)</title><rect x="616.4" y="1907.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="619.4" y="1918.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.46%)</title><rect x="616.4" y="1891.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="619.4" y="1902.0"></text>
</g>
<g>
<title>metadata_Relocation::fix_metadata_relocation() (1 samples, 0.46%)</title><rect x="616.4" y="1875.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="619.4" y="1886.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 48.15%)</title><rect x="621.9" y="2003.0" width="568.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.9" y="2014.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (103 samples, 47.69%)</title><rect x="621.9" y="1987.0" width="562.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="624.9" y="1998.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (103 samples, 47.69%)</title><rect x="621.9" y="1971.0" width="562.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="624.9" y="1982.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (101 samples, 46.76%)</title><rect x="621.9" y="1955.0" width="551.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="624.9" y="1966.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (101 samples, 46.76%)</title><rect x="621.9" y="1939.0" width="551.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="624.9" y="1950.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 21.30%)</title><rect x="621.9" y="1923.0" width="251.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="624.9" y="1934.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.39%)</title><rect x="621.9" y="1907.0" width="16.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="624.9" y="1918.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.93%)</title><rect x="621.9" y="1891.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="624.9" y="1902.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.46%)</title><rect x="627.3" y="1875.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="630.3" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.46%)</title><rect x="632.8" y="1891.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.8" y="1902.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.46%)</title><rect x="632.8" y="1875.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="635.8" y="1886.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.46%)</title><rect x="632.8" y="1859.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="635.8" y="1870.0"></text>
</g>
<g>
<title>loadNKlassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.46%)</title><rect x="632.8" y="1843.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="635.8" y="1854.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.46%)</title><rect x="632.8" y="1827.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="635.8" y="1838.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) [clone .constprop.172] (1 samples, 0.46%)</title><rect x="632.8" y="1811.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="635.8" y="1822.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.93%)</title><rect x="638.2" y="1907.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="641.2" y="1918.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.46%)</title><rect x="638.2" y="1891.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="641.2" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.46%)</title><rect x="643.7" y="1891.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="646.7" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.46%)</title><rect x="643.7" y="1875.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.7" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.39%)</title><rect x="649.2" y="1907.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="652.2" y="1918.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.39%)</title><rect x="649.2" y="1891.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="652.2" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.46%)</title><rect x="654.6" y="1875.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="657.6" y="1886.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.46%)</title><rect x="660.1" y="1875.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="663.1" y="1886.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.46%)</title><rect x="660.1" y="1859.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="663.1" y="1870.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.46%)</title><rect x="660.1" y="1843.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.1" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.46%)</title><rect x="665.6" y="1907.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="668.6" y="1918.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.46%)</title><rect x="665.6" y="1891.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="668.6" y="1902.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.46%)</title><rect x="665.6" y="1875.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="668.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.93%)</title><rect x="671.0" y="1907.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="674.0" y="1918.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.93%)</title><rect x="671.0" y="1891.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.46%)</title><rect x="676.5" y="1875.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="679.5" y="1886.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.46%)</title><rect x="676.5" y="1859.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="679.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 16.20%)</title><rect x="681.9" y="1907.0" width="191.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="684.9" y="1918.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.46%)</title><rect x="681.9" y="1891.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="684.9" y="1902.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.46%)</title><rect x="687.4" y="1891.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="690.4" y="1902.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.46%)</title><rect x="692.9" y="1891.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="695.9" y="1902.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.93%)</title><rect x="698.3" y="1891.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="701.3" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.39%)</title><rect x="709.3" y="1891.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="712.3" y="1902.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.93%)</title><rect x="714.7" y="1875.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="717.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.46%)</title><rect x="725.6" y="1891.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.46%)</title><rect x="725.6" y="1875.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="728.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.85%)</title><rect x="731.1" y="1891.0" width="21.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="734.1" y="1902.0">P..</text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.46%)</title><rect x="747.5" y="1875.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="750.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.31%)</title><rect x="753.0" y="1891.0" width="27.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="756.0" y="1902.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.85%)</title><rect x="758.4" y="1875.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.4" y="1886.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.93%)</title><rect x="769.4" y="1859.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="772.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.46%)</title><rect x="780.3" y="1891.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.3" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.93%)</title><rect x="785.7" y="1891.0" width="11.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.46%)</title><rect x="796.7" y="1891.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="799.7" y="1902.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.46%)</title><rect x="796.7" y="1875.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="799.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 1.85%)</title><rect x="802.1" y="1891.0" width="21.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="805.1" y="1902.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 1.85%)</title><rect x="802.1" y="1875.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.1" y="1886.0">I..</text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.93%)</title><rect x="824.0" y="1891.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="827.0" y="1902.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="829.4" y="1875.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="832.4" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.31%)</title><rect x="834.9" y="1891.0" width="27.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="837.9" y="1902.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.93%)</title><rect x="851.3" y="1875.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="854.3" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.46%)</title><rect x="862.2" y="1891.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="865.2" y="1902.0"></text>
</g>
<g>
<title>decI_rRegNode::ideal_Opcode() const (1 samples, 0.46%)</title><rect x="867.7" y="1891.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="870.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (43 samples, 19.91%)</title><rect x="873.1" y="1923.0" width="235.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.1" y="1934.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.93%)</title><rect x="873.1" y="1907.0" width="11.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.1" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.93%)</title><rect x="873.1" y="1891.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.1" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.46%)</title><rect x="873.1" y="1875.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="876.1" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.46%)</title><rect x="878.6" y="1875.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="881.6" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="878.6" y="1859.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="881.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.46%)</title><rect x="878.6" y="1843.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.46%)</title><rect x="878.6" y="1827.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="881.6" y="1838.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.46%)</title><rect x="884.1" y="1907.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.1" y="1918.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.46%)</title><rect x="889.5" y="1907.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="892.5" y="1918.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 10.65%)</title><rect x="895.0" y="1907.0" width="125.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="898.0" y="1918.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="895.0" y="1891.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="898.0" y="1902.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="895.0" y="1875.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="898.0" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="895.0" y="1859.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="895.0" y="1843.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="898.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.46%)</title><rect x="895.0" y="1827.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.0" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.46%)</title><rect x="895.0" y="1811.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="898.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.93%)</title><rect x="900.5" y="1891.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.5" y="1902.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.46%)</title><rect x="900.5" y="1875.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="903.5" y="1886.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.46%)</title><rect x="905.9" y="1875.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.46%)</title><rect x="911.4" y="1891.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 6.48%)</title><rect x="916.9" y="1891.0" width="76.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.9" y="1902.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 4.17%)</title><rect x="944.2" y="1875.0" width="49.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.2" y="1886.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 4.17%)</title><rect x="944.2" y="1859.0" width="49.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="947.2" y="1870.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.46%)</title><rect x="949.6" y="1843.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="952.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.46%)</title><rect x="949.6" y="1827.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 3.24%)</title><rect x="955.1" y="1843.0" width="38.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="958.1" y="1854.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.46%)</title><rect x="987.9" y="1827.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.93%)</title><rect x="993.3" y="1891.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.93%)</title><rect x="993.3" y="1875.0" width="11.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.46%)</title><rect x="998.8" y="1859.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.93%)</title><rect x="1004.3" y="1891.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.93%)</title><rect x="1004.3" y="1875.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.3" y="1886.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.46%)</title><rect x="1004.3" y="1859.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.3" y="1870.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.46%)</title><rect x="1009.7" y="1859.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.7" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.46%)</title><rect x="1015.2" y="1891.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 5.56%)</title><rect x="1020.6" y="1907.0" width="65.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1023.6" y="1918.0">PhaseIt..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 5.09%)</title><rect x="1020.6" y="1891.0" width="60.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1023.6" y="1902.0">PhaseI..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1026.1" y="1875.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.1" y="1886.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.46%)</title><rect x="1026.1" y="1859.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.1" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.46%)</title><rect x="1026.1" y="1843.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.1" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.46%)</title><rect x="1026.1" y="1827.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.1" y="1838.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.46%)</title><rect x="1026.1" y="1811.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.1" y="1822.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.46%)</title><rect x="1026.1" y="1795.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.1" y="1806.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.93%)</title><rect x="1031.6" y="1875.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1034.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.93%)</title><rect x="1042.5" y="1875.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.5" y="1886.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.46%)</title><rect x="1042.5" y="1859.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.5" y="1870.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.46%)</title><rect x="1042.5" y="1843.0" width="5.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1045.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1048.0" y="1859.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.0" y="1870.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.46%)</title><rect x="1048.0" y="1843.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1053.4" y="1875.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.4" y="1886.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.46%)</title><rect x="1053.4" y="1859.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.4" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.93%)</title><rect x="1058.9" y="1875.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.46%)</title><rect x="1058.9" y="1859.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1058.9" y="1843.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.9" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.46%)</title><rect x="1058.9" y="1827.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.9" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.46%)</title><rect x="1064.4" y="1859.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.4" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1069.8" y="1875.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.8" y="1886.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.46%)</title><rect x="1069.8" y="1859.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.8" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1843.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.8" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1827.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.8" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1811.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.8" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1795.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.8" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1779.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.8" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1763.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.8" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1747.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.8" y="1758.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.46%)</title><rect x="1069.8" y="1731.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.8" y="1742.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="1069.8" y="1715.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.8" y="1726.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.46%)</title><rect x="1075.3" y="1875.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.3" y="1886.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.46%)</title><rect x="1080.7" y="1891.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.7" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.93%)</title><rect x="1086.2" y="1907.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.2" y="1918.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.46%)</title><rect x="1086.2" y="1891.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.46%)</title><rect x="1086.2" y="1875.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.46%)</title><rect x="1086.2" y="1859.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist0(Node*) (1 samples, 0.46%)</title><rect x="1086.2" y="1843.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.2" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.46%)</title><rect x="1091.7" y="1891.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.46%)</title><rect x="1091.7" y="1875.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.46%)</title><rect x="1091.7" y="1859.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.7" y="1870.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.46%)</title><rect x="1091.7" y="1843.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.7" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.93%)</title><rect x="1097.1" y="1907.0" width="11.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1100.1" y="1918.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 5.56%)</title><rect x="1108.1" y="1923.0" width="65.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.1" y="1934.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 5.56%)</title><rect x="1108.1" y="1907.0" width="65.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.1" y="1918.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 5.56%)</title><rect x="1108.1" y="1891.0" width="65.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.1" y="1902.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 5.56%)</title><rect x="1108.1" y="1875.0" width="65.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.1" y="1886.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 5.56%)</title><rect x="1108.1" y="1859.0" width="65.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.1" y="1870.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 5.09%)</title><rect x="1108.1" y="1843.0" width="60.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.1" y="1854.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.70%)</title><rect x="1108.1" y="1827.0" width="43.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.1" y="1838.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.70%)</title><rect x="1108.1" y="1811.0" width="43.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.1" y="1822.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.24%)</title><rect x="1108.1" y="1795.0" width="38.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.1" y="1806.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.24%)</title><rect x="1108.1" y="1779.0" width="38.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.1" y="1790.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.24%)</title><rect x="1108.1" y="1763.0" width="38.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.1" y="1774.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.78%)</title><rect x="1108.1" y="1747.0" width="32.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.1" y="1758.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.78%)</title><rect x="1108.1" y="1731.0" width="32.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.1" y="1742.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.78%)</title><rect x="1108.1" y="1715.0" width="32.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.1" y="1726.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.78%)</title><rect x="1108.1" y="1699.0" width="32.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.1" y="1710.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.78%)</title><rect x="1108.1" y="1683.0" width="32.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.1" y="1694.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.78%)</title><rect x="1108.1" y="1667.0" width="32.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.1" y="1678.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.31%)</title><rect x="1108.1" y="1651.0" width="27.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.1" y="1662.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1108.1" y="1635.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.1" y="1646.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1108.1" y="1619.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.1" y="1630.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1108.1" y="1603.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.1" y="1614.0"></text>
</g>
<g>
<title>ciMethod::is_accessor() const (1 samples, 0.46%)</title><rect x="1108.1" y="1587.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.1" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.85%)</title><rect x="1113.5" y="1635.0" width="21.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.5" y="1646.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.85%)</title><rect x="1113.5" y="1619.0" width="21.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.5" y="1630.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.85%)</title><rect x="1113.5" y="1603.0" width="21.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.5" y="1614.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.85%)</title><rect x="1113.5" y="1587.0" width="21.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.5" y="1598.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.85%)</title><rect x="1113.5" y="1571.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.5" y="1582.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.85%)</title><rect x="1113.5" y="1555.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.5" y="1566.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1113.5" y="1539.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.5" y="1550.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1113.5" y="1523.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.5" y="1534.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1113.5" y="1507.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.5" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1113.5" y="1491.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.5" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1113.5" y="1475.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.5" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1113.5" y="1459.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.5" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1113.5" y="1443.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.5" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1113.5" y="1427.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.5" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.46%)</title><rect x="1113.5" y="1411.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.5" y="1422.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.46%)</title><rect x="1113.5" y="1395.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.5" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1113.5" y="1379.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.5" y="1390.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1113.5" y="1363.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.5" y="1374.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.46%)</title><rect x="1113.5" y="1347.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.5" y="1358.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.46%)</title><rect x="1113.5" y="1331.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.5" y="1342.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1113.5" y="1315.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.5" y="1326.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.46%)</title><rect x="1113.5" y="1299.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.5" y="1310.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.46%)</title><rect x="1113.5" y="1283.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.5" y="1294.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.46%)</title><rect x="1113.5" y="1267.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.5" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1119.0" y="1539.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.0" y="1550.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1119.0" y="1523.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.0" y="1534.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1119.0" y="1507.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.0" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1119.0" y="1491.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1119.0" y="1475.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1119.0" y="1459.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.0" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1119.0" y="1443.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.0" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1119.0" y="1427.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1119.0" y="1411.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.0" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1119.0" y="1395.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1119.0" y="1379.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1119.0" y="1363.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.0" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1119.0" y="1347.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.0" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1119.0" y="1331.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1119.0" y="1315.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.0" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1119.0" y="1299.0" width="10.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1119.0" y="1283.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1119.0" y="1267.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.0" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1119.0" y="1251.0" width="10.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.0" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1119.0" y="1235.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1119.0" y="1219.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.0" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1119.0" y="1203.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1119.0" y="1187.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1119.0" y="1171.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.0" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1119.0" y="1155.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.0" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1119.0" y="1139.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1119.0" y="1123.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1119.0" y="1107.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1119.0" y="1091.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1119.0" y="1075.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1119.0" y="1059.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1119.0" y="1043.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1119.0" y="1027.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1119.0" y="1011.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1119.0" y="995.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1119.0" y="979.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.0" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.46%)</title><rect x="1119.0" y="963.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.0" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1119.0" y="947.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.0" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1119.0" y="931.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.0" y="942.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1119.0" y="915.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.0" y="926.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.46%)</title><rect x="1119.0" y="899.0" width="5.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1122.0" y="910.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.46%)</title><rect x="1124.4" y="1171.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.4" y="1182.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.46%)</title><rect x="1124.4" y="1155.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.4" y="1166.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.46%)</title><rect x="1124.4" y="1139.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.4" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1129.9" y="1539.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.9" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1129.9" y="1523.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.9" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1129.9" y="1507.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1129.9" y="1491.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1129.9" y="1475.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1129.9" y="1459.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1129.9" y="1443.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.9" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1129.9" y="1427.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.9" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1129.9" y="1411.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.9" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1129.9" y="1395.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1129.9" y="1379.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1129.9" y="1363.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1129.9" y="1347.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.9" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1129.9" y="1331.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1129.9" y="1315.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1129.9" y="1299.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1129.9" y="1283.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1129.9" y="1267.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1129.9" y="1251.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.9" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1129.9" y="1235.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1129.9" y="1219.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1129.9" y="1203.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1129.9" y="1187.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1129.9" y="1171.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1129.9" y="1155.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.9" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1129.9" y="1139.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.9" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1129.9" y="1123.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1129.9" y="1107.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1129.9" y="1091.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1129.9" y="1075.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1129.9" y="1059.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.46%)</title><rect x="1129.9" y="1043.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="1054.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.46%)</title><rect x="1129.9" y="1027.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.46%)</title><rect x="1129.9" y="1011.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.9" y="1022.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.46%)</title><rect x="1129.9" y="995.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.9" y="1006.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.46%)</title><rect x="1129.9" y="979.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.9" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1129.9" y="963.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.9" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1129.9" y="947.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.9" y="958.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.46%)</title><rect x="1129.9" y="931.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.9" y="942.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.46%)</title><rect x="1129.9" y="915.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.46%)</title><rect x="1135.4" y="1651.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.4" y="1662.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.46%)</title><rect x="1135.4" y="1635.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="1646.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.46%)</title><rect x="1135.4" y="1619.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.4" y="1630.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.46%)</title><rect x="1135.4" y="1603.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.4" y="1614.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1135.4" y="1587.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1140.8" y="1747.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.8" y="1758.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.46%)</title><rect x="1140.8" y="1731.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.8" y="1742.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.46%)</title><rect x="1140.8" y="1715.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.8" y="1726.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.46%)</title><rect x="1146.3" y="1795.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.3" y="1806.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1151.8" y="1827.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1151.8" y="1811.0" width="10.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.8" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1151.8" y="1795.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1151.8" y="1779.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1151.8" y="1763.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1151.8" y="1747.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1151.8" y="1731.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1151.8" y="1715.0" width="10.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.8" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1151.8" y="1699.0" width="10.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1151.8" y="1683.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1151.8" y="1667.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1151.8" y="1651.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1151.8" y="1635.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1151.8" y="1619.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1151.8" y="1603.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1151.8" y="1587.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1151.8" y="1571.0" width="10.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1151.8" y="1555.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1151.8" y="1539.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1151.8" y="1523.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1151.8" y="1507.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1151.8" y="1491.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1151.8" y="1475.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1151.8" y="1459.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1151.8" y="1443.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.8" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1151.8" y="1427.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1151.8" y="1411.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1151.8" y="1395.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1151.8" y="1379.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1151.8" y="1363.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1151.8" y="1347.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1151.8" y="1331.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.8" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1151.8" y="1315.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1151.8" y="1299.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1151.8" y="1283.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1151.8" y="1267.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="1278.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.46%)</title><rect x="1151.8" y="1251.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.8" y="1262.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.46%)</title><rect x="1151.8" y="1235.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="1246.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1151.8" y="1219.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.46%)</title><rect x="1151.8" y="1203.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="1214.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.46%)</title><rect x="1151.8" y="1187.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="1198.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.46%)</title><rect x="1151.8" y="1171.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="1182.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1157.2" y="1523.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1157.2" y="1507.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1157.2" y="1491.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1157.2" y="1475.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1157.2" y="1459.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1157.2" y="1443.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1157.2" y="1427.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1157.2" y="1411.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1157.2" y="1395.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1157.2" y="1379.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1157.2" y="1363.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1157.2" y="1347.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1157.2" y="1331.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1157.2" y="1315.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1157.2" y="1299.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.2" y="1310.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.46%)</title><rect x="1157.2" y="1283.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.2" y="1294.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (1 samples, 0.46%)</title><rect x="1157.2" y="1267.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.2" y="1278.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.46%)</title><rect x="1162.7" y="1827.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.7" y="1838.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1162.7" y="1811.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="1822.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1162.7" y="1795.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="1806.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1162.7" y="1779.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.7" y="1790.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.46%)</title><rect x="1162.7" y="1763.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="1774.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.46%)</title><rect x="1162.7" y="1747.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="1758.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="1162.7" y="1731.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="1742.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="1162.7" y="1715.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.7" y="1726.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.46%)</title><rect x="1168.1" y="1843.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.1" y="1854.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.46%)</title><rect x="1168.1" y="1827.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.1" y="1838.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.46%)</title><rect x="1168.1" y="1811.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.1" y="1822.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.46%)</title><rect x="1168.1" y="1795.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.1" y="1806.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.93%)</title><rect x="1173.6" y="1955.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="1966.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.93%)</title><rect x="1173.6" y="1939.0" width="10.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="1950.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.93%)</title><rect x="1173.6" y="1923.0" width="10.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.93%)</title><rect x="1173.6" y="1907.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="1918.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.93%)</title><rect x="1173.6" y="1891.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1902.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.93%)</title><rect x="1173.6" y="1875.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="1886.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.93%)</title><rect x="1173.6" y="1859.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="1870.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.93%)</title><rect x="1173.6" y="1843.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.6" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.93%)</title><rect x="1173.6" y="1827.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.93%)</title><rect x="1173.6" y="1811.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1173.6" y="1795.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.6" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::collect_args_for_profiling(Values*, ciMethod*, bool) (1 samples, 0.46%)</title><rect x="1173.6" y="1779.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.6" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.46%)</title><rect x="1173.6" y="1763.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="1774.0"></text>
</g>
<g>
<title>BranchData::cell_count() const (1 samples, 0.46%)</title><rect x="1173.6" y="1747.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="1758.0"></text>
</g>
<g>
<title>ValueType::is_constant() const (1 samples, 0.46%)</title><rect x="1179.1" y="1795.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="1806.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.46%)</title><rect x="1184.5" y="1987.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="1998.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.46%)</title><rect x="1184.5" y="1971.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="1982.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.46%)</title><rect x="1184.5" y="1955.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="1966.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.46%)</title><rect x="1184.5" y="1939.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="1950.0"></text>
</g>
</g>
</svg>
