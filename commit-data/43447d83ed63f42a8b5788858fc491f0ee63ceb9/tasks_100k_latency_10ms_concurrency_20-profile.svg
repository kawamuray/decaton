<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (303 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 7.59%)</title><rect x="10.0" y="1219.0" width="89.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (23 samples, 7.59%)</title><rect x="10.0" y="1203.0" width="89.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.33%)</title><rect x="10.0" y="1187.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.33%)</title><rect x="10.0" y="1171.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (10 samples, 3.30%)</title><rect x="13.9" y="1187.0" width="38.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.9" y="1198.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2074020945.accept (8 samples, 2.64%)</title><rect x="17.8" y="1171.0" width="31.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.8" y="1182.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (8 samples, 2.64%)</title><rect x="17.8" y="1155.0" width="31.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.8" y="1166.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 1.65%)</title><rect x="17.8" y="1139.0" width="19.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 1.65%)</title><rect x="17.8" y="1123.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 1.65%)</title><rect x="17.8" y="1107.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.65%)</title><rect x="17.8" y="1091.0" width="19.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.65%)</title><rect x="17.8" y="1075.0" width="19.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.65%)</title><rect x="17.8" y="1059.0" width="19.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.66%)</title><rect x="17.8" y="1043.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.66%)</title><rect x="17.8" y="1027.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.66%)</title><rect x="17.8" y="1011.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.99%)</title><rect x="25.6" y="1043.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.99%)</title><rect x="25.6" y="1027.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.99%)</title><rect x="25.6" y="1011.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.33%)</title><rect x="37.3" y="1139.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.33%)</title><rect x="37.3" y="1123.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.66%)</title><rect x="41.2" y="1139.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.66%)</title><rect x="41.2" y="1123.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.33%)</title><rect x="41.2" y="1107.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.33%)</title><rect x="41.2" y="1091.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.33%)</title><rect x="41.2" y="1075.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.33%)</title><rect x="41.2" y="1059.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.2" y="1070.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.33%)</title><rect x="45.0" y="1107.0" width="3.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="48.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.33%)</title><rect x="48.9" y="1171.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.33%)</title><rect x="48.9" y="1155.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.96%)</title><rect x="52.8" y="1187.0" width="46.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.8" y="1198.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.96%)</title><rect x="52.8" y="1171.0" width="46.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.8" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 3.30%)</title><rect x="52.8" y="1155.0" width="39.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.8" y="1166.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.33%)</title><rect x="52.8" y="1139.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.33%)</title><rect x="52.8" y="1123.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.33%)</title><rect x="52.8" y="1107.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.32%)</title><rect x="56.7" y="1139.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.32%)</title><rect x="56.7" y="1123.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="60.6" y="1107.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.33%)</title><rect x="60.6" y="1091.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.33%)</title><rect x="60.6" y="1075.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.33%)</title><rect x="60.6" y="1059.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.33%)</title><rect x="60.6" y="1043.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.33%)</title><rect x="60.6" y="1027.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.33%)</title><rect x="60.6" y="1011.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="60.6" y="995.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="60.6" y="979.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1482536313.shouldBlock (1 samples, 0.33%)</title><rect x="64.5" y="1107.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.33%)</title><rect x="64.5" y="1091.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.33%)</title><rect x="64.5" y="1075.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.33%)</title><rect x="64.5" y="1059.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.33%)</title><rect x="68.4" y="1107.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.33%)</title><rect x="68.4" y="1091.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.65%)</title><rect x="72.3" y="1139.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.33%)</title><rect x="72.3" y="1123.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.3" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayDeque$DeqIterator.next (1 samples, 0.33%)</title><rect x="72.3" y="1107.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.32%)</title><rect x="76.2" y="1123.0" width="15.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.99%)</title><rect x="76.2" y="1107.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.99%)</title><rect x="76.2" y="1091.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.66%)</title><rect x="76.2" y="1075.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.33%)</title><rect x="76.2" y="1059.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.33%)</title><rect x="76.2" y="1043.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.33%)</title><rect x="76.2" y="1027.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="79.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.33%)</title><rect x="76.2" y="1011.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.33%)</title><rect x="76.2" y="995.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.33%)</title><rect x="80.1" y="1059.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.33%)</title><rect x="80.1" y="1043.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.33%)</title><rect x="84.0" y="1075.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.33%)</title><rect x="84.0" y="1059.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.33%)</title><rect x="84.0" y="1043.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.33%)</title><rect x="84.0" y="1027.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.33%)</title><rect x="87.9" y="1107.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.33%)</title><rect x="87.9" y="1091.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.33%)</title><rect x="87.9" y="1075.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.33%)</title><rect x="87.9" y="1059.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.9" y="1070.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="87.9" y="1043.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="90.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.66%)</title><rect x="91.8" y="1155.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.66%)</title><rect x="91.8" y="1139.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.66%)</title><rect x="91.8" y="1123.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.33%)</title><rect x="91.8" y="1107.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/131820941.accept (1 samples, 0.33%)</title><rect x="91.8" y="1091.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.33%)</title><rect x="91.8" y="1075.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.33%)</title><rect x="91.8" y="1059.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.33%)</title><rect x="95.7" y="1107.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.33%)</title><rect x="95.7" y="1091.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (175 samples, 57.76%)</title><rect x="99.6" y="1219.0" width="681.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.6" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (175 samples, 57.76%)</title><rect x="99.6" y="1203.0" width="681.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.6" y="1214.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (175 samples, 57.76%)</title><rect x="99.6" y="1187.0" width="681.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.6" y="1198.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (168 samples, 55.45%)</title><rect x="99.6" y="1171.0" width="654.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.6" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (168 samples, 55.45%)</title><rect x="99.6" y="1155.0" width="654.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.6" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (168 samples, 55.45%)</title><rect x="99.6" y="1139.0" width="654.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.6" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (168 samples, 55.45%)</title><rect x="99.6" y="1123.0" width="654.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.6" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.33%)</title><rect x="107.4" y="1107.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="110.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.33%)</title><rect x="107.4" y="1091.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1542620057.get (1 samples, 0.33%)</title><rect x="107.4" y="1075.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.33%)</title><rect x="107.4" y="1059.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.4" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="107.4" y="1043.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="110.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (30 samples, 9.90%)</title><rect x="111.3" y="1107.0" width="116.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.3" y="1118.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (30 samples, 9.90%)</title><rect x="111.3" y="1091.0" width="116.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.3" y="1102.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (30 samples, 9.90%)</title><rect x="111.3" y="1075.0" width="116.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.3" y="1086.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 9.90%)</title><rect x="111.3" y="1059.0" width="116.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.3" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 9.90%)</title><rect x="111.3" y="1043.0" width="116.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.3" y="1054.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (30 samples, 9.90%)</title><rect x="111.3" y="1027.0" width="116.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.3" y="1038.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 1.98%)</title><rect x="111.3" y="1011.0" width="23.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.3" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.66%)</title><rect x="111.3" y="995.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.66%)</title><rect x="111.3" y="979.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.32%)</title><rect x="119.0" y="995.0" width="15.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.32%)</title><rect x="119.0" y="979.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="122.0" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="119.0" y="963.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="122.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="119.0" y="947.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="122.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="119.0" y="931.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="122.0" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="119.0" y="915.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="122.0" y="926.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.33%)</title><rect x="119.0" y="899.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="122.0" y="910.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.33%)</title><rect x="119.0" y="883.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="122.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.99%)</title><rect x="122.9" y="963.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.9" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="122.9" y="947.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="125.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.66%)</title><rect x="126.8" y="947.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.66%)</title><rect x="126.8" y="931.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 7.26%)</title><rect x="134.6" y="1011.0" width="85.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="137.6" y="1022.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.33%)</title><rect x="134.6" y="995.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.33%)</title><rect x="134.6" y="979.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.33%)</title><rect x="134.6" y="963.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="137.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.33%)</title><rect x="134.6" y="947.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.66%)</title><rect x="138.5" y="995.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.66%)</title><rect x="138.5" y="979.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="138.5" y="963.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.33%)</title><rect x="142.4" y="963.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.99%)</title><rect x="146.3" y="995.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.99%)</title><rect x="146.3" y="979.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.99%)</title><rect x="146.3" y="963.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.66%)</title><rect x="150.2" y="947.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.33%)</title><rect x="158.0" y="995.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.33%)</title><rect x="158.0" y="979.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="158.0" y="963.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.33%)</title><rect x="158.0" y="947.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.33%)</title><rect x="158.0" y="931.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 4.95%)</title><rect x="161.9" y="995.0" width="58.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.9" y="1006.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.33%)</title><rect x="161.9" y="979.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.33%)</title><rect x="161.9" y="963.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (14 samples, 4.62%)</title><rect x="165.8" y="979.0" width="54.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.8" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (14 samples, 4.62%)</title><rect x="165.8" y="963.0" width="54.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.8" y="974.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (14 samples, 4.62%)</title><rect x="165.8" y="947.0" width="54.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.8" y="958.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.65%)</title><rect x="169.7" y="931.0" width="19.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.99%)</title><rect x="173.6" y="915.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.99%)</title><rect x="173.6" y="899.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.99%)</title><rect x="173.6" y="883.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.66%)</title><rect x="177.5" y="867.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.66%)</title><rect x="177.5" y="851.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.33%)</title><rect x="185.2" y="915.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.99%)</title><rect x="189.1" y="931.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.66%)</title><rect x="193.0" y="915.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.66%)</title><rect x="193.0" y="899.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.66%)</title><rect x="193.0" y="883.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.66%)</title><rect x="193.0" y="867.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.66%)</title><rect x="200.8" y="931.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.66%)</title><rect x="200.8" y="915.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.66%)</title><rect x="200.8" y="899.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.66%)</title><rect x="200.8" y="883.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.8" y="894.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.66%)</title><rect x="200.8" y="867.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.8" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.66%)</title><rect x="200.8" y="851.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.8" y="862.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.66%)</title><rect x="200.8" y="835.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.99%)</title><rect x="208.6" y="931.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.99%)</title><rect x="208.6" y="915.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.99%)</title><rect x="208.6" y="899.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.33%)</title><rect x="216.4" y="883.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.66%)</title><rect x="220.3" y="1011.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.66%)</title><rect x="220.3" y="995.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.66%)</title><rect x="220.3" y="979.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.33%)</title><rect x="220.3" y="963.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.33%)</title><rect x="224.2" y="963.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (129 samples, 42.57%)</title><rect x="228.1" y="1107.0" width="502.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.1" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (14 samples, 4.62%)</title><rect x="228.1" y="1091.0" width="54.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.1" y="1102.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 4.62%)</title><rect x="228.1" y="1075.0" width="54.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.1" y="1086.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 4.62%)</title><rect x="228.1" y="1059.0" width="54.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.1" y="1070.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 1.65%)</title><rect x="232.0" y="1043.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 1.65%)</title><rect x="232.0" y="1027.0" width="19.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.99%)</title><rect x="239.8" y="1011.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.99%)</title><rect x="239.8" y="995.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.99%)</title><rect x="239.8" y="979.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="251.5" y="1043.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="251.5" y="1027.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="251.5" y="1011.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.31%)</title><rect x="255.3" y="1043.0" width="27.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="1054.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.31%)</title><rect x="255.3" y="1027.0" width="27.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.3" y="1038.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.33%)</title><rect x="255.3" y="1011.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.98%)</title><rect x="259.2" y="1011.0" width="23.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.2" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.33%)</title><rect x="278.7" y="995.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.99%)</title><rect x="282.6" y="1091.0" width="11.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.99%)</title><rect x="282.6" y="1075.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.99%)</title><rect x="282.6" y="1059.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.6" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="290.4" y="1043.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="293.4" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="290.4" y="1027.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="293.4" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="290.4" y="1011.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="293.4" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="290.4" y="995.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="293.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 7.26%)</title><rect x="294.3" y="1091.0" width="85.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.3" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 7.26%)</title><rect x="294.3" y="1075.0" width="85.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.3" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 2.97%)</title><rect x="294.3" y="1059.0" width="35.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.3" y="1070.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.31%)</title><rect x="294.3" y="1043.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.3" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.98%)</title><rect x="298.2" y="1027.0" width="23.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.2" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.32%)</title><rect x="306.0" y="1011.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.32%)</title><rect x="306.0" y="995.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.32%)</title><rect x="306.0" y="979.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.33%)</title><rect x="306.0" y="963.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="309.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.99%)</title><rect x="309.9" y="963.0" width="11.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="312.9" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.33%)</title><rect x="309.9" y="947.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="312.9" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.66%)</title><rect x="313.8" y="947.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="316.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.66%)</title><rect x="313.8" y="931.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="316.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.33%)</title><rect x="313.8" y="915.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="316.8" y="926.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="317.7" y="915.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="320.7" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.66%)</title><rect x="321.6" y="1043.0" width="7.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="324.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.99%)</title><rect x="329.3" y="1059.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.33%)</title><rect x="329.3" y="1043.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.3" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="329.3" y="1027.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="332.3" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.33%)</title><rect x="329.3" y="1011.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="332.3" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="329.3" y="995.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="332.3" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.33%)</title><rect x="329.3" y="979.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="332.3" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.66%)</title><rect x="333.2" y="1043.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.66%)</title><rect x="333.2" y="1027.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.2" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 3.30%)</title><rect x="341.0" y="1059.0" width="39.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.0" y="1070.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.30%)</title><rect x="341.0" y="1043.0" width="39.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.0" y="1054.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.33%)</title><rect x="341.0" y="1027.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.33%)</title><rect x="341.0" y="1011.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.33%)</title><rect x="341.0" y="995.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.33%)</title><rect x="341.0" y="979.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="344.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.33%)</title><rect x="341.0" y="963.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.97%)</title><rect x="344.9" y="1027.0" width="35.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.9" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 2.64%)</title><rect x="348.8" y="1011.0" width="31.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.8" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.64%)</title><rect x="348.8" y="995.0" width="31.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.8" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.99%)</title><rect x="364.4" y="979.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.4" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="372.2" y="963.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="375.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="372.2" y="947.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="375.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="372.2" y="931.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="375.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="372.2" y="915.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="375.2" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.33%)</title><rect x="372.2" y="899.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="375.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.33%)</title><rect x="372.2" y="883.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="375.2" y="894.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.33%)</title><rect x="376.1" y="979.0" width="3.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="379.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (84 samples, 27.72%)</title><rect x="380.0" y="1091.0" width="327.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.0" y="1102.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (84 samples, 27.72%)</title><rect x="380.0" y="1075.0" width="327.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.0" y="1086.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/588734280.process (70 samples, 23.10%)</title><rect x="395.5" y="1059.0" width="272.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.5" y="1070.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (70 samples, 23.10%)</title><rect x="395.5" y="1043.0" width="272.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.5" y="1054.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (70 samples, 23.10%)</title><rect x="395.5" y="1027.0" width="272.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.5" y="1038.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (70 samples, 23.10%)</title><rect x="395.5" y="1011.0" width="272.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.5" y="1022.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>java/lang/Thread.sleep (66 samples, 21.78%)</title><rect x="399.4" y="995.0" width="257.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.4" y="1006.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.66%)</title><rect x="430.6" y="979.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="433.6" y="990.0"></text>
</g>
<g>
<title>JVM_Sleep (49 samples, 16.17%)</title><rect x="438.4" y="979.0" width="190.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="441.4" y="990.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.32%)</title><rect x="457.9" y="963.0" width="15.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="460.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="473.4" y="963.0" width="7.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="476.4" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="481.2" y="963.0" width="3.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="484.2" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="481.2" y="947.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="484.2" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.66%)</title><rect x="485.1" y="963.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="488.1" y="974.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (35 samples, 11.55%)</title><rect x="492.9" y="963.0" width="136.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="495.9" y="974.0">os::sleep(Thread*..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.99%)</title><rect x="520.2" y="947.0" width="11.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="523.2" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.99%)</title><rect x="520.2" y="931.0" width="11.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="523.2" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.99%)</title><rect x="531.8" y="947.0" width="11.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="534.8" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 4.62%)</title><rect x="543.5" y="947.0" width="54.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="546.5" y="958.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.66%)</title><rect x="598.1" y="947.0" width="7.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="601.1" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.33%)</title><rect x="605.8" y="947.0" width="3.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="608.8" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.33%)</title><rect x="609.7" y="947.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="612.7" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.33%)</title><rect x="613.6" y="947.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="616.6" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="617.5" y="947.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="620.5" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.66%)</title><rect x="621.4" y="947.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="624.4" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 1.98%)</title><rect x="629.2" y="979.0" width="23.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="632.2" y="990.0">j..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.33%)</title><rect x="652.6" y="979.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.6" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.99%)</title><rect x="656.5" y="995.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="659.5" y="1006.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.99%)</title><rect x="656.5" y="979.0" width="11.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="659.5" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 1.98%)</title><rect x="668.2" y="1059.0" width="23.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.2" y="1070.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 1.98%)</title><rect x="668.2" y="1043.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="671.2" y="1054.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1473695826.get$Lambda (6 samples, 1.98%)</title><rect x="668.2" y="1027.0" width="23.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.2" y="1038.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1473695826.&lt;init&gt; (5 samples, 1.65%)</title><rect x="672.0" y="1011.0" width="19.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="675.0" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="679.8" y="995.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="682.8" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="679.8" y="979.0" width="3.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="682.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.66%)</title><rect x="683.7" y="995.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.66%)</title><rect x="691.5" y="1059.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.33%)</title><rect x="695.4" y="1043.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.4" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="695.4" y="1027.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="698.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.66%)</title><rect x="699.3" y="1059.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="702.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 1.65%)</title><rect x="707.1" y="1091.0" width="19.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (3 samples, 0.99%)</title><rect x="707.1" y="1075.0" width="11.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.1" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="707.1" y="1059.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="710.1" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="707.1" y="1043.0" width="3.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="710.1" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.66%)</title><rect x="711.0" y="1059.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="714.0" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.66%)</title><rect x="718.8" y="1075.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="721.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.33%)</title><rect x="726.6" y="1091.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="729.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.33%)</title><rect x="726.6" y="1075.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.33%)</title><rect x="726.6" y="1059.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/60327070.accept (1 samples, 0.33%)</title><rect x="726.6" y="1043.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.33%)</title><rect x="726.6" y="1027.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="729.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.33%)</title><rect x="726.6" y="1011.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.6" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.33%)</title><rect x="726.6" y="995.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="729.6" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.33%)</title><rect x="726.6" y="979.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="729.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.65%)</title><rect x="730.5" y="1107.0" width="19.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.65%)</title><rect x="730.5" y="1091.0" width="19.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="733.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.66%)</title><rect x="734.4" y="1075.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.66%)</title><rect x="742.1" y="1075.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="745.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/60327070.accept (2 samples, 0.66%)</title><rect x="742.1" y="1059.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="745.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (2 samples, 0.66%)</title><rect x="742.1" y="1043.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.66%)</title><rect x="742.1" y="1027.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="745.1" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.66%)</title><rect x="742.1" y="1011.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="745.1" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.66%)</title><rect x="742.1" y="995.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.1" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="749.9" y="1107.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="752.9" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="749.9" y="1091.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="752.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.33%)</title><rect x="753.8" y="1171.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.33%)</title><rect x="753.8" y="1155.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.33%)</title><rect x="753.8" y="1139.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.33%)</title><rect x="753.8" y="1123.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.98%)</title><rect x="757.7" y="1171.0" width="23.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.7" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 1.98%)</title><rect x="757.7" y="1155.0" width="23.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.7" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.65%)</title><rect x="761.6" y="1139.0" width="19.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="764.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.65%)</title><rect x="761.6" y="1123.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.65%)</title><rect x="761.6" y="1107.0" width="19.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="764.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.65%)</title><rect x="761.6" y="1091.0" width="19.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="764.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.33%)</title><rect x="781.1" y="1219.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="784.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.33%)</title><rect x="781.1" y="1203.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="784.1" y="1214.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.33%)</title><rect x="781.1" y="1187.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="784.1" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.33%)</title><rect x="781.1" y="1171.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.1" y="1182.0"></text>
</g>
<g>
<title>Thread::SpinAcquire(int volatile*, char const*) (1 samples, 0.33%)</title><rect x="781.1" y="1155.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.1" y="1166.0"></text>
</g>
<g>
<title>start_thread (104 samples, 34.32%)</title><rect x="785.0" y="1219.0" width="405.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="788.0" y="1230.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (104 samples, 34.32%)</title><rect x="785.0" y="1203.0" width="405.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="788.0" y="1214.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 2.64%)</title><rect x="785.0" y="1187.0" width="31.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.0" y="1198.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.64%)</title><rect x="785.0" y="1171.0" width="31.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.0" y="1182.0">G1..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 2.31%)</title><rect x="785.0" y="1155.0" width="27.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="788.0" y="1166.0">G..</text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.33%)</title><rect x="785.0" y="1139.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="788.0" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.33%)</title><rect x="785.0" y="1123.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.0" y="1134.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.33%)</title><rect x="785.0" y="1107.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.0" y="1118.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.33%)</title><rect x="785.0" y="1091.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="788.0" y="1102.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.33%)</title><rect x="785.0" y="1075.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="788.0" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.33%)</title><rect x="785.0" y="1059.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="788.0" y="1070.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.33%)</title><rect x="785.0" y="1043.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="788.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.33%)</title><rect x="785.0" y="1027.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.0" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 1.98%)</title><rect x="788.9" y="1139.0" width="23.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.9" y="1150.0">G..</text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (6 samples, 1.98%)</title><rect x="788.9" y="1123.0" width="23.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.9" y="1134.0">S..</text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.33%)</title><rect x="812.2" y="1155.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="815.2" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.33%)</title><rect x="812.2" y="1139.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.2" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.33%)</title><rect x="812.2" y="1123.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="815.2" y="1134.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.33%)</title><rect x="812.2" y="1107.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="815.2" y="1118.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.33%)</title><rect x="812.2" y="1091.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="815.2" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.33%)</title><rect x="812.2" y="1075.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="815.2" y="1086.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.33%)</title><rect x="812.2" y="1059.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.2" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.33%)</title><rect x="812.2" y="1043.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="815.2" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (95 samples, 31.35%)</title><rect x="816.1" y="1187.0" width="370.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="819.1" y="1198.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (95 samples, 31.35%)</title><rect x="816.1" y="1171.0" width="370.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="819.1" y="1182.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (95 samples, 31.35%)</title><rect x="816.1" y="1155.0" width="370.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="819.1" y="1166.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (95 samples, 31.35%)</title><rect x="816.1" y="1139.0" width="370.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.1" y="1150.0">CompileBroker::invoke_compiler_on_method(CompileTa..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (91 samples, 30.03%)</title><rect x="816.1" y="1123.0" width="354.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="819.1" y="1134.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (91 samples, 30.03%)</title><rect x="816.1" y="1107.0" width="354.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="819.1" y="1118.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 17.82%)</title><rect x="816.1" y="1091.0" width="210.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="819.1" y="1102.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.33%)</title><rect x="816.1" y="1075.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="819.1" y="1086.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.33%)</title><rect x="816.1" y="1059.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="819.1" y="1070.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.33%)</title><rect x="816.1" y="1043.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="819.1" y="1054.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.33%)</title><rect x="816.1" y="1027.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="819.1" y="1038.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.33%)</title><rect x="816.1" y="1011.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="819.1" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.33%)</title><rect x="816.1" y="995.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.1" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.33%)</title><rect x="820.0" y="1075.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="823.0" y="1086.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.33%)</title><rect x="820.0" y="1059.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="823.0" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.33%)</title><rect x="820.0" y="1043.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="823.0" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.33%)</title><rect x="820.0" y="1027.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="823.0" y="1038.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (2 samples, 0.66%)</title><rect x="823.9" y="1075.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="826.9" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.65%)</title><rect x="831.7" y="1075.0" width="19.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="834.7" y="1086.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.33%)</title><rect x="831.7" y="1059.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.7" y="1070.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.32%)</title><rect x="835.6" y="1059.0" width="15.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="838.6" y="1070.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.66%)</title><rect x="839.5" y="1043.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="842.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.33%)</title><rect x="847.3" y="1043.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.3" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.33%)</title><rect x="847.3" y="1027.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="850.3" y="1038.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.33%)</title><rect x="847.3" y="1011.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="850.3" y="1022.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.33%)</title><rect x="851.2" y="1075.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="854.2" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.33%)</title><rect x="851.2" y="1059.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="854.2" y="1070.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.33%)</title><rect x="851.2" y="1043.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.33%)</title><rect x="855.1" y="1075.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="858.1" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.33%)</title><rect x="855.1" y="1059.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="858.1" y="1070.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.33%)</title><rect x="855.1" y="1043.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="858.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.66%)</title><rect x="859.0" y="1075.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="862.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.66%)</title><rect x="859.0" y="1059.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="862.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.33%)</title><rect x="859.0" y="1043.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="862.0" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.33%)</title><rect x="862.9" y="1043.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="865.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 13.53%)</title><rect x="866.8" y="1075.0" width="159.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.8" y="1086.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.33%)</title><rect x="866.8" y="1059.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="869.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.33%)</title><rect x="870.7" y="1059.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.66%)</title><rect x="874.6" y="1059.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.66%)</title><rect x="874.6" y="1043.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="877.6" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="878.4" y="1027.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="881.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.65%)</title><rect x="882.3" y="1059.0" width="19.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="885.3" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.33%)</title><rect x="897.9" y="1043.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="900.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.64%)</title><rect x="901.8" y="1059.0" width="31.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.8" y="1070.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="913.5" y="1043.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.99%)</title><rect x="917.4" y="1043.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="920.4" y="1054.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.33%)</title><rect x="929.1" y="1043.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="932.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.66%)</title><rect x="933.0" y="1059.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="936.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.33%)</title><rect x="940.8" y="1059.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.32%)</title><rect x="944.7" y="1059.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="947.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.66%)</title><rect x="952.4" y="1043.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="955.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.64%)</title><rect x="960.2" y="1059.0" width="31.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.2" y="1070.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.33%)</title><rect x="960.2" y="1043.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="963.2" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 2.31%)</title><rect x="964.1" y="1043.0" width="27.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.1" y="1054.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 2.31%)</title><rect x="964.1" y="1027.0" width="27.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.1" y="1038.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="964.1" y="1011.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.1" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 1.98%)</title><rect x="968.0" y="1011.0" width="23.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.0" y="1022.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="987.5" y="995.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.33%)</title><rect x="991.4" y="1059.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.4" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="991.4" y="1043.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="994.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.33%)</title><rect x="995.3" y="1059.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.3" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.33%)</title><rect x="995.3" y="1043.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.3" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.65%)</title><rect x="999.2" y="1059.0" width="19.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1002.2" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.99%)</title><rect x="1007.0" y="1043.0" width="11.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.0" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (2 samples, 0.66%)</title><rect x="1010.9" y="1027.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.9" y="1038.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.33%)</title><rect x="1014.8" y="1011.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.8" y="1022.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1014.8" y="995.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.8" y="1006.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.33%)</title><rect x="1014.8" y="979.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.8" y="990.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1014.8" y="963.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.8" y="974.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.33%)</title><rect x="1018.6" y="1059.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.6" y="1070.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.33%)</title><rect x="1022.5" y="1059.0" width="3.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1025.5" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 10.56%)</title><rect x="1026.4" y="1091.0" width="124.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.4" y="1102.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.33%)</title><rect x="1026.4" y="1075.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.4" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.33%)</title><rect x="1026.4" y="1059.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.4" y="1070.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.33%)</title><rect x="1026.4" y="1043.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.66%)</title><rect x="1030.3" y="1075.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.3" y="1086.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1030.3" y="1059.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.3" y="1070.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.33%)</title><rect x="1034.2" y="1059.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.2" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.33%)</title><rect x="1034.2" y="1043.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.2" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.33%)</title><rect x="1034.2" y="1027.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.2" y="1038.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.33%)</title><rect x="1034.2" y="1011.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.33%)</title><rect x="1038.1" y="1075.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1041.1" y="1086.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1038.1" y="1059.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.1" y="1070.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1038.1" y="1043.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 7.26%)</title><rect x="1042.0" y="1075.0" width="85.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.0" y="1086.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.33%)</title><rect x="1042.0" y="1059.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1045.9" y="1059.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 5.28%)</title><rect x="1049.8" y="1059.0" width="62.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.8" y="1070.0">PhaseI..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.33%)</title><rect x="1053.7" y="1043.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.7" y="1054.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.33%)</title><rect x="1053.7" y="1027.0" width="3.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1056.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 4.62%)</title><rect x="1057.6" y="1043.0" width="54.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.6" y="1054.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.33%)</title><rect x="1057.6" y="1027.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1060.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.33%)</title><rect x="1061.5" y="1027.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 3.96%)</title><rect x="1065.4" y="1027.0" width="46.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.4" y="1038.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.99%)</title><rect x="1100.4" y="1011.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.66%)</title><rect x="1112.1" y="1059.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.33%)</title><rect x="1116.0" y="1043.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1119.9" y="1059.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.33%)</title><rect x="1123.8" y="1059.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1123.8" y="1043.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.8" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1123.8" y="1027.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.8" y="1038.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.33%)</title><rect x="1123.8" y="1011.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.33%)</title><rect x="1123.8" y="995.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.8" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1123.8" y="979.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.99%)</title><rect x="1127.7" y="1075.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.99%)</title><rect x="1127.7" y="1059.0" width="11.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="1070.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1127.7" y="1043.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1127.7" y="1027.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.7" y="1038.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1127.7" y="1011.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.7" y="1022.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.33%)</title><rect x="1127.7" y="995.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.33%)</title><rect x="1127.7" y="979.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.33%)</title><rect x="1127.7" y="963.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.33%)</title><rect x="1127.7" y="947.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.7" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.33%)</title><rect x="1127.7" y="931.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.7" y="942.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.33%)</title><rect x="1127.7" y="915.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.33%)</title><rect x="1127.7" y="899.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.33%)</title><rect x="1127.7" y="883.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.66%)</title><rect x="1131.6" y="1043.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.33%)</title><rect x="1135.5" y="1027.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.5" y="1038.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.33%)</title><rect x="1135.5" y="1011.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.5" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.66%)</title><rect x="1139.4" y="1075.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.66%)</title><rect x="1139.4" y="1059.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.66%)</title><rect x="1139.4" y="1043.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.4" y="1054.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.33%)</title><rect x="1139.4" y="1027.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.4" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.33%)</title><rect x="1143.3" y="1027.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="1038.0"></text>
</g>
<g>
<title>SCMemProjNode::bottom_type() const (1 samples, 0.33%)</title><rect x="1147.2" y="1075.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.2" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.65%)</title><rect x="1151.1" y="1091.0" width="19.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.65%)</title><rect x="1151.1" y="1075.0" width="19.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.65%)</title><rect x="1151.1" y="1059.0" width="19.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.65%)</title><rect x="1151.1" y="1043.0" width="19.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.65%)</title><rect x="1151.1" y="1027.0" width="19.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="1038.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.33%)</title><rect x="1151.1" y="1011.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.1" y="1022.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.33%)</title><rect x="1151.1" y="995.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.1" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.33%)</title><rect x="1151.1" y="979.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.1" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.33%)</title><rect x="1151.1" y="963.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.32%)</title><rect x="1155.0" y="1011.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.32%)</title><rect x="1155.0" y="995.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.32%)</title><rect x="1155.0" y="979.0" width="15.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.32%)</title><rect x="1155.0" y="963.0" width="15.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.32%)</title><rect x="1155.0" y="947.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.32%)</title><rect x="1155.0" y="931.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.32%)</title><rect x="1155.0" y="915.0" width="15.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1155.0" y="899.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1155.0" y="883.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1155.0" y="867.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1155.0" y="851.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1155.0" y="835.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1155.0" y="819.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1155.0" y="803.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1155.0" y="787.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1155.0" y="771.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1155.0" y="755.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1155.0" y="739.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1155.0" y="723.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1155.0" y="707.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1155.0" y="691.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.33%)</title><rect x="1155.0" y="675.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.33%)</title><rect x="1155.0" y="659.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.33%)</title><rect x="1155.0" y="643.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1155.0" y="627.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.0" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1155.0" y="611.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.33%)</title><rect x="1155.0" y="595.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.33%)</title><rect x="1155.0" y="579.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.33%)</title><rect x="1155.0" y="563.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1155.0" y="547.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.0" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1155.0" y="531.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1155.0" y="515.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1155.0" y="499.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.0" y="510.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1155.0" y="483.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.33%)</title><rect x="1155.0" y="467.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1158.8" y="707.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1158.8" y="691.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1158.8" y="675.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1158.8" y="659.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1158.8" y="643.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1158.8" y="627.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.8" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="611.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="622.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="595.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="606.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.33%)</title><rect x="1158.8" y="579.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.8" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="563.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.8" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1158.8" y="547.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.8" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.33%)</title><rect x="1158.8" y="531.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.8" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.33%)</title><rect x="1158.8" y="515.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.33%)</title><rect x="1158.8" y="499.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1158.8" y="483.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1158.8" y="467.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.33%)</title><rect x="1158.8" y="451.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="435.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.8" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.33%)</title><rect x="1158.8" y="419.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1158.8" y="403.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1158.8" y="387.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.8" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1158.8" y="371.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1158.8" y="355.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.8" y="366.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1158.8" y="339.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.8" y="350.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.33%)</title><rect x="1158.8" y="323.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="334.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.33%)</title><rect x="1158.8" y="307.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.8" y="318.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.33%)</title><rect x="1158.8" y="291.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1162.7" y="899.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1162.7" y="883.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1162.7" y="867.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1162.7" y="851.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1162.7" y="835.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1162.7" y="819.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1162.7" y="803.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1162.7" y="787.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1162.7" y="771.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1162.7" y="755.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1162.7" y="739.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1162.7" y="723.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1162.7" y="707.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1162.7" y="691.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1162.7" y="675.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1162.7" y="659.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1162.7" y="643.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1162.7" y="627.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1162.7" y="611.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1162.7" y="595.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1162.7" y="579.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1162.7" y="563.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1162.7" y="547.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1162.7" y="531.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1162.7" y="515.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.7" y="526.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.33%)</title><rect x="1162.7" y="499.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="510.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.33%)</title><rect x="1162.7" y="483.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.7" y="494.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.33%)</title><rect x="1162.7" y="467.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="478.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.33%)</title><rect x="1162.7" y="451.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="462.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap) (1 samples, 0.33%)</title><rect x="1162.7" y="435.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.6" y="499.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.6" y="483.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.6" y="467.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.6" y="451.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.6" y="435.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1166.6" y="419.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.6" y="403.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.6" y="387.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.6" y="371.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.6" y="355.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.6" y="339.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1166.6" y="323.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.6" y="307.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.6" y="291.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.6" y="275.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.6" y="259.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.6" y="243.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1166.6" y="227.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.6" y="211.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.6" y="195.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.6" y="179.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.6" y="163.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.6" y="147.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.6" y="131.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1166.6" y="115.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.6" y="99.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.6" y="83.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.33%)</title><rect x="1166.6" y="67.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.6" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.33%)</title><rect x="1166.6" y="51.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.33%)</title><rect x="1166.6" y="35.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.6" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.32%)</title><rect x="1170.5" y="1123.0" width="15.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.5" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.32%)</title><rect x="1170.5" y="1107.0" width="15.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.32%)</title><rect x="1170.5" y="1091.0" width="15.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.5" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.99%)</title><rect x="1170.5" y="1075.0" width="11.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.5" y="1086.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.99%)</title><rect x="1170.5" y="1059.0" width="11.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="1070.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.99%)</title><rect x="1170.5" y="1043.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="1054.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.99%)</title><rect x="1170.5" y="1027.0" width="11.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.5" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.99%)</title><rect x="1170.5" y="1011.0" width="11.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.5" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.99%)</title><rect x="1170.5" y="995.0" width="11.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.5" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.99%)</title><rect x="1170.5" y="979.0" width="11.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.66%)</title><rect x="1170.5" y="963.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.66%)</title><rect x="1170.5" y="947.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.5" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.33%)</title><rect x="1170.5" y="931.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.33%)</title><rect x="1170.5" y="915.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="926.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.33%)</title><rect x="1170.5" y="899.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1170.5" y="883.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.5" y="894.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.33%)</title><rect x="1170.5" y="867.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1174.4" y="931.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.33%)</title><rect x="1174.4" y="915.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.33%)</title><rect x="1174.4" y="899.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.33%)</title><rect x="1174.4" y="883.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::check_cast(int) (1 samples, 0.33%)</title><rect x="1178.3" y="963.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.33%)</title><rect x="1178.3" y="947.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.33%)</title><rect x="1178.3" y="931.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Compilation::initialize() (1 samples, 0.33%)</title><rect x="1182.2" y="1075.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::DebugInformationRecorder(OopRecorder*) (1 samples, 0.33%)</title><rect x="1182.2" y="1059.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.33%)</title><rect x="1186.1" y="1187.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="1198.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.33%)</title><rect x="1186.1" y="1171.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="1182.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.33%)</title><rect x="1186.1" y="1155.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="1166.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.33%)</title><rect x="1186.1" y="1139.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1150.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.33%)</title><rect x="1186.1" y="1123.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.33%)</title><rect x="1186.1" y="1107.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.33%)</title><rect x="1186.1" y="1091.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1102.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.33%)</title><rect x="1186.1" y="1075.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.1" y="1086.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.33%)</title><rect x="1186.1" y="1059.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1070.0"></text>
</g>
</g>
</svg>
