<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (184 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="2035.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="2019.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="2003.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1987.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1971.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1955.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1939.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1923.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1907.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1891.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1875.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1859.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1843.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1827.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1811.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1795.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1779.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1763.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1747.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1731.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1715.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1699.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1683.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1667.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1651.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1635.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1619.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1603.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1587.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1571.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1555.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1539.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1523.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1507.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1491.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1475.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1459.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1443.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1427.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1411.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1395.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1379.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1363.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1347.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1331.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1315.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1299.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1283.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1267.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1251.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1235.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1219.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1203.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1187.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1171.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1155.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1139.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1123.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1107.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1091.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1075.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1059.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1043.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1027.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="1011.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="995.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="979.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="963.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="947.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="931.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="915.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="899.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="883.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="867.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="851.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="835.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="819.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="803.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="787.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="771.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="755.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="739.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="723.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="707.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="691.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="675.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="659.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="643.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="627.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="611.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="595.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="579.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="563.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="547.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="531.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="515.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="499.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="483.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="467.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="451.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="435.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="419.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="403.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="387.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="371.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="355.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="339.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="323.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="307.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="291.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="275.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="259.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="243.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="227.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="211.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="195.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="179.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="163.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="147.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="131.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="115.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="99.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="83.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="67.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.54%)</title><rect x="10.0" y="51.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.54%)</title><rect x="10.0" y="35.0" width="6.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.54%)</title><rect x="16.4" y="2035.0" width="6.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="19.4" y="2046.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.54%)</title><rect x="16.4" y="2019.0" width="6.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="19.4" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 15.22%)</title><rect x="22.8" y="2035.0" width="179.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.8" y="2046.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 15.22%)</title><rect x="22.8" y="2019.0" width="179.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.8" y="2030.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 11.96%)</title><rect x="22.8" y="2003.0" width="141.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.8" y="2014.0">java/lang/Iterable..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1855345679.accept (22 samples, 11.96%)</title><rect x="22.8" y="1987.0" width="141.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.8" y="1998.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (22 samples, 11.96%)</title><rect x="22.8" y="1971.0" width="141.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.8" y="1982.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (19 samples, 10.33%)</title><rect x="22.8" y="1955.0" width="121.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1966.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (19 samples, 10.33%)</title><rect x="22.8" y="1939.0" width="121.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.8" y="1950.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (19 samples, 10.33%)</title><rect x="22.8" y="1923.0" width="121.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.8" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (19 samples, 10.33%)</title><rect x="22.8" y="1907.0" width="121.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.8" y="1918.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 10.33%)</title><rect x="22.8" y="1891.0" width="121.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1902.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (19 samples, 10.33%)</title><rect x="22.8" y="1875.0" width="121.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.8" y="1886.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (14 samples, 7.61%)</title><rect x="22.8" y="1859.0" width="89.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.8" y="1870.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.54%)</title><rect x="22.8" y="1843.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.54%)</title><rect x="22.8" y="1827.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.54%)</title><rect x="22.8" y="1811.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 7.07%)</title><rect x="29.2" y="1843.0" width="83.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.2" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 7.07%)</title><rect x="29.2" y="1827.0" width="83.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.2" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 7.07%)</title><rect x="29.2" y="1811.0" width="83.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.2" y="1822.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 7.07%)</title><rect x="29.2" y="1795.0" width="83.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.2" y="1806.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (13 samples, 7.07%)</title><rect x="29.2" y="1779.0" width="83.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.2" y="1790.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (12 samples, 6.52%)</title><rect x="29.2" y="1763.0" width="77.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="32.2" y="1774.0">Unsafe_U..</text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 3.80%)</title><rect x="29.2" y="1747.0" width="44.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="32.2" y="1758.0">__pt..</text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 2.72%)</title><rect x="74.1" y="1747.0" width="32.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="77.1" y="1758.0">pt..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.54%)</title><rect x="106.2" y="1763.0" width="6.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="109.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.72%)</title><rect x="112.6" y="1859.0" width="32.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="115.6" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.72%)</title><rect x="112.6" y="1843.0" width="32.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="115.6" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 2.72%)</title><rect x="112.6" y="1827.0" width="32.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="115.6" y="1838.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.63%)</title><rect x="144.7" y="1955.0" width="19.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.7" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.63%)</title><rect x="144.7" y="1939.0" width="19.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="147.7" y="1950.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.09%)</title><rect x="151.1" y="1923.0" width="12.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="154.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.26%)</title><rect x="163.9" y="2003.0" width="38.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.9" y="2014.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 3.26%)</title><rect x="163.9" y="1987.0" width="38.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.9" y="1998.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (2 samples, 1.09%)</title><rect x="163.9" y="1971.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 1.09%)</title><rect x="163.9" y="1955.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.09%)</title><rect x="163.9" y="1939.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.09%)</title><rect x="163.9" y="1923.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.09%)</title><rect x="163.9" y="1907.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.54%)</title><rect x="163.9" y="1891.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.54%)</title><rect x="163.9" y="1875.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.54%)</title><rect x="163.9" y="1859.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.54%)</title><rect x="163.9" y="1843.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.54%)</title><rect x="163.9" y="1827.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.54%)</title><rect x="163.9" y="1811.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.54%)</title><rect x="163.9" y="1795.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.54%)</title><rect x="163.9" y="1779.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.54%)</title><rect x="170.3" y="1891.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.54%)</title><rect x="170.3" y="1875.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.54%)</title><rect x="170.3" y="1859.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.3" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.54%)</title><rect x="170.3" y="1843.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.54%)</title><rect x="176.7" y="1971.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.54%)</title><rect x="176.7" y="1955.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.54%)</title><rect x="176.7" y="1939.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.54%)</title><rect x="176.7" y="1923.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.63%)</title><rect x="183.2" y="1971.0" width="19.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.09%)</title><rect x="183.2" y="1955.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.09%)</title><rect x="183.2" y="1939.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.54%)</title><rect x="183.2" y="1923.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.54%)</title><rect x="189.6" y="1923.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.54%)</title><rect x="196.0" y="1955.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.54%)</title><rect x="196.0" y="1939.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.54%)</title><rect x="196.0" y="1923.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.54%)</title><rect x="196.0" y="1907.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.54%)</title><rect x="196.0" y="1891.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.54%)</title><rect x="196.0" y="1875.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.54%)</title><rect x="196.0" y="1859.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/Thread.run (55 samples, 29.89%)</title><rect x="202.4" y="2035.0" width="352.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.4" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (55 samples, 29.89%)</title><rect x="202.4" y="2019.0" width="352.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.4" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (55 samples, 29.89%)</title><rect x="202.4" y="2003.0" width="352.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.4" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/709539302.run (32 samples, 17.39%)</title><rect x="202.4" y="1987.0" width="205.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.4" y="1998.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (32 samples, 17.39%)</title><rect x="202.4" y="1971.0" width="205.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.4" y="1982.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (32 samples, 17.39%)</title><rect x="202.4" y="1955.0" width="205.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.4" y="1966.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (31 samples, 16.85%)</title><rect x="202.4" y="1939.0" width="198.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.4" y="1950.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (7 samples, 3.80%)</title><rect x="202.4" y="1923.0" width="44.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.4" y="1934.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (7 samples, 3.80%)</title><rect x="202.4" y="1907.0" width="44.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.4" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (7 samples, 3.80%)</title><rect x="202.4" y="1891.0" width="44.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.4" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (7 samples, 3.80%)</title><rect x="202.4" y="1875.0" width="44.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.4" y="1886.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (7 samples, 3.80%)</title><rect x="202.4" y="1859.0" width="44.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.4" y="1870.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (7 samples, 3.80%)</title><rect x="202.4" y="1843.0" width="44.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.4" y="1854.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.09%)</title><rect x="202.4" y="1827.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.4" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.54%)</title><rect x="208.8" y="1811.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.54%)</title><rect x="208.8" y="1795.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.54%)</title><rect x="208.8" y="1779.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.54%)</title><rect x="208.8" y="1763.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.8" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.54%)</title><rect x="208.8" y="1747.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.54%)</title><rect x="208.8" y="1731.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.72%)</title><rect x="215.2" y="1827.0" width="32.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.2" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.72%)</title><rect x="215.2" y="1811.0" width="32.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.2" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.63%)</title><rect x="215.2" y="1795.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.63%)</title><rect x="215.2" y="1779.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.54%)</title><rect x="215.2" y="1763.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 1.09%)</title><rect x="221.6" y="1763.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 1.09%)</title><rect x="221.6" y="1747.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 1.09%)</title><rect x="221.6" y="1731.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 1.09%)</title><rect x="221.6" y="1715.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.09%)</title><rect x="234.5" y="1795.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.09%)</title><rect x="234.5" y="1779.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.09%)</title><rect x="234.5" y="1763.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.54%)</title><rect x="234.5" y="1747.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.54%)</title><rect x="234.5" y="1731.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.54%)</title><rect x="234.5" y="1715.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.54%)</title><rect x="234.5" y="1699.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.54%)</title><rect x="240.9" y="1747.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.54%)</title><rect x="240.9" y="1731.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.54%)</title><rect x="240.9" y="1715.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.54%)</title><rect x="240.9" y="1699.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.54%)</title><rect x="240.9" y="1683.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.9" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.54%)</title><rect x="240.9" y="1667.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.9" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.54%)</title><rect x="240.9" y="1651.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.9" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (24 samples, 13.04%)</title><rect x="247.3" y="1923.0" width="153.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.3" y="1934.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (6 samples, 3.26%)</title><rect x="247.3" y="1907.0" width="38.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.3" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 3.26%)</title><rect x="247.3" y="1891.0" width="38.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.3" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 3.26%)</title><rect x="247.3" y="1875.0" width="38.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.3" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.09%)</title><rect x="253.7" y="1859.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.09%)</title><rect x="253.7" y="1843.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.09%)</title><rect x="253.7" y="1827.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.09%)</title><rect x="253.7" y="1811.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.63%)</title><rect x="266.5" y="1859.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.5" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.09%)</title><rect x="272.9" y="1843.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.09%)</title><rect x="272.9" y="1827.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.54%)</title><rect x="285.8" y="1907.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.54%)</title><rect x="285.8" y="1891.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.54%)</title><rect x="285.8" y="1875.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (12 samples, 6.52%)</title><rect x="292.2" y="1907.0" width="76.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.2" y="1918.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (12 samples, 6.52%)</title><rect x="292.2" y="1891.0" width="76.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.2" y="1902.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.17%)</title><rect x="298.6" y="1875.0" width="25.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.6" y="1886.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.54%)</title><rect x="298.6" y="1859.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.54%)</title><rect x="298.6" y="1843.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.6" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.54%)</title><rect x="298.6" y="1827.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="301.6" y="1838.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.54%)</title><rect x="298.6" y="1811.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="301.6" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.54%)</title><rect x="298.6" y="1795.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="301.6" y="1806.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.54%)</title><rect x="298.6" y="1779.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="301.6" y="1790.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.09%)</title><rect x="305.0" y="1859.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.54%)</title><rect x="305.0" y="1843.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="311.4" y="1843.0" width="6.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="314.4" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="317.8" y="1859.0" width="6.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="320.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 1.09%)</title><rect x="324.2" y="1875.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.54%)</title><rect x="324.2" y="1859.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.54%)</title><rect x="330.7" y="1859.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.54%)</title><rect x="330.7" y="1843.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.7" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 2.72%)</title><rect x="337.1" y="1875.0" width="32.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.1" y="1886.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 2.72%)</title><rect x="337.1" y="1859.0" width="32.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.1" y="1870.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.17%)</title><rect x="343.5" y="1843.0" width="25.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.5" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.09%)</title><rect x="356.3" y="1827.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.54%)</title><rect x="356.3" y="1811.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.54%)</title><rect x="356.3" y="1795.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.54%)</title><rect x="362.7" y="1811.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.54%)</title><rect x="362.7" y="1795.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 2.72%)</title><rect x="369.1" y="1907.0" width="32.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.1" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 2.72%)</title><rect x="369.1" y="1891.0" width="32.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.1" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/240690661.process (2 samples, 1.09%)</title><rect x="369.1" y="1875.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (2 samples, 1.09%)</title><rect x="369.1" y="1859.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.54%)</title><rect x="369.1" y="1843.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.54%)</title><rect x="369.1" y="1827.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.54%)</title><rect x="375.5" y="1843.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.09%)</title><rect x="382.0" y="1875.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 1.09%)</title><rect x="382.0" y="1859.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.54%)</title><rect x="394.8" y="1875.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.54%)</title><rect x="401.2" y="1939.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.09%)</title><rect x="407.6" y="1987.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.6" y="1998.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.09%)</title><rect x="407.6" y="1971.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.6" y="1982.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.272] (1 samples, 0.54%)</title><rect x="407.6" y="1955.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="410.6" y="1966.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.54%)</title><rect x="414.0" y="1955.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="417.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 1.09%)</title><rect x="420.4" y="1987.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.09%)</title><rect x="420.4" y="1971.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="423.4" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 1.09%)</title><rect x="420.4" y="1955.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 10.33%)</title><rect x="433.3" y="1987.0" width="121.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="436.3" y="1998.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (19 samples, 10.33%)</title><rect x="433.3" y="1971.0" width="121.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="436.3" y="1982.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (18 samples, 9.78%)</title><rect x="433.3" y="1955.0" width="115.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.3" y="1966.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 1.09%)</title><rect x="439.7" y="1939.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 1.09%)</title><rect x="452.5" y="1939.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.09%)</title><rect x="452.5" y="1923.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.09%)</title><rect x="452.5" y="1907.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.09%)</title><rect x="452.5" y="1891.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 7.07%)</title><rect x="465.3" y="1939.0" width="83.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.3" y="1950.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 7.07%)</title><rect x="465.3" y="1923.0" width="83.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.3" y="1934.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 6.52%)</title><rect x="471.7" y="1907.0" width="77.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="474.7" y="1918.0">Unsafe_P..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 1.09%)</title><rect x="471.7" y="1891.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="474.7" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.54%)</title><rect x="478.2" y="1875.0" width="6.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="481.2" y="1886.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.09%)</title><rect x="484.6" y="1891.0" width="12.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="487.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 2.17%)</title><rect x="497.4" y="1891.0" width="25.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="500.4" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.54%)</title><rect x="523.0" y="1891.0" width="6.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="526.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.54%)</title><rect x="529.5" y="1891.0" width="6.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="532.5" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.54%)</title><rect x="535.9" y="1891.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="538.9" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.54%)</title><rect x="542.3" y="1891.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="545.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.54%)</title><rect x="548.7" y="1955.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="551.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.54%)</title><rect x="548.7" y="1939.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="551.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.54%)</title><rect x="548.7" y="1923.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.54%)</title><rect x="548.7" y="1907.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.7" y="1918.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.54%)</title><rect x="555.1" y="2035.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="558.1" y="2046.0"></text>
</g>
<g>
<title>start_thread (98 samples, 53.26%)</title><rect x="561.5" y="2035.0" width="628.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="564.5" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (98 samples, 53.26%)</title><rect x="561.5" y="2019.0" width="628.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="564.5" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 7.61%)</title><rect x="561.5" y="2003.0" width="89.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="564.5" y="2014.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.54%)</title><rect x="561.5" y="1987.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="564.5" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.54%)</title><rect x="561.5" y="1971.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="564.5" y="1982.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.54%)</title><rect x="561.5" y="1955.0" width="6.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="564.5" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (13 samples, 7.07%)</title><rect x="567.9" y="1987.0" width="83.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="570.9" y="1998.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 7.07%)</title><rect x="567.9" y="1971.0" width="83.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="570.9" y="1982.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 3.80%)</title><rect x="580.8" y="1955.0" width="44.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="583.8" y="1966.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.54%)</title><rect x="612.8" y="1939.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="615.8" y="1950.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.54%)</title><rect x="619.2" y="1939.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="622.2" y="1950.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 2.17%)</title><rect x="625.7" y="1955.0" width="25.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="628.7" y="1966.0">G..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (84 samples, 45.65%)</title><rect x="651.3" y="2003.0" width="538.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="654.3" y="2014.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (84 samples, 45.65%)</title><rect x="651.3" y="1987.0" width="538.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="654.3" y="1998.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (84 samples, 45.65%)</title><rect x="651.3" y="1971.0" width="538.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="654.3" y="1982.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 44.57%)</title><rect x="651.3" y="1955.0" width="525.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="654.3" y="1966.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 44.57%)</title><rect x="651.3" y="1939.0" width="525.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="654.3" y="1950.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 19.02%)</title><rect x="651.3" y="1923.0" width="224.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="654.3" y="1934.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.54%)</title><rect x="651.3" y="1907.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.3" y="1918.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.54%)</title><rect x="651.3" y="1891.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="654.3" y="1902.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.09%)</title><rect x="657.7" y="1907.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="660.7" y="1918.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.54%)</title><rect x="657.7" y="1891.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.7" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.54%)</title><rect x="664.1" y="1891.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="667.1" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.54%)</title><rect x="664.1" y="1875.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="667.1" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.17%)</title><rect x="670.5" y="1907.0" width="25.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="673.5" y="1918.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.17%)</title><rect x="670.5" y="1891.0" width="25.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="673.5" y="1902.0">M..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.63%)</title><rect x="670.5" y="1875.0" width="19.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="673.5" y="1886.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.54%)</title><rect x="670.5" y="1859.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="673.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.09%)</title><rect x="677.0" y="1859.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.54%)</title><rect x="677.0" y="1843.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="680.0" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.54%)</title><rect x="677.0" y="1827.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="680.0" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.54%)</title><rect x="677.0" y="1811.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="680.0" y="1822.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.54%)</title><rect x="677.0" y="1795.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.0" y="1806.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.54%)</title><rect x="677.0" y="1779.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="680.0" y="1790.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.54%)</title><rect x="683.4" y="1843.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="686.4" y="1854.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.54%)</title><rect x="689.8" y="1875.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="692.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.09%)</title><rect x="696.2" y="1907.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="699.2" y="1918.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.09%)</title><rect x="696.2" y="1891.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="699.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.09%)</title><rect x="696.2" y="1875.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="699.2" y="1886.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.54%)</title><rect x="696.2" y="1859.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="699.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.54%)</title><rect x="702.6" y="1859.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="705.6" y="1870.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.54%)</title><rect x="702.6" y="1843.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="705.6" y="1854.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.54%)</title><rect x="702.6" y="1827.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.6" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.54%)</title><rect x="702.6" y="1811.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="705.6" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.54%)</title><rect x="702.6" y="1795.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="705.6" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.54%)</title><rect x="702.6" y="1779.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="705.6" y="1790.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 14.13%)</title><rect x="709.0" y="1907.0" width="166.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="712.0" y="1918.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.54%)</title><rect x="709.0" y="1891.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="712.0" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.63%)</title><rect x="715.4" y="1891.0" width="19.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="718.4" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.54%)</title><rect x="721.8" y="1875.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="724.8" y="1886.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.54%)</title><rect x="721.8" y="1859.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.54%)</title><rect x="728.3" y="1875.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="731.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="728.3" y="1859.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="731.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.54%)</title><rect x="734.7" y="1891.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="737.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.54%)</title><rect x="734.7" y="1875.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="737.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.54%)</title><rect x="741.1" y="1891.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="744.1" y="1902.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.54%)</title><rect x="741.1" y="1875.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="744.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.35%)</title><rect x="747.5" y="1891.0" width="51.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="750.5" y="1902.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.09%)</title><rect x="760.3" y="1875.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="763.3" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.54%)</title><rect x="773.2" y="1875.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="776.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.63%)</title><rect x="779.6" y="1875.0" width="19.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="782.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="792.4" y="1859.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="795.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.54%)</title><rect x="798.8" y="1891.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="801.8" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.54%)</title><rect x="805.2" y="1891.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="808.2" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 1.09%)</title><rect x="811.6" y="1891.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="814.6" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.54%)</title><rect x="824.5" y="1891.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="827.5" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.54%)</title><rect x="830.9" y="1891.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.9" y="1902.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.54%)</title><rect x="830.9" y="1875.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.54%)</title><rect x="837.3" y="1891.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.3" y="1902.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.54%)</title><rect x="837.3" y="1875.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="840.3" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.54%)</title><rect x="837.3" y="1859.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="840.3" y="1870.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.54%)</title><rect x="837.3" y="1843.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="840.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.54%)</title><rect x="843.7" y="1891.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.7" y="1902.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="843.7" y="1875.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.54%)</title><rect x="850.1" y="1891.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="853.1" y="1902.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.54%)</title><rect x="850.1" y="1875.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="853.1" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.09%)</title><rect x="856.5" y="1891.0" width="12.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="859.5" y="1902.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.09%)</title><rect x="856.5" y="1875.0" width="12.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="859.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="862.9" y="1859.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="865.9" y="1870.0"></text>
</g>
<g>
<title>castP2XNode::out_RegMask() const (1 samples, 0.54%)</title><rect x="869.3" y="1891.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.3" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 22.28%)</title><rect x="875.8" y="1923.0" width="262.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="878.8" y="1934.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.54%)</title><rect x="875.8" y="1907.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.8" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.54%)</title><rect x="875.8" y="1891.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="878.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.54%)</title><rect x="875.8" y="1875.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="878.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 2.17%)</title><rect x="882.2" y="1907.0" width="25.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="885.2" y="1918.0">P..</text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.54%)</title><rect x="888.6" y="1891.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.6" y="1902.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.54%)</title><rect x="895.0" y="1891.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.0" y="1902.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.54%)</title><rect x="901.4" y="1891.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="904.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (30 samples, 16.30%)</title><rect x="907.8" y="1907.0" width="192.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.8" y="1918.0">PhaseIdealLoop::build_and..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.54%)</title><rect x="907.8" y="1891.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.8" y="1902.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.54%)</title><rect x="907.8" y="1875.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="910.8" y="1886.0"></text>
</g>
<g>
<title>CountedLoopEndNode::Opcode() const (1 samples, 0.54%)</title><rect x="907.8" y="1859.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.8" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="914.2" y="1891.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="917.2" y="1902.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="914.2" y="1875.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="917.2" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="914.2" y="1859.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="917.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="914.2" y="1843.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.54%)</title><rect x="914.2" y="1827.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.2" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 1.09%)</title><rect x="920.7" y="1891.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="923.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 1.09%)</title><rect x="920.7" y="1875.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.7" y="1886.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (2 samples, 1.09%)</title><rect x="920.7" y="1859.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.7" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.54%)</title><rect x="927.1" y="1843.0" width="6.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="930.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.54%)</title><rect x="933.5" y="1891.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="936.5" y="1902.0"></text>
</g>
<g>
<title>NTarjan::COMPRESS() (1 samples, 0.54%)</title><rect x="933.5" y="1875.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.63%)</title><rect x="939.9" y="1891.0" width="19.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.9" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.54%)</title><rect x="952.7" y="1875.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.54%)</title><rect x="952.7" y="1859.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="955.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 9.24%)</title><rect x="959.1" y="1891.0" width="109.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.1" y="1902.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 8.15%)</title><rect x="972.0" y="1875.0" width="96.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.0" y="1886.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 8.15%)</title><rect x="972.0" y="1859.0" width="96.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.0" y="1870.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.54%)</title><rect x="978.4" y="1843.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.54%)</title><rect x="978.4" y="1827.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (13 samples, 7.07%)</title><rect x="984.8" y="1843.0" width="83.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.8" y="1854.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.54%)</title><rect x="1068.2" y="1891.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.09%)</title><rect x="1074.6" y="1891.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.09%)</title><rect x="1074.6" y="1875.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.6" y="1886.0"></text>
</g>
<g>
<title>LoadUSNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1074.6" y="1859.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.6" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1081.0" y="1859.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.54%)</title><rect x="1081.0" y="1843.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.0" y="1854.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 1.09%)</title><rect x="1087.4" y="1891.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.72%)</title><rect x="1100.2" y="1907.0" width="32.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.2" y="1918.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.72%)</title><rect x="1100.2" y="1891.0" width="32.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.2" y="1902.0">Ph..</text>
</g>
<g>
<title>CastP2XNode::Value(PhaseTransform*) const (1 samples, 0.54%)</title><rect x="1100.2" y="1875.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.2" y="1886.0"></text>
</g>
<g>
<title>CmpLNode::Opcode() const (1 samples, 0.54%)</title><rect x="1106.6" y="1875.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 1.09%)</title><rect x="1113.0" y="1875.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.0" y="1886.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.54%)</title><rect x="1113.0" y="1859.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.54%)</title><rect x="1119.5" y="1859.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.5" y="1870.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.54%)</title><rect x="1119.5" y="1843.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.5" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1125.9" y="1875.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.9" y="1886.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.54%)</title><rect x="1132.3" y="1907.0" width="6.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1135.3" y="1918.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.72%)</title><rect x="1138.7" y="1923.0" width="32.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="1934.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.72%)</title><rect x="1138.7" y="1907.0" width="32.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.7" y="1918.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.72%)</title><rect x="1138.7" y="1891.0" width="32.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.7" y="1902.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.72%)</title><rect x="1138.7" y="1875.0" width="32.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.7" y="1886.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.72%)</title><rect x="1138.7" y="1859.0" width="32.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.7" y="1870.0">Pa..</text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.54%)</title><rect x="1138.7" y="1843.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="1854.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.54%)</title><rect x="1138.7" y="1827.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="1838.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.54%)</title><rect x="1138.7" y="1811.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.7" y="1822.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1138.7" y="1795.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.7" y="1806.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1138.7" y="1779.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.17%)</title><rect x="1145.1" y="1843.0" width="25.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.1" y="1854.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1145.1" y="1827.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.1" y="1838.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1145.1" y="1811.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.1" y="1822.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1145.1" y="1795.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.1" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1145.1" y="1779.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.1" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.54%)</title><rect x="1145.1" y="1763.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.1" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1145.1" y="1747.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.1" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1145.1" y="1731.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.1" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1145.1" y="1715.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.1" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.54%)</title><rect x="1145.1" y="1699.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.1" y="1710.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.54%)</title><rect x="1145.1" y="1683.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.1" y="1694.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1145.1" y="1667.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.1" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1145.1" y="1651.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.1" y="1662.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1145.1" y="1635.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.1" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1145.1" y="1619.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.1" y="1630.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1145.1" y="1603.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.1" y="1614.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.54%)</title><rect x="1145.1" y="1587.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.1" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.63%)</title><rect x="1151.5" y="1827.0" width="19.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.5" y="1838.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.63%)</title><rect x="1151.5" y="1811.0" width="19.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.5" y="1822.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.63%)</title><rect x="1151.5" y="1795.0" width="19.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.63%)</title><rect x="1151.5" y="1779.0" width="19.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.5" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.63%)</title><rect x="1151.5" y="1763.0" width="19.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.5" y="1774.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.63%)</title><rect x="1151.5" y="1747.0" width="19.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.5" y="1758.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.63%)</title><rect x="1151.5" y="1731.0" width="19.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="1742.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.63%)</title><rect x="1151.5" y="1715.0" width="19.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.5" y="1726.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.63%)</title><rect x="1151.5" y="1699.0" width="19.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.63%)</title><rect x="1151.5" y="1683.0" width="19.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.63%)</title><rect x="1151.5" y="1667.0" width="19.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.63%)</title><rect x="1151.5" y="1651.0" width="19.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.5" y="1662.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.09%)</title><rect x="1151.5" y="1635.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.5" y="1646.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.09%)</title><rect x="1151.5" y="1619.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.5" y="1630.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.09%)</title><rect x="1151.5" y="1603.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.09%)</title><rect x="1151.5" y="1587.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.09%)</title><rect x="1151.5" y="1571.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.09%)</title><rect x="1151.5" y="1555.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.5" y="1566.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.09%)</title><rect x="1151.5" y="1539.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.5" y="1550.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.09%)</title><rect x="1151.5" y="1523.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="1534.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.09%)</title><rect x="1151.5" y="1507.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.09%)</title><rect x="1151.5" y="1491.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.09%)</title><rect x="1151.5" y="1475.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.09%)</title><rect x="1151.5" y="1459.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.09%)</title><rect x="1151.5" y="1443.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.5" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.09%)</title><rect x="1151.5" y="1427.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.5" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.09%)</title><rect x="1151.5" y="1411.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.09%)</title><rect x="1151.5" y="1395.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.09%)</title><rect x="1151.5" y="1379.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.09%)</title><rect x="1151.5" y="1363.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.09%)</title><rect x="1151.5" y="1347.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.09%)</title><rect x="1151.5" y="1331.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.09%)</title><rect x="1151.5" y="1315.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.09%)</title><rect x="1151.5" y="1299.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.09%)</title><rect x="1151.5" y="1283.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.09%)</title><rect x="1151.5" y="1267.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.5" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.09%)</title><rect x="1151.5" y="1251.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.09%)</title><rect x="1151.5" y="1235.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.09%)</title><rect x="1151.5" y="1219.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.09%)</title><rect x="1151.5" y="1203.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.09%)</title><rect x="1151.5" y="1187.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.09%)</title><rect x="1151.5" y="1171.0" width="12.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="1182.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1151.5" y="1155.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.5" y="1166.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1151.5" y="1139.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.5" y="1150.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1151.5" y="1123.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.5" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1151.5" y="1107.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.54%)</title><rect x="1151.5" y="1091.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1151.5" y="1075.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.5" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1151.5" y="1059.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.5" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1151.5" y="1043.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.5" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.54%)</title><rect x="1151.5" y="1027.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.54%)</title><rect x="1151.5" y="1011.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1151.5" y="995.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1151.5" y="979.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.5" y="990.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1151.5" y="963.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.5" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.54%)</title><rect x="1151.5" y="947.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.5" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.54%)</title><rect x="1151.5" y="931.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.5" y="942.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.54%)</title><rect x="1151.5" y="915.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1157.9" y="1155.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.9" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1157.9" y="1139.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1157.9" y="1123.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1157.9" y="1107.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1157.9" y="1091.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.54%)</title><rect x="1157.9" y="1075.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.54%)</title><rect x="1157.9" y="1059.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.9" y="1070.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.54%)</title><rect x="1157.9" y="1043.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.9" y="1054.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.54%)</title><rect x="1157.9" y="1027.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.9" y="1038.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.54%)</title><rect x="1157.9" y="1011.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.9" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1164.3" y="1635.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.3" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1164.3" y="1619.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1164.3" y="1603.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1164.3" y="1587.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1164.3" y="1571.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1164.3" y="1555.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.54%)</title><rect x="1164.3" y="1539.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.54%)</title><rect x="1164.3" y="1523.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="1534.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.54%)</title><rect x="1164.3" y="1507.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.3" y="1518.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.54%)</title><rect x="1170.8" y="1923.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="1934.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.54%)</title><rect x="1177.2" y="1955.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="1966.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.54%)</title><rect x="1177.2" y="1939.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="1950.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.54%)</title><rect x="1177.2" y="1923.0" width="6.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1180.2" y="1934.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.54%)</title><rect x="1183.6" y="1955.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="1966.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.54%)</title><rect x="1183.6" y="1939.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="1950.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.54%)</title><rect x="1183.6" y="1923.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.54%)</title><rect x="1183.6" y="1907.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="1918.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.54%)</title><rect x="1183.6" y="1891.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="1902.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.54%)</title><rect x="1183.6" y="1875.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="1886.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.54%)</title><rect x="1183.6" y="1859.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="1870.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.54%)</title><rect x="1183.6" y="1843.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="1854.0"></text>
</g>
</g>
</svg>
