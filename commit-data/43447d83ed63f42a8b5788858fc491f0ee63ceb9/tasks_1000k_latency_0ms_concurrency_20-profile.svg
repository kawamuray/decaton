<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (1,224 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (250 samples, 20.42%)</title><rect x="10.0" y="1331.0" width="241.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (250 samples, 20.42%)</title><rect x="10.0" y="1315.0" width="241.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/1255983614.accept (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.16%)</title><rect x="11.0" y="1299.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.16%)</title><rect x="11.0" y="1283.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="11.0" y="1267.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="11.0" y="1251.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="11.0" y="1235.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="11.0" y="1219.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="11.0" y="1203.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1214.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="11.0" y="1187.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="14.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="11.9" y="1187.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="11.9" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="11.9" y="1155.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$249/1966036463.test (1 samples, 0.08%)</title><rect x="11.9" y="1139.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="12.9" y="1299.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="12.9" y="1283.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (199 samples, 16.26%)</title><rect x="13.9" y="1299.0" width="191.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.9" y="1310.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/610376892.accept (192 samples, 15.69%)</title><rect x="13.9" y="1283.0" width="185.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1294.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (189 samples, 15.44%)</title><rect x="16.7" y="1267.0" width="182.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.7" y="1278.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (149 samples, 12.17%)</title><rect x="16.7" y="1251.0" width="143.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="1262.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (149 samples, 12.17%)</title><rect x="16.7" y="1235.0" width="143.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="1246.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (149 samples, 12.17%)</title><rect x="16.7" y="1219.0" width="143.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.7" y="1230.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (149 samples, 12.17%)</title><rect x="16.7" y="1203.0" width="143.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.7" y="1214.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (149 samples, 12.17%)</title><rect x="16.7" y="1187.0" width="143.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1198.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 12.17%)</title><rect x="16.7" y="1171.0" width="143.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.7" y="1182.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (108 samples, 8.82%)</title><rect x="16.7" y="1155.0" width="104.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="1166.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 1.63%)</title><rect x="16.7" y="1139.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 1.63%)</title><rect x="16.7" y="1123.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 1.63%)</title><rect x="16.7" y="1107.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (20 samples, 1.63%)</title><rect x="16.7" y="1091.0" width="19.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.49%)</title><rect x="36.0" y="1139.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.49%)</title><rect x="36.0" y="1123.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="37.0" y="1107.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.0" y="1118.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="37.0" y="1091.0" width="1.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="40.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.25%)</title><rect x="38.9" y="1107.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 6.70%)</title><rect x="41.8" y="1139.0" width="79.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.8" y="1150.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 6.70%)</title><rect x="41.8" y="1123.0" width="79.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.8" y="1134.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 6.62%)</title><rect x="42.8" y="1107.0" width="78.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.8" y="1118.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 6.62%)</title><rect x="42.8" y="1091.0" width="78.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.8" y="1102.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 6.37%)</title><rect x="45.7" y="1075.0" width="75.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.7" y="1086.0">sun/misc..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="46.6" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="49.6" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 5.56%)</title><rect x="47.6" y="1059.0" width="65.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="50.6" y="1070.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="50.5" y="1043.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="53.5" y="1054.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="52.4" y="1043.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="55.4" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="54.3" y="1043.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="57.3" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 3.51%)</title><rect x="55.3" y="1043.0" width="41.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="58.3" y="1054.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.41%)</title><rect x="96.8" y="1043.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="99.8" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.98%)</title><rect x="101.6" y="1043.0" width="11.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="104.6" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.49%)</title><rect x="113.2" y="1059.0" width="5.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="116.2" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="118.9" y="1059.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="121.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="120.9" y="1155.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.08%)</title><rect x="120.9" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="120.9" y="1123.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (40 samples, 3.27%)</title><rect x="121.8" y="1155.0" width="38.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.8" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (40 samples, 3.27%)</title><rect x="121.8" y="1139.0" width="38.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.8" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (40 samples, 3.27%)</title><rect x="121.8" y="1123.0" width="38.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.8" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.25%)</title><rect x="157.5" y="1107.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="160.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.41%)</title><rect x="160.4" y="1251.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.41%)</title><rect x="160.4" y="1235.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="163.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (8 samples, 0.65%)</title><rect x="165.2" y="1251.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.65%)</title><rect x="165.2" y="1235.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.65%)</title><rect x="165.2" y="1219.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 2.21%)</title><rect x="172.9" y="1251.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.9" y="1262.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 2.21%)</title><rect x="172.9" y="1235.0" width="26.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.9" y="1246.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.65%)</title><rect x="187.4" y="1219.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.16%)</title><rect x="187.4" y="1203.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.16%)</title><rect x="187.4" y="1187.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.4" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.16%)</title><rect x="187.4" y="1171.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.4" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="188.3" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="191.3" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="188.3" y="1139.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="191.3" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="188.3" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="191.3" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="188.3" y="1107.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="191.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.25%)</title><rect x="189.3" y="1203.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="192.2" y="1203.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.2" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="195.1" y="1219.0" width="3.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="198.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="199.0" y="1283.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.0" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="199.0" y="1267.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="199.0" y="1251.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="199.9" y="1283.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="202.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.33%)</title><rect x="200.9" y="1283.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.33%)</title><rect x="200.9" y="1267.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="200.9" y="1251.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="200.9" y="1235.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="204.7" y="1283.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="204.7" y="1267.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 3.84%)</title><rect x="205.7" y="1299.0" width="45.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.7" y="1310.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 3.84%)</title><rect x="205.7" y="1283.0" width="45.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.7" y="1294.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.08%)</title><rect x="205.7" y="1267.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.08%)</title><rect x="205.7" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.45%)</title><rect x="206.7" y="1267.0" width="28.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.45%)</title><rect x="206.7" y="1251.0" width="28.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.7" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.29%)</title><rect x="207.6" y="1235.0" width="27.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.6" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.04%)</title><rect x="207.6" y="1219.0" width="24.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.6" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.04%)</title><rect x="207.6" y="1203.0" width="24.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.6" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.14%)</title><rect x="210.5" y="1187.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.65%)</title><rect x="216.3" y="1171.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.65%)</title><rect x="216.3" y="1155.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.65%)</title><rect x="216.3" y="1139.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.65%)</title><rect x="216.3" y="1123.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.65%)</title><rect x="216.3" y="1107.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.65%)</title><rect x="216.3" y="1091.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.65%)</title><rect x="216.3" y="1075.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.65%)</title><rect x="224.0" y="1187.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.65%)</title><rect x="224.0" y="1171.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.57%)</title><rect x="224.0" y="1155.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.57%)</title><rect x="224.0" y="1139.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.0" y="1150.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.16%)</title><rect x="227.9" y="1123.0" width="1.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="230.9" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="229.8" y="1123.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="232.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.08%)</title><rect x="230.8" y="1155.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.8" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.08%)</title><rect x="230.8" y="1139.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="231.7" y="1219.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="231.7" y="1203.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="231.7" y="1187.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="231.7" y="1171.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.16%)</title><rect x="232.7" y="1219.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.16%)</title><rect x="232.7" y="1203.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="232.7" y="1187.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="232.7" y="1171.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.7" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="232.7" y="1155.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="235.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="233.7" y="1187.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="233.7" y="1171.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="233.7" y="1155.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="233.7" y="1139.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.7" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="233.7" y="1123.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="236.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="234.6" y="1235.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="234.6" y="1219.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="234.6" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.6" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="234.6" y="1187.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.6" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="234.6" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.57%)</title><rect x="235.6" y="1267.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.57%)</title><rect x="235.6" y="1251.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.41%)</title><rect x="235.6" y="1235.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="235.6" y="1219.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.6" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="235.6" y="1203.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="236.6" y="1219.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="236.6" y="1203.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.08%)</title><rect x="236.6" y="1187.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.25%)</title><rect x="237.5" y="1219.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.25%)</title><rect x="237.5" y="1203.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="238.5" y="1187.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="238.5" y="1171.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="238.5" y="1155.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="238.5" y="1139.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="238.5" y="1123.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.16%)</title><rect x="238.5" y="1107.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.16%)</title><rect x="238.5" y="1091.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.16%)</title><rect x="238.5" y="1075.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.16%)</title><rect x="238.5" y="1059.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/330522712.get (2 samples, 0.16%)</title><rect x="238.5" y="1043.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="240.4" y="1235.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="240.4" y="1219.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="240.4" y="1203.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="241.4" y="1187.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="241.4" y="1171.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="241.4" y="1155.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="241.4" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="241.4" y="1123.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="241.4" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.08%)</title><rect x="241.4" y="1091.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.41%)</title><rect x="242.3" y="1267.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.41%)</title><rect x="242.3" y="1251.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="242.3" y="1235.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="242.3" y="1219.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.08%)</title><rect x="242.3" y="1203.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.08%)</title><rect x="242.3" y="1187.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="242.3" y="1171.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.3" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="242.3" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="243.3" y="1235.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="243.3" y="1219.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="243.3" y="1203.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (2 samples, 0.16%)</title><rect x="243.3" y="1187.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (2 samples, 0.16%)</title><rect x="243.3" y="1171.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.16%)</title><rect x="243.3" y="1155.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (2 samples, 0.16%)</title><rect x="243.3" y="1139.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (2 samples, 0.16%)</title><rect x="243.3" y="1123.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.16%)</title><rect x="245.2" y="1219.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="245.2" y="1203.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="245.2" y="1187.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="245.2" y="1171.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="245.2" y="1155.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="245.2" y="1139.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.2" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="245.2" y="1123.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.2" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureReadOpen (1 samples, 0.08%)</title><rect x="245.2" y="1107.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.memoryAllocated (1 samples, 0.08%)</title><rect x="246.2" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.2" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="246.2" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.16%)</title><rect x="247.2" y="1267.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.08%)</title><rect x="248.1" y="1251.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="249.1" y="1267.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="249.1" y="1251.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.08%)</title><rect x="249.1" y="1235.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.1" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="249.1" y="1219.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="252.1" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="249.1" y="1203.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="250.0" y="1267.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.0" y="1251.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="250.0" y="1235.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.run (693 samples, 56.62%)</title><rect x="251.0" y="1331.0" width="668.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.0" y="1342.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (693 samples, 56.62%)</title><rect x="251.0" y="1315.0" width="668.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.0" y="1326.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (693 samples, 56.62%)</title><rect x="251.0" y="1299.0" width="668.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.0" y="1310.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1700452586.run (467 samples, 38.15%)</title><rect x="253.9" y="1283.0" width="450.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.9" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$2..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (467 samples, 38.15%)</title><rect x="253.9" y="1267.0" width="450.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.9" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$pu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (467 samples, 38.15%)</title><rect x="253.9" y="1251.0" width="450.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.9" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (462 samples, 37.75%)</title><rect x="253.9" y="1235.0" width="445.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.9" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedu..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="264.5" y="1219.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="267.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="266.4" y="1219.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="268.4" y="1219.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="268.4" y="1203.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$186/1690642041.get (1 samples, 0.08%)</title><rect x="268.4" y="1187.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="268.4" y="1171.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.4" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="268.4" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="271.4" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="268.4" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="271.4" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="268.4" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="271.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (150 samples, 12.25%)</title><rect x="269.3" y="1219.0" width="144.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.3" y="1230.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (150 samples, 12.25%)</title><rect x="269.3" y="1203.0" width="144.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.3" y="1214.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (150 samples, 12.25%)</title><rect x="269.3" y="1187.0" width="144.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.3" y="1198.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (149 samples, 12.17%)</title><rect x="269.3" y="1171.0" width="143.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.3" y="1182.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (149 samples, 12.17%)</title><rect x="269.3" y="1155.0" width="143.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.3" y="1166.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (149 samples, 12.17%)</title><rect x="269.3" y="1139.0" width="143.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.3" y="1150.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (32 samples, 2.61%)</title><rect x="269.3" y="1123.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.3" y="1134.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="279.9" y="1107.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="282.9" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.57%)</title><rect x="280.9" y="1107.0" width="6.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="283.9" y="1118.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="282.8" y="1091.0" width="4.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="285.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.41%)</title><rect x="287.6" y="1107.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.41%)</title><rect x="287.6" y="1091.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="287.6" y="1075.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="287.6" y="1059.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="287.6" y="1043.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="287.6" y="1027.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 0.65%)</title><rect x="292.5" y="1107.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.65%)</title><rect x="292.5" y="1091.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.08%)</title><rect x="296.3" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="296.3" y="1059.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.25%)</title><rect x="297.3" y="1075.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="297.3" y="1059.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="300.3" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="297.3" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="300.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="297.3" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.16%)</title><rect x="298.3" y="1059.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.16%)</title><rect x="298.3" y="1043.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (106 samples, 8.66%)</title><rect x="300.2" y="1123.0" width="102.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.2" y="1134.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.25%)</title><rect x="304.0" y="1107.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.41%)</title><rect x="306.9" y="1107.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="307.9" y="1091.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.49%)</title><rect x="311.7" y="1107.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.49%)</title><rect x="311.7" y="1091.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.49%)</title><rect x="311.7" y="1075.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.41%)</title><rect x="312.7" y="1059.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.57%)</title><rect x="317.5" y="1107.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.49%)</title><rect x="318.5" y="1091.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (77 samples, 6.29%)</title><rect x="324.3" y="1107.0" width="74.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.3" y="1118.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.63%)</title><rect x="325.2" y="1091.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="337.8" y="1075.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="340.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="337.8" y="1059.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="337.8" y="1043.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="342.6" y="1075.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (56 samples, 4.58%)</title><rect x="344.5" y="1091.0" width="54.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="347.5" y="1102.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (56 samples, 4.58%)</title><rect x="344.5" y="1075.0" width="54.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.5" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (53 samples, 4.33%)</title><rect x="347.4" y="1059.0" width="51.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.4" y="1070.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.47%)</title><rect x="349.3" y="1043.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="354.2" y="1027.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="354.2" y="1011.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="354.2" y="995.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.33%)</title><rect x="355.1" y="979.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.33%)</title><rect x="355.1" y="963.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="357.1" y="947.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.16%)</title><rect x="357.1" y="931.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.49%)</title><rect x="359.0" y="1027.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.49%)</title><rect x="359.0" y="1011.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.33%)</title><rect x="360.9" y="995.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="364.8" y="1027.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.74%)</title><rect x="366.7" y="1043.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.41%)</title><rect x="370.6" y="1027.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="373.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.41%)</title><rect x="370.6" y="1011.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.41%)</title><rect x="370.6" y="995.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.41%)</title><rect x="370.6" y="979.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="373.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.16%)</title><rect x="375.4" y="1043.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.65%)</title><rect x="377.3" y="1043.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.65%)</title><rect x="377.3" y="1027.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.getParameters (1 samples, 0.08%)</title><rect x="377.3" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.3" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="377.3" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="380.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="377.3" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="377.3" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="380.3" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="377.3" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="380.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.57%)</title><rect x="378.3" y="1011.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="381.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.57%)</title><rect x="378.3" y="995.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.57%)</title><rect x="378.3" y="979.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.3" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.57%)</title><rect x="378.3" y="963.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.3" y="974.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (7 samples, 0.57%)</title><rect x="378.3" y="947.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="381.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.74%)</title><rect x="385.0" y="1043.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.74%)</title><rect x="385.0" y="1027.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.74%)</title><rect x="385.0" y="1011.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.08%)</title><rect x="392.7" y="995.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.41%)</title><rect x="393.7" y="1043.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="397.5" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="400.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="397.5" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="400.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="397.5" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="400.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.08%)</title><rect x="398.5" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.25%)</title><rect x="399.5" y="1107.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.90%)</title><rect x="402.4" y="1123.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.08%)</title><rect x="402.4" y="1107.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.82%)</title><rect x="403.3" y="1107.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.82%)</title><rect x="403.3" y="1091.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.82%)</title><rect x="403.3" y="1075.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.82%)</title><rect x="403.3" y="1059.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.08%)</title><rect x="413.0" y="1171.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.0" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="413.0" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="416.0" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="413.0" y="1139.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="416.0" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="413.0" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="416.0" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="413.0" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="416.0" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="413.0" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="416.0" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="413.0" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="416.0" y="1086.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="413.0" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="416.0" y="1070.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="413.0" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="416.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (275 samples, 22.47%)</title><rect x="413.9" y="1219.0" width="265.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.9" y="1230.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (41 samples, 3.35%)</title><rect x="413.9" y="1203.0" width="39.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.9" y="1214.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 3.27%)</title><rect x="414.9" y="1187.0" width="38.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.9" y="1198.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (38 samples, 3.10%)</title><rect x="416.8" y="1171.0" width="36.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.8" y="1182.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="417.8" y="1155.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="417.8" y="1139.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="417.8" y="1123.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="417.8" y="1107.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="422.6" y="1155.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="422.6" y="1139.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="422.6" y="1123.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="422.6" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (31 samples, 2.53%)</title><rect x="423.6" y="1155.0" width="29.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.6" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.65%)</title><rect x="445.8" y="1139.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="445.8" y="1123.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="445.8" y="1107.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.57%)</title><rect x="446.7" y="1123.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.25%)</title><rect x="450.6" y="1107.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.49%)</title><rect x="453.5" y="1203.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="456.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.49%)</title><rect x="453.5" y="1187.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.49%)</title><rect x="453.5" y="1171.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (167 samples, 13.64%)</title><rect x="459.2" y="1203.0" width="161.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.2" y="1214.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (167 samples, 13.64%)</title><rect x="459.2" y="1187.0" width="161.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.2" y="1198.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="468.9" y="1171.0" width="3.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="471.9" y="1182.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="469.9" y="1155.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="472.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (65 samples, 5.31%)</title><rect x="472.7" y="1171.0" width="62.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="475.7" y="1182.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (63 samples, 5.15%)</title><rect x="474.7" y="1155.0" width="60.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.7" y="1166.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.27%)</title><rect x="485.3" y="1139.0" width="38.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.3" y="1150.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.55%)</title><rect x="498.8" y="1123.0" width="18.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.55%)</title><rect x="498.8" y="1107.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.55%)</title><rect x="498.8" y="1091.0" width="18.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.8" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.57%)</title><rect x="505.5" y="1075.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="508.5" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="505.5" y="1059.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="508.5" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="506.5" y="1059.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="509.5" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="506.5" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="509.5" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.16%)</title><rect x="507.5" y="1059.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.5" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.16%)</title><rect x="507.5" y="1043.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="510.5" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="508.4" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="511.4" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.25%)</title><rect x="509.4" y="1059.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="512.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="509.4" y="1043.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.4" y="1054.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="509.4" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="512.4" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="510.3" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="513.3" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="511.3" y="1043.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="514.3" y="1054.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="512.3" y="1075.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="515.3" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="513.2" y="1075.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="516.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="517.1" y="1123.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="520.1" y="1134.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="519.0" y="1123.0" width="3.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="522.0" y="1134.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="522.9" y="1123.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="525.9" y="1134.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.33%)</title><rect x="523.8" y="1139.0" width="3.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="526.8" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.65%)</title><rect x="527.7" y="1139.0" width="7.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="530.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.57%)</title><rect x="535.4" y="1171.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="538.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.57%)</title><rect x="535.4" y="1155.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.57%)</title><rect x="535.4" y="1139.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.4" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 6.62%)</title><rect x="542.2" y="1171.0" width="78.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="545.2" y="1182.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 6.54%)</title><rect x="543.1" y="1155.0" width="77.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="546.1" y="1166.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.74%)</title><rect x="543.1" y="1139.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.74%)</title><rect x="543.1" y="1123.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="546.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.74%)</title><rect x="543.1" y="1107.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="546.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.74%)</title><rect x="543.1" y="1091.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="551.8" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="554.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="551.8" y="1123.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="554.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="551.8" y="1107.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="554.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="551.8" y="1091.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (70 samples, 5.72%)</title><rect x="552.8" y="1139.0" width="67.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.8" y="1150.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (65 samples, 5.31%)</title><rect x="557.6" y="1123.0" width="62.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="560.6" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 2.86%)</title><rect x="586.5" y="1107.0" width="33.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="589.5" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.25%)</title><rect x="606.7" y="1091.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="609.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.57%)</title><rect x="609.6" y="1091.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="612.6" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="615.4" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="618.4" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="615.4" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="618.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="615.4" y="1043.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="618.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="615.4" y="1027.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="618.4" y="1038.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.33%)</title><rect x="616.4" y="1091.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="619.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (42 samples, 3.43%)</title><rect x="620.2" y="1203.0" width="40.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.2" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (42 samples, 3.43%)</title><rect x="620.2" y="1187.0" width="40.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.2" y="1198.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/1900515838.process (19 samples, 1.55%)</title><rect x="623.1" y="1171.0" width="18.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (18 samples, 1.47%)</title><rect x="624.1" y="1155.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="627.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 1.06%)</title><rect x="625.1" y="1139.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="628.1" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="625.1" y="1123.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="628.1" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="625.1" y="1107.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.1" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.25%)</title><rect x="625.1" y="1091.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.1" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.25%)</title><rect x="625.1" y="1075.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="628.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.16%)</title><rect x="626.0" y="1059.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.33%)</title><rect x="628.0" y="1123.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.0" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.33%)</title><rect x="628.0" y="1107.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="631.0" y="1118.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="628.9" y="1091.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="631.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.49%)</title><rect x="631.8" y="1123.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.33%)</title><rect x="637.6" y="1139.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="640.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.33%)</title><rect x="637.6" y="1123.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.33%)</title><rect x="637.6" y="1107.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.33%)</title><rect x="637.6" y="1091.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="641.5" y="1171.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.5" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="641.5" y="1155.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.74%)</title><rect x="646.3" y="1171.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="650.1" y="1155.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.1" y="1166.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.33%)</title><rect x="650.1" y="1139.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="653.1" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.08%)</title><rect x="654.0" y="1139.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.16%)</title><rect x="655.0" y="1171.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.16%)</title><rect x="655.0" y="1155.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="658.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.33%)</title><rect x="656.9" y="1171.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.9" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="657.8" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.8" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="657.8" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.8" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="657.8" y="1123.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="660.8" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="657.8" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="660.8" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="657.8" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="657.8" y="1075.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="660.8" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="657.8" y="1059.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="660.8" y="1070.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="657.8" y="1043.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="660.8" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="657.8" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="660.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="658.8" y="1155.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="660.7" y="1203.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.7" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="660.7" y="1187.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.7" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="660.7" y="1171.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="663.7" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="660.7" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="663.7" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="660.7" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="663.7" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="660.7" y="1123.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="663.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="660.7" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.47%)</title><rect x="661.7" y="1203.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.7" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="667.5" y="1187.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="670.5" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="667.5" y="1171.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="670.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.82%)</title><rect x="669.4" y="1187.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.65%)</title><rect x="671.3" y="1171.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/2141117851.accept (8 samples, 0.65%)</title><rect x="671.3" y="1155.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (8 samples, 0.65%)</title><rect x="671.3" y="1139.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.3" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.65%)</title><rect x="671.3" y="1123.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.3" y="1134.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.65%)</title><rect x="671.3" y="1107.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="674.3" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="674.2" y="1091.0" width="4.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="677.2" y="1102.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="674.2" y="1075.0" width="4.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="677.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 0.98%)</title><rect x="679.1" y="1219.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="682.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.82%)</title><rect x="681.0" y="1203.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.65%)</title><rect x="682.9" y="1187.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/2141117851.accept (1 samples, 0.08%)</title><rect x="682.9" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.08%)</title><rect x="682.9" y="1155.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="685.9" y="1166.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="682.9" y="1139.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.9" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="682.9" y="1123.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$274/1169057722.accept (7 samples, 0.57%)</title><rect x="683.9" y="1171.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="686.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (7 samples, 0.57%)</title><rect x="683.9" y="1155.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/893781402.complete (7 samples, 0.57%)</title><rect x="683.9" y="1139.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (7 samples, 0.57%)</title><rect x="683.9" y="1123.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 0.57%)</title><rect x="683.9" y="1107.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.9" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.57%)</title><rect x="683.9" y="1091.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.9" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.57%)</title><rect x="683.9" y="1075.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.9" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 0.57%)</title><rect x="683.9" y="1059.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.9" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (7 samples, 0.57%)</title><rect x="683.9" y="1043.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.9" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.74%)</title><rect x="690.6" y="1219.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="693.6" y="1230.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.74%)</title><rect x="690.6" y="1203.0" width="8.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="693.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.41%)</title><rect x="699.3" y="1235.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.3" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="700.3" y="1219.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="703.3" y="1230.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="700.3" y="1203.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="703.3" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="703.2" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="706.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.25%)</title><rect x="704.1" y="1283.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="707.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="704.1" y="1267.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="707.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.25%)</title><rect x="704.1" y="1251.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="707.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.25%)</title><rect x="704.1" y="1235.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="707.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1700452586.run (1 samples, 0.08%)</title><rect x="706.0" y="1219.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="709.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (220 samples, 17.97%)</title><rect x="707.0" y="1283.0" width="212.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="710.0" y="1294.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (219 samples, 17.89%)</title><rect x="708.0" y="1267.0" width="211.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="711.0" y="1278.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (192 samples, 15.69%)</title><rect x="727.3" y="1251.0" width="185.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="730.3" y="1262.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.74%)</title><rect x="734.0" y="1235.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.74%)</title><rect x="734.0" y="1219.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="737.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.74%)</title><rect x="734.0" y="1203.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.74%)</title><rect x="734.0" y="1187.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (176 samples, 14.38%)</title><rect x="742.7" y="1235.0" width="169.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.7" y="1246.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (176 samples, 14.38%)</title><rect x="742.7" y="1219.0" width="169.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="745.7" y="1230.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="749.4" y="1203.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="752.4" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="750.4" y="1203.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="753.4" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Park (162 samples, 13.24%)</title><rect x="751.4" y="1203.0" width="156.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="754.4" y="1214.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.33%)</title><rect x="755.2" y="1187.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="758.2" y="1198.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.96%)</title><rect x="759.1" y="1187.0" width="23.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="762.1" y="1198.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.82%)</title><rect x="763.9" y="1171.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.9" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.33%)</title><rect x="765.8" y="1155.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="768.8" y="1166.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.25%)</title><rect x="766.8" y="1139.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="769.8" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.25%)</title><rect x="769.7" y="1155.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="772.7" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="772.6" y="1155.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="775.6" y="1166.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.25%)</title><rect x="773.5" y="1171.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.5" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.49%)</title><rect x="776.4" y="1171.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.4" y="1182.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.25%)</title><rect x="782.2" y="1187.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="785.2" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="785.1" y="1187.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="788.1" y="1198.0"></text>
</g>
<g>
<title>__lll_lock_wait (10 samples, 0.82%)</title><rect x="788.0" y="1187.0" width="9.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="791.0" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 3.10%)</title><rect x="797.6" y="1187.0" width="36.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="800.6" y="1198.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (59 samples, 4.82%)</title><rect x="834.3" y="1187.0" width="56.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="837.3" y="1198.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.25%)</title><rect x="891.1" y="1187.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="894.1" y="1198.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.25%)</title><rect x="894.0" y="1187.0" width="2.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="897.0" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="896.9" y="1187.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="899.9" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.25%)</title><rect x="898.9" y="1187.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="901.9" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="901.7" y="1187.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="904.7" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="902.7" y="1187.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="905.7" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="904.6" y="1187.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="907.6" y="1198.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="906.6" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="909.6" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="907.5" y="1203.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="910.5" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.25%)</title><rect x="909.5" y="1203.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="912.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.57%)</title><rect x="912.4" y="1251.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.57%)</title><rect x="912.4" y="1235.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="915.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.57%)</title><rect x="912.4" y="1219.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.57%)</title><rect x="912.4" y="1203.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="919.1" y="1331.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="922.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.08%)</title><rect x="919.1" y="1315.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.1" y="1326.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.08%)</title><rect x="919.1" y="1299.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="922.1" y="1310.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.08%)</title><rect x="919.1" y="1283.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.1" y="1294.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.08%)</title><rect x="919.1" y="1267.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="922.1" y="1278.0"></text>
</g>
<g>
<title>start_thread (280 samples, 22.88%)</title><rect x="920.1" y="1331.0" width="269.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="923.1" y="1342.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (280 samples, 22.88%)</title><rect x="920.1" y="1315.0" width="269.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="923.1" y="1326.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.47%)</title><rect x="920.1" y="1299.0" width="17.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="923.1" y="1310.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.65%)</title><rect x="921.0" y="1283.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="924.0" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.65%)</title><rect x="921.0" y="1267.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.0" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="921.0" y="1251.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.0" y="1262.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.49%)</title><rect x="923.0" y="1251.0" width="5.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="926.0" y="1262.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 0.74%)</title><rect x="928.7" y="1283.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.7" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.16%)</title><rect x="928.7" y="1267.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.7" y="1278.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="928.7" y="1251.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="931.7" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.25%)</title><rect x="930.7" y="1267.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.7" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="930.7" y="1251.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.7" y="1262.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="930.7" y="1235.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.7" y="1246.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="930.7" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.7" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="930.7" y="1203.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="933.7" y="1214.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="930.7" y="1187.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.7" y="1198.0"></text>
</g>
<g>
<title>JvmtiThreadState::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="931.6" y="1219.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.6" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="932.6" y="1251.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="935.6" y="1262.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="932.6" y="1235.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.6" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="933.6" y="1267.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.6" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.33%)</title><rect x="933.6" y="1251.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.6" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.25%)</title><rect x="933.6" y="1235.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.6" y="1246.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.25%)</title><rect x="933.6" y="1219.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.6" y="1230.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.25%)</title><rect x="933.6" y="1203.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.6" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.25%)</title><rect x="933.6" y="1187.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="936.6" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.08%)</title><rect x="935.5" y="1171.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.5" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="935.5" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.5" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="936.5" y="1235.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="939.5" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="936.5" y="1219.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.5" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (261 samples, 21.32%)</title><rect x="937.4" y="1299.0" width="251.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.4" y="1310.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (261 samples, 21.32%)</title><rect x="937.4" y="1283.0" width="251.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="940.4" y="1294.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (261 samples, 21.32%)</title><rect x="937.4" y="1267.0" width="251.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.4" y="1278.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (261 samples, 21.32%)</title><rect x="937.4" y="1251.0" width="251.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="940.4" y="1262.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (260 samples, 21.24%)</title><rect x="937.4" y="1235.0" width="250.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.4" y="1246.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (260 samples, 21.24%)</title><rect x="937.4" y="1219.0" width="250.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.4" y="1230.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (61 samples, 4.98%)</title><rect x="937.4" y="1203.0" width="58.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="940.4" y="1214.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.25%)</title><rect x="937.4" y="1187.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="940.4" y="1198.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="937.4" y="1171.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.4" y="1182.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="938.4" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.4" y="1166.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="939.3" y="1171.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="1182.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="939.3" y="1155.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.3" y="1166.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="939.3" y="1139.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.3" y="1150.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.08%)</title><rect x="939.3" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.3" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.33%)</title><rect x="940.3" y="1187.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="943.3" y="1198.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.25%)</title><rect x="940.3" y="1171.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="943.3" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="940.3" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.3" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="940.3" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.3" y="1150.0"></text>
</g>
<g>
<title>MachCallNode::returns_pointer() const (1 samples, 0.08%)</title><rect x="941.3" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.3" y="1166.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="942.2" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="945.2" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="943.2" y="1171.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.2" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="943.2" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.2" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.57%)</title><rect x="944.2" y="1187.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="947.2" y="1198.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.57%)</title><rect x="944.2" y="1171.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.2" y="1182.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.25%)</title><rect x="945.1" y="1155.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.16%)</title><rect x="948.0" y="1155.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.0" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="948.0" y="1139.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="951.0" y="1150.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="949.0" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="950.0" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.0" y="1166.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.08%)</title><rect x="950.0" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="953.0" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.16%)</title><rect x="950.9" y="1187.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="953.9" y="1198.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="950.9" y="1171.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.9" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="951.9" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.9" y="1182.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="951.9" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.9" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.33%)</title><rect x="952.8" y="1187.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.33%)</title><rect x="952.8" y="1171.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="955.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="952.8" y="1155.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="955.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.16%)</title><rect x="952.8" y="1139.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="955.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="954.8" y="1155.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.8" y="1166.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="955.7" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (41 samples, 3.35%)</title><rect x="956.7" y="1187.0" width="39.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="959.7" y="1198.0">Pha..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.08%)</title><rect x="956.7" y="1171.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="959.7" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.25%)</title><rect x="957.7" y="1171.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.25%)</title><rect x="960.6" y="1171.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.6" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="962.5" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.08%)</title><rect x="963.4" y="1171.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="966.4" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="963.4" y="1155.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="966.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.49%)</title><rect x="964.4" y="1171.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.4" y="1182.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.08%)</title><rect x="969.2" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="972.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.65%)</title><rect x="970.2" y="1171.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.2" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="972.1" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.41%)</title><rect x="973.1" y="1155.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.1" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="975.0" y="1139.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="977.9" y="1171.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.41%)</title><rect x="978.9" y="1171.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.9" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="982.7" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.16%)</title><rect x="983.7" y="1171.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.16%)</title><rect x="985.6" y="1171.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="985.6" y="1155.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.08%)</title><rect x="986.6" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="989.6" y="1166.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.08%)</title><rect x="986.6" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="987.5" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.5" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="987.5" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.5" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="987.5" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.5" y="1150.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="987.5" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="987.5" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="988.5" y="1171.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.5" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="989.5" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="990.4" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.4" y="1182.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="990.4" y="1155.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="993.4" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.25%)</title><rect x="991.4" y="1171.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.4" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="992.4" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.4" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="993.3" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.3" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="994.3" y="1171.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.3" y="1182.0"></text>
</g>
<g>
<title>loadINode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="995.3" y="1171.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.3" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (191 samples, 15.60%)</title><rect x="996.2" y="1203.0" width="184.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.2" y="1214.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="996.2" y="1187.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="999.2" y="1198.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="996.2" y="1171.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="999.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.33%)</title><rect x="997.2" y="1187.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.33%)</title><rect x="997.2" y="1171.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="997.2" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="997.2" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.25%)</title><rect x="998.2" y="1155.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.25%)</title><rect x="998.2" y="1139.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.25%)</title><rect x="998.2" y="1123.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.25%)</title><rect x="998.2" y="1107.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.25%)</title><rect x="998.2" y="1091.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.25%)</title><rect x="998.2" y="1075.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="995.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="963.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="931.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="915.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="851.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="819.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="787.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="707.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="643.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="998.2" y="627.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="999.1" y="1059.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="999.1" y="1043.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1002.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="999.1" y="1027.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="999.1" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1000.1" y="1011.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1000.1" y="995.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.1" y="1006.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1000.1" y="979.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1003.1" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.16%)</title><rect x="1001.0" y="1187.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.0" y="1198.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1002.0" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.0" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.16%)</title><rect x="1003.0" y="1187.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.0" y="1198.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1003.0" y="1171.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.0" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.08%)</title><rect x="1003.0" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.0" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1003.9" y="1171.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1006.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (164 samples, 13.40%)</title><rect x="1004.9" y="1187.0" width="158.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.9" y="1198.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.9" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1155.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.9" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.9" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.9" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1107.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1007.9" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.9" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1075.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1007.9" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1059.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.9" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1043.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1007.9" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.9" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.9" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1004.9" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.08%)</title><rect x="1004.9" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.9" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1005.9" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1005.9" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.9" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1005.9" y="1139.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1008.9" y="1150.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1006.8" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.16%)</title><rect x="1007.8" y="1171.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.57%)</title><rect x="1009.7" y="1171.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1014.5" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1017.5" y="1166.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1015.5" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (140 samples, 11.44%)</title><rect x="1016.5" y="1171.0" width="134.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.5" y="1182.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (138 samples, 11.27%)</title><rect x="1018.4" y="1155.0" width="133.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.4" y="1166.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1019.4" y="1139.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (134 samples, 10.95%)</title><rect x="1022.3" y="1139.0" width="129.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1025.3" y="1150.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.16%)</title><rect x="1125.4" y="1123.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (24 samples, 1.96%)</title><rect x="1127.3" y="1123.0" width="23.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.3" y="1134.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1150.5" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.16%)</title><rect x="1151.4" y="1171.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1152.4" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.57%)</title><rect x="1153.4" y="1171.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.16%)</title><rect x="1155.3" y="1155.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="1139.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1156.3" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="1134.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.08%)</title><rect x="1156.3" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.25%)</title><rect x="1157.2" y="1155.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.16%)</title><rect x="1157.2" y="1139.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.16%)</title><rect x="1157.2" y="1123.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1159.2" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.2" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1159.2" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.2" y="1134.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1159.2" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.2" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1159.2" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.2" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1159.2" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.2" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1159.2" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.2" y="1070.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1159.2" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.2" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1159.2" y="1027.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1160.1" y="1171.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1161.1" y="1155.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.1" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1161.1" y="1139.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="1150.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1161.1" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.1" y="1134.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1162.0" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 1.39%)</title><rect x="1163.0" y="1187.0" width="16.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 1.31%)</title><rect x="1164.0" y="1171.0" width="15.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.0" y="1182.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.0" y="1155.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1164.0" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1164.9" y="1155.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="1166.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1164.9" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1164.9" y="1123.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="1134.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1164.9" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="1118.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1165.9" y="1139.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.9" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.9" y="1123.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.9" y="1134.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1165.9" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.9" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1166.9" y="1155.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="1166.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1166.9" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="1150.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1166.9" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.9" y="1134.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1166.9" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.9" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1166.9" y="1091.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.9" y="1102.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1166.9" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1167.8" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.8" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1168.8" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.25%)</title><rect x="1169.8" y="1155.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.16%)</title><rect x="1170.7" y="1139.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.16%)</title><rect x="1170.7" y="1123.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.7" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.25%)</title><rect x="1172.6" y="1155.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1166.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1172.6" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.6" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.08%)</title><rect x="1173.6" y="1123.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="1134.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1173.6" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="1118.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.08%)</title><rect x="1173.6" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1174.6" y="1139.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.6" y="1150.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.33%)</title><rect x="1175.5" y="1155.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.25%)</title><rect x="1175.5" y="1139.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1175.5" y="1123.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1175.5" y="1107.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.5" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1175.5" y="1091.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1175.5" y="1075.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1175.5" y="1059.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.5" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1175.5" y="1043.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1175.5" y="1027.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1175.5" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1176.5" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1176.5" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.5" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1070.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1179.4" y="1187.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1179.4" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1179.4" y="1155.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="1150.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1179.4" y="1123.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1180.4" y="1203.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1180.4" y="1187.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1180.4" y="1171.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1180.4" y="1155.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1180.4" y="1139.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1180.4" y="1123.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1180.4" y="1107.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1180.4" y="1091.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1180.4" y="1075.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1180.4" y="1059.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1180.4" y="1043.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1180.4" y="1027.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.4" y="995.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.4" y="979.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.4" y="963.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.4" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.4" y="931.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.4" y="915.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.4" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="883.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1180.4" y="867.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="851.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1180.4" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1180.4" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="787.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="798.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.08%)</title><rect x="1180.4" y="771.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1181.3" y="1011.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1181.3" y="995.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1181.3" y="979.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1181.3" y="963.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1181.3" y="947.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1181.3" y="931.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1181.3" y="915.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1181.3" y="899.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1181.3" y="883.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1181.3" y="867.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1181.3" y="851.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1181.3" y="835.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1181.3" y="819.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1181.3" y="803.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1181.3" y="787.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1181.3" y="771.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1181.3" y="755.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1181.3" y="739.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1181.3" y="723.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1181.3" y="707.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1181.3" y="691.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1181.3" y="675.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1181.3" y="659.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1181.3" y="643.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.3" y="627.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.3" y="611.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1181.3" y="595.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1181.3" y="579.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1181.3" y="563.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.3" y="547.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.3" y="531.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.3" y="515.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1181.3" y="499.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1181.3" y="483.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1181.3" y="467.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.3" y="451.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.08%)</title><rect x="1181.3" y="419.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1181.3" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1181.3" y="387.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>GraphKit::sync_kit(IdealKit&amp;) (1 samples, 0.08%)</title><rect x="1181.3" y="355.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1181.3" y="339.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="339.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="323.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="307.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="291.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="275.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="259.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="243.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="227.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="179.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="163.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.3" y="131.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1182.3" y="99.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="110.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="83.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1182.3" y="67.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1182.3" y="51.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="627.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="595.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="579.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="563.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="547.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="531.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="515.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="499.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="483.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="467.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="435.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="419.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="403.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="387.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="371.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="355.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="323.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="307.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="291.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="275.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="259.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="227.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="238.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="211.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="222.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1183.3" y="195.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1183.3" y="179.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="190.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="163.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="174.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="147.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="158.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1183.3" y="131.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="142.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1183.3" y="115.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="126.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1183.3" y="99.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.3" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1183.3" y="83.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1183.3" y="67.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="78.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1183.3" y="51.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="62.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.08%)</title><rect x="1183.3" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="734.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1184.2" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1184.2" y="691.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1184.2" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1107.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1043.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1027.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="947.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="915.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="899.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="867.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="835.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="803.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="798.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1186.1" y="1203.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="1214.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1186.1" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="1198.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1187.1" y="1203.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="1214.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1187.1" y="1187.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1188.1" y="1235.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.1" y="1246.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1188.1" y="1219.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1188.1" y="1203.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1188.1" y="1187.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1198.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1188.1" y="1171.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="1182.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1188.1" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1166.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1188.1" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1188.1" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1188.1" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.1" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1188.1" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::load_constant() (1 samples, 0.08%)</title><rect x="1188.1" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.1" y="1086.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.08%)</title><rect x="1188.1" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1188.1" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_object(oopDesc*) (1 samples, 0.08%)</title><rect x="1188.1" y="1027.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="1038.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.0" y="1299.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1310.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.0" y="1283.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="1294.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1267.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="1278.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1251.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1262.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1235.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1219.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1230.0"></text>
</g>
<g>
<title>G1CollectorPolicy::record_collection_pause_start(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="1214.0"></text>
</g>
<g>
<title>SurvRateGroup::stop_adding_regions() (1 samples, 0.08%)</title><rect x="1189.0" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1198.0"></text>
</g>
</g>
</svg>
