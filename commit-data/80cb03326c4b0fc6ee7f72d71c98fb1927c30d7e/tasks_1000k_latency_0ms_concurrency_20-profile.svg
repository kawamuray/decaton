<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (1,066 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (264 samples, 24.77%)</title><rect x="10.0" y="787.0" width="292.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="10.0" y="771.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="10.0" y="755.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="10.0" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.09%)</title><rect x="10.0" y="723.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="707.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="691.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="675.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="10.0" y="659.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="10.0" y="643.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="10.0" y="627.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="10.0" y="611.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="10.0" y="595.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="10.0" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="10.0" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="10.0" y="547.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="10.0" y="531.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.09%)</title><rect x="10.0" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.09%)</title><rect x="10.0" y="499.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.09%)</title><rect x="10.0" y="483.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (263 samples, 24.67%)</title><rect x="11.1" y="771.0" width="291.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.1" y="782.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.19%)</title><rect x="13.3" y="755.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.19%)</title><rect x="13.3" y="739.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$247/113598580.accept (2 samples, 0.19%)</title><rect x="13.3" y="723.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.19%)</title><rect x="13.3" y="707.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.19%)</title><rect x="13.3" y="691.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.19%)</title><rect x="13.3" y="675.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.28%)</title><rect x="15.5" y="755.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.28%)</title><rect x="15.5" y="739.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.5" y="750.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="15.5" y="723.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.09%)</title><rect x="15.5" y="707.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="15.5" y="691.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.09%)</title><rect x="16.6" y="723.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="17.7" y="723.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="17.7" y="707.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="17.7" y="691.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="17.7" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="17.7" y="659.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="17.7" y="643.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="17.7" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="17.7" y="611.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1989400509.test (1 samples, 0.09%)</title><rect x="17.7" y="595.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.19%)</title><rect x="18.9" y="755.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.19%)</title><rect x="18.9" y="739.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="18.9" y="723.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="18.9" y="707.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="20.0" y="691.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="20.0" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="20.0" y="659.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="20.0" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="20.0" y="627.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="20.0" y="611.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$251/760979942.test (1 samples, 0.09%)</title><rect x="20.0" y="595.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (205 samples, 19.23%)</title><rect x="21.1" y="755.0" width="226.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.1" y="766.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2074020945.accept (195 samples, 18.29%)</title><rect x="21.1" y="739.0" width="215.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.1" y="750.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (194 samples, 18.20%)</title><rect x="22.2" y="723.0" width="214.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.2" y="734.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (150 samples, 14.07%)</title><rect x="22.2" y="707.0" width="166.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.2" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (150 samples, 14.07%)</title><rect x="22.2" y="691.0" width="166.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.2" y="702.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (150 samples, 14.07%)</title><rect x="22.2" y="675.0" width="166.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.2" y="686.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (150 samples, 14.07%)</title><rect x="22.2" y="659.0" width="166.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.2" y="670.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (150 samples, 14.07%)</title><rect x="22.2" y="643.0" width="166.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.2" y="654.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (150 samples, 14.07%)</title><rect x="22.2" y="627.0" width="166.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.2" y="638.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 9.47%)</title><rect x="22.2" y="611.0" width="111.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.53%)</title><rect x="22.2" y="595.0" width="29.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.2" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.53%)</title><rect x="22.2" y="579.0" width="29.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.2" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.78%)</title><rect x="31.0" y="563.0" width="21.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.0" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (19 samples, 1.78%)</title><rect x="31.0" y="547.0" width="21.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.0" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.28%)</title><rect x="52.1" y="595.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 0.28%)</title><rect x="52.1" y="579.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.19%)</title><rect x="53.2" y="563.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.2" y="574.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.19%)</title><rect x="53.2" y="547.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="56.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (71 samples, 6.66%)</title><rect x="55.4" y="595.0" width="78.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.4" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (71 samples, 6.66%)</title><rect x="55.4" y="579.0" width="78.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.4" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (70 samples, 6.57%)</title><rect x="55.4" y="563.0" width="77.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.4" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (70 samples, 6.57%)</title><rect x="55.4" y="547.0" width="77.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.4" y="558.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 6.57%)</title><rect x="55.4" y="531.0" width="77.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.4" y="542.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="55.4" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="58.4" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark (63 samples, 5.91%)</title><rect x="56.5" y="515.0" width="69.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="59.5" y="526.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.28%)</title><rect x="57.6" y="499.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="60.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="60.9" y="499.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="63.9" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 4.50%)</title><rect x="62.0" y="499.0" width="53.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="65.0" y="510.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="115.2" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="118.2" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.84%)</title><rect x="116.3" y="499.0" width="9.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="119.3" y="510.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="126.2" y="515.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="129.2" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.38%)</title><rect x="127.3" y="515.0" width="4.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="130.3" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="131.8" y="515.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="134.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="132.9" y="563.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (47 samples, 4.41%)</title><rect x="134.0" y="611.0" width="52.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.0" y="622.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (47 samples, 4.41%)</title><rect x="134.0" y="595.0" width="52.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="137.0" y="606.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (47 samples, 4.41%)</title><rect x="134.0" y="579.0" width="52.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="137.0" y="590.0">java/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="183.8" y="563.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.8" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="184.9" y="563.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="187.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.19%)</title><rect x="186.0" y="611.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="189.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="186.0" y="595.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.19%)</title><rect x="186.0" y="579.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="187.1" y="563.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="188.2" y="707.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="188.2" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.09%)</title><rect x="189.3" y="707.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="189.3" y="691.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="189.3" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (42 samples, 3.94%)</title><rect x="190.4" y="707.0" width="46.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.4" y="718.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (19 samples, 1.78%)</title><rect x="213.7" y="691.0" width="21.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.7" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 1.78%)</title><rect x="213.7" y="675.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.7" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.94%)</title><rect x="213.7" y="659.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.7" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.94%)</title><rect x="213.7" y="643.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.94%)</title><rect x="213.7" y="627.0" width="11.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.7" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="220.3" y="611.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="223.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="220.3" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="223.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="220.3" y="579.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="223.3" y="590.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="220.3" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="223.3" y="574.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="220.3" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="223.3" y="558.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="220.3" y="531.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="223.3" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="221.4" y="611.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="224.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.38%)</title><rect x="224.7" y="659.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="228.1" y="643.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.47%)</title><rect x="229.2" y="659.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.2" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="234.7" y="691.0" width="2.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="237.7" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="236.9" y="739.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="239.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="238.0" y="739.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="238.0" y="723.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="238.0" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.66%)</title><rect x="239.1" y="739.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.66%)</title><rect x="239.1" y="723.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.66%)</title><rect x="239.1" y="707.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.66%)</title><rect x="239.1" y="691.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.1" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (7 samples, 0.66%)</title><rect x="239.1" y="675.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="246.9" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="246.9" y="723.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.9" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.09%)</title><rect x="248.0" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.0" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="248.0" y="739.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/2074020945.get$Lambda (1 samples, 0.09%)</title><rect x="248.0" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 4.50%)</title><rect x="249.1" y="755.0" width="53.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.1" y="766.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 4.50%)</title><rect x="249.1" y="739.0" width="53.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.1" y="750.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (24 samples, 2.25%)</title><rect x="249.1" y="723.0" width="26.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.1" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (23 samples, 2.16%)</title><rect x="249.1" y="707.0" width="25.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.1" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 2.06%)</title><rect x="249.1" y="691.0" width="24.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.1" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (20 samples, 1.88%)</title><rect x="249.1" y="675.0" width="22.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.1" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 1.88%)</title><rect x="249.1" y="659.0" width="22.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.1" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.94%)</title><rect x="250.2" y="643.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.28%)</title><rect x="250.2" y="627.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.28%)</title><rect x="250.2" y="611.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.28%)</title><rect x="250.2" y="595.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.28%)</title><rect x="250.2" y="579.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.28%)</title><rect x="250.2" y="563.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.28%)</title><rect x="250.2" y="547.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.28%)</title><rect x="250.2" y="531.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.56%)</title><rect x="253.5" y="627.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.56%)</title><rect x="253.5" y="611.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.09%)</title><rect x="260.2" y="627.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="260.2" y="611.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="260.2" y="595.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.compressionType (1 samples, 0.09%)</title><rect x="260.2" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.09%)</title><rect x="260.2" y="563.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.84%)</title><rect x="261.3" y="643.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.75%)</title><rect x="262.4" y="627.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.47%)</title><rect x="262.4" y="611.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.4" y="622.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.47%)</title><rect x="262.4" y="595.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.28%)</title><rect x="267.9" y="611.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.9" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.28%)</title><rect x="267.9" y="595.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="271.2" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="271.2" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="271.2" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="271.2" y="627.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="271.2" y="611.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="271.2" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.2" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="271.2" y="579.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="274.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="272.3" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="273.5" y="691.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="273.5" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="273.5" y="659.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.5" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="273.5" y="643.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="273.5" y="627.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.09%)</title><rect x="274.6" y="707.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.09%)</title><rect x="274.6" y="691.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="274.6" y="675.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="274.6" y="659.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="274.6" y="643.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.84%)</title><rect x="275.7" y="723.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.56%)</title><rect x="276.8" y="707.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.19%)</title><rect x="276.8" y="691.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="276.8" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="276.8" y="659.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="276.8" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="277.9" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="277.9" y="659.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="277.9" y="643.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="277.9" y="627.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="277.9" y="611.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="277.9" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="277.9" y="579.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.9" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="277.9" y="563.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.9" y="574.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="277.9" y="547.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.9" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="277.9" y="531.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.38%)</title><rect x="279.0" y="691.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.28%)</title><rect x="280.1" y="675.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.28%)</title><rect x="280.1" y="659.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="281.2" y="643.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="281.2" y="627.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="281.2" y="611.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="281.2" y="595.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.19%)</title><rect x="281.2" y="579.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.19%)</title><rect x="281.2" y="563.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (2 samples, 0.19%)</title><rect x="281.2" y="547.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.19%)</title><rect x="283.4" y="707.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.09%)</title><rect x="284.5" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.09%)</title><rect x="284.5" y="675.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="285.6" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.09%)</title><rect x="285.6" y="707.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.09%)</title><rect x="285.6" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="285.6" y="675.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="285.6" y="659.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="285.6" y="643.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="285.6" y="627.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.38%)</title><rect x="286.7" y="723.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.28%)</title><rect x="286.7" y="707.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.28%)</title><rect x="286.7" y="691.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="286.7" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="286.7" y="659.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.09%)</title><rect x="286.7" y="643.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.7" y="627.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="287.8" y="675.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.isConnected (1 samples, 0.09%)</title><rect x="287.8" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.isConnected (1 samples, 0.09%)</title><rect x="287.8" y="643.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (1 samples, 0.09%)</title><rect x="287.8" y="627.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="288.9" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="288.9" y="643.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="288.9" y="627.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="288.9" y="611.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="288.9" y="595.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="288.9" y="579.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.9" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="288.9" y="563.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="291.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="290.1" y="707.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="293.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="290.1" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="290.1" y="675.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="290.1" y="659.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.add (1 samples, 0.09%)</title><rect x="290.1" y="643.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.1" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addFirst (1 samples, 0.09%)</title><rect x="290.1" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.1" y="638.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="290.1" y="611.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="293.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.75%)</title><rect x="291.2" y="723.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.75%)</title><rect x="291.2" y="707.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.2" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.19%)</title><rect x="291.2" y="691.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1673382240.accept (2 samples, 0.19%)</title><rect x="291.2" y="675.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.19%)</title><rect x="291.2" y="659.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="291.2" y="643.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="291.2" y="627.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="291.2" y="611.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.2" y="622.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.09%)</title><rect x="291.2" y="595.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.2" y="606.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="291.2" y="579.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="292.3" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="292.3" y="627.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="292.3" y="611.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.3" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="292.3" y="595.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="292.3" y="579.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.09%)</title><rect x="293.4" y="691.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.4" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.09%)</title><rect x="293.4" y="675.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.09%)</title><rect x="293.4" y="659.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.47%)</title><rect x="294.5" y="691.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="296.7" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="296.7" y="659.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="296.7" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.7" y="654.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="296.7" y="627.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="299.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.19%)</title><rect x="297.8" y="675.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.19%)</title><rect x="297.8" y="659.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="297.8" y="643.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="297.8" y="627.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="297.8" y="611.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="297.8" y="595.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.8" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.19%)</title><rect x="297.8" y="579.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="590.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.19%)</title><rect x="297.8" y="563.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.19%)</title><rect x="297.8" y="547.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$213/714435219.apply (2 samples, 0.19%)</title><rect x="297.8" y="531.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.09%)</title><rect x="298.9" y="515.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.19%)</title><rect x="300.0" y="723.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="300.0" y="707.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="300.0" y="691.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="300.0" y="675.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="300.0" y="659.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.0" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.09%)</title><rect x="300.0" y="643.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="301.1" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="301.1" y="643.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="304.1" y="654.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="301.1" y="627.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="304.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (695 samples, 65.20%)</title><rect x="302.2" y="787.0" width="769.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.2" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (695 samples, 65.20%)</title><rect x="302.2" y="771.0" width="769.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.2" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (695 samples, 65.20%)</title><rect x="302.2" y="755.0" width="769.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.2" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883020.run (468 samples, 43.90%)</title><rect x="308.9" y="739.0" width="518.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.9" y="750.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1717883..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (468 samples, 43.90%)</title><rect x="308.9" y="723.0" width="518.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.9" y="734.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (468 samples, 43.90%)</title><rect x="308.9" y="707.0" width="518.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.9" y="718.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (462 samples, 43.34%)</title><rect x="308.9" y="691.0" width="511.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.9" y="702.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProc..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.38%)</title><rect x="319.9" y="675.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (162 samples, 15.20%)</title><rect x="324.4" y="675.0" width="179.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.4" y="686.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (162 samples, 15.20%)</title><rect x="324.4" y="659.0" width="179.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.4" y="670.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (162 samples, 15.20%)</title><rect x="324.4" y="643.0" width="179.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.4" y="654.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 15.20%)</title><rect x="324.4" y="627.0" width="179.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.4" y="638.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 15.20%)</title><rect x="324.4" y="611.0" width="179.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.4" y="622.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (162 samples, 15.20%)</title><rect x="324.4" y="595.0" width="179.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.4" y="606.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (49 samples, 4.60%)</title><rect x="324.4" y="579.0" width="54.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.4" y="590.0">com/f..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="339.9" y="563.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="342.9" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 1.03%)</title><rect x="341.0" y="563.0" width="12.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="344.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.75%)</title><rect x="344.3" y="547.0" width="8.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="347.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.38%)</title><rect x="353.2" y="563.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.38%)</title><rect x="353.2" y="547.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.38%)</title><rect x="353.2" y="531.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.2" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.38%)</title><rect x="353.2" y="515.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.38%)</title><rect x="353.2" y="499.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.38%)</title><rect x="353.2" y="483.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.78%)</title><rect x="357.6" y="563.0" width="21.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.6" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 0.84%)</title><rect x="368.6" y="547.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.6" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="368.6" y="531.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="371.6" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="368.6" y="515.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="371.6" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="368.6" y="499.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="371.6" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="369.8" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="372.8" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="369.8" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="372.8" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="369.8" y="451.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="372.8" y="462.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="369.8" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="372.8" y="446.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="369.8" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="372.8" y="430.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="369.8" y="403.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="372.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.47%)</title><rect x="370.9" y="531.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.9" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="370.9" y="515.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="373.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.38%)</title><rect x="372.0" y="515.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.19%)</title><rect x="376.4" y="531.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.19%)</title><rect x="376.4" y="515.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.19%)</title><rect x="376.4" y="499.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="376.4" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="379.4" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="376.4" y="467.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="379.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="376.4" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="379.4" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="376.4" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="379.4" y="446.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="377.5" y="483.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="380.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (102 samples, 9.57%)</title><rect x="378.6" y="579.0" width="112.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.6" y="590.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (3 samples, 0.28%)</title><rect x="381.9" y="563.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.66%)</title><rect x="385.3" y="563.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.47%)</title><rect x="387.5" y="547.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.84%)</title><rect x="393.0" y="563.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.84%)</title><rect x="393.0" y="547.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.56%)</title><rect x="396.3" y="531.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.47%)</title><rect x="397.4" y="515.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="400.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="401.9" y="499.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.66%)</title><rect x="403.0" y="563.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.0" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="404.1" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="407.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="405.2" y="547.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="408.2" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="405.2" y="531.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="408.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="405.2" y="515.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="408.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.38%)</title><rect x="406.3" y="547.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 6.85%)</title><rect x="410.7" y="563.0" width="80.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.7" y="574.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 2.16%)</title><rect x="411.8" y="547.0" width="25.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.8" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.84%)</title><rect x="416.2" y="531.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.84%)</title><rect x="416.2" y="515.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.84%)</title><rect x="416.2" y="499.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.84%)</title><rect x="416.2" y="483.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="419.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (9 samples, 0.84%)</title><rect x="416.2" y="467.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.calcHash (3 samples, 0.28%)</title><rect x="422.9" y="451.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.38%)</title><rect x="426.2" y="531.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.38%)</title><rect x="426.2" y="515.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (6 samples, 0.56%)</title><rect x="430.6" y="531.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 4.60%)</title><rect x="437.3" y="547.0" width="54.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.3" y="558.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (49 samples, 4.60%)</title><rect x="437.3" y="531.0" width="54.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.3" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.60%)</title><rect x="437.3" y="515.0" width="54.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.3" y="526.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.84%)</title><rect x="445.0" y="499.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="448.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.47%)</title><rect x="448.3" y="483.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="451.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.47%)</title><rect x="448.3" y="467.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.47%)</title><rect x="448.3" y="451.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="451.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.19%)</title><rect x="448.3" y="435.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="451.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.19%)</title><rect x="448.3" y="419.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="451.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.28%)</title><rect x="450.6" y="435.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="453.9" y="483.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="453.9" y="467.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="453.9" y="451.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.84%)</title><rect x="455.0" y="499.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="458.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.75%)</title><rect x="456.1" y="483.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.09%)</title><rect x="456.1" y="467.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.09%)</title><rect x="456.1" y="451.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="456.1" y="435.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="459.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="456.1" y="419.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="459.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="456.1" y="403.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="459.1" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="456.1" y="387.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="459.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.66%)</title><rect x="457.2" y="467.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.66%)</title><rect x="457.2" y="451.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.2" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.66%)</title><rect x="457.2" y="435.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="465.0" y="499.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.56%)</title><rect x="466.1" y="499.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="469.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.56%)</title><rect x="466.1" y="483.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.56%)</title><rect x="466.1" y="467.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="469.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.56%)</title><rect x="466.1" y="451.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.1" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.56%)</title><rect x="466.1" y="435.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.47%)</title><rect x="472.7" y="499.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.7" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.47%)</title><rect x="472.7" y="483.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.47%)</title><rect x="472.7" y="467.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (12 samples, 1.13%)</title><rect x="478.2" y="499.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.28%)</title><rect x="488.2" y="483.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="488.2" y="467.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="491.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="488.2" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="491.2" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="489.3" y="467.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="492.3" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="489.3" y="451.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="492.3" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="489.3" y="435.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="492.3" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="490.4" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="493.4" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="490.4" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="493.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.03%)</title><rect x="491.5" y="579.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="491.5" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="494.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.94%)</title><rect x="492.6" y="563.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.94%)</title><rect x="492.6" y="547.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="495.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.94%)</title><rect x="492.6" y="531.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.94%)</title><rect x="492.6" y="515.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (263 samples, 24.67%)</title><rect x="503.7" y="675.0" width="291.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="506.7" y="686.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (37 samples, 3.47%)</title><rect x="504.8" y="659.0" width="41.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.8" y="670.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (37 samples, 3.47%)</title><rect x="504.8" y="643.0" width="41.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="507.8" y="654.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (35 samples, 3.28%)</title><rect x="507.0" y="627.0" width="38.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.0" y="638.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (13 samples, 1.22%)</title><rect x="509.2" y="611.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.2" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 1.22%)</title><rect x="509.2" y="595.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 1.22%)</title><rect x="509.2" y="579.0" width="14.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.66%)</title><rect x="515.9" y="563.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.28%)</title><rect x="523.6" y="611.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="526.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.28%)</title><rect x="523.6" y="595.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.28%)</title><rect x="523.6" y="579.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.6" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 1.59%)</title><rect x="526.9" y="611.0" width="18.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="529.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.13%)</title><rect x="532.5" y="595.0" width="13.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 1.13%)</title><rect x="532.5" y="579.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.38%)</title><rect x="541.3" y="563.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.56%)</title><rect x="545.8" y="659.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="548.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.56%)</title><rect x="545.8" y="643.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.8" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.56%)</title><rect x="545.8" y="627.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (150 samples, 14.07%)</title><rect x="552.4" y="659.0" width="166.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.4" y="670.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="553.5" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="556.5" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="553.5" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="556.5" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="553.5" y="611.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="556.5" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="553.5" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="556.5" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="553.5" y="579.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="556.5" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="554.6" y="643.0" width="4.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="557.6" y="654.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="555.7" y="627.0" width="3.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="558.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (143 samples, 13.41%)</title><rect x="559.0" y="643.0" width="158.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.0" y="654.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 4.22%)</title><rect x="567.9" y="627.0" width="49.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="570.9" y="638.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.72%)</title><rect x="576.8" y="611.0" width="32.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="579.8" y="622.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (28 samples, 2.63%)</title><rect x="577.9" y="595.0" width="31.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.9" y="606.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (25 samples, 2.35%)</title><rect x="577.9" y="579.0" width="27.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="580.9" y="590.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (25 samples, 2.35%)</title><rect x="577.9" y="563.0" width="27.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="580.9" y="574.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 2.35%)</title><rect x="577.9" y="547.0" width="27.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="580.9" y="558.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.94%)</title><rect x="584.5" y="531.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="587.5" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.28%)</title><rect x="585.6" y="515.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.6" y="526.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="585.6" y="499.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="588.6" y="510.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.19%)</title><rect x="586.7" y="499.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.7" y="510.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="587.8" y="483.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="590.8" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.47%)</title><rect x="588.9" y="515.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.9" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.19%)</title><rect x="588.9" y="499.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="591.9" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="588.9" y="483.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="591.9" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="588.9" y="467.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="591.9" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="590.0" y="483.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="593.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (2 samples, 0.19%)</title><rect x="591.1" y="499.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="594.1" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="593.4" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="596.4" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="594.5" y="515.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="597.5" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.84%)</title><rect x="595.6" y="531.0" width="9.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="598.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="605.5" y="579.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="608.5" y="590.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="608.9" y="611.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="611.9" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.66%)</title><rect x="610.0" y="611.0" width="7.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="613.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (13 samples, 1.22%)</title><rect x="617.7" y="627.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="620.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (6 samples, 0.56%)</title><rect x="617.7" y="611.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.7" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="617.7" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="620.7" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="617.7" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="620.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="617.7" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="620.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.47%)</title><rect x="618.8" y="595.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.66%)</title><rect x="624.4" y="611.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="624.4" y="595.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="627.4" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="624.4" y="579.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="627.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.56%)</title><rect x="625.5" y="595.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.5" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="631.0" y="579.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="632.1" y="627.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.1" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="633.2" y="627.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="636.2" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (75 samples, 7.04%)</title><rect x="634.3" y="627.0" width="83.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="637.3" y="638.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 7.04%)</title><rect x="634.3" y="611.0" width="83.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.3" y="622.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.88%)</title><rect x="634.3" y="595.0" width="22.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.3" y="606.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (20 samples, 1.88%)</title><rect x="634.3" y="579.0" width="22.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.3" y="590.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (20 samples, 1.88%)</title><rect x="634.3" y="563.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="637.3" y="574.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 1.03%)</title><rect x="644.3" y="547.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="656.5" y="595.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="659.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="656.5" y="579.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="659.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="656.5" y="563.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.5" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (53 samples, 4.97%)</title><rect x="658.7" y="595.0" width="58.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.7" y="606.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (47 samples, 4.41%)</title><rect x="665.3" y="579.0" width="52.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.3" y="590.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.19%)</title><rect x="670.8" y="563.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.56%)</title><rect x="673.1" y="563.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.56%)</title><rect x="673.1" y="547.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="676.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 3.19%)</title><rect x="679.7" y="563.0" width="37.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.7" y="574.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="700.7" y="547.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.75%)</title><rect x="701.8" y="547.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.8" y="558.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.56%)</title><rect x="710.7" y="547.0" width="6.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="713.7" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="717.3" y="643.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="720.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (53 samples, 4.97%)</title><rect x="718.4" y="659.0" width="58.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="721.4" y="670.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="718.4" y="643.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (52 samples, 4.88%)</title><rect x="719.5" y="643.0" width="57.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="722.5" y="654.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/588734280.process (21 samples, 1.97%)</title><rect x="722.9" y="627.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.9" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (20 samples, 1.88%)</title><rect x="724.0" y="611.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="727.0" y="622.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.50%)</title><rect x="725.1" y="595.0" width="17.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.1" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="731.7" y="579.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.7" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="731.7" y="563.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="734.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="731.7" y="547.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="734.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="731.7" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.7" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="731.7" y="515.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="734.7" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="731.7" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="734.7" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="732.8" y="579.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="735.8" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="732.8" y="563.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.75%)</title><rect x="733.9" y="579.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.9" y="590.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="733.9" y="563.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="736.9" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.66%)</title><rect x="735.0" y="563.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="738.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.56%)</title><rect x="736.2" y="547.0" width="6.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="739.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.28%)</title><rect x="742.8" y="595.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.28%)</title><rect x="742.8" y="579.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.28%)</title><rect x="742.8" y="563.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.28%)</title><rect x="742.8" y="547.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="745.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.metadata (1 samples, 0.09%)</title><rect x="746.1" y="627.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.47%)</title><rect x="747.2" y="627.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="750.2" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.47%)</title><rect x="747.2" y="611.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (7 samples, 0.66%)</title><rect x="752.8" y="627.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.8" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (7 samples, 0.66%)</title><rect x="752.8" y="611.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/183759455.get$Lambda (7 samples, 0.66%)</title><rect x="752.8" y="595.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$267/183759455.&lt;init&gt; (6 samples, 0.56%)</title><rect x="753.9" y="579.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="756.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.47%)</title><rect x="760.5" y="627.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="763.5" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.38%)</title><rect x="761.6" y="611.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="764.6" y="622.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.28%)</title><rect x="761.6" y="595.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="764.6" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="764.9" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.9" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.94%)</title><rect x="766.0" y="627.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="769.0" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="772.7" y="611.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.7" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="772.7" y="595.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="775.7" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="772.7" y="579.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="775.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="772.7" y="563.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="772.7" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.7" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="772.7" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="775.7" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.28%)</title><rect x="773.8" y="611.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.50%)</title><rect x="777.1" y="659.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.1" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.19%)</title><rect x="781.5" y="643.0" width="2.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="784.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="782.6" y="627.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="785.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.94%)</title><rect x="783.8" y="643.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="786.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.84%)</title><rect x="784.9" y="627.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$272/623306757.accept (9 samples, 0.84%)</title><rect x="784.9" y="611.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="787.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (9 samples, 0.84%)</title><rect x="784.9" y="595.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.9" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.84%)</title><rect x="784.9" y="579.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.9" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.84%)</title><rect x="784.9" y="563.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="787.1" y="547.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="790.1" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="788.2" y="547.0" width="5.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="791.2" y="558.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="788.2" y="531.0" width="5.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="791.2" y="542.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="793.7" y="547.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="796.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.50%)</title><rect x="794.8" y="675.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.19%)</title><rect x="794.8" y="659.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.31%)</title><rect x="797.0" y="659.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="800.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.13%)</title><rect x="798.1" y="643.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$276/507879579.accept (12 samples, 1.13%)</title><rect x="798.1" y="627.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (12 samples, 1.13%)</title><rect x="798.1" y="611.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/868917848.complete (12 samples, 1.13%)</title><rect x="798.1" y="595.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (12 samples, 1.13%)</title><rect x="798.1" y="579.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="801.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 1.13%)</title><rect x="798.1" y="563.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.1" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.13%)</title><rect x="798.1" y="547.0" width="13.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.1" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.13%)</title><rect x="798.1" y="531.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.1" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 1.13%)</title><rect x="798.1" y="515.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="801.1" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (12 samples, 1.13%)</title><rect x="798.1" y="499.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="811.4" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="814.4" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.66%)</title><rect x="812.5" y="675.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="815.5" y="686.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.66%)</title><rect x="812.5" y="659.0" width="7.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="815.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.56%)</title><rect x="820.3" y="691.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.3" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="821.4" y="675.0" width="5.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="824.4" y="686.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="821.4" y="659.0" width="5.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="824.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.19%)</title><rect x="826.9" y="739.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="829.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.19%)</title><rect x="826.9" y="723.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="826.9" y="707.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.19%)</title><rect x="826.9" y="691.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (219 samples, 20.54%)</title><rect x="829.1" y="739.0" width="242.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.1" y="750.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (219 samples, 20.54%)</title><rect x="829.1" y="723.0" width="242.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="832.1" y="734.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (200 samples, 18.76%)</title><rect x="833.6" y="707.0" width="221.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.6" y="718.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.66%)</title><rect x="842.4" y="691.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="845.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.78%)</title><rect x="850.2" y="691.0" width="21.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.2" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.19%)</title><rect x="871.2" y="691.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="874.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="871.2" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="874.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="871.2" y="659.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="874.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="871.2" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="874.2" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="871.2" y="627.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.2" y="638.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="871.2" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="872.3" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="875.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="872.3" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="875.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="872.3" y="643.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="875.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="872.3" y="627.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.38%)</title><rect x="873.4" y="691.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="876.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.19%)</title><rect x="875.6" y="675.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="878.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 15.01%)</title><rect x="877.8" y="691.0" width="177.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="880.8" y="702.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (159 samples, 14.92%)</title><rect x="878.9" y="675.0" width="176.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.9" y="686.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.19%)</title><rect x="884.5" y="659.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.5" y="670.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (5 samples, 0.47%)</title><rect x="886.7" y="659.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.7" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="892.2" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="895.2" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 13.04%)</title><rect x="893.3" y="659.0" width="153.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="896.3" y="670.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.56%)</title><rect x="897.8" y="643.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="900.8" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.69%)</title><rect x="904.4" y="643.0" width="19.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="907.4" y="654.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.38%)</title><rect x="909.9" y="627.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.9" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.19%)</title><rect x="909.9" y="611.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="912.9" y="622.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="911.1" y="595.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.1" y="606.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="912.2" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.2" y="622.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="913.3" y="611.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="916.3" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="914.4" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="917.4" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.75%)</title><rect x="915.5" y="627.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="918.5" y="638.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="924.3" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="927.3" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.28%)</title><rect x="925.4" y="643.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.4" y="654.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.75%)</title><rect x="928.8" y="643.0" width="8.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="931.8" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.91%)</title><rect x="937.6" y="643.0" width="34.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="940.6" y="654.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 4.69%)</title><rect x="971.9" y="643.0" width="55.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="974.9" y="654.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.38%)</title><rect x="1027.3" y="643.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1030.3" y="654.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.19%)</title><rect x="1031.7" y="643.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1034.7" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.38%)</title><rect x="1033.9" y="643.0" width="4.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1036.9" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.28%)</title><rect x="1038.3" y="643.0" width="3.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1041.3" y="654.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1041.7" y="643.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1044.7" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1042.8" y="643.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.8" y="654.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1045.0" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.0" y="654.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1046.1" y="643.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1049.1" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.38%)</title><rect x="1047.2" y="659.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1050.2" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.28%)</title><rect x="1051.6" y="659.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.41%)</title><rect x="1055.0" y="707.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1058.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.41%)</title><rect x="1055.0" y="691.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1058.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.41%)</title><rect x="1055.0" y="675.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1058.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.41%)</title><rect x="1055.0" y="659.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1058.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.09%)</title><rect x="1070.5" y="643.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1073.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1071.6" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1074.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1071.6" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1074.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1071.6" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1074.6" y="766.0"></text>
</g>
<g>
<title>start_thread (106 samples, 9.94%)</title><rect x="1072.7" y="787.0" width="117.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1075.7" y="798.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 9.94%)</title><rect x="1072.7" y="771.0" width="117.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1075.7" y="782.0">java_start(Thr..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.97%)</title><rect x="1072.7" y="755.0" width="23.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.7" y="766.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (2 samples, 0.19%)</title><rect x="1072.7" y="739.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.7" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1073.8" y="723.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1076.8" y="734.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.47%)</title><rect x="1074.9" y="739.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.9" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.47%)</title><rect x="1074.9" y="723.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.9" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1074.9" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.9" y="718.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.38%)</title><rect x="1076.0" y="707.0" width="4.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1079.0" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.31%)</title><rect x="1080.4" y="739.0" width="15.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.4" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.28%)</title><rect x="1080.4" y="723.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.4" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1080.4" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.4" y="718.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.19%)</title><rect x="1081.5" y="707.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1084.5" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.38%)</title><rect x="1083.7" y="723.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.7" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1083.7" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.7" y="718.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1083.7" y="691.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.7" y="702.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1083.7" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.7" y="686.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1083.7" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.7" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.28%)</title><rect x="1084.8" y="707.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.8" y="718.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.19%)</title><rect x="1084.8" y="691.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.8" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1087.1" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.1" y="702.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1087.1" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.1" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.66%)</title><rect x="1088.2" y="723.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.2" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.66%)</title><rect x="1088.2" y="707.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.2" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.56%)</title><rect x="1088.2" y="691.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.2" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.56%)</title><rect x="1088.2" y="675.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.2" y="686.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.47%)</title><rect x="1089.3" y="659.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.3" y="670.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.47%)</title><rect x="1089.3" y="643.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.3" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_obj_dead(oopDesc*, HeapRegion const*) const (1 samples, 0.09%)</title><rect x="1090.4" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.4" y="638.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.28%)</title><rect x="1091.5" y="627.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.5" y="638.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="1091.5" y="611.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.5" y="622.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1092.6" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.6" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1093.7" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.7" y="622.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1093.7" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.7" y="606.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1094.8" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.8" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1094.8" y="675.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.8" y="686.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1094.8" y="659.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.8" y="670.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1094.8" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.8" y="654.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1094.8" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.8" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (83 samples, 7.79%)</title><rect x="1095.9" y="755.0" width="91.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.9" y="766.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (83 samples, 7.79%)</title><rect x="1095.9" y="739.0" width="91.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.9" y="750.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (83 samples, 7.79%)</title><rect x="1095.9" y="723.0" width="91.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.9" y="734.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (83 samples, 7.79%)</title><rect x="1095.9" y="707.0" width="91.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.9" y="718.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 7.69%)</title><rect x="1095.9" y="691.0" width="90.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.9" y="702.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 7.69%)</title><rect x="1095.9" y="675.0" width="90.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.9" y="686.0">Compile::C..</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 4.22%)</title><rect x="1095.9" y="659.0" width="49.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.9" y="670.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.38%)</title><rect x="1095.9" y="643.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.9" y="654.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1095.9" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.9" y="638.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.19%)</title><rect x="1097.0" y="627.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.0" y="638.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.19%)</title><rect x="1097.0" y="611.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.0" y="622.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.19%)</title><rect x="1097.0" y="595.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.0" y="606.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1097.0" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.0" y="590.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.09%)</title><rect x="1098.1" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.1" y="590.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1099.2" y="627.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1102.2" y="638.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.28%)</title><rect x="1100.3" y="643.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.3" y="654.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1101.4" y="627.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.4" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1101.4" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.4" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1101.4" y="595.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.4" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1102.6" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.6" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1102.6" y="611.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.6" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.38%)</title><rect x="1103.7" y="643.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.7" y="654.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.38%)</title><rect x="1103.7" y="627.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.7" y="638.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.38%)</title><rect x="1103.7" y="611.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.7" y="622.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.19%)</title><rect x="1104.8" y="595.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.8" y="606.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1104.8" y="579.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.8" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1104.8" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.8" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1104.8" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.8" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1104.8" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.8" y="542.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1104.8" y="515.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.8" y="526.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1105.9" y="579.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.9" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1105.9" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.9" y="574.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1105.9" y="547.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.9" y="558.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1105.9" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.9" y="542.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="1105.9" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.9" y="526.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1107.0" y="595.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.0" y="606.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.09%)</title><rect x="1107.0" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.0" y="590.0"></text>
</g>
<g>
<title>StoreNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1107.0" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.0" y="574.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1108.1" y="643.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.1" y="654.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.09%)</title><rect x="1108.1" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.1" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1109.2" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.2" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1109.2" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.2" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1109.2" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.2" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1109.2" y="595.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.2" y="606.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1109.2" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 3.00%)</title><rect x="1110.3" y="643.0" width="35.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.3" y="654.0">Pha..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1110.3" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.3" y="638.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.09%)</title><rect x="1111.4" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.4" y="638.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.09%)</title><rect x="1112.5" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1113.6" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.6" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.28%)</title><rect x="1114.7" y="627.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="638.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1116.9" y="611.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.75%)</title><rect x="1118.0" y="627.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.0" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1121.4" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.4" y="622.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1122.5" y="611.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.28%)</title><rect x="1123.6" y="611.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.6" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.19%)</title><rect x="1124.7" y="595.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.19%)</title><rect x="1126.9" y="627.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.19%)</title><rect x="1126.9" y="611.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.47%)</title><rect x="1129.1" y="627.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.1" y="638.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1133.5" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1134.7" y="627.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1135.8" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.8" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.28%)</title><rect x="1136.9" y="627.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.9" y="638.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1136.9" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.9" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.09%)</title><rect x="1136.9" y="595.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.9" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.09%)</title><rect x="1136.9" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.9" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1136.9" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.9" y="574.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.19%)</title><rect x="1138.0" y="611.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.0" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.09%)</title><rect x="1138.0" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.0" y="606.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1138.0" y="579.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.0" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1139.1" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.1" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1139.1" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.1" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1140.2" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.2" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1141.3" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.3" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1141.3" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.19%)</title><rect x="1142.4" y="627.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.4" y="638.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1143.5" y="611.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.5" y="622.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1144.6" y="627.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1147.6" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 2.72%)</title><rect x="1145.7" y="659.0" width="32.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.7" y="670.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1145.7" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.7" y="654.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1145.7" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.7" y="638.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1146.8" y="643.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.8" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1146.8" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.8" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1146.8" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.8" y="622.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1146.8" y="595.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.8" y="606.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.09%)</title><rect x="1146.8" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.28%)</title><rect x="1147.9" y="643.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1147.9" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.19%)</title><rect x="1149.0" y="627.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1149.0" y="611.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1149.0" y="595.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.09%)</title><rect x="1149.0" y="579.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.09%)</title><rect x="1149.0" y="563.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1150.2" y="611.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1150.2" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1150.2" y="579.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1150.2" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.2" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1150.2" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.2" y="558.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1150.2" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 1.88%)</title><rect x="1151.3" y="643.0" width="22.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="654.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1151.3" y="627.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.3" y="638.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1151.3" y="611.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 1.50%)</title><rect x="1152.4" y="627.0" width="17.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 1.22%)</title><rect x="1155.7" y="611.0" width="14.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.19%)</title><rect x="1156.8" y="595.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 0.94%)</title><rect x="1159.0" y="595.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1167.9" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1167.9" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1167.9" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1169.0" y="579.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1170.1" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.1" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1171.2" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1171.2" y="611.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1172.3" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.28%)</title><rect x="1173.4" y="643.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.28%)</title><rect x="1173.4" y="627.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="638.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.4" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1173.4" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="606.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1174.5" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="622.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1175.6" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="579.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="590.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1176.7" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1176.7" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1176.7" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="622.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1176.7" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="606.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.09%)</title><rect x="1176.7" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="590.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1176.7" y="563.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.66%)</title><rect x="1177.8" y="659.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.66%)</title><rect x="1177.8" y="643.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.66%)</title><rect x="1177.8" y="627.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.66%)</title><rect x="1177.8" y="611.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1177.8" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1177.8" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.09%)</title><rect x="1177.8" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1177.8" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1177.8" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1177.8" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.56%)</title><rect x="1178.9" y="595.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.56%)</title><rect x="1178.9" y="579.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1178.9" y="563.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1178.9" y="547.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1178.9" y="531.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1178.9" y="515.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.47%)</title><rect x="1178.9" y="499.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.47%)</title><rect x="1178.9" y="483.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1178.9" y="467.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1178.9" y="451.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1178.9" y="435.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1178.9" y="419.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1178.9" y="403.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1178.9" y="387.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1178.9" y="371.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1178.9" y="355.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1178.9" y="339.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1178.9" y="323.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1178.9" y="307.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.9" y="291.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="275.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="259.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="243.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="227.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="211.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.9" y="195.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="206.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="179.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="190.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="163.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="174.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.9" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="131.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.9" y="115.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="126.0"></text>
</g>
<g>
<title>ciMethod::can_be_compiled() (1 samples, 0.09%)</title><rect x="1178.9" y="99.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="110.0"></text>
</g>
<g>
<title>ciEnv::comp_level() (1 samples, 0.09%)</title><rect x="1178.9" y="83.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1180.0" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="243.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="254.0"></text>
</g>
<g>
<title>GraphKit::sync_kit(IdealKit&amp;) (1 samples, 0.09%)</title><rect x="1180.0" y="227.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="238.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="211.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="195.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="206.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="179.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="190.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1180.0" y="163.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1181.1" y="371.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.1" y="355.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.1" y="339.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1181.1" y="323.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1181.1" y="307.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.1" y="291.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="302.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.1" y="275.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="286.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.1" y="259.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="270.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.1" y="243.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="254.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1181.1" y="227.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1182.3" y="467.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1182.3" y="451.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1182.3" y="435.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1182.3" y="419.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1182.3" y="403.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1182.3" y="387.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1182.3" y="371.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1182.3" y="355.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1182.3" y="339.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1182.3" y="323.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1182.3" y="307.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1182.3" y="291.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1182.3" y="275.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1182.3" y="259.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1182.3" y="243.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1182.3" y="227.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1182.3" y="211.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1182.3" y="195.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1182.3" y="179.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.3" y="163.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.3" y="147.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.3" y="131.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.3" y="115.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.3" y="99.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1182.3" y="83.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="94.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1182.3" y="67.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.3" y="51.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="62.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1182.3" y="35.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.4" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="174.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.4" y="147.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="158.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1183.4" y="131.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1183.4" y="115.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="126.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1183.4" y="99.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.5" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.5" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.5" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.5" y="515.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.5" y="499.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.5" y="483.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.5" y="467.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.5" y="451.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.5" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.5" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.5" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.5" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.5" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.5" y="355.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.5" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1184.5" y="323.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1184.5" y="307.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1184.5" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.09%)</title><rect x="1184.5" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="286.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.09%)</title><rect x="1184.5" y="259.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="270.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.09%)</title><rect x="1184.5" y="243.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="254.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1185.6" y="659.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.6" y="670.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1185.6" y="643.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.6" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.7" y="691.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.7" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.7" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="670.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.09%)</title><rect x="1186.7" y="643.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1186.7" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="638.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1186.7" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="606.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="579.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="755.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="766.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="739.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="750.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.8" y="723.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="734.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="723.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="659.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="670.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (1 samples, 0.09%)</title><rect x="1188.9" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="654.0"></text>
</g>
</g>
</svg>
