<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (156 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 18.59%)</title><rect x="10.0" y="1027.0" width="219.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (29 samples, 18.59%)</title><rect x="10.0" y="1011.0" width="219.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (22 samples, 14.10%)</title><rect x="10.0" y="995.0" width="166.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$246/1817876867.accept (21 samples, 13.46%)</title><rect x="10.0" y="979.0" width="158.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (21 samples, 13.46%)</title><rect x="10.0" y="963.0" width="158.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (18 samples, 11.54%)</title><rect x="10.0" y="947.0" width="136.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (18 samples, 11.54%)</title><rect x="10.0" y="931.0" width="136.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (18 samples, 11.54%)</title><rect x="10.0" y="915.0" width="136.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (18 samples, 11.54%)</title><rect x="10.0" y="899.0" width="136.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (18 samples, 11.54%)</title><rect x="10.0" y="883.0" width="136.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="894.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (18 samples, 11.54%)</title><rect x="10.0" y="867.0" width="136.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="878.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 7.05%)</title><rect x="10.0" y="851.0" width="83.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 1.28%)</title><rect x="10.0" y="835.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 1.28%)</title><rect x="10.0" y="819.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 1.28%)</title><rect x="10.0" y="803.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 1.28%)</title><rect x="10.0" y="787.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.28%)</title><rect x="25.1" y="835.0" width="15.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 1.28%)</title><rect x="25.1" y="819.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 1.28%)</title><rect x="25.1" y="803.0" width="15.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 4.49%)</title><rect x="40.3" y="835.0" width="52.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.3" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 4.49%)</title><rect x="40.3" y="819.0" width="52.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.3" y="830.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 4.49%)</title><rect x="40.3" y="803.0" width="52.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.3" y="814.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 4.49%)</title><rect x="40.3" y="787.0" width="52.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.3" y="798.0">java/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 4.49%)</title><rect x="40.3" y="771.0" width="52.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.3" y="782.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 4.49%)</title><rect x="40.3" y="755.0" width="52.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="43.3" y="766.0">Unsaf..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.64%)</title><rect x="40.3" y="739.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="43.3" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 3.21%)</title><rect x="47.8" y="739.0" width="37.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="50.8" y="750.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.64%)</title><rect x="85.6" y="739.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="88.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 2.56%)</title><rect x="93.2" y="851.0" width="30.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.2" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 2.56%)</title><rect x="93.2" y="835.0" width="30.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.2" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 2.56%)</title><rect x="93.2" y="819.0" width="30.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.2" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 1.92%)</title><rect x="123.5" y="851.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.5" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 1.92%)</title><rect x="123.5" y="835.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.5" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.92%)</title><rect x="123.5" y="819.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.5" y="830.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.64%)</title><rect x="146.2" y="947.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.64%)</title><rect x="146.2" y="931.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.64%)</title><rect x="146.2" y="915.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 1.28%)</title><rect x="153.7" y="947.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.7" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.28%)</title><rect x="153.7" y="931.0" width="15.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.64%)</title><rect x="168.8" y="979.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.64%)</title><rect x="168.8" y="963.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.64%)</title><rect x="168.8" y="947.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.64%)</title><rect x="168.8" y="931.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.64%)</title><rect x="168.8" y="915.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.64%)</title><rect x="168.8" y="899.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.49%)</title><rect x="176.4" y="995.0" width="53.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.4" y="1006.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.49%)</title><rect x="176.4" y="979.0" width="53.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.4" y="990.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.64%)</title><rect x="176.4" y="963.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 2.56%)</title><rect x="184.0" y="963.0" width="30.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="187.0" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.56%)</title><rect x="184.0" y="947.0" width="30.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.0" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.92%)</title><rect x="184.0" y="931.0" width="22.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.0" y="942.0">o..</text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.64%)</title><rect x="184.0" y="915.0" width="7.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="187.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 1.28%)</title><rect x="191.5" y="915.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.28%)</title><rect x="191.5" y="899.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 1.28%)</title><rect x="191.5" y="883.0" width="15.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.28%)</title><rect x="191.5" y="867.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.64%)</title><rect x="191.5" y="851.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="194.5" y="862.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.64%)</title><rect x="191.5" y="835.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.64%)</title><rect x="199.1" y="851.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.1" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.64%)</title><rect x="199.1" y="835.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.1" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.64%)</title><rect x="199.1" y="819.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.1" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.64%)</title><rect x="199.1" y="803.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="202.1" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.64%)</title><rect x="199.1" y="787.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="202.1" y="798.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.64%)</title><rect x="199.1" y="771.0" width="7.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="202.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.64%)</title><rect x="206.7" y="931.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.64%)</title><rect x="206.7" y="915.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.64%)</title><rect x="206.7" y="899.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.64%)</title><rect x="206.7" y="883.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.64%)</title><rect x="206.7" y="867.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.64%)</title><rect x="206.7" y="851.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.64%)</title><rect x="206.7" y="835.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="209.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.64%)</title><rect x="206.7" y="819.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.64%)</title><rect x="214.2" y="963.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.64%)</title><rect x="214.2" y="947.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.64%)</title><rect x="214.2" y="931.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.64%)</title><rect x="214.2" y="915.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.64%)</title><rect x="214.2" y="899.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.64%)</title><rect x="214.2" y="883.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.64%)</title><rect x="214.2" y="867.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.64%)</title><rect x="214.2" y="851.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.64%)</title><rect x="214.2" y="835.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.64%)</title><rect x="214.2" y="819.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.64%)</title><rect x="214.2" y="803.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.2" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.64%)</title><rect x="214.2" y="787.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.64%)</title><rect x="214.2" y="771.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.64%)</title><rect x="221.8" y="963.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.64%)</title><rect x="221.8" y="947.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.64%)</title><rect x="221.8" y="931.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.64%)</title><rect x="221.8" y="915.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.64%)</title><rect x="221.8" y="899.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.8" y="910.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.64%)</title><rect x="221.8" y="883.0" width="7.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="224.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (55 samples, 35.26%)</title><rect x="229.4" y="1027.0" width="416.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.4" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (55 samples, 35.26%)</title><rect x="229.4" y="1011.0" width="416.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.4" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (55 samples, 35.26%)</title><rect x="229.4" y="995.0" width="416.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.4" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.64%)</title><rect x="236.9" y="979.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$260/1993614449.run (35 samples, 22.44%)</title><rect x="244.5" y="979.0" width="264.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.5" y="990.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (35 samples, 22.44%)</title><rect x="244.5" y="963.0" width="264.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.5" y="974.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (35 samples, 22.44%)</title><rect x="244.5" y="947.0" width="264.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.5" y="958.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (35 samples, 22.44%)</title><rect x="244.5" y="931.0" width="264.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.5" y="942.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (15 samples, 9.62%)</title><rect x="244.5" y="915.0" width="113.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.5" y="926.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (15 samples, 9.62%)</title><rect x="244.5" y="899.0" width="113.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.5" y="910.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (15 samples, 9.62%)</title><rect x="244.5" y="883.0" width="113.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.5" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 9.62%)</title><rect x="244.5" y="867.0" width="113.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.5" y="878.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 9.62%)</title><rect x="244.5" y="851.0" width="113.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.5" y="862.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (15 samples, 9.62%)</title><rect x="244.5" y="835.0" width="113.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.5" y="846.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 1.28%)</title><rect x="244.5" y="819.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 8.33%)</title><rect x="259.6" y="819.0" width="98.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.6" y="830.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.64%)</title><rect x="259.6" y="803.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.64%)</title><rect x="267.2" y="803.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.64%)</title><rect x="267.2" y="787.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.64%)</title><rect x="274.7" y="803.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.64%)</title><rect x="274.7" y="787.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 5.13%)</title><rect x="282.3" y="803.0" width="60.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.3" y="814.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 2.56%)</title><rect x="282.3" y="787.0" width="30.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.3" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.64%)</title><rect x="282.3" y="771.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.64%)</title><rect x="282.3" y="755.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.64%)</title><rect x="282.3" y="739.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.92%)</title><rect x="289.9" y="771.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.9" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.56%)</title><rect x="312.6" y="787.0" width="30.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="315.6" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.56%)</title><rect x="312.6" y="771.0" width="30.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.6" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.56%)</title><rect x="312.6" y="755.0" width="30.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.6" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.64%)</title><rect x="320.1" y="739.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.64%)</title><rect x="320.1" y="723.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.28%)</title><rect x="327.7" y="739.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.28%)</title><rect x="327.7" y="723.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.28%)</title><rect x="327.7" y="707.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.28%)</title><rect x="327.7" y="691.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.7" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.28%)</title><rect x="327.7" y="675.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.7" y="686.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.64%)</title><rect x="335.3" y="659.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 1.28%)</title><rect x="342.8" y="803.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (18 samples, 11.54%)</title><rect x="357.9" y="915.0" width="136.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.9" y="926.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (2 samples, 1.28%)</title><rect x="357.9" y="899.0" width="15.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.9" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.28%)</title><rect x="357.9" y="883.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.9" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.28%)</title><rect x="357.9" y="867.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.9" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.64%)</title><rect x="365.5" y="851.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.64%)</title><rect x="365.5" y="835.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.64%)</title><rect x="365.5" y="819.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (10 samples, 6.41%)</title><rect x="373.1" y="899.0" width="75.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.1" y="910.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (10 samples, 6.41%)</title><rect x="373.1" y="883.0" width="75.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.1" y="894.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.64%)</title><rect x="388.2" y="867.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.2" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.64%)</title><rect x="388.2" y="851.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.2" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.64%)</title><rect x="388.2" y="835.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.topic (1 samples, 0.64%)</title><rect x="395.8" y="867.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.8" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.85%)</title><rect x="403.3" y="867.0" width="45.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="878.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.85%)</title><rect x="403.3" y="851.0" width="45.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.3" y="862.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.64%)</title><rect x="403.3" y="835.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.64%)</title><rect x="403.3" y="819.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.64%)</title><rect x="403.3" y="803.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.64%)</title><rect x="403.3" y="787.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 3.21%)</title><rect x="410.9" y="835.0" width="37.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.9" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 3.21%)</title><rect x="410.9" y="819.0" width="37.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.9" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 3.21%)</title><rect x="410.9" y="803.0" width="37.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.9" y="814.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.28%)</title><rect x="418.5" y="787.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.5" y="798.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 1.28%)</title><rect x="433.6" y="787.0" width="15.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="436.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (5 samples, 3.21%)</title><rect x="448.7" y="899.0" width="37.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="451.7" y="910.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (5 samples, 3.21%)</title><rect x="448.7" y="883.0" width="37.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="451.7" y="894.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/556787342.process (3 samples, 1.92%)</title><rect x="448.7" y="867.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="451.7" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.92%)</title><rect x="448.7" y="851.0" width="22.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="451.7" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.64%)</title><rect x="456.3" y="835.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.64%)</title><rect x="456.3" y="819.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.64%)</title><rect x="456.3" y="803.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="459.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.64%)</title><rect x="456.3" y="787.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.3" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.64%)</title><rect x="456.3" y="771.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="459.3" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.64%)</title><rect x="456.3" y="755.0" width="7.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="459.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.64%)</title><rect x="463.8" y="835.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="466.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.64%)</title><rect x="471.4" y="867.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.64%)</title><rect x="479.0" y="867.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.64%)</title><rect x="486.5" y="899.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.64%)</title><rect x="494.1" y="915.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.64%)</title><rect x="494.1" y="899.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="497.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.64%)</title><rect x="494.1" y="883.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/330204474.accept (1 samples, 0.64%)</title><rect x="494.1" y="867.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="497.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (1 samples, 0.64%)</title><rect x="494.1" y="851.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="497.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$258/808321224.complete (1 samples, 0.64%)</title><rect x="494.1" y="835.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (1 samples, 0.64%)</title><rect x="494.1" y="819.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="497.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.64%)</title><rect x="494.1" y="803.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.1" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.64%)</title><rect x="494.1" y="787.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="497.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.64%)</title><rect x="494.1" y="771.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="497.1" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.64%)</title><rect x="494.1" y="755.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.1" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.64%)</title><rect x="494.1" y="739.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.1" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.64%)</title><rect x="501.7" y="915.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="504.7" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.64%)</title><rect x="501.7" y="899.0" width="7.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="504.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.28%)</title><rect x="509.2" y="979.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 1.28%)</title><rect x="509.2" y="963.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.2" y="974.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.64%)</title><rect x="516.8" y="947.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="519.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 10.26%)</title><rect x="524.4" y="979.0" width="121.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="527.4" y="990.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 10.26%)</title><rect x="524.4" y="963.0" width="121.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.4" y="974.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 9.62%)</title><rect x="531.9" y="947.0" width="113.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.9" y="958.0">java/util/conc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.64%)</title><rect x="539.5" y="931.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="542.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 8.33%)</title><rect x="547.1" y="931.0" width="98.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="550.1" y="942.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 8.33%)</title><rect x="547.1" y="915.0" width="98.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="550.1" y="926.0">sun/misc/Uns..</text>
</g>
<g>
<title>Unsafe_Park (12 samples, 7.69%)</title><rect x="554.6" y="899.0" width="90.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="557.6" y="910.0">Unsafe_Park</text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 1.92%)</title><rect x="554.6" y="883.0" width="22.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="557.6" y="894.0">_..</text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.56%)</title><rect x="577.3" y="883.0" width="30.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="580.3" y="894.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.92%)</title><rect x="607.6" y="883.0" width="22.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="610.6" y="894.0">_..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.64%)</title><rect x="630.3" y="883.0" width="7.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="633.3" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.64%)</title><rect x="637.8" y="883.0" width="7.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="640.8" y="894.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.64%)</title><rect x="645.4" y="1027.0" width="7.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="648.4" y="1038.0"></text>
</g>
<g>
<title>start_thread (71 samples, 45.51%)</title><rect x="652.9" y="1027.0" width="537.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="655.9" y="1038.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (71 samples, 45.51%)</title><rect x="652.9" y="1011.0" width="537.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="655.9" y="1022.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 6.41%)</title><rect x="652.9" y="995.0" width="75.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="655.9" y="1006.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (10 samples, 6.41%)</title><rect x="652.9" y="979.0" width="75.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.9" y="990.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 5.13%)</title><rect x="652.9" y="963.0" width="60.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="655.9" y="974.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.64%)</title><rect x="652.9" y="947.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.9" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.64%)</title><rect x="652.9" y="931.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.9" y="942.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.64%)</title><rect x="652.9" y="915.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="655.9" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.56%)</title><rect x="660.5" y="947.0" width="30.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="663.5" y="958.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.28%)</title><rect x="675.6" y="931.0" width="15.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="678.6" y="942.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.64%)</title><rect x="675.6" y="915.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="678.6" y="926.0"></text>
</g>
<g>
<title>void G1ParScanClosure::do_oop_nv&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.64%)</title><rect x="675.6" y="899.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.6" y="910.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.64%)</title><rect x="683.2" y="915.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="686.2" y="926.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.64%)</title><rect x="683.2" y="899.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="686.2" y="910.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.28%)</title><rect x="690.8" y="947.0" width="15.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="693.8" y="958.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.64%)</title><rect x="705.9" y="947.0" width="7.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="708.9" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.64%)</title><rect x="713.5" y="963.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.5" y="974.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.64%)</title><rect x="713.5" y="947.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.5" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.64%)</title><rect x="721.0" y="963.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="724.0" y="974.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.64%)</title><rect x="721.0" y="947.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="724.0" y="958.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.64%)</title><rect x="721.0" y="931.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="724.0" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.64%)</title><rect x="721.0" y="915.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="724.0" y="926.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.64%)</title><rect x="721.0" y="899.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="724.0" y="910.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.64%)</title><rect x="721.0" y="883.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="724.0" y="894.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.64%)</title><rect x="721.0" y="867.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.0" y="878.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.64%)</title><rect x="721.0" y="851.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="724.0" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 38.46%)</title><rect x="728.6" y="995.0" width="453.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="731.6" y="1006.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 38.46%)</title><rect x="728.6" y="979.0" width="453.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="731.6" y="990.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 38.46%)</title><rect x="728.6" y="963.0" width="453.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="731.6" y="974.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (57 samples, 36.54%)</title><rect x="728.6" y="947.0" width="431.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.6" y="958.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (57 samples, 36.54%)</title><rect x="728.6" y="931.0" width="431.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="731.6" y="942.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (36 samples, 23.08%)</title><rect x="728.6" y="915.0" width="272.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="731.6" y="926.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.64%)</title><rect x="728.6" y="899.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="731.6" y="910.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.64%)</title><rect x="728.6" y="883.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="731.6" y="894.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.64%)</title><rect x="728.6" y="867.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="731.6" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.92%)</title><rect x="736.2" y="899.0" width="22.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="739.2" y="910.0">C..</text>
</g>
<g>
<title>Assembler::mov64(RegisterImpl*, long) (1 samples, 0.64%)</title><rect x="743.7" y="883.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="746.7" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.64%)</title><rect x="751.3" y="883.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="754.3" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.64%)</title><rect x="751.3" y="867.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="754.3" y="878.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.64%)</title><rect x="758.8" y="899.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="761.8" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.28%)</title><rect x="766.4" y="899.0" width="15.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="769.4" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 1.28%)</title><rect x="766.4" y="883.0" width="15.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="769.4" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.28%)</title><rect x="766.4" y="867.0" width="15.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="769.4" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.64%)</title><rect x="766.4" y="851.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="769.4" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.64%)</title><rect x="766.4" y="835.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="769.4" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.64%)</title><rect x="766.4" y="819.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="769.4" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.64%)</title><rect x="774.0" y="851.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="777.0" y="862.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.64%)</title><rect x="774.0" y="835.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="777.0" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.64%)</title><rect x="774.0" y="819.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="777.0" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.64%)</title><rect x="774.0" y="803.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="777.0" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 2.56%)</title><rect x="781.5" y="899.0" width="30.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.5" y="910.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 2.56%)</title><rect x="781.5" y="883.0" width="30.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.5" y="894.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.64%)</title><rect x="781.5" y="867.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.5" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.28%)</title><rect x="789.1" y="867.0" width="15.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="792.1" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.64%)</title><rect x="796.7" y="851.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.64%)</title><rect x="804.2" y="867.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 16.03%)</title><rect x="811.8" y="899.0" width="189.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.8" y="910.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.64%)</title><rect x="819.4" y="883.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.64%)</title><rect x="819.4" y="867.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="822.4" y="878.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.64%)</title><rect x="819.4" y="851.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="822.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.28%)</title><rect x="826.9" y="883.0" width="15.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="829.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.64%)</title><rect x="826.9" y="867.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.9" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.64%)</title><rect x="834.5" y="867.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.64%)</title><rect x="842.1" y="883.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="845.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 6.41%)</title><rect x="849.6" y="883.0" width="75.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="852.6" y="894.0">PhaseCha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.64%)</title><rect x="872.3" y="867.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.3" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.28%)</title><rect x="879.9" y="867.0" width="15.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.92%)</title><rect x="895.0" y="867.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.0" y="878.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.64%)</title><rect x="910.1" y="851.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="913.1" y="862.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.64%)</title><rect x="917.7" y="867.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (2 samples, 1.28%)</title><rect x="925.3" y="883.0" width="15.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="928.3" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.64%)</title><rect x="932.8" y="867.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (4 samples, 2.56%)</title><rect x="940.4" y="883.0" width="30.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="943.4" y="894.0">Ph..</text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.64%)</title><rect x="955.5" y="867.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.5" y="878.0"></text>
</g>
<g>
<title>membar_volatileNode::bottom_type() const (1 samples, 0.64%)</title><rect x="955.5" y="851.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.5" y="862.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.64%)</title><rect x="963.1" y="867.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 1.28%)</title><rect x="970.6" y="883.0" width="15.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.6" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.64%)</title><rect x="985.8" y="883.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.8" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.64%)</title><rect x="993.3" y="883.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="996.3" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 8.33%)</title><rect x="1000.9" y="915.0" width="98.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1003.9" y="926.0">Compile::Opt..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 7.05%)</title><rect x="1000.9" y="899.0" width="83.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.9" y="910.0">PhaseIdea..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.64%)</title><rect x="1000.9" y="883.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1003.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.28%)</title><rect x="1008.5" y="883.0" width="15.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.92%)</title><rect x="1023.6" y="883.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.6" y="894.0">P..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.64%)</title><rect x="1031.2" y="867.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.64%)</title><rect x="1038.7" y="867.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.92%)</title><rect x="1046.3" y="883.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.3" y="894.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.28%)</title><rect x="1046.3" y="867.0" width="15.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1049.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.28%)</title><rect x="1046.3" y="851.0" width="15.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 1.28%)</title><rect x="1046.3" y="835.0" width="15.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 1.28%)</title><rect x="1046.3" y="819.0" width="15.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.194] (1 samples, 0.64%)</title><rect x="1053.8" y="803.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.64%)</title><rect x="1061.4" y="867.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.28%)</title><rect x="1069.0" y="883.0" width="15.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.0" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.28%)</title><rect x="1069.0" y="867.0" width="15.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.0" y="878.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1069.0" y="851.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.0" y="862.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1069.0" y="835.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.0" y="846.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1076.5" y="851.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.28%)</title><rect x="1084.1" y="899.0" width="15.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.1" y="910.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.64%)</title><rect x="1084.1" y="883.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.1" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.64%)</title><rect x="1091.7" y="883.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.7" y="894.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1091.7" y="867.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.64%)</title><rect x="1091.7" y="851.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.64%)</title><rect x="1091.7" y="835.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 5.13%)</title><rect x="1099.2" y="915.0" width="60.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="926.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 5.13%)</title><rect x="1099.2" y="899.0" width="60.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="910.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 5.13%)</title><rect x="1099.2" y="883.0" width="60.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.2" y="894.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 5.13%)</title><rect x="1099.2" y="867.0" width="60.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="878.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 5.13%)</title><rect x="1099.2" y="851.0" width="60.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.2" y="862.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 5.13%)</title><rect x="1099.2" y="835.0" width="60.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.2" y="846.0">Parse:..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.28%)</title><rect x="1099.2" y="819.0" width="15.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.64%)</title><rect x="1099.2" y="803.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.2" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.64%)</title><rect x="1099.2" y="787.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.2" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.64%)</title><rect x="1099.2" y="771.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.64%)</title><rect x="1099.2" y="755.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.2" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.64%)</title><rect x="1099.2" y="739.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.2" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1099.2" y="723.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1099.2" y="707.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.64%)</title><rect x="1099.2" y="691.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.64%)</title><rect x="1099.2" y="675.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.2" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.64%)</title><rect x="1099.2" y="659.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.2" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.64%)</title><rect x="1099.2" y="643.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.2" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.64%)</title><rect x="1099.2" y="627.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.2" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.64%)</title><rect x="1106.8" y="803.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.8" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.64%)</title><rect x="1106.8" y="787.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.64%)</title><rect x="1106.8" y="771.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.64%)</title><rect x="1106.8" y="755.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1106.8" y="739.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1106.8" y="723.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.64%)</title><rect x="1106.8" y="707.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.56%)</title><rect x="1114.4" y="819.0" width="30.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.4" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.56%)</title><rect x="1114.4" y="803.0" width="30.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.4" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.56%)</title><rect x="1114.4" y="787.0" width="30.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.4" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.56%)</title><rect x="1114.4" y="771.0" width="30.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.4" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.56%)</title><rect x="1114.4" y="755.0" width="30.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.4" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.56%)</title><rect x="1114.4" y="739.0" width="30.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.4" y="750.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.56%)</title><rect x="1114.4" y="723.0" width="30.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.4" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.56%)</title><rect x="1114.4" y="707.0" width="30.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.4" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.56%)</title><rect x="1114.4" y="691.0" width="30.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.4" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.56%)</title><rect x="1114.4" y="675.0" width="30.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.4" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.56%)</title><rect x="1114.4" y="659.0" width="30.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.4" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.92%)</title><rect x="1114.4" y="643.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.4" y="654.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.92%)</title><rect x="1114.4" y="627.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.4" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.92%)</title><rect x="1114.4" y="611.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.4" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.92%)</title><rect x="1114.4" y="595.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.4" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.92%)</title><rect x="1114.4" y="579.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.4" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.92%)</title><rect x="1114.4" y="563.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.4" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.92%)</title><rect x="1114.4" y="547.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.4" y="558.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.64%)</title><rect x="1114.4" y="531.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.4" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.64%)</title><rect x="1114.4" y="515.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.4" y="526.0"></text>
</g>
<g>
<title>InlineTree::print_inlining(ciMethod*, int, bool) const (1 samples, 0.64%)</title><rect x="1114.4" y="499.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.28%)</title><rect x="1121.9" y="531.0" width="15.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.28%)</title><rect x="1121.9" y="515.0" width="15.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.28%)</title><rect x="1121.9" y="499.0" width="15.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.28%)</title><rect x="1121.9" y="483.0" width="15.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.28%)</title><rect x="1121.9" y="467.0" width="15.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1121.9" y="451.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1121.9" y="435.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1121.9" y="419.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1121.9" y="403.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1121.9" y="387.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1121.9" y="371.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.64%)</title><rect x="1121.9" y="355.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.64%)</title><rect x="1121.9" y="339.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.64%)</title><rect x="1121.9" y="323.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.9" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.64%)</title><rect x="1121.9" y="307.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.9" y="318.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1121.9" y="291.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.9" y="302.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.64%)</title><rect x="1121.9" y="275.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.9" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="259.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.9" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="243.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.9" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="227.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.9" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="211.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.9" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="195.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.9" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="179.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="163.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.9" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="147.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.9" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="131.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.9" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="115.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.9" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="99.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.9" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="83.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.9" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="67.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.9" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.64%)</title><rect x="1121.9" y="51.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.9" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.64%)</title><rect x="1121.9" y="35.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.9" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.64%)</title><rect x="1129.5" y="451.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.5" y="462.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.64%)</title><rect x="1129.5" y="435.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.64%)</title><rect x="1137.1" y="643.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="654.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.64%)</title><rect x="1137.1" y="627.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.64%)</title><rect x="1137.1" y="611.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.1" y="622.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1137.1" y="595.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.1" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.28%)</title><rect x="1144.6" y="819.0" width="15.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.28%)</title><rect x="1144.6" y="803.0" width="15.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.28%)</title><rect x="1144.6" y="787.0" width="15.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.28%)</title><rect x="1144.6" y="771.0" width="15.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.28%)</title><rect x="1144.6" y="755.0" width="15.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.28%)</title><rect x="1144.6" y="739.0" width="15.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.28%)</title><rect x="1144.6" y="723.0" width="15.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.28%)</title><rect x="1144.6" y="707.0" width="15.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.28%)</title><rect x="1144.6" y="691.0" width="15.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.6" y="702.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.64%)</title><rect x="1144.6" y="675.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1152.2" y="675.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1152.2" y="659.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1152.2" y="643.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1152.2" y="627.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.64%)</title><rect x="1152.2" y="611.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.64%)</title><rect x="1152.2" y="595.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.2" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.64%)</title><rect x="1152.2" y="579.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.64%)</title><rect x="1152.2" y="563.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.2" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.64%)</title><rect x="1152.2" y="547.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.2" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1152.2" y="531.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1152.2" y="515.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.64%)</title><rect x="1152.2" y="499.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.2" y="510.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.92%)</title><rect x="1159.7" y="947.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.7" y="958.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.92%)</title><rect x="1159.7" y="931.0" width="22.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="942.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.92%)</title><rect x="1159.7" y="915.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.7" y="926.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.28%)</title><rect x="1159.7" y="899.0" width="15.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.7" y="910.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.64%)</title><rect x="1159.7" y="883.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.7" y="894.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.64%)</title><rect x="1159.7" y="867.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.7" y="878.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.64%)</title><rect x="1159.7" y="851.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.7" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.64%)</title><rect x="1159.7" y="835.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.7" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.64%)</title><rect x="1159.7" y="819.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.7" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.64%)</title><rect x="1159.7" y="803.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.7" y="814.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.64%)</title><rect x="1159.7" y="787.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.7" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.64%)</title><rect x="1159.7" y="771.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.7" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.64%)</title><rect x="1167.3" y="883.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.3" y="894.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.64%)</title><rect x="1167.3" y="867.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.3" y="878.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.64%)</title><rect x="1167.3" y="851.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.3" y="862.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.64%)</title><rect x="1174.9" y="899.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.64%)</title><rect x="1174.9" y="883.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="894.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.64%)</title><rect x="1174.9" y="867.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.64%)</title><rect x="1174.9" y="851.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="862.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.64%)</title><rect x="1174.9" y="835.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="846.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.64%)</title><rect x="1174.9" y="819.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.64%)</title><rect x="1182.4" y="995.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="1006.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.64%)</title><rect x="1182.4" y="979.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="990.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.64%)</title><rect x="1182.4" y="963.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.4" y="974.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.64%)</title><rect x="1182.4" y="947.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.4" y="958.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.64%)</title><rect x="1182.4" y="931.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.4" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.64%)</title><rect x="1182.4" y="915.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.64%)</title><rect x="1182.4" y="899.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.64%)</title><rect x="1182.4" y="883.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="894.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.64%)</title><rect x="1182.4" y="867.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.4" y="878.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) [clone .constprop.178] (1 samples, 0.64%)</title><rect x="1182.4" y="851.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="862.0"></text>
</g>
<g>
<title>ReferenceProcessor::pp2_work(DiscoveredList&amp;, BoolObjectClosure*, OopClosure*) (1 samples, 0.64%)</title><rect x="1182.4" y="835.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.4" y="846.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.64%)</title><rect x="1182.4" y="819.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.4" y="830.0"></text>
</g>
</g>
</svg>
