<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (249 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 8.84%)</title><rect x="10.0" y="1139.0" width="104.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.80%)</title><rect x="10.0" y="1123.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.80%)</title><rect x="10.0" y="1107.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.80%)</title><rect x="10.0" y="1091.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.80%)</title><rect x="10.0" y="1075.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.80%)</title><rect x="10.0" y="1059.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.40%)</title><rect x="10.0" y="1043.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.40%)</title><rect x="10.0" y="1027.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.40%)</title><rect x="10.0" y="1011.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="14.7" y="1043.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="14.7" y="1027.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="14.7" y="1011.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="14.7" y="995.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.40%)</title><rect x="14.7" y="979.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.40%)</title><rect x="14.7" y="963.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.40%)</title><rect x="14.7" y="947.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.40%)</title><rect x="14.7" y="931.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.40%)</title><rect x="14.7" y="915.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.40%)</title><rect x="14.7" y="899.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.40%)</title><rect x="14.7" y="883.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.40%)</title><rect x="14.7" y="867.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.40%)</title><rect x="14.7" y="851.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.40%)</title><rect x="14.7" y="835.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.40%)</title><rect x="14.7" y="819.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.40%)</title><rect x="14.7" y="803.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.40%)</title><rect x="14.7" y="787.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.40%)</title><rect x="14.7" y="771.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.40%)</title><rect x="14.7" y="755.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.7" y="766.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.40%)</title><rect x="14.7" y="739.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.7" y="750.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.40%)</title><rect x="14.7" y="723.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="734.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.40%)</title><rect x="14.7" y="707.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.7" y="718.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (1 samples, 0.40%)</title><rect x="14.7" y="691.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 8.03%)</title><rect x="19.5" y="1123.0" width="94.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.5" y="1134.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.80%)</title><rect x="19.5" y="1107.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.40%)</title><rect x="24.2" y="1091.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="24.2" y="1075.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="24.2" y="1059.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="24.2" y="1043.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="24.2" y="1027.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="24.2" y="1011.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.40%)</title><rect x="24.2" y="995.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.40%)</title><rect x="24.2" y="979.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.40%)</title><rect x="24.2" y="963.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.40%)</title><rect x="24.2" y="947.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.80%)</title><rect x="29.0" y="1107.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.0" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.40%)</title><rect x="29.0" y="1091.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.0" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.40%)</title><rect x="33.7" y="1091.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$282/1545899787.accept (1 samples, 0.40%)</title><rect x="33.7" y="1075.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.01%)</title><rect x="38.4" y="1107.0" width="23.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.4" y="1118.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1869390073.accept (5 samples, 2.01%)</title><rect x="38.4" y="1091.0" width="23.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.4" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (5 samples, 2.01%)</title><rect x="38.4" y="1075.0" width="23.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.4" y="1086.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.61%)</title><rect x="38.4" y="1059.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.61%)</title><rect x="38.4" y="1043.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.61%)</title><rect x="38.4" y="1027.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.61%)</title><rect x="38.4" y="1011.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.61%)</title><rect x="38.4" y="995.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.40%)</title><rect x="52.7" y="979.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.40%)</title><rect x="52.7" y="963.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.40%)</title><rect x="52.7" y="947.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="52.7" y="931.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="52.7" y="915.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.40%)</title><rect x="57.4" y="1059.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.40%)</title><rect x="57.4" y="1043.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.40%)</title><rect x="57.4" y="1027.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.40%)</title><rect x="57.4" y="1011.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.40%)</title><rect x="62.1" y="1107.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.40%)</title><rect x="62.1" y="1091.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1869390073.get$Lambda (1 samples, 0.40%)</title><rect x="62.1" y="1075.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.02%)</title><rect x="66.9" y="1107.0" width="47.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.9" y="1118.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.02%)</title><rect x="66.9" y="1091.0" width="47.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.9" y="1102.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.21%)</title><rect x="66.9" y="1075.0" width="37.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.9" y="1086.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.20%)</title><rect x="66.9" y="1059.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.20%)</title><rect x="66.9" y="1043.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.40%)</title><rect x="66.9" y="1027.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.40%)</title><rect x="66.9" y="1011.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="69.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.40%)</title><rect x="66.9" y="995.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="71.6" y="1027.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="71.6" y="1011.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.40%)</title><rect x="71.6" y="995.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.6" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.40%)</title><rect x="71.6" y="979.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.40%)</title><rect x="71.6" y="963.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.6" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.40%)</title><rect x="71.6" y="947.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.6" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.40%)</title><rect x="71.6" y="931.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="71.6" y="915.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="71.6" y="899.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$244/1530231191.shouldBlock (1 samples, 0.40%)</title><rect x="76.3" y="1027.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.40%)</title><rect x="76.3" y="1011.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.40%)</title><rect x="76.3" y="995.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.40%)</title><rect x="76.3" y="979.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.40%)</title><rect x="76.3" y="963.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.61%)</title><rect x="81.1" y="1059.0" width="18.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.61%)</title><rect x="81.1" y="1043.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.20%)</title><rect x="81.1" y="1027.0" width="14.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.20%)</title><rect x="81.1" y="1011.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.80%)</title><rect x="81.1" y="995.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.40%)</title><rect x="90.6" y="995.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.40%)</title><rect x="95.3" y="1027.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.40%)</title><rect x="95.3" y="1011.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="95.3" y="995.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="95.3" y="979.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="100.0" y="1059.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="100.0" y="1043.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.40%)</title><rect x="100.0" y="1027.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.40%)</title><rect x="100.0" y="1011.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.40%)</title><rect x="100.0" y="995.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.40%)</title><rect x="100.0" y="979.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (1 samples, 0.40%)</title><rect x="100.0" y="963.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.40%)</title><rect x="100.0" y="947.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.40%)</title><rect x="100.0" y="931.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.40%)</title><rect x="100.0" y="915.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="103.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.40%)</title><rect x="104.8" y="1075.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.40%)</title><rect x="104.8" y="1059.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.40%)</title><rect x="104.8" y="1043.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.40%)</title><rect x="104.8" y="1027.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.40%)</title><rect x="104.8" y="1011.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="104.8" y="995.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="107.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="104.8" y="979.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="104.8" y="963.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="104.8" y="947.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="104.8" y="931.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.40%)</title><rect x="104.8" y="915.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.8" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="104.8" y="899.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="107.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.40%)</title><rect x="109.5" y="1075.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="109.5" y="1059.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="109.5" y="1043.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="109.5" y="1027.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.40%)</title><rect x="109.5" y="1011.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.40%)</title><rect x="109.5" y="995.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.40%)</title><rect x="109.5" y="979.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.40%)</title><rect x="109.5" y="963.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.5" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.40%)</title><rect x="109.5" y="947.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.5" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.40%)</title><rect x="109.5" y="931.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.5" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureWriteOpen (1 samples, 0.40%)</title><rect x="109.5" y="915.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (157 samples, 63.05%)</title><rect x="114.3" y="1139.0" width="744.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.3" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (157 samples, 63.05%)</title><rect x="114.3" y="1123.0" width="744.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.3" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (157 samples, 63.05%)</title><rect x="114.3" y="1107.0" width="744.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.3" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/947860377.run (151 samples, 60.64%)</title><rect x="114.3" y="1091.0" width="715.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.3" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/947860377.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (151 samples, 60.64%)</title><rect x="114.3" y="1075.0" width="715.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.3" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (151 samples, 60.64%)</title><rect x="114.3" y="1059.0" width="715.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.3" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (148 samples, 59.44%)</title><rect x="114.3" y="1043.0" width="701.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.3" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (31 samples, 12.45%)</title><rect x="123.7" y="1027.0" width="146.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.7" y="1038.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (31 samples, 12.45%)</title><rect x="123.7" y="1011.0" width="146.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.7" y="1022.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (31 samples, 12.45%)</title><rect x="123.7" y="995.0" width="146.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.7" y="1006.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 11.24%)</title><rect x="138.0" y="979.0" width="132.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.0" y="990.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 11.24%)</title><rect x="138.0" y="963.0" width="132.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.0" y="974.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (28 samples, 11.24%)</title><rect x="138.0" y="947.0" width="132.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.0" y="958.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.41%)</title><rect x="138.0" y="931.0" width="28.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.0" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.41%)</title><rect x="138.0" y="915.0" width="28.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.0" y="926.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="138.0" y="899.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="141.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 2.01%)</title><rect x="142.7" y="899.0" width="23.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.7" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 1.61%)</title><rect x="142.7" y="883.0" width="18.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 1.61%)</title><rect x="142.7" y="867.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.40%)</title><rect x="161.6" y="883.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.40%)</title><rect x="161.6" y="867.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.40%)</title><rect x="161.6" y="851.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="161.6" y="835.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="161.6" y="819.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (20 samples, 8.03%)</title><rect x="166.4" y="931.0" width="94.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.4" y="942.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 1.61%)</title><rect x="166.4" y="915.0" width="18.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.61%)</title><rect x="166.4" y="899.0" width="18.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.80%)</title><rect x="175.9" y="883.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.61%)</title><rect x="185.3" y="915.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.20%)</title><rect x="190.1" y="899.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.80%)</title><rect x="194.8" y="883.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.80%)</title><rect x="194.8" y="867.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.8" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="199.6" y="851.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="202.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.80%)</title><rect x="204.3" y="915.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.80%)</title><rect x="204.3" y="899.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="209.0" y="883.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="209.0" y="867.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="209.0" y="851.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="209.0" y="835.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="212.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.40%)</title><rect x="209.0" y="819.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="212.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.40%)</title><rect x="209.0" y="803.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="212.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 4.02%)</title><rect x="213.8" y="915.0" width="47.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.8" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="213.8" y="899.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.40%)</title><rect x="213.8" y="883.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.61%)</title><rect x="218.5" y="899.0" width="42.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.5" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.61%)</title><rect x="218.5" y="883.0" width="42.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.5" y="894.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.61%)</title><rect x="218.5" y="867.0" width="42.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.5" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.20%)</title><rect x="218.5" y="851.0" width="14.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="218.5" y="835.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="218.5" y="819.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="218.5" y="803.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.40%)</title><rect x="218.5" y="787.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.40%)</title><rect x="223.3" y="835.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.40%)</title><rect x="228.0" y="835.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.40%)</title><rect x="228.0" y="819.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.40%)</title><rect x="228.0" y="803.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 1.20%)</title><rect x="232.7" y="851.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 1.20%)</title><rect x="232.7" y="835.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 1.20%)</title><rect x="232.7" y="819.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 1.20%)</title><rect x="232.7" y="803.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.7" y="814.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 1.20%)</title><rect x="232.7" y="787.0" width="14.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.7" y="798.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.20%)</title><rect x="232.7" y="771.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.7" y="782.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.40%)</title><rect x="242.2" y="755.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.40%)</title><rect x="246.9" y="851.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="246.9" y="835.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="246.9" y="819.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.80%)</title><rect x="251.7" y="851.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.80%)</title><rect x="261.2" y="931.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.80%)</title><rect x="261.2" y="915.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.80%)</title><rect x="261.2" y="899.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.80%)</title><rect x="261.2" y="883.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.80%)</title><rect x="261.2" y="867.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (105 samples, 42.17%)</title><rect x="270.6" y="1027.0" width="497.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.6" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (20 samples, 8.03%)</title><rect x="270.6" y="1011.0" width="94.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.6" y="1022.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.40%)</title><rect x="275.4" y="995.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.4" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (18 samples, 7.23%)</title><rect x="280.1" y="995.0" width="85.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.1" y="1006.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 5.22%)</title><rect x="303.8" y="979.0" width="61.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.8" y="990.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.40%)</title><rect x="303.8" y="963.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="303.8" y="947.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="303.8" y="931.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="303.8" y="915.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 4.82%)</title><rect x="308.6" y="963.0" width="56.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.6" y="974.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 2.01%)</title><rect x="341.7" y="947.0" width="23.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.7" y="958.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 2.01%)</title><rect x="341.7" y="931.0" width="23.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.7" y="942.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="365.4" y="1011.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="368.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="365.4" y="995.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.40%)</title><rect x="365.4" y="979.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (20 samples, 8.03%)</title><rect x="370.2" y="1011.0" width="94.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.2" y="1022.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (20 samples, 8.03%)</title><rect x="370.2" y="995.0" width="94.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="373.2" y="1006.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.81%)</title><rect x="370.2" y="979.0" width="33.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="373.2" y="990.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.81%)</title><rect x="370.2" y="963.0" width="33.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.2" y="974.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.41%)</title><rect x="370.2" y="947.0" width="28.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="373.2" y="958.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 2.41%)</title><rect x="370.2" y="931.0" width="28.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.2" y="942.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 2.41%)</title><rect x="370.2" y="915.0" width="28.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.2" y="926.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 2.41%)</title><rect x="370.2" y="899.0" width="28.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.2" y="910.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.61%)</title><rect x="370.2" y="883.0" width="18.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="373.2" y="894.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.40%)</title><rect x="370.2" y="867.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="373.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.40%)</title><rect x="374.9" y="867.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.9" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.40%)</title><rect x="374.9" y="851.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="377.9" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.40%)</title><rect x="374.9" y="835.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.9" y="846.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.40%)</title><rect x="374.9" y="819.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.9" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.80%)</title><rect x="379.6" y="867.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="382.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="379.6" y="851.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="382.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.40%)</title><rect x="379.6" y="835.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="382.6" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.40%)</title><rect x="384.4" y="851.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="387.4" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.80%)</title><rect x="389.1" y="883.0" width="9.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="392.1" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="398.6" y="947.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="401.6" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 5.22%)</title><rect x="403.3" y="979.0" width="61.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="990.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 5.22%)</title><rect x="403.3" y="963.0" width="61.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="974.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.40%)</title><rect x="403.3" y="947.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="403.3" y="931.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="403.3" y="915.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="403.3" y="899.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.40%)</title><rect x="403.3" y="883.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="406.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="403.3" y="867.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="406.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.82%)</title><rect x="408.1" y="947.0" width="56.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.1" y="958.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 4.82%)</title><rect x="408.1" y="931.0" width="56.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.1" y="942.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 3.61%)</title><rect x="422.3" y="915.0" width="42.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.3" y="926.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.80%)</title><rect x="441.2" y="899.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.80%)</title><rect x="450.7" y="899.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="455.5" y="883.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="458.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="455.5" y="867.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="458.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="455.5" y="851.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="458.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="455.5" y="835.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="458.5" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.40%)</title><rect x="455.5" y="819.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="458.5" y="830.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.40%)</title><rect x="455.5" y="803.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.5" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.40%)</title><rect x="460.2" y="899.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="463.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (57 samples, 22.89%)</title><rect x="464.9" y="1011.0" width="270.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="467.9" y="1022.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (57 samples, 22.89%)</title><rect x="464.9" y="995.0" width="270.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.9" y="1006.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/738194263.process (53 samples, 21.29%)</title><rect x="474.4" y="979.0" width="251.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.4" y="990.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (53 samples, 21.29%)</title><rect x="474.4" y="963.0" width="251.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="477.4" y="974.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (53 samples, 21.29%)</title><rect x="474.4" y="947.0" width="251.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.4" y="958.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="479.2" y="931.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.2" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="479.2" y="915.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.2" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.40%)</title><rect x="479.2" y="899.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="482.2" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.40%)</title><rect x="479.2" y="883.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.40%)</title><rect x="479.2" y="867.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.40%)</title><rect x="479.2" y="851.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (51 samples, 20.48%)</title><rect x="483.9" y="931.0" width="241.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.9" y="942.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>java/lang/Thread.sleep (51 samples, 20.48%)</title><rect x="483.9" y="915.0" width="241.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.9" y="926.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.40%)</title><rect x="498.1" y="899.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.1" y="910.0"></text>
</g>
<g>
<title>JVM_Sleep (47 samples, 18.88%)</title><rect x="502.9" y="899.0" width="222.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="505.9" y="910.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.40%)</title><rect x="536.0" y="883.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="539.0" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="540.8" y="883.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="543.8" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.61%)</title><rect x="545.5" y="883.0" width="19.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="548.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 1.61%)</title><rect x="545.5" y="867.0" width="19.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="548.5" y="878.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 13.65%)</title><rect x="564.5" y="883.0" width="161.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="567.5" y="894.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.80%)</title><rect x="630.8" y="867.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="633.8" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.80%)</title><rect x="630.8" y="851.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="633.8" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.80%)</title><rect x="640.3" y="867.0" width="9.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="643.3" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 3.21%)</title><rect x="649.8" y="867.0" width="37.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="652.8" y="878.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.40%)</title><rect x="687.7" y="867.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="690.7" y="878.0"></text>
</g>
<g>
<title>_init (1 samples, 0.40%)</title><rect x="692.4" y="867.0" width="4.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="695.4" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.20%)</title><rect x="697.1" y="867.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="700.1" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="711.4" y="867.0" width="4.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="714.4" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.80%)</title><rect x="716.1" y="867.0" width="9.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="719.1" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (1 samples, 0.40%)</title><rect x="725.6" y="979.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.6" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (1 samples, 0.40%)</title><rect x="725.6" y="963.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1644475143.get$Lambda (1 samples, 0.40%)</title><rect x="725.6" y="947.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="728.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$263/1644475143.&lt;init&gt; (1 samples, 0.40%)</title><rect x="725.6" y="931.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="728.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.40%)</title><rect x="730.3" y="979.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="733.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.40%)</title><rect x="735.1" y="1011.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="738.1" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="735.1" y="995.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="738.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="735.1" y="979.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="735.1" y="963.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="738.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.40%)</title><rect x="739.8" y="1011.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="742.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.01%)</title><rect x="744.5" y="1011.0" width="23.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.5" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.80%)</title><rect x="754.0" y="995.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.40%)</title><rect x="758.8" y="979.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="761.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1951437764.accept (1 samples, 0.40%)</title><rect x="758.8" y="963.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="761.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (1 samples, 0.40%)</title><rect x="758.8" y="947.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.8" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.40%)</title><rect x="758.8" y="931.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="761.8" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.40%)</title><rect x="758.8" y="915.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.8" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="758.8" y="899.0" width="4.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="761.8" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.40%)</title><rect x="763.5" y="995.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="766.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 4.02%)</title><rect x="768.2" y="1027.0" width="47.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="771.2" y="1038.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 3.21%)</title><rect x="777.7" y="1011.0" width="37.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="780.7" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 3.21%)</title><rect x="777.7" y="995.0" width="37.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.7" y="1006.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$268/1886325142.accept (8 samples, 3.21%)</title><rect x="777.7" y="979.0" width="37.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.7" y="990.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (8 samples, 3.21%)</title><rect x="777.7" y="963.0" width="37.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.7" y="974.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1322154844.complete (8 samples, 3.21%)</title><rect x="777.7" y="947.0" width="37.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.7" y="958.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (8 samples, 3.21%)</title><rect x="777.7" y="931.0" width="37.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.7" y="942.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 3.21%)</title><rect x="777.7" y="915.0" width="37.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.7" y="926.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 3.21%)</title><rect x="777.7" y="899.0" width="37.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="780.7" y="910.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 3.21%)</title><rect x="777.7" y="883.0" width="37.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.7" y="894.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 3.21%)</title><rect x="777.7" y="867.0" width="37.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.7" y="878.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (8 samples, 3.21%)</title><rect x="777.7" y="851.0" width="37.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.7" y="862.0">ch/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 1.20%)</title><rect x="815.6" y="1043.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="818.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.40%)</title><rect x="829.8" y="1091.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="832.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="829.8" y="1075.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="829.8" y="1059.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.01%)</title><rect x="834.6" y="1091.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="837.6" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.61%)</title><rect x="839.3" y="1075.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.61%)</title><rect x="839.3" y="1059.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="842.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.61%)</title><rect x="839.3" y="1043.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="842.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.61%)</title><rect x="839.3" y="1027.0" width="19.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="842.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.61%)</title><rect x="839.3" y="1011.0" width="19.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="842.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.40%)</title><rect x="858.3" y="1139.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.40%)</title><rect x="858.3" y="1123.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="861.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="858.3" y="1107.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="861.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="858.3" y="1091.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="858.3" y="1075.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="861.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="858.3" y="1059.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="861.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.40%)</title><rect x="858.3" y="1043.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="861.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.40%)</title><rect x="858.3" y="1027.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.40%)</title><rect x="858.3" y="1011.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.40%)</title><rect x="858.3" y="995.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="861.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.40%)</title><rect x="858.3" y="979.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="861.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.40%)</title><rect x="858.3" y="963.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="861.3" y="974.0"></text>
</g>
<g>
<title>start_thread (69 samples, 27.71%)</title><rect x="863.0" y="1139.0" width="327.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="866.0" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (69 samples, 27.71%)</title><rect x="863.0" y="1123.0" width="327.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="866.0" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.81%)</title><rect x="863.0" y="1107.0" width="33.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="866.0" y="1118.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.40%)</title><rect x="863.0" y="1091.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="866.0" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.40%)</title><rect x="863.0" y="1075.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="866.0" y="1086.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="863.0" y="1059.0" width="4.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="866.0" y="1070.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.41%)</title><rect x="867.8" y="1091.0" width="28.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="870.8" y="1102.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.01%)</title><rect x="867.8" y="1075.0" width="23.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.8" y="1086.0">G..</text>
</g>
<g>
<title>SpinPause (5 samples, 2.01%)</title><rect x="867.8" y="1059.0" width="23.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="870.8" y="1070.0">S..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.40%)</title><rect x="891.4" y="1075.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.4" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.40%)</title><rect x="891.4" y="1059.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="894.4" y="1070.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.40%)</title><rect x="891.4" y="1043.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.4" y="1054.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.40%)</title><rect x="891.4" y="1027.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="894.4" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.40%)</title><rect x="891.4" y="1011.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.4" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.40%)</title><rect x="891.4" y="995.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.4" y="1006.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.40%)</title><rect x="891.4" y="979.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.4" y="990.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.40%)</title><rect x="891.4" y="963.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="894.4" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (60 samples, 24.10%)</title><rect x="896.2" y="1107.0" width="284.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="899.2" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 24.10%)</title><rect x="896.2" y="1091.0" width="284.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.2" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 24.10%)</title><rect x="896.2" y="1075.0" width="284.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="899.2" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 24.10%)</title><rect x="896.2" y="1059.0" width="284.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.2" y="1070.0">CompileBroker::invoke_compiler_on_meth..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (57 samples, 22.89%)</title><rect x="896.2" y="1043.0" width="270.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="899.2" y="1054.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (57 samples, 22.89%)</title><rect x="896.2" y="1027.0" width="270.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.2" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 8.43%)</title><rect x="896.2" y="1011.0" width="99.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="899.2" y="1022.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.80%)</title><rect x="896.2" y="995.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.2" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.80%)</title><rect x="896.2" y="979.0" width="9.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="899.2" y="990.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.40%)</title><rect x="896.2" y="963.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="899.2" y="974.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.40%)</title><rect x="896.2" y="947.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="899.2" y="958.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.40%)</title><rect x="896.2" y="931.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="899.2" y="942.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.40%)</title><rect x="896.2" y="915.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.2" y="926.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.40%)</title><rect x="900.9" y="963.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.9" y="974.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.40%)</title><rect x="900.9" y="947.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.9" y="958.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.40%)</title><rect x="900.9" y="931.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.9" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.20%)</title><rect x="905.7" y="995.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="908.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.80%)</title><rect x="905.7" y="979.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="908.7" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.40%)</title><rect x="905.7" y="963.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="908.7" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.40%)</title><rect x="910.4" y="963.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="913.4" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="910.4" y="947.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.4" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="910.4" y="931.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.4" y="942.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.40%)</title><rect x="910.4" y="915.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="913.4" y="926.0"></text>
</g>
<g>
<title>State::_sub_Op_CmpI(Node const*) (1 samples, 0.40%)</title><rect x="910.4" y="899.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="913.4" y="910.0"></text>
</g>
<g>
<title>MemBarNode::match(ProjNode const*, Matcher const*) (1 samples, 0.40%)</title><rect x="915.1" y="979.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.1" y="990.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.40%)</title><rect x="919.9" y="995.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.9" y="1006.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.40%)</title><rect x="919.9" y="979.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 6.02%)</title><rect x="924.6" y="995.0" width="71.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.6" y="1006.0">PhaseCha..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.40%)</title><rect x="929.4" y="979.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.61%)</title><rect x="934.1" y="979.0" width="19.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="937.1" y="990.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.40%)</title><rect x="943.6" y="963.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.6" y="974.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.40%)</title><rect x="943.6" y="947.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.40%)</title><rect x="948.3" y="963.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.3" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="948.3" y="947.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.40%)</title><rect x="953.1" y="979.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.40%)</title><rect x="953.1" y="963.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.40%)</title><rect x="957.8" y="979.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.8" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="957.8" y="963.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.8" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.40%)</title><rect x="962.5" y="979.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.5" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.40%)</title><rect x="962.5" y="963.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.5" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.40%)</title><rect x="962.5" y="947.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.5" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.40%)</title><rect x="967.3" y="979.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="970.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.40%)</title><rect x="972.0" y="979.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="972.0" y="963.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.0" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.80%)</title><rect x="976.7" y="979.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.7" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="981.5" y="963.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.5" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.40%)</title><rect x="986.2" y="979.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.2" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="991.0" y="979.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="994.0" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 11.65%)</title><rect x="995.7" y="1011.0" width="137.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.7" y="1022.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.40%)</title><rect x="995.7" y="995.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="995.7" y="979.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.7" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="995.7" y="963.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.7" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="995.7" y="947.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.7" y="958.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.40%)</title><rect x="995.7" y="931.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.7" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="995.7" y="915.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.7" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="995.7" y="899.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.7" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.40%)</title><rect x="1000.4" y="995.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.40%)</title><rect x="1000.4" y="979.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.4" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.40%)</title><rect x="1000.4" y="963.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (21 samples, 8.43%)</title><rect x="1005.2" y="995.0" width="99.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.2" y="1006.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1005.2" y="979.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 7.23%)</title><rect x="1009.9" y="979.0" width="85.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.9" y="990.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 6.02%)</title><rect x="1019.4" y="963.0" width="71.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.4" y="974.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.40%)</title><rect x="1024.1" y="947.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 5.22%)</title><rect x="1028.9" y="947.0" width="61.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.9" y="958.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.80%)</title><rect x="1071.5" y="931.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.40%)</title><rect x="1076.3" y="915.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.40%)</title><rect x="1076.3" y="899.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.80%)</title><rect x="1081.0" y="931.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.0" y="942.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="1090.5" y="963.0" width="4.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1093.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.40%)</title><rect x="1095.2" y="979.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.40%)</title><rect x="1095.2" y="963.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1100.0" y="979.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.01%)</title><rect x="1104.7" y="995.0" width="23.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.7" y="1006.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.01%)</title><rect x="1104.7" y="979.0" width="23.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.7" y="990.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1104.7" y="963.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.7" y="974.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1104.7" y="947.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1104.7" y="931.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.7" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1104.7" y="915.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.7" y="926.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1109.4" y="963.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.4" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.40%)</title><rect x="1109.4" y="947.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.4" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.40%)</title><rect x="1109.4" y="931.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.4" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="1109.4" y="915.0" width="4.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1112.4" y="926.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1114.2" y="963.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.2" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1118.9" y="963.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.9" y="974.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.40%)</title><rect x="1118.9" y="947.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.9" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1123.7" y="963.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1123.7" y="947.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.7" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1123.7" y="931.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.7" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.40%)</title><rect x="1128.4" y="995.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.4" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.40%)</title><rect x="1128.4" y="979.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.41%)</title><rect x="1133.1" y="1011.0" width="28.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.41%)</title><rect x="1133.1" y="995.0" width="28.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.1" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.41%)</title><rect x="1133.1" y="979.0" width="28.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.1" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.41%)</title><rect x="1133.1" y="963.0" width="28.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.41%)</title><rect x="1133.1" y="947.0" width="28.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.1" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.41%)</title><rect x="1133.1" y="931.0" width="28.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.1" y="942.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.41%)</title><rect x="1133.1" y="915.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.41%)</title><rect x="1133.1" y="899.0" width="28.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.41%)</title><rect x="1133.1" y="883.0" width="28.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.41%)</title><rect x="1133.1" y="867.0" width="28.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.41%)</title><rect x="1133.1" y="851.0" width="28.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.41%)</title><rect x="1133.1" y="835.0" width="28.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="846.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.41%)</title><rect x="1133.1" y="819.0" width="28.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.41%)</title><rect x="1133.1" y="803.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.41%)</title><rect x="1133.1" y="787.0" width="28.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.41%)</title><rect x="1133.1" y="771.0" width="28.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.1" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.41%)</title><rect x="1133.1" y="755.0" width="28.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.01%)</title><rect x="1133.1" y="739.0" width="23.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="750.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.01%)</title><rect x="1133.1" y="723.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="734.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.01%)</title><rect x="1133.1" y="707.0" width="23.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.1" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.01%)</title><rect x="1133.1" y="691.0" width="23.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.1" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.01%)</title><rect x="1133.1" y="675.0" width="23.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.1" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.01%)</title><rect x="1133.1" y="659.0" width="23.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.01%)</title><rect x="1133.1" y="643.0" width="23.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="654.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.01%)</title><rect x="1133.1" y="627.0" width="23.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.01%)</title><rect x="1133.1" y="611.0" width="23.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.1" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.61%)</title><rect x="1133.1" y="595.0" width="19.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.61%)</title><rect x="1133.1" y="579.0" width="19.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.61%)</title><rect x="1133.1" y="563.0" width="19.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1133.1" y="547.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1133.1" y="531.0" width="14.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1133.1" y="515.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1133.1" y="499.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1133.1" y="483.0" width="14.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1133.1" y="467.0" width="14.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1133.1" y="451.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1133.1" y="435.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1133.1" y="419.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1133.1" y="403.0" width="14.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1133.1" y="387.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1133.1" y="371.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1133.1" y="355.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1133.1" y="339.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1133.1" y="323.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1133.1" y="307.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1133.1" y="291.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1133.1" y="275.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1133.1" y="259.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1133.1" y="243.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1133.1" y="227.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1133.1" y="211.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1133.1" y="195.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1133.1" y="179.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1133.1" y="163.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.1" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1133.1" y="147.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1133.1" y="131.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1133.1" y="115.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1133.1" y="99.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1133.1" y="83.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="94.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.40%)</title><rect x="1133.1" y="67.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.1" y="78.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.40%)</title><rect x="1133.1" y="51.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="62.0"></text>
</g>
<g>
<title>DecodeNKlassNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1133.1" y="35.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.40%)</title><rect x="1137.9" y="115.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.9" y="126.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.40%)</title><rect x="1137.9" y="99.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="355.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="339.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.6" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.40%)</title><rect x="1142.6" y="323.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.6" y="334.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.40%)</title><rect x="1142.6" y="307.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.6" y="318.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.40%)</title><rect x="1142.6" y="291.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="302.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="275.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1147.3" y="547.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1147.3" y="531.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.3" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.40%)</title><rect x="1147.3" y="515.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.3" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1147.3" y="499.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.3" y="510.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1147.3" y="483.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="494.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.40%)</title><rect x="1147.3" y="467.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="451.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.3" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="435.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="419.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="403.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.3" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="387.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.3" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="371.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.3" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="355.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.3" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="339.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="323.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.3" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="307.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.3" y="318.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1147.3" y="291.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="302.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="275.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.40%)</title><rect x="1152.1" y="595.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1152.1" y="579.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="590.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1152.1" y="563.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.40%)</title><rect x="1152.1" y="547.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.1" y="558.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.40%)</title><rect x="1152.1" y="531.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.1" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.40%)</title><rect x="1152.1" y="515.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.40%)</title><rect x="1152.1" y="499.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.1" y="510.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.40%)</title><rect x="1156.8" y="739.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="750.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.40%)</title><rect x="1156.8" y="723.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="734.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.40%)</title><rect x="1156.8" y="707.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="718.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.40%)</title><rect x="1156.8" y="691.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1156.8" y="675.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1156.8" y="659.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.8" y="670.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.40%)</title><rect x="1161.6" y="1011.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="1022.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1161.6" y="995.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.6" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.20%)</title><rect x="1166.3" y="1043.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.3" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.20%)</title><rect x="1166.3" y="1027.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.3" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.20%)</title><rect x="1166.3" y="1011.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.20%)</title><rect x="1166.3" y="995.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.3" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.40%)</title><rect x="1166.3" y="979.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.3" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1166.3" y="963.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.3" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.40%)</title><rect x="1166.3" y="947.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.40%)</title><rect x="1166.3" y="931.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.3" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1166.3" y="915.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.3" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1166.3" y="899.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.3" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::if_null(ValueType*, Instruction::Condition) (1 samples, 0.40%)</title><rect x="1166.3" y="883.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="894.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.40%)</title><rect x="1166.3" y="867.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.3" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.80%)</title><rect x="1171.0" y="979.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="990.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.40%)</title><rect x="1171.0" y="963.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="974.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.40%)</title><rect x="1171.0" y="947.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="958.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (1 samples, 0.40%)</title><rect x="1171.0" y="931.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.0" y="942.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.40%)</title><rect x="1175.8" y="963.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.40%)</title><rect x="1175.8" y="947.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.40%)</title><rect x="1175.8" y="931.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.40%)</title><rect x="1175.8" y="915.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.40%)</title><rect x="1175.8" y="899.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.80%)</title><rect x="1180.5" y="1107.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.80%)</title><rect x="1180.5" y="1091.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.80%)</title><rect x="1180.5" y="1075.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
</g>
</svg>
